// Opaque material structure
struct Material {
    bsdf:        Bsdf,
    emission:    fn (Vec3) -> EmissionValue,
    is_emissive: bool
}

// Opaque description of a point on a surface
struct SurfaceElement {
    is_entering: bool,              // True if the path enters the surface
    point:       Vec3,              // Point on the surface
    face_normal: Vec3,              // Geometric normal at the surface point
    uv_coords:   Vec2,              // UV coordinates on the surface
    attr:        fn (i32) -> Vec4,  // Vertex attributes (interpolated)
    local:       Mat3x3             // Local coordinate system at the surface point
}

// Result of sampling a BSDF
struct BsdfSample {
    in_dir: Vec3,  // Sampled direction
    pdf:    f32,   // BSDF value for the sample
    cos:    f32,   // Cosine between the sampled direction and the surface normal
    color:  Color  // Color of the sample
}

// Opaque BSDF structure
struct Bsdf {
    // Evaluates the reflectance of the material for the given pair of directions
    eval: fn (Vec3, Vec3) -> Color,
    // Evaluates the sampling probability density for a given pair of directions
    pdf: fn (Vec3, Vec3) -> f32,
    // Samples a direction
    sample: fn (&mut RndState, Vec3, bool) -> BsdfSample,
    // Returns true if the material is purely specular
    is_specular: bool
}

fn @fresnel_factor(k: f32, cos_i: f32, cos_t: f32) -> f32 {
    let R_s = (k * cos_i - cos_t) / (k * cos_i + cos_t);
    let R_p = (cos_i - k * cos_t) / (cos_i + k * cos_t);
    (R_s * R_s + R_p * R_p) * 0.5f
}

// Creates a material with no emission
fn @make_material(bsdf: Bsdf) -> Material {
    Material {
        bsdf:        bsdf,
        emission:    @ |in_dir| make_emission_value(black, 1.0f, 1.0f),
        is_emissive: false
    }
}

// Creates a material that emits light
fn @make_emissive_material(surf: SurfaceElement, bsdf: Bsdf, light: Light) -> Material {
    Material {
        bsdf: bsdf,
        emission: @ |in_dir| light.emission(in_dir, surf.uv_coords),
        is_emissive: true
    }
}

// Creates a BSDF sample and checks that it lies on the right side of the surface
fn @make_bsdf_sample(surf: SurfaceElement, in_dir: Vec3, pdf: f32, cos: f32, color: Color, inverted: bool) -> BsdfSample {
    // Checks that the sample is above the surface (or under it if inverted is true)
    let valid = (pdf > 0.0f) && (inverted ^ (vec3_dot(in_dir, surf.face_normal) > 0.0f));
    BsdfSample {
        in_dir: in_dir,
        pdf: if valid { pdf } else { 1.0f },
        cos: cos,
        color: if valid { color } else { black }
    }
}

// Creates a fully absorbing BSDF that behaves like a black body
fn @make_black_bsdf() -> Bsdf {
    Bsdf {
        eval:   @ |_, _| black,
        pdf:    @ |_, _| 0.0f,
        sample: @ |_, out_dir, _| BsdfSample { in_dir: out_dir, pdf: 1.0f, cos: 1.0f, color: black },
        is_specular: false
    }
}

// Creates a purely diffuse BSDF
fn @make_diffuse_bsdf(math: Intrinsics, surf: SurfaceElement, kd: Color) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| {
            color_mulf(kd, 1.0f / flt_pi)
        },
        pdf: @ |in_dir, out_dir| {
            cosine_hemisphere_pdf(positive_cos(in_dir, surf.local.col(2)))
        },
        sample: @ |rnd, out_dir, _| {
            let sample = sample_cosine_hemisphere(math, randf(rnd), randf(rnd));
            let color = color_mulf(kd, 1.0f / flt_pi);
            make_bsdf_sample(surf, mat3x3_mul(surf.local, sample.dir), sample.pdf, sample.dir.z, color, false)
        },
        is_specular: false
    }
}

// Creates a physically-correct Phong BSDF
fn @make_phong_bsdf(math: Intrinsics, surf: SurfaceElement, ks: Color, ns: f32) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| {
            let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
            color_mulf(ks, fastpow/*math.powf*/(cos, ns) * (ns + 2.0f) * (1.0f / (2.0f * flt_pi)))
        },
        pdf: @ |in_dir, out_dir| {
            let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
            cosine_power_hemisphere_pdf(math, cos, ns)
        },
        sample: @ |rnd, out_dir, _| {
            let reflect_out = vec3_reflect(out_dir, surf.local.col(2));
            let sample = sample_cosine_power_hemisphere(math, ns, randf(rnd), randf(rnd));
            let in_dir = mat3x3_mul(make_orthonormal_mat3x3(reflect_out), sample.dir);
            let cos = positive_cos(in_dir, surf.local.col(2));
            let color = color_mulf(ks, sample.pdf * (ns + 2.0f) / (ns + 1.0f));
            make_bsdf_sample(surf, in_dir, sample.pdf, cos, color, false)
        },
        is_specular: false
    }
}

// Creates a perfect mirror BSDF
fn @make_mirror_bsdf(math: Intrinsics, surf: SurfaceElement, ks: Color) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| black,
        pdf:  @ |in_dir, out_dir| 0.0f,
        sample: @ |rnd, out_dir, _| {
            make_bsdf_sample(surf, vec3_reflect(out_dir, surf.local.col(2)), 1.0f, 1.0f, ks, false)
        },
        is_specular: true
    }
}

// Creates a perfect glass BSDF
fn @make_glass_bsdf(math: Intrinsics, surf: SurfaceElement, n1: f32, n2: f32, ks: Color, kt: Color) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| black,
        pdf:  @ |in_dir, out_dir| 0.0f,
        sample: @ |rnd, out_dir, adjoint| {
            let k = if surf.is_entering { n1 / n2 } else { n2 / n1 };
            let n = surf.local.col(2);
            let cos_i = vec3_dot(out_dir, n);
            let cos2_t = 1.0f - k * k * (1.0f - cos_i * cos_i);

            if cos2_t > 0.0f {
                // Refraction
                let cos_t = math.sqrtf(cos2_t);
                let F = fresnel_factor(k, cos_i, cos_t);
                if (randf(rnd) > F) {
                    let t = vec3_sub(vec3_mulf(n, k * cos_i - cos_t), vec3_mulf(out_dir, k));
                    let adjoint_term = if adjoint { k * k } else { 1.0f };
                    return(make_bsdf_sample(surf, t, 1.0f, 1.0f, color_mulf(kt, adjoint_term), true))
                }
            }
            // Reflection
            make_bsdf_sample(surf, vec3_reflect(out_dir, n), 1.0f, 1.0f, ks, false)
        },
        is_specular: true
    }
}

// Creates a BSDF that interpolates between two other BSDFs
fn @make_mix_bsdf(mat1: Bsdf, mat2: Bsdf, k: f32) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir|
            color_lerp(mat1.eval(in_dir, out_dir),
                       mat2.eval(in_dir, out_dir),
                       k),
        pdf: @ |in_dir, out_dir|
            lerp(mat1.pdf(in_dir, out_dir),
                mat2.pdf(in_dir, out_dir),
                k),
        sample: @ |rnd, out_dir, adjoint| {
            let (sample, pdf, color) = if randf(rnd) >= k {
                let s = mat1.sample(rnd, out_dir, adjoint);
                let p = lerp(s.pdf, mat2.pdf(s.in_dir, out_dir), k);
                let c = color_lerp(s.color, mat2.eval(s.in_dir, out_dir), k);
                (s, p, c)
            } else {
                let s = mat2.sample(rnd, out_dir, adjoint);
                let p = lerp(mat1.pdf(s.in_dir, out_dir), s.pdf, k);
                let c = color_lerp(mat1.eval(s.in_dir, out_dir), s.color, k);
                (s, p, c)
            };
            BsdfSample { in_dir: sample.in_dir, pdf: pdf, cos: sample.cos, color: color }
        },
        is_specular: mat1.is_specular & mat2.is_specular
    }
}


// CUSTOM ADDITION : MEASURED MATERIALS BY DUPUY & WENZEL



// https://github.com/pgrit/SeeSharp/blob/master/SeeSharp/Sampling/SampleWarp.cs
fn @compute_basis_vectors(math:Intrinsics, normal: Vec3, tangent: &mut Vec3, binormal: &mut Vec3) -> () {
    if (math.fabsf(normal.x) > math.fabsf(normal.y)) {
        let t = vec3_mulf(make_vec3(-normal.z, 0.0f, normal.x), 1.0f / math.sqrtf(normal.x * normal.x + normal.z * normal.z));
        tangent.x = t.x;
        tangent.y = t.y;
        tangent.z = t.z;
    } else {
        let t = vec3_mulf(make_vec3(0.0f, normal.z, -normal.y), 1.0f / math.sqrtf(normal.y * normal.y + normal.z * normal.z));
        tangent.x = t.x;
        tangent.y = t.y;
        tangent.z = t.z;
    }
    let b = vec3_cross(normal, *tangent);
    binormal.x = b.x;
    binormal.y = b.y;
    binormal.z = b.z;
}

// https://github.com/pgrit/SeeSharp/blob/master/SeeSharp/Shading/ShadingSpace.cs
fn @world_to_local(math: Intrinsics, normal:Vec3, direction:Vec3) -> Vec3 {
    let dir = vec3_normalize(math, direction);
    let mut tangent = make_vec3(0.0f,0.0f,0.0f);
    let mut binormal = make_vec3(0.0f,0.0f,0.0f);

    compute_basis_vectors(math, normal, &mut tangent, &mut binormal);

    let z = vec3_dot(normal, dir);
    let x = vec3_dot(tangent, dir);
    let y = vec3_dot(binormal, dir);

    make_vec3(x,y,z)
}

fn @local_to_world(math: Intrinsics, normal:Vec3, direction:Vec3) -> Vec3 {
    let dir = vec3_normalize(math, direction);

    let mut tangent = make_vec3(0.0f,0.0f,0.0f);
    let mut binormal = make_vec3(0.0f,0.0f,0.0f);

    compute_basis_vectors(math, normal, &mut tangent, &mut binormal);

    vec3_add(vec3_add(vec3_mulf(normal, dir.z), vec3_mulf(tangent, dir.x)), vec3_mulf(binormal, dir.y))
}

extern "C" {
    fn load_brdf(&[u8]) -> &mut BRDFData;
    fn c_evaluate(&[u8], &Vec3, &Vec3, &mut Color) -> ();
    fn c_sample(&[u8], &Vec2, &Vec3, &mut MeasuredBRDFSampleData) -> ();
    fn c_pdf(&[u8], &Vec3, &Vec3, &mut f32) -> ();
    //fn print_vec(Vec3) -> ();
    //fn print_float(f32) -> ();
}

fn @ make_measured_bsdf(brdf_data: BRDFData, math:Intrinsics, surf: SurfaceElement) -> Bsdf {
    let brdf = brdf_data;
    Bsdf {
        eval:  @|in_dir, out_dir| {
            let n = surf.local.col(2);
            let in_local = world_to_local(math, n, in_dir);
            let out_local = world_to_local(math, n, out_dir);
            evaluate_brdf(math, brdf, in_local, out_local)
            //let mut col = make_color(0.0f, 0.0f, 0.0f);
            //test_evaluate_brdf(brdf, &in_local, &out_local, &mut col);
        },
        pdf:   @|in_dir, out_dir| {
            let n = surf.local.col(2);
            let in_local = world_to_local(math, n, in_dir);
            let out_local = world_to_local(math, n, out_dir);
            pdf_brdf(math, brdf, in_local, out_local)
            //let mut pdf_val = 1.0f;
            //test_pdf_brdf(brdf, &in_local, &out_local, &mut pdf_val);
        },
        sample:  @|rnd, out_dir, _| {
            let n = surf.local.col(2);
            let out_local = world_to_local(math, n, out_dir);
            let sample = sample_brdf(math, brdf, make_vec2(randf(rnd), randf(rnd)), out_local);
            //let mut sample = make_sample_data();
            //test_sample_brdf(brdf, &make_vec2(randf(rnd), randf(rnd)), &out_local, &mut sample);

            let in_world = local_to_world(math, n, sample.out);
            let cos = vec3_dot(sample.out, n);
            let color = color_mulf(make_color(sample.res.x, sample.res.y, sample.res.z), sample.pdf / cos);
            make_bsdf_sample(surf, in_world, sample.pdf, cos, color, false)
        },
        is_specular: false
    }
}

fn @ make_c_measured_bsdf(brdf_name: &[u8], math:Intrinsics, surf: SurfaceElement) -> Bsdf {
    Bsdf {
        eval:  @|in_dir, out_dir| {
            let n = surf.local.col(2);
            let in_local = world_to_local(math, n, in_dir);
            let out_local = world_to_local(math, n, out_dir);
            let mut col = make_color(0.0f, 0.0f, 0.0f);
            c_evaluate(brdf_name, &in_local, &out_local, &mut col);
            col
        },
        pdf:   @|in_dir, out_dir| {
            let n = surf.local.col(2);
            let in_local = world_to_local(math, n, in_dir);
            let out_local = world_to_local(math, n, out_dir);
            let mut pdf_val = 1.0f;
            c_pdf(brdf_name, &in_local, &out_local, &mut pdf_val);
            pdf_val
        },
        sample:  @|rnd, out_dir, _| {
            let n = surf.local.col(2);
            let out_local = world_to_local(math, n, out_dir);

            let mut sample = make_sample_data();
            c_sample(brdf_name, &make_vec2(randf(rnd), randf(rnd)), &out_local, &mut sample);

            let in_world = local_to_world(math, n, sample.out);
            let cos = vec3_dot(sample.out, n);
            let color = color_mulf(make_color(sample.res.x, sample.res.y, sample.res.z), sample.pdf / cos);
            make_bsdf_sample(surf, in_world, sample.pdf, cos, color, false)
        },
        is_specular: false
    }
}