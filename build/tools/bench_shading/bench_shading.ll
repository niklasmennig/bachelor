; ModuleID = '/home/niklas/repos/anydsl/rodent/build/tools/bench_shading/./bench_shading'
source_filename = "/home/niklas/repos/anydsl/rodent/build/tools/bench_shading/./bench_shading"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { %1, [0 x i32]*, [0 x i32]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x i32]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x i32]*, i32, i32 }
%1 = type { [0 x i32]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]* }
%2 = type { float, float, float }
%3 = type { float, float }
%4 = type { i32, %5, float, i32 }
%5 = type { float, float, float }
%6 = type { %7, %7, %7, %7, %7, i1, i1 }
%7 = type { %8, %3, %3, [0 x i32]*, [0 x i32]*, [0 x float]*, i32, [0 x float]*, [0 x float]*, [0 x float]*, [0 x i32]* }
%8 = type { i32, i32 }
%9 = type { %2, %2, float }
%10 = type { %3, float }

define i32 @cpu_sort_primary(%0* %primary_2195905, [0 x i32]* %ray_begins_2195906, [0 x i32]* %ray_ends_2195907, i32 %num_geometries_2195908) local_unnamed_addr !dbg !4 {
cpu_sort_primary:
  %j_2195977 = alloca i32, align 4
  %n_2195952 = alloca i32, align 4
  %0 = icmp sgt i32 %num_geometries_2195908, -1, !dbg !7
  br i1 %0, label %expr_true17, label %expr_false, !dbg !7

expr_false:                                       ; preds = %expr_true17, %cpu_sort_primary
  %1 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 12, !dbg !8
  %2 = load i32, i32* %1, align 4, !dbg !8
  %3 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 1, !dbg !8
  %4 = icmp sgt i32 %2, 0, !dbg !7
  br i1 %4, label %expr_true16, label %expr_false4, !dbg !7

expr_false4:                                      ; preds = %expr_true16, %expr_false
  store i32 0, i32* %n_2195952, align 4, !dbg !8
  %5 = icmp sgt i32 %num_geometries_2195908, -1, !dbg !7
  br i1 %5, label %expr_true15, label %expr_false7, !dbg !7

expr_false7:                                      ; preds = %expr_true15, %expr_false4
  %6 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 0, !dbg !8
  %7 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 1, !dbg !8
  %8 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 2, !dbg !8
  %9 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 3, !dbg !8
  %10 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 4, !dbg !8
  %11 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 5, !dbg !8
  %12 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 6, !dbg !8
  %13 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 7, !dbg !8
  %14 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 0, i32 8, !dbg !8
  %15 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 2, !dbg !8
  %16 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 3, !dbg !8
  %17 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 4, !dbg !8
  %18 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 5, !dbg !8
  %19 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 6, !dbg !8
  %20 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 7, !dbg !8
  %21 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 8, !dbg !8
  %22 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 9, !dbg !8
  %23 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 10, !dbg !8
  %24 = getelementptr inbounds %0, %0* %primary_2195905, i64 0, i32 11, !dbg !8
  %25 = icmp sgt i32 %num_geometries_2195908, 0, !dbg !7
  br i1 %25, label %expr_true, label %expr_false10, !dbg !7

expr_false10:                                     ; preds = %expr_false11, %expr_false7
  %26 = add nsw i32 %num_geometries_2195908, -1, !dbg !8
  %27 = sext i32 %26 to i64, !dbg !8
  %28 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_ends_2195907, i64 0, i64 %27, !dbg !8
  %29 = load i32, i32* %28, align 4, !dbg !8
  ret i32 %29, !dbg !8

expr_true:                                        ; preds = %expr_false7, %expr_false11
  %unroll_step921 = phi i32 [ %37, %expr_false11 ], [ 0, %expr_false7 ]
  %30 = zext i32 %unroll_step921 to i64, !dbg !8
  %31 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_begins_2195906, i64 0, i64 %30, !dbg !8
  %32 = load i32, i32* %31, align 4, !dbg !8
  %33 = zext i32 %unroll_step921 to i64, !dbg !8
  %34 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_ends_2195907, i64 0, i64 %33, !dbg !8
  %35 = load i32, i32* %34, align 4, !dbg !8
  store i32 %32, i32* %j_2195977, align 4, !dbg !8
  %36 = icmp slt i32 %32, %35, !dbg !9
  br i1 %36, label %expr_true12, label %expr_false11, !dbg !9

expr_false11:                                     ; preds = %if_join, %expr_true
  %37 = add nuw nsw i32 %unroll_step921, 1, !dbg !10
  %38 = icmp slt i32 %37, %num_geometries_2195908, !dbg !7
  br i1 %38, label %expr_true, label %expr_false10, !dbg !7

expr_true12:                                      ; preds = %expr_true, %if_join
  %39 = load [0 x i32]*, [0 x i32]** %3, align 8, !dbg !10
  %40 = load i32, i32* %j_2195977, align 4, !dbg !10
  %41 = sext i32 %40 to i64, !dbg !10
  %42 = getelementptr inbounds [0 x i32], [0 x i32]* %39, i64 0, i64 %41, !dbg !10
  %43 = load i32, i32* %42, align 4, !dbg !10
  %.not = icmp eq i32 %43, %unroll_step921, !dbg !10
  br i1 %.not, label %expr_false13, label %expr_true14, !dbg !10

expr_false13:                                     ; preds = %expr_true12
  %44 = load i32, i32* %j_2195977, align 4, !dbg !11
  %45 = add nsw i32 %44, 1, !dbg !11
  store i32 %45, i32* %j_2195977, align 4, !dbg !11
  br label %if_join, !dbg !11

expr_true14:                                      ; preds = %expr_true12
  %46 = sext i32 %43 to i64, !dbg !11
  %47 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_begins_2195906, i64 0, i64 %46, !dbg !11
  %48 = load i32, i32* %47, align 4, !dbg !11
  %49 = add nsw i32 %48, 1, !dbg !11
  store i32 %49, i32* %47, align 4, !dbg !11
  %50 = load [0 x i32]*, [0 x i32]** %6, align 8, !dbg !11
  %51 = load i32, i32* %j_2195977, align 4, !dbg !11
  %52 = sext i32 %48 to i64, !dbg !11
  %53 = getelementptr inbounds [0 x i32], [0 x i32]* %50, i64 0, i64 %52, !dbg !11
  %54 = load i32, i32* %53, align 4, !dbg !11
  %55 = sext i32 %51 to i64, !dbg !11
  %56 = getelementptr inbounds [0 x i32], [0 x i32]* %50, i64 0, i64 %55, !dbg !11
  %57 = load i32, i32* %56, align 4, !dbg !11
  store i32 %57, i32* %53, align 4, !dbg !11
  store i32 %54, i32* %56, align 4, !dbg !11
  %58 = load [0 x float]*, [0 x float]** %7, align 8, !dbg !11
  %59 = load i32, i32* %j_2195977, align 4, !dbg !11
  %60 = sext i32 %48 to i64, !dbg !11
  %61 = getelementptr inbounds [0 x float], [0 x float]* %58, i64 0, i64 %60, !dbg !11
  %62 = load float, float* %61, align 4, !dbg !11
  %63 = sext i32 %59 to i64, !dbg !11
  %64 = getelementptr inbounds [0 x float], [0 x float]* %58, i64 0, i64 %63, !dbg !11
  %65 = load float, float* %64, align 4, !dbg !11
  store float %65, float* %61, align 4, !dbg !11
  store float %62, float* %64, align 4, !dbg !11
  %66 = load [0 x float]*, [0 x float]** %8, align 8, !dbg !11
  %67 = load i32, i32* %j_2195977, align 4, !dbg !11
  %68 = sext i32 %48 to i64, !dbg !11
  %69 = getelementptr inbounds [0 x float], [0 x float]* %66, i64 0, i64 %68, !dbg !11
  %70 = load float, float* %69, align 4, !dbg !11
  %71 = sext i32 %67 to i64, !dbg !11
  %72 = getelementptr inbounds [0 x float], [0 x float]* %66, i64 0, i64 %71, !dbg !11
  %73 = load float, float* %72, align 4, !dbg !11
  store float %73, float* %69, align 4, !dbg !11
  store float %70, float* %72, align 4, !dbg !11
  %74 = load [0 x float]*, [0 x float]** %9, align 8, !dbg !11
  %75 = load i32, i32* %j_2195977, align 4, !dbg !11
  %76 = sext i32 %48 to i64, !dbg !11
  %77 = getelementptr inbounds [0 x float], [0 x float]* %74, i64 0, i64 %76, !dbg !11
  %78 = load float, float* %77, align 4, !dbg !11
  %79 = sext i32 %75 to i64, !dbg !11
  %80 = getelementptr inbounds [0 x float], [0 x float]* %74, i64 0, i64 %79, !dbg !11
  %81 = load float, float* %80, align 4, !dbg !11
  store float %81, float* %77, align 4, !dbg !11
  store float %78, float* %80, align 4, !dbg !11
  %82 = load [0 x float]*, [0 x float]** %10, align 8, !dbg !11
  %83 = load i32, i32* %j_2195977, align 4, !dbg !11
  %84 = sext i32 %48 to i64, !dbg !11
  %85 = getelementptr inbounds [0 x float], [0 x float]* %82, i64 0, i64 %84, !dbg !11
  %86 = load float, float* %85, align 4, !dbg !11
  %87 = sext i32 %83 to i64, !dbg !11
  %88 = getelementptr inbounds [0 x float], [0 x float]* %82, i64 0, i64 %87, !dbg !11
  %89 = load float, float* %88, align 4, !dbg !11
  store float %89, float* %85, align 4, !dbg !11
  store float %86, float* %88, align 4, !dbg !11
  %90 = load [0 x float]*, [0 x float]** %11, align 8, !dbg !11
  %91 = load i32, i32* %j_2195977, align 4, !dbg !11
  %92 = sext i32 %48 to i64, !dbg !11
  %93 = getelementptr inbounds [0 x float], [0 x float]* %90, i64 0, i64 %92, !dbg !11
  %94 = load float, float* %93, align 4, !dbg !11
  %95 = sext i32 %91 to i64, !dbg !11
  %96 = getelementptr inbounds [0 x float], [0 x float]* %90, i64 0, i64 %95, !dbg !11
  %97 = load float, float* %96, align 4, !dbg !11
  store float %97, float* %93, align 4, !dbg !11
  store float %94, float* %96, align 4, !dbg !11
  %98 = load [0 x float]*, [0 x float]** %12, align 8, !dbg !11
  %99 = load i32, i32* %j_2195977, align 4, !dbg !11
  %100 = sext i32 %48 to i64, !dbg !11
  %101 = getelementptr inbounds [0 x float], [0 x float]* %98, i64 0, i64 %100, !dbg !11
  %102 = load float, float* %101, align 4, !dbg !11
  %103 = sext i32 %99 to i64, !dbg !11
  %104 = getelementptr inbounds [0 x float], [0 x float]* %98, i64 0, i64 %103, !dbg !11
  %105 = load float, float* %104, align 4, !dbg !11
  store float %105, float* %101, align 4, !dbg !11
  store float %102, float* %104, align 4, !dbg !11
  %106 = load [0 x float]*, [0 x float]** %13, align 8, !dbg !11
  %107 = load i32, i32* %j_2195977, align 4, !dbg !11
  %108 = sext i32 %48 to i64, !dbg !11
  %109 = getelementptr inbounds [0 x float], [0 x float]* %106, i64 0, i64 %108, !dbg !11
  %110 = load float, float* %109, align 4, !dbg !11
  %111 = sext i32 %107 to i64, !dbg !11
  %112 = getelementptr inbounds [0 x float], [0 x float]* %106, i64 0, i64 %111, !dbg !11
  %113 = load float, float* %112, align 4, !dbg !11
  store float %113, float* %109, align 4, !dbg !11
  store float %110, float* %112, align 4, !dbg !11
  %114 = load [0 x float]*, [0 x float]** %14, align 8, !dbg !11
  %115 = load i32, i32* %j_2195977, align 4, !dbg !11
  %116 = sext i32 %48 to i64, !dbg !11
  %117 = getelementptr inbounds [0 x float], [0 x float]* %114, i64 0, i64 %116, !dbg !11
  %118 = load float, float* %117, align 4, !dbg !11
  %119 = sext i32 %115 to i64, !dbg !11
  %120 = getelementptr inbounds [0 x float], [0 x float]* %114, i64 0, i64 %119, !dbg !11
  %121 = load float, float* %120, align 4, !dbg !11
  store float %121, float* %117, align 4, !dbg !11
  store float %118, float* %120, align 4, !dbg !11
  %122 = load [0 x i32]*, [0 x i32]** %3, align 8, !dbg !11
  %123 = load i32, i32* %j_2195977, align 4, !dbg !11
  %124 = sext i32 %48 to i64, !dbg !11
  %125 = getelementptr inbounds [0 x i32], [0 x i32]* %122, i64 0, i64 %124, !dbg !11
  %126 = load i32, i32* %125, align 4, !dbg !11
  %127 = sext i32 %123 to i64, !dbg !11
  %128 = getelementptr inbounds [0 x i32], [0 x i32]* %122, i64 0, i64 %127, !dbg !11
  %129 = load i32, i32* %128, align 4, !dbg !11
  store i32 %129, i32* %125, align 4, !dbg !11
  store i32 %126, i32* %128, align 4, !dbg !11
  %130 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !11
  %131 = load i32, i32* %j_2195977, align 4, !dbg !11
  %132 = sext i32 %48 to i64, !dbg !11
  %133 = getelementptr inbounds [0 x i32], [0 x i32]* %130, i64 0, i64 %132, !dbg !11
  %134 = load i32, i32* %133, align 4, !dbg !11
  %135 = sext i32 %131 to i64, !dbg !11
  %136 = getelementptr inbounds [0 x i32], [0 x i32]* %130, i64 0, i64 %135, !dbg !11
  %137 = load i32, i32* %136, align 4, !dbg !11
  store i32 %137, i32* %133, align 4, !dbg !11
  store i32 %134, i32* %136, align 4, !dbg !11
  %138 = load [0 x float]*, [0 x float]** %16, align 8, !dbg !11
  %139 = load i32, i32* %j_2195977, align 4, !dbg !11
  %140 = sext i32 %48 to i64, !dbg !11
  %141 = getelementptr inbounds [0 x float], [0 x float]* %138, i64 0, i64 %140, !dbg !11
  %142 = load float, float* %141, align 4, !dbg !11
  %143 = sext i32 %139 to i64, !dbg !11
  %144 = getelementptr inbounds [0 x float], [0 x float]* %138, i64 0, i64 %143, !dbg !11
  %145 = load float, float* %144, align 4, !dbg !11
  store float %145, float* %141, align 4, !dbg !11
  store float %142, float* %144, align 4, !dbg !11
  %146 = load [0 x float]*, [0 x float]** %17, align 8, !dbg !11
  %147 = load i32, i32* %j_2195977, align 4, !dbg !11
  %148 = sext i32 %48 to i64, !dbg !11
  %149 = getelementptr inbounds [0 x float], [0 x float]* %146, i64 0, i64 %148, !dbg !11
  %150 = load float, float* %149, align 4, !dbg !11
  %151 = sext i32 %147 to i64, !dbg !11
  %152 = getelementptr inbounds [0 x float], [0 x float]* %146, i64 0, i64 %151, !dbg !11
  %153 = load float, float* %152, align 4, !dbg !11
  store float %153, float* %149, align 4, !dbg !11
  store float %150, float* %152, align 4, !dbg !11
  %154 = load [0 x float]*, [0 x float]** %18, align 8, !dbg !11
  %155 = load i32, i32* %j_2195977, align 4, !dbg !11
  %156 = sext i32 %48 to i64, !dbg !11
  %157 = getelementptr inbounds [0 x float], [0 x float]* %154, i64 0, i64 %156, !dbg !11
  %158 = load float, float* %157, align 4, !dbg !11
  %159 = sext i32 %155 to i64, !dbg !11
  %160 = getelementptr inbounds [0 x float], [0 x float]* %154, i64 0, i64 %159, !dbg !11
  %161 = load float, float* %160, align 4, !dbg !11
  store float %161, float* %157, align 4, !dbg !11
  store float %158, float* %160, align 4, !dbg !11
  %162 = load [0 x i32]*, [0 x i32]** %19, align 8, !dbg !11
  %163 = load i32, i32* %j_2195977, align 4, !dbg !11
  %164 = sext i32 %48 to i64, !dbg !11
  %165 = getelementptr inbounds [0 x i32], [0 x i32]* %162, i64 0, i64 %164, !dbg !11
  %166 = load i32, i32* %165, align 4, !dbg !11
  %167 = sext i32 %163 to i64, !dbg !11
  %168 = getelementptr inbounds [0 x i32], [0 x i32]* %162, i64 0, i64 %167, !dbg !11
  %169 = load i32, i32* %168, align 4, !dbg !11
  store i32 %169, i32* %165, align 4, !dbg !11
  store i32 %166, i32* %168, align 4, !dbg !11
  %170 = load [0 x float]*, [0 x float]** %20, align 8, !dbg !11
  %171 = load i32, i32* %j_2195977, align 4, !dbg !11
  %172 = sext i32 %48 to i64, !dbg !11
  %173 = getelementptr inbounds [0 x float], [0 x float]* %170, i64 0, i64 %172, !dbg !11
  %174 = load float, float* %173, align 4, !dbg !11
  %175 = sext i32 %171 to i64, !dbg !11
  %176 = getelementptr inbounds [0 x float], [0 x float]* %170, i64 0, i64 %175, !dbg !11
  %177 = load float, float* %176, align 4, !dbg !11
  store float %177, float* %173, align 4, !dbg !11
  store float %174, float* %176, align 4, !dbg !11
  %178 = load [0 x float]*, [0 x float]** %21, align 8, !dbg !11
  %179 = load i32, i32* %j_2195977, align 4, !dbg !11
  %180 = sext i32 %48 to i64, !dbg !11
  %181 = getelementptr inbounds [0 x float], [0 x float]* %178, i64 0, i64 %180, !dbg !11
  %182 = load float, float* %181, align 4, !dbg !11
  %183 = sext i32 %179 to i64, !dbg !11
  %184 = getelementptr inbounds [0 x float], [0 x float]* %178, i64 0, i64 %183, !dbg !11
  %185 = load float, float* %184, align 4, !dbg !11
  store float %185, float* %181, align 4, !dbg !11
  store float %182, float* %184, align 4, !dbg !11
  %186 = load [0 x float]*, [0 x float]** %22, align 8, !dbg !11
  %187 = load i32, i32* %j_2195977, align 4, !dbg !11
  %188 = sext i32 %48 to i64, !dbg !11
  %189 = getelementptr inbounds [0 x float], [0 x float]* %186, i64 0, i64 %188, !dbg !11
  %190 = load float, float* %189, align 4, !dbg !11
  %191 = sext i32 %187 to i64, !dbg !11
  %192 = getelementptr inbounds [0 x float], [0 x float]* %186, i64 0, i64 %191, !dbg !11
  %193 = load float, float* %192, align 4, !dbg !11
  store float %193, float* %189, align 4, !dbg !11
  store float %190, float* %192, align 4, !dbg !11
  %194 = load [0 x float]*, [0 x float]** %23, align 8, !dbg !11
  %195 = load i32, i32* %j_2195977, align 4, !dbg !11
  %196 = sext i32 %48 to i64, !dbg !11
  %197 = getelementptr inbounds [0 x float], [0 x float]* %194, i64 0, i64 %196, !dbg !11
  %198 = load float, float* %197, align 4, !dbg !11
  %199 = sext i32 %195 to i64, !dbg !11
  %200 = getelementptr inbounds [0 x float], [0 x float]* %194, i64 0, i64 %199, !dbg !11
  %201 = load float, float* %200, align 4, !dbg !11
  store float %201, float* %197, align 4, !dbg !11
  store float %198, float* %200, align 4, !dbg !11
  %202 = load [0 x i32]*, [0 x i32]** %24, align 8, !dbg !11
  %203 = load i32, i32* %j_2195977, align 4, !dbg !11
  %204 = sext i32 %48 to i64, !dbg !11
  %205 = getelementptr inbounds [0 x i32], [0 x i32]* %202, i64 0, i64 %204, !dbg !11
  %206 = load i32, i32* %205, align 4, !dbg !11
  %207 = sext i32 %203 to i64, !dbg !11
  %208 = getelementptr inbounds [0 x i32], [0 x i32]* %202, i64 0, i64 %207, !dbg !11
  %209 = load i32, i32* %208, align 4, !dbg !11
  store i32 %209, i32* %205, align 4, !dbg !11
  store i32 %206, i32* %208, align 4, !dbg !11
  br label %if_join, !dbg !11

if_join:                                          ; preds = %expr_true14, %expr_false13
  %210 = load i32, i32* %j_2195977, align 4, !dbg !9
  %211 = icmp slt i32 %210, %35, !dbg !9
  br i1 %211, label %expr_true12, label %expr_false11, !dbg !9

expr_true15:                                      ; preds = %expr_false4, %expr_true15
  %unroll_step620 = phi i32 [ %220, %expr_true15 ], [ 0, %expr_false4 ]
  %212 = load i32, i32* %n_2195952, align 4, !dbg !8
  %213 = zext i32 %unroll_step620 to i64, !dbg !8
  %214 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_begins_2195906, i64 0, i64 %213, !dbg !8
  store i32 %212, i32* %214, align 4, !dbg !8
  %215 = zext i32 %unroll_step620 to i64, !dbg !8
  %216 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_ends_2195907, i64 0, i64 %215, !dbg !8
  %217 = load i32, i32* %216, align 4, !dbg !8
  %218 = load i32, i32* %n_2195952, align 4, !dbg !8
  %219 = add nsw i32 %218, %217, !dbg !8
  store i32 %219, i32* %n_2195952, align 4, !dbg !8
  store i32 %219, i32* %216, align 4, !dbg !8
  %220 = add nuw nsw i32 %unroll_step620, 1, !dbg !8
  %221 = icmp slt i32 %unroll_step620, %num_geometries_2195908, !dbg !7
  br i1 %221, label %expr_true15, label %expr_false7, !dbg !7

expr_true16:                                      ; preds = %expr_false, %expr_true16
  %unroll_step319 = phi i32 [ %230, %expr_true16 ], [ 0, %expr_false ]
  %222 = load [0 x i32]*, [0 x i32]** %3, align 8, !dbg !8
  %223 = zext i32 %unroll_step319 to i64, !dbg !8
  %224 = getelementptr inbounds [0 x i32], [0 x i32]* %222, i64 0, i64 %223, !dbg !8
  %225 = load i32, i32* %224, align 4, !dbg !8
  %226 = sext i32 %225 to i64, !dbg !8
  %227 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_ends_2195907, i64 0, i64 %226, !dbg !8
  %228 = load i32, i32* %227, align 4, !dbg !8
  %229 = add nsw i32 %228, 1, !dbg !8
  store i32 %229, i32* %227, align 4, !dbg !8
  %230 = add nuw nsw i32 %unroll_step319, 1, !dbg !8
  %231 = icmp slt i32 %230, %2, !dbg !7
  br i1 %231, label %expr_true16, label %expr_false4, !dbg !7

expr_true17:                                      ; preds = %cpu_sort_primary, %expr_true17
  %unroll_step118 = phi i32 [ %234, %expr_true17 ], [ 0, %cpu_sort_primary ]
  %232 = zext i32 %unroll_step118 to i64, !dbg !8
  %233 = getelementptr inbounds [0 x i32], [0 x i32]* %ray_ends_2195907, i64 0, i64 %232, !dbg !8
  store i32 0, i32* %233, align 4, !dbg !8
  %234 = add nuw nsw i32 %unroll_step118, 1, !dbg !8
  %235 = icmp slt i32 %unroll_step118, %num_geometries_2195908, !dbg !7
  br i1 %235, label %expr_true17, label %expr_false, !dbg !7
}

define void @cpu_bench_shading(%0* %primary_in_2188505, %0* %primary_out_2188506, [0 x %2]* %vertices_2188507, [0 x %2]* %normals_2188508, [0 x %2]* %face_normals_2188509, [0 x %3]* %texcoords_2188510, [0 x i32]* %indices_2188511, [0 x i32]* %pixels_2188512, i32 %width_2188513, i32 %height_2188514, [0 x i32]* %begins_2188515, [0 x i32]* %ends_2188516, i32 %num_tris_2188517, i32 %num_iters_2188518) local_unnamed_addr !dbg !12 {
cpu_bench_shading:
  %state_2189438 = alloca %4, align 8
  %state_2191104 = alloca %4, align 8
  %state_2192937 = alloca %4, align 8
  %state_2194932 = alloca %4, align 8
  %.elt990 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 0, i32 1, !dbg !14
  %.unpack991 = load [0 x float]*, [0 x float]** %.elt990, align 8, !dbg !14
  %.elt992 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 0, i32 2, !dbg !14
  %.unpack993 = load [0 x float]*, [0 x float]** %.elt992, align 8, !dbg !14
  %.elt994 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 0, i32 3, !dbg !14
  %.unpack995 = load [0 x float]*, [0 x float]** %.elt994, align 8, !dbg !14
  %.elt996 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 0, i32 4, !dbg !14
  %.unpack997 = load [0 x float]*, [0 x float]** %.elt996, align 8, !dbg !14
  %.elt998 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 0, i32 5, !dbg !14
  %.unpack999 = load [0 x float]*, [0 x float]** %.elt998, align 8, !dbg !14
  %.elt1000 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 0, i32 6, !dbg !14
  %.unpack1001 = load [0 x float]*, [0 x float]** %.elt1000, align 8, !dbg !14
  %.elt1010 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 2, !dbg !14
  %.unpack1011 = load [0 x i32]*, [0 x i32]** %.elt1010, align 8, !dbg !14
  %.elt1012 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 3, !dbg !14
  %.unpack1013 = load [0 x float]*, [0 x float]** %.elt1012, align 8, !dbg !14
  %.elt1014 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 4, !dbg !14
  %.unpack1015 = load [0 x float]*, [0 x float]** %.elt1014, align 8, !dbg !14
  %.elt1016 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 5, !dbg !14
  %.unpack1017 = load [0 x float]*, [0 x float]** %.elt1016, align 8, !dbg !14
  %.elt1063 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 6, !dbg !14
  %.unpack1064 = load [0 x i32]*, [0 x i32]** %.elt1063, align 8, !dbg !14
  %.elt1065 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 7, !dbg !14
  %.unpack1066 = load [0 x float]*, [0 x float]** %.elt1065, align 8, !dbg !14
  %.elt1067 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 8, !dbg !14
  %.unpack1068 = load [0 x float]*, [0 x float]** %.elt1067, align 8, !dbg !14
  %.elt1069 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 9, !dbg !14
  %.unpack1070 = load [0 x float]*, [0 x float]** %.elt1069, align 8, !dbg !14
  %.elt1071 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 10, !dbg !14
  %.unpack1072 = load [0 x float]*, [0 x float]** %.elt1071, align 8, !dbg !14
  %.elt1073 = getelementptr inbounds %0, %0* %primary_in_2188505, i64 0, i32 11, !dbg !14
  %.unpack1074 = load [0 x i32]*, [0 x i32]** %.elt1073, align 8, !dbg !14
  %.elt1098 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 1, !dbg !14
  %.unpack1099 = load [0 x float]*, [0 x float]** %.elt1098, align 8, !dbg !14
  %.elt1100 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 2, !dbg !14
  %.unpack1101 = load [0 x float]*, [0 x float]** %.elt1100, align 8, !dbg !14
  %.elt1102 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 3, !dbg !14
  %.unpack1103 = load [0 x float]*, [0 x float]** %.elt1102, align 8, !dbg !14
  %.elt1104 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 4, !dbg !14
  %.unpack1105 = load [0 x float]*, [0 x float]** %.elt1104, align 8, !dbg !14
  %.elt1106 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 5, !dbg !14
  %.unpack1107 = load [0 x float]*, [0 x float]** %.elt1106, align 8, !dbg !14
  %.elt1108 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 6, !dbg !14
  %.unpack1109 = load [0 x float]*, [0 x float]** %.elt1108, align 8, !dbg !14
  %.elt1110 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 7, !dbg !14
  %.unpack1111 = load [0 x float]*, [0 x float]** %.elt1110, align 8, !dbg !14
  %.elt1112 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 0, i32 8, !dbg !14
  %.unpack1113 = load [0 x float]*, [0 x float]** %.elt1112, align 8, !dbg !14
  %.elt1126 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 6, !dbg !14
  %.unpack1127 = load [0 x i32]*, [0 x i32]** %.elt1126, align 8, !dbg !14
  %.elt1128 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 7, !dbg !14
  %.unpack1129 = load [0 x float]*, [0 x float]** %.elt1128, align 8, !dbg !14
  %.elt1130 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 8, !dbg !14
  %.unpack1131 = load [0 x float]*, [0 x float]** %.elt1130, align 8, !dbg !14
  %.elt1132 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 9, !dbg !14
  %.unpack1133 = load [0 x float]*, [0 x float]** %.elt1132, align 8, !dbg !14
  %.elt1134 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 10, !dbg !14
  %.unpack1135 = load [0 x float]*, [0 x float]** %.elt1134, align 8, !dbg !14
  %.elt1136 = getelementptr inbounds %0, %0* %primary_out_2188506, i64 0, i32 11, !dbg !14
  %.unpack1137 = load [0 x i32]*, [0 x i32]** %.elt1136, align 8, !dbg !14
  %0 = getelementptr inbounds [0 x i32], [0 x i32]* %begins_2188515, i64 0, i64 0, !dbg !14
  %1 = getelementptr inbounds [0 x i32], [0 x i32]* %ends_2188516, i64 0, i64 0, !dbg !14
  %2 = getelementptr inbounds [0 x i32], [0 x i32]* %begins_2188515, i64 0, i64 1, !dbg !14
  %3 = getelementptr inbounds [0 x i32], [0 x i32]* %ends_2188516, i64 0, i64 1, !dbg !14
  %4 = getelementptr inbounds [0 x i32], [0 x i32]* %begins_2188515, i64 0, i64 2, !dbg !14
  %5 = getelementptr inbounds [0 x i32], [0 x i32]* %ends_2188516, i64 0, i64 2, !dbg !14
  %6 = getelementptr inbounds [0 x i32], [0 x i32]* %begins_2188515, i64 0, i64 3, !dbg !14
  %7 = getelementptr inbounds [0 x i32], [0 x i32]* %ends_2188516, i64 0, i64 3, !dbg !14
  %8 = sitofp i32 %width_2188513 to float, !dbg !14
  %9 = add nsw i32 %width_2188513, -1, !dbg !14
  %10 = sitofp i32 %height_2188514 to float, !dbg !14
  %11 = add nsw i32 %height_2188514, -1, !dbg !14
  %12 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 0, !dbg !14
  %13 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 3, !dbg !14
  %14 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 0, !dbg !14
  %15 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 3, !dbg !14
  %16 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 0, !dbg !14
  %17 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 3, !dbg !14
  %18 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 0, !dbg !14
  %19 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 3, !dbg !14
  %20 = icmp sgt i32 %num_iters_2188518, 0, !dbg !15
  br i1 %20, label %expr_true.preheader, label %expr_false, !dbg !15

expr_true.preheader:                              ; preds = %cpu_bench_shading
  %21 = bitcast [0 x i32]* %indices_2188511 to i8*
  %22 = bitcast [0 x i32]* %indices_2188511 to i8*
  %23 = bitcast [0 x i32]* %indices_2188511 to i8*
  %24 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %25 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %26 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %27 = bitcast [0 x %2]* %normals_2188508 to i8*
  %28 = bitcast [0 x %2]* %normals_2188508 to i8*
  %29 = bitcast [0 x %2]* %normals_2188508 to i8*
  %30 = bitcast [0 x %2]* %normals_2188508 to i8*
  %31 = bitcast [0 x %2]* %normals_2188508 to i8*
  %32 = bitcast [0 x %2]* %normals_2188508 to i8*
  %33 = bitcast [0 x %2]* %normals_2188508 to i8*
  %34 = bitcast [0 x %2]* %normals_2188508 to i8*
  %35 = bitcast [0 x %2]* %normals_2188508 to i8*
  %state_2189438.repack = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 0
  %state_2189438.repack1417.repack = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 1, i32 0
  %state_2189438.repack1417.repack1424 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 1, i32 1
  %state_2189438.repack1417.repack1426 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 1, i32 2
  %state_2189438.repack1419 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 2
  %state_2189438.repack1421 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 3
  %.elt1480 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 1, i32 0
  %.elt1482 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 1, i32 1
  %.elt1484 = getelementptr inbounds %4, %4* %state_2189438, i64 0, i32 1, i32 2
  %36 = bitcast [0 x i32]* %indices_2188511 to i8*
  %37 = bitcast [0 x i32]* %indices_2188511 to i8*
  %38 = bitcast [0 x i32]* %indices_2188511 to i8*
  %39 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %40 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %41 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %42 = bitcast [0 x %2]* %normals_2188508 to i8*
  %43 = bitcast [0 x %2]* %normals_2188508 to i8*
  %44 = bitcast [0 x %2]* %normals_2188508 to i8*
  %45 = bitcast [0 x %2]* %normals_2188508 to i8*
  %46 = bitcast [0 x %2]* %normals_2188508 to i8*
  %47 = bitcast [0 x %2]* %normals_2188508 to i8*
  %48 = bitcast [0 x %2]* %normals_2188508 to i8*
  %49 = bitcast [0 x %2]* %normals_2188508 to i8*
  %50 = bitcast [0 x %2]* %normals_2188508 to i8*
  %.splatinsert39.i823 = insertelement <8 x i32> poison, i32 %width_2188513, i32 0
  %.splat40.i824 = shufflevector <8 x i32> %.splatinsert39.i823, <8 x i32> poison, <8 x i32> zeroinitializer
  %51 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %52 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %53 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %54 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %55 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %56 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %57 = sitofp i32 %width_2188513 to float
  %.splatinsert.i833 = insertelement <8 x float> poison, float %57, i32 0
  %.splat.i834 = shufflevector <8 x float> %.splatinsert.i833, <8 x float> poison, <8 x i32> zeroinitializer
  %58 = add nsw i32 %width_2188513, -1
  %.splatinsert33.i836 = insertelement <8 x i32> poison, i32 %58, i32 0
  %.splat34.i837 = shufflevector <8 x i32> %.splatinsert33.i836, <8 x i32> poison, <8 x i32> zeroinitializer
  %59 = sitofp i32 %height_2188514 to float
  %.splatinsert35.i838 = insertelement <8 x float> poison, float %59, i32 0
  %.splat36.i839 = shufflevector <8 x float> %.splatinsert35.i838, <8 x float> poison, <8 x i32> zeroinitializer
  %60 = add nsw i32 %height_2188514, -1
  %.splatinsert37.i841 = insertelement <8 x i32> poison, i32 %60, i32 0
  %.splat38.i842 = shufflevector <8 x i32> %.splatinsert37.i841, <8 x i32> poison, <8 x i32> zeroinitializer
  %61 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %62 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %63 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %64 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %state_2191104.repack = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 0
  %state_2191104.repack1335.repack = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 1, i32 0
  %state_2191104.repack1335.repack1342 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 1, i32 1
  %state_2191104.repack1335.repack1344 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 1, i32 2
  %state_2191104.repack1337 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 2
  %state_2191104.repack1339 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 3
  %.elt1410 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 1, i32 0
  %.elt1412 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 1, i32 1
  %.elt1414 = getelementptr inbounds %4, %4* %state_2191104, i64 0, i32 1, i32 2
  %65 = bitcast [0 x i32]* %indices_2188511 to i8*
  %66 = bitcast [0 x i32]* %indices_2188511 to i8*
  %67 = bitcast [0 x i32]* %indices_2188511 to i8*
  %68 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %69 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %70 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %71 = bitcast [0 x %2]* %normals_2188508 to i8*
  %72 = bitcast [0 x %2]* %normals_2188508 to i8*
  %73 = bitcast [0 x %2]* %normals_2188508 to i8*
  %74 = bitcast [0 x %2]* %normals_2188508 to i8*
  %75 = bitcast [0 x %2]* %normals_2188508 to i8*
  %76 = bitcast [0 x %2]* %normals_2188508 to i8*
  %77 = bitcast [0 x %2]* %normals_2188508 to i8*
  %78 = bitcast [0 x %2]* %normals_2188508 to i8*
  %79 = bitcast [0 x %2]* %normals_2188508 to i8*
  %.splatinsert39.i682 = insertelement <8 x i32> poison, i32 %width_2188513, i32 0
  %.splat40.i683 = shufflevector <8 x i32> %.splatinsert39.i682, <8 x i32> poison, <8 x i32> zeroinitializer
  %80 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %81 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %82 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %83 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %84 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %85 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %86 = sitofp i32 %width_2188513 to float
  %.splatinsert.i686 = insertelement <8 x float> poison, float %86, i32 0
  %.splat.i687 = shufflevector <8 x float> %.splatinsert.i686, <8 x float> poison, <8 x i32> zeroinitializer
  %87 = add nsw i32 %width_2188513, -1
  %.splatinsert33.i689 = insertelement <8 x i32> poison, i32 %87, i32 0
  %.splat34.i690 = shufflevector <8 x i32> %.splatinsert33.i689, <8 x i32> poison, <8 x i32> zeroinitializer
  %88 = sitofp i32 %height_2188514 to float
  %.splatinsert35.i691 = insertelement <8 x float> poison, float %88, i32 0
  %.splat36.i692 = shufflevector <8 x float> %.splatinsert35.i691, <8 x float> poison, <8 x i32> zeroinitializer
  %89 = add nsw i32 %height_2188514, -1
  %.splatinsert37.i694 = insertelement <8 x i32> poison, i32 %89, i32 0
  %.splat38.i695 = shufflevector <8 x i32> %.splatinsert37.i694, <8 x i32> poison, <8 x i32> zeroinitializer
  %90 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %91 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %92 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %93 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %state_2192937.repack = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 0
  %state_2192937.repack1253.repack = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 1, i32 0
  %state_2192937.repack1253.repack1260 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 1, i32 1
  %state_2192937.repack1253.repack1262 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 1, i32 2
  %state_2192937.repack1255 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 2
  %state_2192937.repack1257 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 3
  %.elt1328 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 1, i32 0
  %.elt1330 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 1, i32 1
  %.elt1332 = getelementptr inbounds %4, %4* %state_2192937, i64 0, i32 1, i32 2
  %94 = bitcast [0 x i32]* %indices_2188511 to i8*
  %95 = bitcast [0 x i32]* %indices_2188511 to i8*
  %96 = bitcast [0 x i32]* %indices_2188511 to i8*
  %97 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %98 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %99 = bitcast [0 x %2]* %face_normals_2188509 to i8*
  %100 = bitcast [0 x %2]* %normals_2188508 to i8*
  %101 = bitcast [0 x %2]* %normals_2188508 to i8*
  %102 = bitcast [0 x %2]* %normals_2188508 to i8*
  %103 = bitcast [0 x %2]* %normals_2188508 to i8*
  %104 = bitcast [0 x %2]* %normals_2188508 to i8*
  %105 = bitcast [0 x %2]* %normals_2188508 to i8*
  %106 = bitcast [0 x %2]* %normals_2188508 to i8*
  %107 = bitcast [0 x %2]* %normals_2188508 to i8*
  %108 = bitcast [0 x %2]* %normals_2188508 to i8*
  %.splatinsert39.i = insertelement <8 x i32> poison, i32 %width_2188513, i32 0
  %.splat40.i = shufflevector <8 x i32> %.splatinsert39.i, <8 x i32> poison, <8 x i32> zeroinitializer
  %109 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %110 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %111 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %112 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %113 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %114 = bitcast [0 x %3]* %texcoords_2188510 to i8*
  %115 = sitofp i32 %width_2188513 to float
  %.splatinsert.i = insertelement <8 x float> poison, float %115, i32 0
  %.splat.i = shufflevector <8 x float> %.splatinsert.i, <8 x float> poison, <8 x i32> zeroinitializer
  %116 = add nsw i32 %width_2188513, -1
  %.splatinsert33.i = insertelement <8 x i32> poison, i32 %116, i32 0
  %.splat34.i = shufflevector <8 x i32> %.splatinsert33.i, <8 x i32> poison, <8 x i32> zeroinitializer
  %117 = sitofp i32 %height_2188514 to float
  %.splatinsert35.i = insertelement <8 x float> poison, float %117, i32 0
  %.splat36.i = shufflevector <8 x float> %.splatinsert35.i, <8 x float> poison, <8 x i32> zeroinitializer
  %118 = add nsw i32 %height_2188514, -1
  %.splatinsert37.i = insertelement <8 x i32> poison, i32 %118, i32 0
  %.splat38.i = shufflevector <8 x i32> %.splatinsert37.i, <8 x i32> poison, <8 x i32> zeroinitializer
  %119 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %120 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %121 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %122 = bitcast [0 x i32]* %pixels_2188512 to i8*
  %state_2194932.repack = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 0
  %state_2194932.repack1160.repack = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 1, i32 0
  %state_2194932.repack1160.repack1167 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 1, i32 1
  %state_2194932.repack1160.repack1169 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 1, i32 2
  %state_2194932.repack1162 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 2
  %state_2194932.repack1164 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 3
  %.elt1246 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 1, i32 0
  %.elt1248 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 1, i32 1
  %.elt1250 = getelementptr inbounds %4, %4* %state_2194932, i64 0, i32 1, i32 2
  br label %expr_true, !dbg !15

expr_false:                                       ; preds = %expr_false25, %cpu_bench_shading
  ret void, !dbg !16

expr_true:                                        ; preds = %expr_true.preheader, %expr_false25
  %unroll_step1989 = phi i32 [ %155, %expr_false25 ], [ 0, %expr_true.preheader ]
  %123 = load i32, i32* %0, align 4, !dbg !16
  %124 = load i32, i32* %1, align 4, !dbg !16
  %125 = sub nsw i32 %124, %123, !dbg !16
  %126 = sdiv i32 %125, 8, !dbg !16
  %127 = shl nsw i32 %126, 3, !dbg !16
  %128 = add nsw i32 %123, %127, !dbg !16
  %129 = icmp sgt i32 %125, 7, !dbg !15
  br i1 %129, label %expr_true493, label %expr_false4, !dbg !15

expr_false4:                                      ; preds = %expr_true493, %expr_true
  %130 = icmp slt i32 %128, %124, !dbg !15
  br i1 %130, label %expr_true396, label %expr_false7, !dbg !15

expr_false7:                                      ; preds = %if_join480, %expr_false4
  %131 = load i32, i32* %2, align 4, !dbg !16
  %132 = load i32, i32* %3, align 4, !dbg !16
  %133 = sub nsw i32 %132, %131, !dbg !16
  %134 = sdiv i32 %133, 8, !dbg !16
  %135 = shl nsw i32 %134, 3, !dbg !16
  %136 = add nsw i32 %131, %135, !dbg !16
  %137 = icmp sgt i32 %133, 7, !dbg !15
  br i1 %137, label %expr_true394, label %expr_false10, !dbg !15

expr_false10:                                     ; preds = %expr_true394, %expr_false7
  %138 = icmp slt i32 %136, %132, !dbg !15
  br i1 %138, label %expr_true277, label %expr_false13, !dbg !15

expr_false13:                                     ; preds = %if_join381, %expr_false10
  %139 = load i32, i32* %4, align 4, !dbg !16
  %140 = load i32, i32* %5, align 4, !dbg !16
  %141 = sub nsw i32 %140, %139, !dbg !16
  %142 = sdiv i32 %141, 8, !dbg !16
  %143 = shl nsw i32 %142, 3, !dbg !16
  %144 = add nsw i32 %139, %143, !dbg !16
  %145 = icmp sgt i32 %141, 7, !dbg !15
  br i1 %145, label %expr_true275, label %expr_false16, !dbg !15

expr_false16:                                     ; preds = %expr_true275, %expr_false13
  %146 = icmp slt i32 %144, %140, !dbg !15
  br i1 %146, label %expr_true158, label %expr_false19, !dbg !15

expr_false19:                                     ; preds = %if_join262, %expr_false16
  %147 = load i32, i32* %6, align 4, !dbg !16
  %148 = load i32, i32* %7, align 4, !dbg !16
  %149 = sub nsw i32 %148, %147, !dbg !16
  %150 = sdiv i32 %149, 8, !dbg !16
  %151 = shl nsw i32 %150, 3, !dbg !16
  %152 = add nsw i32 %147, %151, !dbg !16
  %153 = icmp sgt i32 %149, 7, !dbg !15
  br i1 %153, label %expr_true156, label %expr_false22, !dbg !15

expr_false22:                                     ; preds = %expr_true156, %expr_false19
  %154 = icmp slt i32 %152, %148, !dbg !15
  br i1 %154, label %expr_true26, label %expr_false25, !dbg !15

expr_false25:                                     ; preds = %if_join143, %expr_false22
  %155 = add nuw nsw i32 %unroll_step1989, 1, !dbg !16
  %156 = icmp slt i32 %155, %num_iters_2188518, !dbg !15
  br i1 %156, label %expr_true, label %expr_false, !dbg !15

expr_true26:                                      ; preds = %expr_false22, %if_join143
  %unroll_step24988 = phi i32 [ %815, %if_join143 ], [ %152, %expr_false22 ]
  %157 = sext i32 %unroll_step24988 to i64, !dbg !16
  %158 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %157, !dbg !16
  %159 = load float, float* %158, align 4, !dbg !16
  %160 = sext i32 %unroll_step24988 to i64, !dbg !16
  %161 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %160, !dbg !16
  %162 = load float, float* %161, align 4, !dbg !16
  %163 = sext i32 %unroll_step24988 to i64, !dbg !16
  %164 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %163, !dbg !16
  %165 = load float, float* %164, align 4, !dbg !16
  %166 = sext i32 %unroll_step24988 to i64, !dbg !16
  %167 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %166, !dbg !16
  %168 = load float, float* %167, align 4, !dbg !16
  %169 = sext i32 %unroll_step24988 to i64, !dbg !16
  %170 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %169, !dbg !16
  %171 = load float, float* %170, align 4, !dbg !16
  %172 = sext i32 %unroll_step24988 to i64, !dbg !16
  %173 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %172, !dbg !16
  %174 = load float, float* %173, align 4, !dbg !16
  %175 = fneg float %171, !dbg !17
  %176 = sext i32 %unroll_step24988 to i64, !dbg !18
  %177 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %176, !dbg !18
  %178 = load i32, i32* %177, align 4, !dbg !18
  %179 = sext i32 %unroll_step24988 to i64, !dbg !18
  %180 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %179, !dbg !18
  %181 = load float, float* %180, align 4, !dbg !18
  %182 = sext i32 %unroll_step24988 to i64, !dbg !18
  %183 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %182, !dbg !18
  %184 = load float, float* %183, align 4, !dbg !18
  %185 = sext i32 %unroll_step24988 to i64, !dbg !18
  %186 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %185, !dbg !18
  %187 = load float, float* %186, align 4, !dbg !18
  %188 = sext i32 %unroll_step24988 to i64, !dbg !18
  %189 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %188, !dbg !18
  %190 = load i32, i32* %189, align 4, !dbg !18
  %191 = sext i32 %unroll_step24988 to i64, !dbg !18
  %192 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %191, !dbg !18
  %193 = load float, float* %192, align 4, !dbg !18
  %194 = sext i32 %unroll_step24988 to i64, !dbg !18
  %195 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %194, !dbg !18
  %196 = load float, float* %195, align 4, !dbg !18
  %197 = sext i32 %unroll_step24988 to i64, !dbg !18
  %198 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %197, !dbg !18
  %199 = load float, float* %198, align 4, !dbg !18
  %200 = sext i32 %unroll_step24988 to i64, !dbg !18
  %201 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1066, i64 0, i64 %200, !dbg !18
  %202 = load float, float* %201, align 4, !dbg !18
  %203 = sext i32 %unroll_step24988 to i64, !dbg !18
  %204 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %203, !dbg !18
  %205 = load i32, i32* %204, align 4, !dbg !18
  store i32 %190, i32* %state_2194932.repack, align 8, !dbg !18
  store float %193, float* %state_2194932.repack1160.repack, align 4, !dbg !18
  store float %196, float* %state_2194932.repack1160.repack1167, align 8, !dbg !18
  store float %199, float* %state_2194932.repack1160.repack1169, align 4, !dbg !18
  store float %202, float* %state_2194932.repack1162, align 8, !dbg !18
  store i32 %205, i32* %state_2194932.repack1164, align 4, !dbg !18
  %206 = shl nsw i32 %178, 2, !dbg !18
  %207 = sext i32 %206 to i64, !dbg !18
  %208 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %207, !dbg !18
  %209 = load i32, i32* %208, align 4, !dbg !18
  %210 = or i32 %206, 1, !dbg !18
  %211 = sext i32 %210 to i64, !dbg !18
  %212 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %211, !dbg !18
  %213 = load i32, i32* %212, align 4, !dbg !18
  %214 = or i32 %206, 2, !dbg !18
  %215 = sext i32 %214 to i64, !dbg !18
  %216 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %215, !dbg !18
  %217 = load i32, i32* %216, align 4, !dbg !18
  %218 = sext i32 %178 to i64, !dbg !18
  %.elt1171 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %218, i32 0, !dbg !18
  %.unpack1172 = load float, float* %.elt1171, align 4, !dbg !18
  %.elt1173 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %218, i32 1, !dbg !18
  %.unpack1174 = load float, float* %.elt1173, align 4, !dbg !18
  %.elt1175 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %218, i32 2, !dbg !18
  %.unpack1176 = load float, float* %.elt1175, align 4, !dbg !18
  %219 = sext i32 %209 to i64, !dbg !18
  %.elt1177 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %219, i32 0, !dbg !18
  %.unpack1178 = load float, float* %.elt1177, align 4, !dbg !18
  %.elt1179 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %219, i32 1, !dbg !18
  %.unpack1180 = load float, float* %.elt1179, align 4, !dbg !18
  %.elt1181 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %219, i32 2, !dbg !18
  %.unpack1182 = load float, float* %.elt1181, align 4, !dbg !18
  %220 = sext i32 %213 to i64, !dbg !18
  %.elt1183 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %220, i32 0, !dbg !18
  %.unpack1184 = load float, float* %.elt1183, align 4, !dbg !18
  %.elt1185 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %220, i32 1, !dbg !18
  %.unpack1186 = load float, float* %.elt1185, align 4, !dbg !18
  %.elt1187 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %220, i32 2, !dbg !18
  %.unpack1188 = load float, float* %.elt1187, align 4, !dbg !18
  %221 = sext i32 %217 to i64, !dbg !18
  %.elt1189 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %221, i32 0, !dbg !18
  %.unpack1190 = load float, float* %.elt1189, align 4, !dbg !18
  %.elt1191 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %221, i32 1, !dbg !18
  %.unpack1192 = load float, float* %.elt1191, align 4, !dbg !18
  %.elt1193 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %221, i32 2, !dbg !18
  %.unpack1194 = load float, float* %.elt1193, align 4, !dbg !18
  %222 = fsub float 1.000000e+00, %184, !dbg !18
  %223 = fsub float %222, %187, !dbg !18
  %224 = fmul float %223, %.unpack1178, !dbg !18
  %225 = fmul float %184, %.unpack1184, !dbg !18
  %226 = fadd float %224, %225, !dbg !18
  %227 = fmul float %187, %.unpack1190, !dbg !18
  %228 = fadd float %226, %227, !dbg !18
  %229 = fmul float %228, %228, !dbg !18
  %230 = fmul float %223, %.unpack1180, !dbg !18
  %231 = fmul float %184, %.unpack1186, !dbg !18
  %232 = fadd float %230, %231, !dbg !18
  %233 = fmul float %187, %.unpack1192, !dbg !18
  %234 = fadd float %232, %233, !dbg !18
  %235 = fmul float %234, %234, !dbg !18
  %236 = fadd float %229, %235, !dbg !18
  %237 = fmul float %223, %.unpack1182, !dbg !18
  %238 = fmul float %184, %.unpack1188, !dbg !18
  %239 = fadd float %237, %238, !dbg !18
  %240 = fmul float %187, %.unpack1194, !dbg !18
  %241 = fadd float %239, %240, !dbg !18
  %242 = fmul float %241, %241, !dbg !18
  %243 = fadd float %236, %242, !dbg !18
  %244 = call float @llvm.sqrt.f32(float %243), !dbg !18
  %245 = fmul float %168, %.unpack1172, !dbg !19
  %246 = fmul float %171, %.unpack1174, !dbg !19
  %247 = fadd float %245, %246, !dbg !19
  %248 = fmul float %174, %.unpack1176, !dbg !19
  %249 = fadd float %247, %248, !dbg !19
  %is_entering = fcmp ugt float %249, 0.000000e+00, !dbg !19
  %250 = fneg float %.unpack1172, !dbg !19
  %251 = fneg float %.unpack1174, !dbg !19
  %252 = fneg float %.unpack1176, !dbg !19
  %.pn1199 = select i1 %is_entering, float %250, float %.unpack1172, !dbg !19
  %.pn1197 = select i1 %is_entering, float %251, float %.unpack1174, !dbg !19
  %.pn1195 = select i1 %is_entering, float %252, float %.unpack1176, !dbg !19
  %253 = fdiv float 1.000000e+00, %244, !dbg !20
  %254 = fmul float %228, %253, !dbg !20
  %255 = fmul float %168, %254, !dbg !20
  %256 = fmul float %234, %253, !dbg !20
  %257 = fmul float %171, %256, !dbg !20
  %258 = fadd float %255, %257, !dbg !20
  %259 = fmul float %241, %253, !dbg !20
  %260 = fmul float %174, %259, !dbg !20
  %261 = fadd float %258, %260, !dbg !20
  %262 = fcmp ugt float %261, 0.000000e+00, !dbg !20
  %263 = fneg float %254, !dbg !20
  %264 = fneg float %256, !dbg !20
  %265 = fneg float %259, !dbg !20
  %.pn1205 = select i1 %262, float %263, float %254, !dbg !20
  %.pn1203 = select i1 %262, float %264, float %256, !dbg !20
  %.pn1201 = select i1 %262, float %265, float %259, !dbg !20
  %266 = sext i32 %209 to i64, !dbg !21
  %267 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %266, !dbg !21
  %.elt1206 = getelementptr inbounds %3, %3* %267, i64 0, i32 0, !dbg !21
  %.unpack1207 = load float, float* %.elt1206, align 4, !dbg !21
  %268 = sext i32 %213 to i64, !dbg !21
  %269 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %268, !dbg !21
  %.elt1210 = getelementptr inbounds %3, %3* %269, i64 0, i32 0, !dbg !21
  %.unpack1211 = load float, float* %.elt1210, align 4, !dbg !21
  %270 = sext i32 %217 to i64, !dbg !21
  %271 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %270, !dbg !21
  %.elt1214 = getelementptr inbounds %3, %3* %271, i64 0, i32 0, !dbg !21
  %.unpack1215 = load float, float* %.elt1214, align 4, !dbg !21
  %272 = fmul float %223, %.unpack1207, !dbg !21
  %273 = fmul float %184, %.unpack1211, !dbg !21
  %274 = fadd float %272, %273, !dbg !21
  %275 = fmul float %187, %.unpack1215, !dbg !21
  %276 = fadd float %274, %275, !dbg !21
  %277 = call float @llvm.floor.f32(float %276), !dbg !21
  %.elt1216 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %270, i32 1, !dbg !21
  %.unpack1217 = load float, float* %.elt1216, align 4, !dbg !21
  %.elt1212 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %268, i32 1, !dbg !21
  %.unpack1213 = load float, float* %.elt1212, align 4, !dbg !21
  %.elt1208 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %266, i32 1, !dbg !21
  %.unpack1209 = load float, float* %.elt1208, align 4, !dbg !21
  %278 = fmul float %223, %.unpack1209, !dbg !22
  %279 = fmul float %184, %.unpack1213, !dbg !22
  %280 = fadd float %278, %279, !dbg !22
  %281 = fmul float %187, %.unpack1217, !dbg !22
  %282 = fadd float %280, %281, !dbg !22
  %283 = call float @llvm.floor.f32(float %282), !dbg !22
  %284 = fsub float %276, %277, !dbg !22
  %u = fmul float %284, %8, !dbg !22
  %285 = fptosi float %u to i32, !dbg !22
  %286 = icmp sgt i32 %9, %285, !dbg !22
  %_cont49 = select i1 %286, i32 %285, i32 %9, !dbg !22
  %287 = fsub float %282, %283, !dbg !23
  %v = fmul float %287, %10, !dbg !23
  %288 = fptosi float %v to i32, !dbg !23
  %289 = icmp sgt i32 %11, %288, !dbg !23
  %. = select i1 %289, i32 %288, i32 %11, !dbg !24
  %290 = add nsw i32 %_cont49, 1, !dbg !25
  %291 = icmp slt i32 %290, %9, !dbg !25
  %_cont57 = select i1 %291, i32 %290, i32 %9, !dbg !25
  %292 = add nsw i32 %., 1, !dbg !26
  %293 = icmp slt i32 %292, %11, !dbg !26
  %.1486 = select i1 %293, i32 %292, i32 %11, !dbg !24
  %294 = mul nsw i32 %., %width_2188513, !dbg !27
  %295 = add nsw i32 %294, %_cont49, !dbg !27
  %296 = sext i32 %295 to i64, !dbg !27
  %297 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %296, !dbg !27
  %298 = load i32, i32* %297, align 4, !dbg !27
  %299 = add nsw i32 %294, %_cont57, !dbg !27
  %300 = sext i32 %299 to i64, !dbg !27
  %301 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %300, !dbg !27
  %302 = load i32, i32* %301, align 4, !dbg !27
  %303 = mul nsw i32 %.1486, %width_2188513, !dbg !27
  %304 = add nsw i32 %303, %_cont49, !dbg !27
  %305 = sext i32 %304 to i64, !dbg !27
  %306 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %305, !dbg !27
  %307 = load i32, i32* %306, align 4, !dbg !27
  %308 = add nsw i32 %303, %_cont57, !dbg !27
  %309 = sext i32 %308 to i64, !dbg !27
  %310 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %309, !dbg !27
  %311 = load i32, i32* %310, align 4, !dbg !27
  %.elt1218 = getelementptr inbounds %3, %3* %267, i64 0, i32 0, !dbg !27
  %.unpack1219 = load float, float* %.elt1218, align 4, !dbg !27
  %.elt1222 = getelementptr inbounds %3, %3* %269, i64 0, i32 0, !dbg !27
  %.unpack1223 = load float, float* %.elt1222, align 4, !dbg !27
  %.elt1226 = getelementptr inbounds %3, %3* %271, i64 0, i32 0, !dbg !27
  %.unpack1227 = load float, float* %.elt1226, align 4, !dbg !27
  %312 = fmul float %223, %.unpack1219, !dbg !27
  %313 = fmul float %184, %.unpack1223, !dbg !27
  %314 = fadd float %312, %313, !dbg !27
  %315 = fmul float %187, %.unpack1227, !dbg !27
  %316 = fadd float %314, %315, !dbg !27
  %317 = call float @llvm.floor.f32(float %316), !dbg !27
  %.elt1228 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %270, i32 1, !dbg !27
  %.unpack1229 = load float, float* %.elt1228, align 4, !dbg !27
  %.elt1224 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %268, i32 1, !dbg !27
  %.unpack1225 = load float, float* %.elt1224, align 4, !dbg !27
  %.elt1220 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %266, i32 1, !dbg !27
  %.unpack1221 = load float, float* %.elt1220, align 4, !dbg !27
  %318 = fmul float %223, %.unpack1221, !dbg !22
  %319 = fmul float %184, %.unpack1225, !dbg !22
  %320 = fadd float %318, %319, !dbg !22
  %321 = fmul float %187, %.unpack1229, !dbg !22
  %322 = fadd float %320, %321, !dbg !22
  %323 = call float @llvm.floor.f32(float %322), !dbg !22
  %324 = fsub float %316, %317, !dbg !22
  %u495 = fmul float %324, %8, !dbg !22
  %325 = fptosi float %u495 to i32, !dbg !22
  %326 = icmp sgt i32 %9, %325, !dbg !22
  %_cont69 = select i1 %326, i32 %325, i32 %9, !dbg !22
  %327 = fsub float %322, %323, !dbg !23
  %v496 = fmul float %327, %10, !dbg !23
  %328 = fptosi float %v496 to i32, !dbg !23
  %329 = icmp sgt i32 %11, %328, !dbg !23
  %.1487 = select i1 %329, i32 %328, i32 %11, !dbg !24
  %330 = add nsw i32 %_cont69, 1, !dbg !25
  %331 = icmp slt i32 %330, %9, !dbg !25
  %_cont77 = select i1 %331, i32 %330, i32 %9, !dbg !25
  %332 = add nsw i32 %.1487, 1, !dbg !26
  %333 = icmp slt i32 %332, %11, !dbg !26
  %.1488 = select i1 %333, i32 %332, i32 %11, !dbg !24
  %334 = sitofp i32 %328 to float, !dbg !27
  %ky = fsub float %v496, %334, !dbg !27
  %335 = fsub float 1.000000e+00, %ky, !dbg !27
  %336 = sitofp i32 %325 to float, !dbg !27
  %kx = fsub float %u495, %336, !dbg !27
  %337 = fsub float 1.000000e+00, %kx, !dbg !27
  %338 = mul nsw i32 %.1487, %width_2188513, !dbg !27
  %339 = add nsw i32 %338, %_cont69, !dbg !27
  %340 = sext i32 %339 to i64, !dbg !27
  %341 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %340, !dbg !27
  %342 = load i32, i32* %341, align 4, !dbg !27
  %r = and i32 %342, 255, !dbg !27
  %343 = uitofp i32 %r to float, !dbg !27
  %344 = fmul float %343, 0x3F70101020000000, !dbg !27
  %345 = fmul float %337, %344, !dbg !27
  %346 = add nsw i32 %338, %_cont77, !dbg !27
  %347 = sext i32 %346 to i64, !dbg !27
  %348 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %347, !dbg !27
  %349 = load i32, i32* %348, align 4, !dbg !27
  %r497 = and i32 %349, 255, !dbg !27
  %350 = uitofp i32 %r497 to float, !dbg !27
  %351 = fmul float %350, 0x3F70101020000000, !dbg !27
  %352 = fmul float %kx, %351, !dbg !27
  %353 = fadd float %345, %352, !dbg !27
  %354 = fmul float %335, %353, !dbg !27
  %355 = mul nsw i32 %.1488, %width_2188513, !dbg !27
  %356 = add nsw i32 %355, %_cont69, !dbg !27
  %357 = sext i32 %356 to i64, !dbg !27
  %358 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %357, !dbg !27
  %359 = load i32, i32* %358, align 4, !dbg !27
  %r498 = and i32 %359, 255, !dbg !27
  %360 = uitofp i32 %r498 to float, !dbg !27
  %361 = fmul float %360, 0x3F70101020000000, !dbg !27
  %362 = fmul float %337, %361, !dbg !27
  %363 = add nsw i32 %355, %_cont77, !dbg !27
  %364 = sext i32 %363 to i64, !dbg !27
  %365 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %364, !dbg !27
  %366 = load i32, i32* %365, align 4, !dbg !27
  %r499 = and i32 %366, 255, !dbg !27
  %367 = uitofp i32 %r499 to float, !dbg !27
  %368 = fmul float %367, 0x3F70101020000000, !dbg !27
  %369 = fmul float %kx, %368, !dbg !27
  %370 = fadd float %362, %369, !dbg !27
  %371 = fmul float %ky, %370, !dbg !27
  %372 = fadd float %354, %371, !dbg !27
  %373 = fmul float %372, 0x3FCB367A00000000, !dbg !27
  %374 = lshr i32 %342, 8, !dbg !27
  %g = and i32 %374, 255, !dbg !27
  %375 = uitofp i32 %g to float, !dbg !27
  %376 = fmul float %375, 0x3F70101020000000, !dbg !27
  %377 = fmul float %337, %376, !dbg !27
  %378 = lshr i32 %349, 8, !dbg !27
  %g500 = and i32 %378, 255, !dbg !27
  %379 = uitofp i32 %g500 to float, !dbg !27
  %380 = fmul float %379, 0x3F70101020000000, !dbg !27
  %381 = fmul float %kx, %380, !dbg !27
  %382 = fadd float %377, %381, !dbg !27
  %383 = fmul float %335, %382, !dbg !27
  %384 = lshr i32 %359, 8, !dbg !27
  %g501 = and i32 %384, 255, !dbg !27
  %385 = uitofp i32 %g501 to float, !dbg !27
  %386 = fmul float %385, 0x3F70101020000000, !dbg !27
  %387 = fmul float %337, %386, !dbg !27
  %388 = lshr i32 %366, 8, !dbg !27
  %g502 = and i32 %388, 255, !dbg !27
  %389 = uitofp i32 %g502 to float, !dbg !27
  %390 = fmul float %389, 0x3F70101020000000, !dbg !27
  %391 = fmul float %kx, %390, !dbg !27
  %392 = fadd float %387, %391, !dbg !27
  %393 = fmul float %ky, %392, !dbg !27
  %394 = fadd float %383, %393, !dbg !27
  %395 = fmul float %394, 0x3FE6E2EB20000000, !dbg !27
  %396 = fadd float %373, %395, !dbg !27
  %397 = lshr i32 %342, 16, !dbg !27
  %b = and i32 %397, 255, !dbg !27
  %398 = uitofp i32 %b to float, !dbg !27
  %399 = fmul float %398, 0x3F70101020000000, !dbg !27
  %400 = fmul float %337, %399, !dbg !27
  %401 = lshr i32 %349, 16, !dbg !27
  %b503 = and i32 %401, 255, !dbg !27
  %402 = uitofp i32 %b503 to float, !dbg !27
  %403 = fmul float %402, 0x3F70101020000000, !dbg !27
  %404 = fmul float %kx, %403, !dbg !27
  %405 = fadd float %400, %404, !dbg !27
  %406 = fmul float %335, %405, !dbg !27
  %407 = lshr i32 %359, 16, !dbg !27
  %b504 = and i32 %407, 255, !dbg !27
  %408 = uitofp i32 %b504 to float, !dbg !27
  %409 = fmul float %408, 0x3F70101020000000, !dbg !27
  %410 = fmul float %337, %409, !dbg !27
  %411 = lshr i32 %366, 16, !dbg !27
  %b505 = and i32 %411, 255, !dbg !27
  %412 = uitofp i32 %b505 to float, !dbg !27
  %413 = fmul float %412, 0x3F70101020000000, !dbg !27
  %414 = fmul float %kx, %413, !dbg !27
  %415 = fadd float %410, %414, !dbg !27
  %416 = fmul float %ky, %415, !dbg !27
  %417 = fadd float %406, %416, !dbg !27
  %418 = fmul float %417, 0x3FB27BB300000000, !dbg !27
  %419 = fadd float %396, %418, !dbg !27
  %420 = sitofp i32 %288 to float, !dbg !27
  %ky506 = fsub float %v, %420, !dbg !27
  %421 = fsub float 1.000000e+00, %ky506, !dbg !27
  %422 = sitofp i32 %285 to float, !dbg !27
  %kx507 = fsub float %u, %422, !dbg !27
  %423 = fsub float 1.000000e+00, %kx507, !dbg !27
  %r508 = and i32 %298, 255, !dbg !27
  %424 = uitofp i32 %r508 to float, !dbg !27
  %425 = fmul float %424, 0x3F70101020000000, !dbg !27
  %426 = fmul float %423, %425, !dbg !27
  %r509 = and i32 %302, 255, !dbg !27
  %427 = uitofp i32 %r509 to float, !dbg !27
  %428 = fmul float %427, 0x3F70101020000000, !dbg !27
  %429 = fmul float %kx507, %428, !dbg !27
  %430 = fadd float %426, %429, !dbg !27
  %431 = fmul float %421, %430, !dbg !27
  %r510 = and i32 %307, 255, !dbg !27
  %432 = uitofp i32 %r510 to float, !dbg !27
  %433 = fmul float %432, 0x3F70101020000000, !dbg !27
  %434 = fmul float %423, %433, !dbg !27
  %r511 = and i32 %311, 255, !dbg !27
  %435 = uitofp i32 %r511 to float, !dbg !27
  %436 = fmul float %435, 0x3F70101020000000, !dbg !27
  %437 = fmul float %kx507, %436, !dbg !27
  %438 = fadd float %434, %437, !dbg !27
  %439 = fmul float %ky506, %438, !dbg !27
  %440 = fadd float %431, %439, !dbg !27
  %441 = fmul float %440, 0x3FCB367A00000000, !dbg !27
  %442 = lshr i32 %298, 8, !dbg !27
  %g512 = and i32 %442, 255, !dbg !27
  %443 = uitofp i32 %g512 to float, !dbg !27
  %444 = fmul float %443, 0x3F70101020000000, !dbg !27
  %445 = fmul float %423, %444, !dbg !27
  %446 = lshr i32 %302, 8, !dbg !27
  %g513 = and i32 %446, 255, !dbg !27
  %447 = uitofp i32 %g513 to float, !dbg !27
  %448 = fmul float %447, 0x3F70101020000000, !dbg !27
  %449 = fmul float %kx507, %448, !dbg !27
  %450 = fadd float %445, %449, !dbg !27
  %451 = fmul float %421, %450, !dbg !27
  %452 = lshr i32 %307, 8, !dbg !27
  %g514 = and i32 %452, 255, !dbg !27
  %453 = uitofp i32 %g514 to float, !dbg !27
  %454 = fmul float %453, 0x3F70101020000000, !dbg !27
  %455 = fmul float %423, %454, !dbg !27
  %456 = lshr i32 %311, 8, !dbg !27
  %g515 = and i32 %456, 255, !dbg !27
  %457 = uitofp i32 %g515 to float, !dbg !27
  %458 = fmul float %457, 0x3F70101020000000, !dbg !27
  %459 = fmul float %kx507, %458, !dbg !27
  %460 = fadd float %455, %459, !dbg !27
  %461 = fmul float %ky506, %460, !dbg !27
  %462 = fadd float %451, %461, !dbg !27
  %463 = fmul float %462, 0x3FE6E2EB20000000, !dbg !27
  %464 = fadd float %441, %463, !dbg !27
  %465 = lshr i32 %298, 16, !dbg !27
  %b516 = and i32 %465, 255, !dbg !27
  %466 = uitofp i32 %b516 to float, !dbg !27
  %467 = fmul float %466, 0x3F70101020000000, !dbg !27
  %468 = fmul float %423, %467, !dbg !27
  %469 = lshr i32 %302, 16, !dbg !27
  %b517 = and i32 %469, 255, !dbg !27
  %470 = uitofp i32 %b517 to float, !dbg !27
  %471 = fmul float %470, 0x3F70101020000000, !dbg !27
  %472 = fmul float %kx507, %471, !dbg !27
  %473 = fadd float %468, %472, !dbg !27
  %474 = fmul float %421, %473, !dbg !27
  %475 = lshr i32 %307, 16, !dbg !27
  %b518 = and i32 %475, 255, !dbg !27
  %476 = uitofp i32 %b518 to float, !dbg !27
  %477 = fmul float %476, 0x3F70101020000000, !dbg !27
  %478 = fmul float %423, %477, !dbg !27
  %479 = lshr i32 %311, 16, !dbg !27
  %b519 = and i32 %479, 255, !dbg !27
  %480 = uitofp i32 %b519 to float, !dbg !27
  %481 = fmul float %480, 0x3F70101020000000, !dbg !27
  %482 = fmul float %kx507, %481, !dbg !27
  %483 = fadd float %478, %482, !dbg !27
  %484 = fmul float %ky506, %483, !dbg !27
  %485 = fadd float %474, %484, !dbg !27
  %486 = fmul float %485, 0x3FB27BB300000000, !dbg !27
  %487 = fadd float %464, %486, !dbg !27
  %488 = fadd float %419, %487, !dbg !27
  %489 = fcmp oeq float %488, 0.000000e+00, !dbg !27
  %490 = fdiv float %419, %488, !dbg !27
  %491 = select i1 %489, float 0.000000e+00, float %490, !dbg !27
  %492 = load i32, i32* %12, align 8, !dbg !27
  %493 = icmp eq i32 %492, 0, !dbg !27
  %494 = select i1 %493, i32 1, i32 %492, !dbg !27
  %495 = shl i32 %494, 13, !dbg !27
  %496 = xor i32 %494, %495, !dbg !27
  %497 = lshr i32 %496, 17, !dbg !27
  %498 = xor i32 %496, %497, !dbg !27
  %499 = shl i32 %498, 5, !dbg !27
  %500 = xor i32 %498, %499, !dbg !27
  %501 = and i32 %500, 8388607, !dbg !27
  %502 = or i32 %501, 1065353216, !dbg !27
  %503 = bitcast i32 %502 to float, !dbg !27
  %504 = fadd float %503, -1.000000e+00, !dbg !27
  %505 = fcmp ugt float %491, %504, !dbg !27
  store i32 %500, i32* %12, align 8, !dbg !27
  %506 = icmp eq i32 %500, 0, !dbg !27
  %507 = select i1 %506, i32 1, i32 %500, !dbg !27
  %508 = shl i32 %507, 13, !dbg !27
  %509 = xor i32 %507, %508, !dbg !27
  %510 = lshr i32 %509, 17, !dbg !27
  %511 = xor i32 %509, %510, !dbg !27
  %512 = shl i32 %511, 5, !dbg !27
  %513 = xor i32 %511, %512, !dbg !27
  %514 = icmp eq i32 %513, 0, !dbg !27
  %515 = select i1 %514, i32 1, i32 %513, !dbg !27
  %516 = shl i32 %515, 13, !dbg !27
  %517 = xor i32 %515, %516, !dbg !27
  %518 = lshr i32 %517, 17, !dbg !27
  %519 = xor i32 %517, %518, !dbg !27
  %520 = shl i32 %519, 5, !dbg !27
  %521 = xor i32 %519, %520, !dbg !27
  %522 = and i32 %521, 8388607, !dbg !27
  %523 = or i32 %522, 1065353216, !dbg !27
  %524 = bitcast i32 %523 to float, !dbg !27
  %525 = fadd float %524, -1.000000e+00, !dbg !27
  %526 = and i32 %513, 8388607, !dbg !27
  %527 = or i32 %526, 1065353216, !dbg !27
  %528 = bitcast i32 %527 to float, !dbg !27
  %529 = fadd float %528, -1.000000e+00, !dbg !27
  %phi = fmul float %529, 0x401921FB60000000, !dbg !27
  %530 = fmul float %.pn1203, %175, !dbg !27
  %531 = fmul float %168, %.pn1205, !dbg !27
  %532 = fsub float %530, %531, !dbg !27
  %533 = fmul float %174, %.pn1201, !dbg !27
  %534 = fsub float %532, %533, !dbg !27
  %535 = fmul float %534, 2.000000e+00, !dbg !27
  %536 = fmul float %.pn1201, %535, !dbg !27
  %537 = fadd float %536, %174, !dbg !27
  %538 = fmul float %.pn1205, %535, !dbg !27
  %539 = fadd float %538, %168, !dbg !27
  %540 = fmul float %.pn1203, %535, !dbg !27
  %541 = fadd float %540, %171, !dbg !27
  %542 = fsub float 1.000000e+00, %491, !dbg !27
  %543 = fmul float %440, 0x3FD45F3060000000, !dbg !27
  %544 = fmul float %462, 0x3FD45F3060000000, !dbg !27
  %545 = fmul float %485, 0x3FD45F3060000000, !dbg !27
  store i32 %521, i32* %12, align 8, !dbg !28
  br i1 %505, label %expr_false82, label %expr_true111, !dbg !27

expr_false82:                                     ; preds = %expr_true26
  %546 = bitcast float %525 to i32, !dbg !28
  %547 = uitofp i32 %546 to float, !dbg !28
  %y = fmul float %547, 0x3E80000000000000, !dbg !28
  %548 = fadd float %y, 0xC05F0E6EE0000000, !dbg !28
  %549 = and i32 %546, 8388607, !dbg !28
  %mx = or i32 %549, 1056964608, !dbg !28
  %550 = bitcast i32 %mx to float, !dbg !28
  %551 = fmul float %550, 0x3FF7F7EEA0000000, !dbg !28
  %552 = fsub float %548, %551, !dbg !28
  %553 = fadd float %550, 0x3FD6889F20000000, !dbg !28
  %554 = fdiv float 0x3FFB9D3460000000, %553, !dbg !28
  %555 = fsub float %552, %554, !dbg !28
  %556 = fmul float %555, 0x3FB3B13B20000000, !dbg !28
  %557 = fcmp olt float %556, -1.260000e+02, !dbg !28
  %558 = select i1 %557, float -1.260000e+02, float %556, !dbg !28
  %559 = fadd float %558, 0x405E518A20000000, !dbg !28
  %560 = fptosi float %558 to i32, !dbg !28
  %561 = sitofp i32 %560 to float, !dbg !28
  %562 = fsub float %558, %561, !dbg !28
  %563 = fcmp olt float %556, 0.000000e+00, !dbg !28
  %564 = select i1 %563, float 1.000000e+00, float 0.000000e+00, !dbg !28
  %z = fadd float %562, %564, !dbg !28
  %565 = fsub float 0x40135EBF00000000, %z, !dbg !28
  %566 = fdiv float 0x403BBA5FC0000000, %565, !dbg !28
  %567 = fadd float %559, %566, !dbg !28
  %568 = fmul float %z, 0x3FF7D791A0000000, !dbg !28
  %569 = fsub float %567, %568, !dbg !28
  %570 = fmul float %569, 0x4160000000000000, !dbg !28
  %571 = fptosi float %570 to i32, !dbg !28
  %572 = bitcast i32 %571 to float, !dbg !28
  %573 = call float @llvm.minnum.f32(float %572, float 1.000000e+00), !dbg !28
  %574 = fmul float %573, %573, !dbg !29
  %575 = fsub float 1.000000e+00, %574, !dbg !29
  %576 = call float @llvm.sqrt.f32(float %575), !dbg !29
  %577 = call float @llvm.cos.f32(float %phi), !dbg !30
  %578 = call float @llvm.sin.f32(float %phi), !dbg !31
  %579 = fcmp oge float %537, 0.000000e+00, !dbg !32
  %580 = select i1 %579, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %581 = fmul float %580, %539, !dbg !32
  %582 = fmul float %581, %539, !dbg !32
  %583 = fadd float %580, %537, !dbg !32
  %a = fdiv float -1.000000e+00, %583, !dbg !32
  %584 = fmul float %582, %a, !dbg !32
  %585 = fadd float %584, 1.000000e+00, !dbg !32
  %x = fmul float %576, %577, !dbg !32
  %586 = fmul float %585, %x, !dbg !32
  %587 = fmul float %539, %541, !dbg !32
  %b520 = fmul float %587, %a, !dbg !32
  %y521 = fmul float %576, %578, !dbg !32
  %588 = fmul float %b520, %y521, !dbg !32
  %589 = fadd float %586, %588, !dbg !32
  %590 = fmul float %539, %573, !dbg !32
  %591 = fadd float %589, %590, !dbg !32
  %592 = fmul float %591, %.pn1205, !dbg !32
  %593 = fmul float %580, %b520, !dbg !32
  %594 = fmul float %593, %x, !dbg !32
  %595 = fmul float %541, %541, !dbg !32
  %596 = fmul float %595, %a, !dbg !32
  %597 = fadd float %580, %596, !dbg !32
  %598 = fmul float %597, %y521, !dbg !32
  %599 = fadd float %594, %598, !dbg !32
  %600 = fmul float %541, %573, !dbg !32
  %601 = fadd float %599, %600, !dbg !32
  %602 = fmul float %601, %.pn1203, !dbg !32
  %603 = fadd float %592, %602, !dbg !32
  %604 = fneg float %580, !dbg !32
  %605 = fmul float %539, %604, !dbg !32
  %606 = fmul float %605, %x, !dbg !32
  %607 = fmul float %541, %y521, !dbg !32
  %608 = fsub float %606, %607, !dbg !32
  %609 = fmul float %537, %573, !dbg !32
  %610 = fadd float %608, %609, !dbg !32
  %611 = fmul float %610, %.pn1201, !dbg !32
  %612 = fadd float %603, %611, !dbg !32
  %613 = fcmp oge float %612, 0.000000e+00, !dbg !32
  %positive_cos_cont93 = select i1 %613, float %612, float 0.000000e+00, !dbg !32
  %614 = fcmp une float %573, 0.000000e+00, !dbg !33
  %615 = fdiv float %525, %573, !dbg !33
  %.op = fmul float %615, 1.300000e+01, !dbg !33
  %.op.op = fmul float %.op, 0x3FC45F3060000000, !dbg !33
  %pdf = select i1 %614, float %.op.op, float 0.000000e+00, !dbg !33
  %616 = fcmp ogt float %pdf, 0.000000e+00, !dbg !33
  br i1 %616, label %expr_true95, label %infix_result, !dbg !33

expr_true95:                                      ; preds = %expr_false82
  %617 = fmul float %591, %.pn1199, !dbg !34
  %618 = fmul float %601, %.pn1197, !dbg !34
  %619 = fadd float %617, %618, !dbg !34
  %620 = fmul float %610, %.pn1195, !dbg !34
  %621 = fadd float %619, %620, !dbg !34
  %622 = fcmp ogt float %621, 0.000000e+00, !dbg !34
  br i1 %622, label %expr_true97, label %infix_result, !dbg !34

expr_true97:                                      ; preds = %expr_true95
  br label %infix_result, !dbg !35

infix_result:                                     ; preds = %expr_false82, %expr_true95, %expr_true97
  %infix_result98 = phi i1 [ true, %expr_true97 ], [ false, %expr_true95 ], [ false, %expr_false82 ], !dbg !36
  %pdf. = select i1 %infix_result98, float %pdf, float 1.000000e+00, !dbg !37
  br i1 %infix_result98, label %expr_true104, label %if_join105, !dbg !38

expr_true104:                                     ; preds = %infix_result
  %623 = fmul float %pdf, 1.400000e+01, !dbg !39
  %624 = fdiv float %623, 1.300000e+01, !dbg !39
  %625 = fmul float %372, %624, !dbg !39
  %626 = insertvalue %5 undef, float %625, 0, !dbg !39
  %627 = fmul float %394, %624, !dbg !39
  %628 = insertvalue %5 %626, float %627, 1, !dbg !39
  %629 = fmul float %417, %624, !dbg !39
  %630 = insertvalue %5 %628, float %629, 2, !dbg !39
  br label %if_join105, !dbg !39

if_join105:                                       ; preds = %infix_result, %expr_true104
  %if_join106 = phi %5 [ %630, %expr_true104 ], [ zeroinitializer, %infix_result ], !dbg !40
  %.op1517 = fmul float %612, 0x3FD45F3060000000, !dbg !41
  %631 = select i1 %613, float %.op1517, float 0.000000e+00, !dbg !41
  %632 = fmul float %542, %631, !dbg !41
  %633 = fmul float %491, %pdf., !dbg !41
  %634 = fadd float %632, %633, !dbg !41
  %635 = fmul float %542, %543, !dbg !41
  %636 = extractvalue %5 %if_join106, 0, !dbg !41
  %637 = fmul float %491, %636, !dbg !41
  %638 = fadd float %635, %637, !dbg !41
  %639 = fmul float %542, %544, !dbg !41
  %640 = extractvalue %5 %if_join106, 1, !dbg !41
  %641 = fmul float %491, %640, !dbg !41
  %642 = fadd float %639, %641, !dbg !41
  %643 = extractvalue %5 %if_join106, 2, !dbg !41
  br label %if_join143, !dbg !41

expr_true111:                                     ; preds = %expr_true26
  %644 = fsub float 1.000000e+00, %525, !dbg !28
  %645 = call float @llvm.sqrt.f32(float %644), !dbg !28
  %646 = call float @llvm.sqrt.f32(float %525), !dbg !42
  %647 = call float @llvm.cos.f32(float %phi), !dbg !43
  %648 = call float @llvm.sin.f32(float %phi), !dbg !31
  %649 = fmul float %645, 0x3FD45F3060000000, !dbg !32
  %650 = fcmp ogt float %649, 0.000000e+00, !dbg !32
  %651 = fcmp oge float %.pn1201, 0.000000e+00, !dbg !32
  %652 = select i1 %651, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %653 = fmul float %652, %.pn1205, !dbg !32
  %654 = fmul float %653, %.pn1205, !dbg !32
  %655 = fadd float %652, %.pn1201, !dbg !32
  %a522 = fdiv float -1.000000e+00, %655, !dbg !32
  %656 = fmul float %654, %a522, !dbg !32
  %657 = fadd float %656, 1.000000e+00, !dbg !32
  %x523 = fmul float %646, %647, !dbg !32
  %658 = fmul float %657, %x523, !dbg !32
  %659 = fmul float %.pn1205, %.pn1203, !dbg !32
  %b524 = fmul float %659, %a522, !dbg !32
  %y525 = fmul float %646, %648, !dbg !32
  %660 = fmul float %b524, %y525, !dbg !32
  %661 = fadd float %658, %660, !dbg !32
  %662 = fmul float %.pn1205, %645, !dbg !32
  %663 = fadd float %661, %662, !dbg !32
  %664 = fmul float %652, %b524, !dbg !32
  %665 = fmul float %664, %x523, !dbg !32
  %666 = fmul float %.pn1203, %.pn1203, !dbg !32
  %667 = fmul float %666, %a522, !dbg !32
  %668 = fadd float %652, %667, !dbg !32
  %669 = fmul float %668, %y525, !dbg !32
  %670 = fadd float %665, %669, !dbg !32
  %671 = fmul float %.pn1203, %645, !dbg !32
  %672 = fadd float %670, %671, !dbg !32
  %673 = fneg float %652, !dbg !32
  %674 = fmul float %.pn1205, %673, !dbg !32
  %675 = fmul float %674, %x523, !dbg !32
  %676 = fmul float %.pn1203, %y525, !dbg !32
  %677 = fsub float %675, %676, !dbg !32
  %678 = fmul float %.pn1201, %645, !dbg !32
  %679 = fadd float %677, %678, !dbg !32
  br i1 %650, label %expr_true121, label %infix_result125, !dbg !32

expr_true121:                                     ; preds = %expr_true111
  %680 = fmul float %663, %.pn1199, !dbg !34
  %681 = fmul float %672, %.pn1197, !dbg !34
  %682 = fadd float %680, %681, !dbg !34
  %683 = fmul float %679, %.pn1195, !dbg !34
  %684 = fadd float %682, %683, !dbg !34
  %685 = fcmp ogt float %684, 0.000000e+00, !dbg !34
  br i1 %685, label %expr_true124, label %infix_result125, !dbg !34

expr_true124:                                     ; preds = %expr_true121
  br label %infix_result125, !dbg !35

infix_result125:                                  ; preds = %expr_true111, %expr_true121, %expr_true124
  %infix_result126 = phi i1 [ true, %expr_true124 ], [ false, %expr_true121 ], [ false, %expr_true111 ], !dbg !36
  %.1490 = select i1 %infix_result126, float %649, float 1.000000e+00, !dbg !37
  %686 = insertvalue %5 undef, float %543, 0, !dbg !38
  %687 = insertvalue %5 %686, float %544, 1, !dbg !38
  %688 = insertvalue %5 %687, float %545, 2, !dbg !38
  %if_join134 = select i1 %infix_result126, %5 %688, %5 zeroinitializer, !dbg !38
  %689 = fmul float %663, %539, !dbg !40
  %690 = fmul float %672, %541, !dbg !40
  %691 = fadd float %689, %690, !dbg !40
  %692 = fmul float %679, %537, !dbg !40
  %693 = fadd float %691, %692, !dbg !40
  %694 = fcmp oge float %693, 0.000000e+00, !dbg !40
  %.1491 = select i1 %694, float %693, float 0.000000e+00, !dbg !44
  %positive_cos_cont142 = select i1 %694, float %693, float 0.000000e+00, !dbg !45
  %695 = fmul float %542, %.1490, !dbg !46
  %696 = bitcast float %.1491 to i32, !dbg !46
  %697 = uitofp i32 %696 to float, !dbg !46
  %y526 = fmul float %697, 0x3E80000000000000, !dbg !46
  %698 = fadd float %y526, 0xC05F0E6EE0000000, !dbg !46
  %699 = and i32 %696, 8388607, !dbg !46
  %mx527 = or i32 %699, 1056964608, !dbg !46
  %700 = bitcast i32 %mx527 to float, !dbg !46
  %701 = fmul float %700, 0x3FF7F7EEA0000000, !dbg !46
  %702 = fsub float %698, %701, !dbg !46
  %703 = fadd float %700, 0x3FD6889F20000000, !dbg !46
  %704 = fdiv float 0x3FFB9D3460000000, %703, !dbg !46
  %705 = fsub float %702, %704, !dbg !46
  %706 = fmul float %705, 1.200000e+01, !dbg !46
  %707 = fcmp olt float %706, -1.260000e+02, !dbg !46
  %708 = select i1 %707, float -1.260000e+02, float %706, !dbg !46
  %709 = fadd float %708, 0x405E518A20000000, !dbg !46
  %710 = fptosi float %708 to i32, !dbg !46
  %711 = sitofp i32 %710 to float, !dbg !46
  %712 = fsub float %708, %711, !dbg !46
  %713 = fcmp olt float %706, 0.000000e+00, !dbg !46
  %714 = select i1 %713, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z528 = fadd float %712, %714, !dbg !46
  %715 = fsub float 0x40135EBF00000000, %z528, !dbg !46
  %716 = fdiv float 0x403BBA5FC0000000, %715, !dbg !46
  %717 = fadd float %709, %716, !dbg !46
  %718 = fmul float %z528, 0x3FF7D791A0000000, !dbg !46
  %719 = fsub float %717, %718, !dbg !46
  %720 = fmul float %719, 0x4160000000000000, !dbg !46
  %721 = fptosi float %720 to i32, !dbg !46
  %722 = bitcast i32 %721 to float, !dbg !46
  %723 = fmul float %722, 1.300000e+01, !dbg !46
  %724 = fmul float %723, 0x3FC45F3060000000, !dbg !46
  %725 = fmul float %491, %724, !dbg !46
  %726 = fadd float %695, %725, !dbg !46
  %727 = extractvalue %5 %if_join134, 0, !dbg !46
  %728 = fmul float %542, %727, !dbg !46
  %729 = bitcast float %positive_cos_cont142 to i32, !dbg !46
  %730 = uitofp i32 %729 to float, !dbg !46
  %y529 = fmul float %730, 0x3E80000000000000, !dbg !46
  %731 = fadd float %y529, 0xC05F0E6EE0000000, !dbg !46
  %732 = and i32 %729, 8388607, !dbg !46
  %mx530 = or i32 %732, 1056964608, !dbg !46
  %733 = bitcast i32 %mx530 to float, !dbg !46
  %734 = fmul float %733, 0x3FF7F7EEA0000000, !dbg !46
  %735 = fsub float %731, %734, !dbg !46
  %736 = fadd float %733, 0x3FD6889F20000000, !dbg !46
  %737 = fdiv float 0x3FFB9D3460000000, %736, !dbg !46
  %738 = fsub float %735, %737, !dbg !46
  %739 = fmul float %738, 1.200000e+01, !dbg !46
  %740 = fcmp olt float %739, -1.260000e+02, !dbg !46
  %741 = select i1 %740, float -1.260000e+02, float %739, !dbg !46
  %742 = fadd float %741, 0x405E518A20000000, !dbg !46
  %743 = fptosi float %741 to i32, !dbg !46
  %744 = sitofp i32 %743 to float, !dbg !46
  %745 = fsub float %741, %744, !dbg !46
  %746 = fcmp olt float %739, 0.000000e+00, !dbg !46
  %747 = select i1 %746, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z531 = fadd float %745, %747, !dbg !46
  %748 = fsub float 0x40135EBF00000000, %z531, !dbg !46
  %749 = fdiv float 0x403BBA5FC0000000, %748, !dbg !46
  %750 = fadd float %742, %749, !dbg !46
  %751 = fmul float %z531, 0x3FF7D791A0000000, !dbg !46
  %752 = fsub float %750, %751, !dbg !46
  %753 = fmul float %752, 0x4160000000000000, !dbg !46
  %754 = fptosi float %753 to i32, !dbg !46
  %755 = bitcast i32 %754 to float, !dbg !46
  %756 = fmul float %755, 1.400000e+01, !dbg !46
  %757 = fmul float %756, 0x3FC45F3060000000, !dbg !46
  %758 = fmul float %372, %757, !dbg !46
  %759 = fmul float %491, %758, !dbg !46
  %760 = fadd float %728, %759, !dbg !46
  %761 = extractvalue %5 %if_join134, 1, !dbg !46
  %762 = fmul float %542, %761, !dbg !46
  %763 = fmul float %394, %757, !dbg !46
  %764 = fmul float %491, %763, !dbg !46
  %765 = fadd float %762, %764, !dbg !46
  %766 = extractvalue %5 %if_join134, 2, !dbg !46
  %767 = fmul float %417, %757, !dbg !46
  br label %if_join143, !dbg !46

if_join143:                                       ; preds = %infix_result125, %if_join105
  %.sink1493 = phi float [ %767, %infix_result125 ], [ %643, %if_join105 ]
  %.pn = phi float [ %766, %infix_result125 ], [ %545, %if_join105 ]
  %.pn1239 = phi float [ %663, %infix_result125 ], [ %591, %if_join105 ]
  %.pn1237 = phi float [ %672, %infix_result125 ], [ %601, %if_join105 ]
  %.pn1235 = phi float [ %679, %infix_result125 ], [ %610, %if_join105 ]
  %positive_cos_cont93.pn = phi float [ %645, %infix_result125 ], [ %positive_cos_cont93, %if_join105 ]
  %if_join145 = phi float [ %726, %infix_result125 ], [ %634, %if_join105 ], !dbg !47
  %.pn1245 = phi float [ %760, %infix_result125 ], [ %638, %if_join105 ]
  %.pn1243 = phi float [ %765, %infix_result125 ], [ %642, %if_join105 ]
  %.sink = fmul float %542, %.pn, !dbg !48
  %768 = fmul float %491, %.sink1493, !dbg !48
  %769 = fadd float %.sink, %768, !dbg !48
  %.unpack1247 = load float, float* %.elt1246, align 4, !dbg !47
  %.unpack1249 = load float, float* %.elt1248, align 8, !dbg !47
  %.unpack1251 = load float, float* %.elt1250, align 4, !dbg !47
  %770 = load i32, i32* %12, align 8, !dbg !18
  %771 = load i32, i32* %13, align 4, !dbg !18
  %772 = sext i32 %unroll_step24988 to i64, !dbg !18
  %773 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %772, !dbg !18
  %774 = fmul float %168, %181, !dbg !18
  %775 = fadd float %159, %774, !dbg !18
  store float %775, float* %773, align 4, !dbg !18
  %776 = sext i32 %unroll_step24988 to i64, !dbg !18
  %777 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %776, !dbg !18
  %778 = fmul float %171, %181, !dbg !18
  %779 = fadd float %162, %778, !dbg !18
  store float %779, float* %777, align 4, !dbg !18
  %780 = sext i32 %unroll_step24988 to i64, !dbg !18
  %781 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %780, !dbg !18
  %782 = fmul float %174, %181, !dbg !18
  %783 = fadd float %165, %782, !dbg !18
  store float %783, float* %781, align 4, !dbg !18
  %784 = sext i32 %unroll_step24988 to i64, !dbg !18
  %785 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %784, !dbg !18
  store float %.pn1239, float* %785, align 4, !dbg !18
  %786 = sext i32 %unroll_step24988 to i64, !dbg !18
  %787 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %786, !dbg !18
  store float %.pn1237, float* %787, align 4, !dbg !18
  %788 = sext i32 %unroll_step24988 to i64, !dbg !18
  %789 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %788, !dbg !18
  store float %.pn1235, float* %789, align 4, !dbg !18
  %790 = sext i32 %unroll_step24988 to i64, !dbg !18
  %791 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %790, !dbg !18
  store float 0x3F1A36E2E0000000, float* %791, align 4, !dbg !18
  %792 = sext i32 %unroll_step24988 to i64, !dbg !18
  %793 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %792, !dbg !18
  store float 0x47EFFFFFE0000000, float* %793, align 4, !dbg !18
  %794 = sext i32 %unroll_step24988 to i64, !dbg !18
  %795 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %794, !dbg !18
  store i32 %770, i32* %795, align 4, !dbg !18
  %796 = sext i32 %unroll_step24988 to i64, !dbg !18
  %797 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %796, !dbg !18
  %798 = fmul float %.unpack1247, %.pn1245, !dbg !18
  %799 = fdiv float %positive_cos_cont93.pn, %if_join145, !dbg !18
  %800 = fmul float %798, %799, !dbg !18
  store float %800, float* %797, align 4, !dbg !18
  %801 = sext i32 %unroll_step24988 to i64, !dbg !18
  %802 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %801, !dbg !18
  %803 = fmul float %.unpack1249, %.pn1243, !dbg !18
  %804 = fmul float %803, %799, !dbg !18
  store float %804, float* %802, align 4, !dbg !18
  %805 = sext i32 %unroll_step24988 to i64, !dbg !18
  %806 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %805, !dbg !18
  %807 = fmul float %.unpack1251, %769, !dbg !18
  %808 = fmul float %807, %799, !dbg !18
  store float %808, float* %806, align 4, !dbg !18
  %809 = sext i32 %unroll_step24988 to i64, !dbg !18
  %810 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %809, !dbg !18
  %811 = fdiv float 1.000000e+00, %if_join145, !dbg !18
  store float %811, float* %810, align 4, !dbg !18
  %812 = sext i32 %unroll_step24988 to i64, !dbg !18
  %813 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %812, !dbg !18
  %814 = add nsw i32 %771, 1, !dbg !18
  store i32 %814, i32* %813, align 4, !dbg !18
  %815 = add nsw i32 %unroll_step24988, 1, !dbg !18
  %816 = icmp slt i32 %815, %148, !dbg !15
  br i1 %816, label %expr_true26, label %expr_false25, !dbg !15

expr_true156:                                     ; preds = %expr_false19, %expr_true156
  %unroll_step21987 = phi i32 [ %1457, %expr_true156 ], [ %147, %expr_false19 ]
  %817 = sext i32 %unroll_step21987 to i64, !dbg !16
  %818 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %817, !dbg !16
  %vec_cast.i = bitcast float* %818 to <8 x float>*, !dbg !16
  %cont_load.i = load <8 x float>, <8 x float>* %vec_cast.i, align 4, !dbg !16
  %819 = sext i32 %unroll_step21987 to i64, !dbg !16
  %820 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %819, !dbg !16
  %vec_cast1.i = bitcast float* %820 to <8 x float>*, !dbg !16
  %cont_load2.i = load <8 x float>, <8 x float>* %vec_cast1.i, align 4, !dbg !16
  %821 = sext i32 %unroll_step21987 to i64, !dbg !16
  %822 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %821, !dbg !16
  %vec_cast3.i = bitcast float* %822 to <8 x float>*, !dbg !16
  %cont_load4.i = load <8 x float>, <8 x float>* %vec_cast3.i, align 4, !dbg !16
  %823 = sext i32 %unroll_step21987 to i64, !dbg !16
  %824 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %823, !dbg !16
  %vec_cast5.i = bitcast float* %824 to <8 x float>*, !dbg !16
  %cont_load6.i = load <8 x float>, <8 x float>* %vec_cast5.i, align 4, !dbg !16
  %825 = sext i32 %unroll_step21987 to i64, !dbg !16
  %826 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %825, !dbg !16
  %vec_cast7.i = bitcast float* %826 to <8 x float>*, !dbg !16
  %cont_load8.i = load <8 x float>, <8 x float>* %vec_cast7.i, align 4, !dbg !16
  %827 = sext i32 %unroll_step21987 to i64, !dbg !16
  %828 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %827, !dbg !16
  %vec_cast9.i = bitcast float* %828 to <8 x float>*, !dbg !16
  %cont_load10.i = load <8 x float>, <8 x float>* %vec_cast9.i, align 4, !dbg !16
  %829 = fneg <8 x float> %cont_load8.i, !dbg !49
  %830 = sext i32 %unroll_step21987 to i64, !dbg !16
  %831 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %830, !dbg !16
  %vec_cast11.i = bitcast i32* %831 to <8 x i32>*, !dbg !16
  %cont_load12.i = load <8 x i32>, <8 x i32>* %vec_cast11.i, align 4, !dbg !16
  %832 = sext i32 %unroll_step21987 to i64, !dbg !16
  %833 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %832, !dbg !16
  %vec_cast13.i = bitcast float* %833 to <8 x float>*, !dbg !16
  %cont_load14.i = load <8 x float>, <8 x float>* %vec_cast13.i, align 4, !dbg !16
  %834 = sext i32 %unroll_step21987 to i64, !dbg !16
  %835 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %834, !dbg !16
  %vec_cast15.i = bitcast float* %835 to <8 x float>*, !dbg !16
  %cont_load16.i = load <8 x float>, <8 x float>* %vec_cast15.i, align 4, !dbg !16
  %836 = sext i32 %unroll_step21987 to i64, !dbg !16
  %837 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %836, !dbg !16
  %vec_cast17.i = bitcast float* %837 to <8 x float>*, !dbg !16
  %cont_load18.i = load <8 x float>, <8 x float>* %vec_cast17.i, align 4, !dbg !16
  %838 = sext i32 %unroll_step21987 to i64, !dbg !16
  %839 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %838, !dbg !16
  %vec_cast19.i = bitcast i32* %839 to <8 x i32>*, !dbg !16
  %cont_load20.i = load <8 x i32>, <8 x i32>* %vec_cast19.i, align 4, !dbg !16
  %840 = sext i32 %unroll_step21987 to i64, !dbg !16
  %841 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %840, !dbg !16
  %vec_cast21.i = bitcast float* %841 to <8 x float>*, !dbg !16
  %cont_load22.i = load <8 x float>, <8 x float>* %vec_cast21.i, align 4, !dbg !16
  %842 = sext i32 %unroll_step21987 to i64, !dbg !16
  %843 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %842, !dbg !16
  %vec_cast23.i = bitcast float* %843 to <8 x float>*, !dbg !16
  %cont_load24.i = load <8 x float>, <8 x float>* %vec_cast23.i, align 4, !dbg !16
  %844 = sext i32 %unroll_step21987 to i64, !dbg !16
  %845 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %844, !dbg !16
  %vec_cast25.i = bitcast float* %845 to <8 x float>*, !dbg !16
  %cont_load26.i = load <8 x float>, <8 x float>* %vec_cast25.i, align 4, !dbg !16
  %846 = sext i32 %unroll_step21987 to i64, !dbg !16
  %847 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %846, !dbg !16
  %vec_cast29.i = bitcast i32* %847 to <8 x i32>*, !dbg !16
  %cont_load30.i = load <8 x i32>, <8 x i32>* %vec_cast29.i, align 4, !dbg !16
  %848 = shl nsw <8 x i32> %cont_load12.i, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !53
  %849 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %94, <8 x i32> %848, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %850 = bitcast <8 x float> %849 to <8 x i32>, !dbg !16
  %851 = or <8 x i32> %848, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !53
  %852 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %95, <8 x i32> %851, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %853 = bitcast <8 x float> %852 to <8 x i32>, !dbg !16
  %854 = or <8 x i32> %848, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !53
  %855 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %96, <8 x i32> %854, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %856 = bitcast <8 x float> %855 to <8 x i32>, !dbg !16
  %857 = mul <8 x i32> %cont_load12.i, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %858 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %97, <8 x i32> %857, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %859 = mul <8 x i32> %cont_load12.i, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %860 = add <8 x i32> %859, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %861 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %98, <8 x i32> %860, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %862 = mul <8 x i32> %cont_load12.i, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %863 = add <8 x i32> %862, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %864 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %99, <8 x i32> %863, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %865 = mul <8 x i32> %850, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %866 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %100, <8 x i32> %865, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %867 = mul <8 x i32> %850, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %868 = add <8 x i32> %867, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %869 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %101, <8 x i32> %868, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %870 = mul <8 x i32> %850, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %871 = add <8 x i32> %870, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %872 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %102, <8 x i32> %871, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %873 = mul <8 x i32> %853, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %874 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %103, <8 x i32> %873, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %875 = mul <8 x i32> %853, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %876 = add <8 x i32> %875, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %877 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %104, <8 x i32> %876, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %878 = mul <8 x i32> %853, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %879 = add <8 x i32> %878, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %880 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %105, <8 x i32> %879, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %881 = mul <8 x i32> %856, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %882 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %106, <8 x i32> %881, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %883 = mul <8 x i32> %856, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %884 = add <8 x i32> %883, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %885 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %107, <8 x i32> %884, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %886 = mul <8 x i32> %856, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %887 = add <8 x i32> %886, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %888 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %108, <8 x i32> %887, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %889 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %cont_load16.i, !dbg !53
  %890 = fsub <8 x float> %889, %cont_load18.i, !dbg !53
  %891 = fmul <8 x float> %890, %866, !dbg !53
  %892 = fmul <8 x float> %cont_load16.i, %874, !dbg !53
  %893 = fadd <8 x float> %891, %892, !dbg !53
  %894 = fmul <8 x float> %cont_load18.i, %882, !dbg !53
  %895 = fadd <8 x float> %893, %894, !dbg !53
  %896 = fmul <8 x float> %895, %895, !dbg !53
  %897 = fmul <8 x float> %890, %869, !dbg !53
  %898 = fmul <8 x float> %cont_load16.i, %877, !dbg !53
  %899 = fadd <8 x float> %897, %898, !dbg !53
  %900 = fmul <8 x float> %cont_load18.i, %885, !dbg !53
  %901 = fadd <8 x float> %899, %900, !dbg !53
  %902 = fmul <8 x float> %901, %901, !dbg !53
  %903 = fadd <8 x float> %896, %902, !dbg !53
  %904 = fmul <8 x float> %890, %872, !dbg !53
  %905 = fmul <8 x float> %cont_load16.i, %880, !dbg !53
  %906 = fadd <8 x float> %904, %905, !dbg !53
  %907 = fmul <8 x float> %cont_load18.i, %888, !dbg !53
  %908 = fadd <8 x float> %906, %907, !dbg !53
  %909 = fmul <8 x float> %908, %908, !dbg !53
  %910 = fadd <8 x float> %903, %909, !dbg !53
  %.mapped.i = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %910), !dbg !16
  %911 = fmul <8 x float> %cont_load6.i, %858, !dbg !54
  %912 = fmul <8 x float> %cont_load8.i, %861, !dbg !54
  %913 = fadd <8 x float> %911, %912, !dbg !54
  %914 = fmul <8 x float> %cont_load10.i, %864, !dbg !54
  %915 = fadd <8 x float> %913, %914, !dbg !54
  %916 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %915, <8 x float> zeroinitializer, i8 2), !dbg !54
  %917 = bitcast <8 x float> %916 to <8 x i32>, !dbg !54
  %918 = xor <8 x i32> %917, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !16
  %919 = fneg <8 x float> %858, !dbg !55
  %920 = fneg <8 x float> %861, !dbg !55
  %921 = fneg <8 x float> %864, !dbg !55
  %922 = bitcast <8 x i32> %918 to <8 x float>, !dbg !16
  %923 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %858, <8 x float> %919, <8 x float> %922), !dbg !16
  %924 = bitcast <8 x i32> %918 to <8 x float>, !dbg !16
  %925 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %861, <8 x float> %920, <8 x float> %924), !dbg !16
  %926 = bitcast <8 x i32> %918 to <8 x float>, !dbg !16
  %927 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %864, <8 x float> %921, <8 x float> %926), !dbg !16
  %928 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped.i, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>), !dbg !56
  %929 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %928, !dbg !56
  %930 = fmul <8 x float> %895, %929, !dbg !56
  %931 = fmul <8 x float> %cont_load6.i, %930, !dbg !56
  %932 = fmul <8 x float> %901, %929, !dbg !56
  %933 = fmul <8 x float> %cont_load8.i, %932, !dbg !56
  %934 = fadd <8 x float> %931, %933, !dbg !56
  %935 = fmul <8 x float> %908, %929, !dbg !56
  %936 = fmul <8 x float> %cont_load10.i, %935, !dbg !56
  %937 = fadd <8 x float> %934, %936, !dbg !56
  %938 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %937, <8 x float> zeroinitializer, i8 2), !dbg !56
  %939 = bitcast <8 x float> %938 to <8 x i32>, !dbg !56
  %940 = xor <8 x i32> %939, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !56
  %941 = fneg <8 x float> %930, !dbg !57
  %942 = fneg <8 x float> %932, !dbg !57
  %943 = fneg <8 x float> %935, !dbg !57
  %944 = bitcast <8 x i32> %940 to <8 x float>, !dbg !16
  %945 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %930, <8 x float> %941, <8 x float> %944), !dbg !16
  %946 = bitcast <8 x i32> %940 to <8 x float>, !dbg !16
  %947 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %932, <8 x float> %942, <8 x float> %946), !dbg !16
  %948 = bitcast <8 x i32> %940 to <8 x float>, !dbg !16
  %949 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %935, <8 x float> %943, <8 x float> %948), !dbg !16
  %950 = shl <8 x i32> %850, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %951 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %109, <8 x i32> %950, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %952 = shl <8 x i32> %850, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %953 = or <8 x i32> %952, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %954 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %110, <8 x i32> %953, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %955 = shl <8 x i32> %853, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %956 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %111, <8 x i32> %955, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %957 = shl <8 x i32> %853, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %958 = or <8 x i32> %957, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %959 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %112, <8 x i32> %958, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %960 = shl <8 x i32> %856, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %961 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %113, <8 x i32> %960, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %962 = shl <8 x i32> %856, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !58
  %963 = or <8 x i32> %962, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !58
  %964 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %114, <8 x i32> %963, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !58
  %965 = fmul <8 x float> %890, %951, !dbg !58
  %966 = fmul <8 x float> %cont_load16.i, %956, !dbg !58
  %967 = fadd <8 x float> %965, %966, !dbg !58
  %968 = fmul <8 x float> %cont_load18.i, %961, !dbg !58
  %969 = fadd <8 x float> %967, %968, !dbg !58
  %.mapped31.i = call <8 x float> @xfloorf_avx2(<8 x float> %969), !dbg !16
  %970 = fmul <8 x float> %890, %954, !dbg !59
  %971 = fmul <8 x float> %cont_load16.i, %959, !dbg !59
  %972 = fadd <8 x float> %970, %971, !dbg !59
  %973 = fmul <8 x float> %cont_load18.i, %964, !dbg !59
  %974 = fadd <8 x float> %972, %973, !dbg !59
  %.mapped32.i = call <8 x float> @xfloorf_avx2(<8 x float> %974), !dbg !16
  %975 = fsub <8 x float> %969, %.mapped31.i, !dbg !59
  %u_SIMD.i = fmul <8 x float> %975, %.splat.i, !dbg !59
  %976 = fptosi <8 x float> %u_SIMD.i to <8 x i32>, !dbg !59
  %977 = icmp sgt <8 x i32> %.splat34.i, %976, !dbg !60
  %978 = select <8 x i1> %977, <8 x i32> %976, <8 x i32> %.splat34.i, !dbg !60
  %979 = fsub <8 x float> %974, %.mapped32.i, !dbg !60
  %v_SIMD.i = fmul <8 x float> %979, %.splat36.i, !dbg !60
  %980 = fptosi <8 x float> %v_SIMD.i to <8 x i32>, !dbg !60
  %981 = icmp sgt <8 x i32> %.splat38.i, %980, !dbg !61
  %982 = select <8 x i1> %981, <8 x i32> %980, <8 x i32> %.splat38.i, !dbg !61
  %983 = add nsw <8 x i32> %978, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !61
  %984 = icmp slt <8 x i32> %983, %.splat34.i, !dbg !62
  %985 = select <8 x i1> %984, <8 x i32> %983, <8 x i32> %.splat34.i, !dbg !62
  %986 = add nsw <8 x i32> %982, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !62
  %987 = icmp slt <8 x i32> %986, %.splat38.i, !dbg !63
  %988 = select <8 x i1> %987, <8 x i32> %986, <8 x i32> %.splat38.i, !dbg !63
  %989 = mul nsw <8 x i32> %982, %.splat40.i, !dbg !63
  %990 = add nsw <8 x i32> %989, %978, !dbg !63
  %991 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %119, <8 x i32> %990, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !63
  %992 = bitcast <8 x float> %991 to <8 x i32>, !dbg !63
  %993 = add nsw <8 x i32> %989, %985, !dbg !63
  %994 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %120, <8 x i32> %993, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !63
  %995 = bitcast <8 x float> %994 to <8 x i32>, !dbg !63
  %996 = mul nsw <8 x i32> %988, %.splat40.i, !dbg !63
  %997 = add nsw <8 x i32> %996, %978, !dbg !63
  %998 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %121, <8 x i32> %997, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !63
  %999 = bitcast <8 x float> %998 to <8 x i32>, !dbg !63
  %1000 = add nsw <8 x i32> %996, %985, !dbg !63
  %1001 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %122, <8 x i32> %1000, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !63
  %1002 = bitcast <8 x float> %1001 to <8 x i32>, !dbg !63
  %1003 = sitofp <8 x i32> %980 to <8 x float>, !dbg !63
  %ky_SIMD.i = fsub <8 x float> %v_SIMD.i, %1003, !dbg !63
  %1004 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %ky_SIMD.i, !dbg !63
  %1005 = sitofp <8 x i32> %976 to <8 x float>, !dbg !63
  %kx_SIMD.i = fsub <8 x float> %u_SIMD.i, %1005, !dbg !63
  %1006 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %kx_SIMD.i, !dbg !63
  %r_SIMD.i = and <8 x i32> %992, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1007 = uitofp <8 x i32> %r_SIMD.i to <8 x float>, !dbg !63
  %1008 = fmul <8 x float> %1007, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1009 = fmul <8 x float> %1006, %1008, !dbg !63
  %r130_SIMD.i = and <8 x i32> %995, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1010 = uitofp <8 x i32> %r130_SIMD.i to <8 x float>, !dbg !63
  %1011 = fmul <8 x float> %1010, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1012 = fmul <8 x float> %kx_SIMD.i, %1011, !dbg !63
  %1013 = fadd <8 x float> %1009, %1012, !dbg !63
  %1014 = fmul <8 x float> %1004, %1013, !dbg !63
  %r131_SIMD.i = and <8 x i32> %999, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1015 = uitofp <8 x i32> %r131_SIMD.i to <8 x float>, !dbg !63
  %1016 = fmul <8 x float> %1015, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1017 = fmul <8 x float> %1006, %1016, !dbg !63
  %r132_SIMD.i = and <8 x i32> %1002, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1018 = uitofp <8 x i32> %r132_SIMD.i to <8 x float>, !dbg !63
  %1019 = fmul <8 x float> %1018, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1020 = fmul <8 x float> %kx_SIMD.i, %1019, !dbg !63
  %1021 = fadd <8 x float> %1017, %1020, !dbg !63
  %1022 = fmul <8 x float> %ky_SIMD.i, %1021, !dbg !63
  %1023 = fadd <8 x float> %1014, %1022, !dbg !63
  %1024 = fmul <8 x float> %1023, <float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000>, !dbg !63
  %1025 = lshr <8 x i32> %992, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !63
  %g_SIMD.i = and <8 x i32> %1025, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1026 = uitofp <8 x i32> %g_SIMD.i to <8 x float>, !dbg !63
  %1027 = fmul <8 x float> %1026, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1028 = fmul <8 x float> %1006, %1027, !dbg !63
  %1029 = lshr <8 x i32> %995, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !63
  %g133_SIMD.i = and <8 x i32> %1029, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1030 = uitofp <8 x i32> %g133_SIMD.i to <8 x float>, !dbg !63
  %1031 = fmul <8 x float> %1030, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1032 = fmul <8 x float> %kx_SIMD.i, %1031, !dbg !63
  %1033 = fadd <8 x float> %1028, %1032, !dbg !63
  %1034 = fmul <8 x float> %1004, %1033, !dbg !63
  %1035 = lshr <8 x i32> %999, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !63
  %g134_SIMD.i = and <8 x i32> %1035, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1036 = uitofp <8 x i32> %g134_SIMD.i to <8 x float>, !dbg !63
  %1037 = fmul <8 x float> %1036, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1038 = fmul <8 x float> %1006, %1037, !dbg !63
  %1039 = lshr <8 x i32> %1002, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !63
  %g135_SIMD.i = and <8 x i32> %1039, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1040 = uitofp <8 x i32> %g135_SIMD.i to <8 x float>, !dbg !63
  %1041 = fmul <8 x float> %1040, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1042 = fmul <8 x float> %kx_SIMD.i, %1041, !dbg !63
  %1043 = fadd <8 x float> %1038, %1042, !dbg !63
  %1044 = fmul <8 x float> %ky_SIMD.i, %1043, !dbg !63
  %1045 = fadd <8 x float> %1034, %1044, !dbg !63
  %1046 = fmul <8 x float> %1045, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>, !dbg !63
  %1047 = fadd <8 x float> %1024, %1046, !dbg !63
  %1048 = lshr <8 x i32> %992, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !63
  %b_SIMD.i = and <8 x i32> %1048, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1049 = uitofp <8 x i32> %b_SIMD.i to <8 x float>, !dbg !63
  %1050 = fmul <8 x float> %1049, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1051 = fmul <8 x float> %1006, %1050, !dbg !63
  %1052 = lshr <8 x i32> %995, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !63
  %b136_SIMD.i = and <8 x i32> %1052, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1053 = uitofp <8 x i32> %b136_SIMD.i to <8 x float>, !dbg !63
  %1054 = fmul <8 x float> %1053, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1055 = fmul <8 x float> %kx_SIMD.i, %1054, !dbg !63
  %1056 = fadd <8 x float> %1051, %1055, !dbg !63
  %1057 = fmul <8 x float> %1004, %1056, !dbg !63
  %1058 = lshr <8 x i32> %999, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !63
  %b137_SIMD.i = and <8 x i32> %1058, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1059 = uitofp <8 x i32> %b137_SIMD.i to <8 x float>, !dbg !63
  %1060 = fmul <8 x float> %1059, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1061 = fmul <8 x float> %1006, %1060, !dbg !63
  %1062 = lshr <8 x i32> %1002, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !63
  %b138_SIMD.i = and <8 x i32> %1062, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !63
  %1063 = uitofp <8 x i32> %b138_SIMD.i to <8 x float>, !dbg !63
  %1064 = fmul <8 x float> %1063, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !63
  %1065 = fmul <8 x float> %kx_SIMD.i, %1064, !dbg !63
  %1066 = fadd <8 x float> %1061, %1065, !dbg !63
  %1067 = fmul <8 x float> %ky_SIMD.i, %1066, !dbg !63
  %1068 = fadd <8 x float> %1057, %1067, !dbg !63
  %1069 = fmul <8 x float> %1068, <float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000>, !dbg !63
  %1070 = fadd <8 x float> %1047, %1069, !dbg !63
  %1071 = fadd <8 x float> %1070, %1070, !dbg !63
  %1072 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1071, <8 x float> zeroinitializer, i8 0), !dbg !16
  %1073 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1071, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>), !dbg !63
  %1074 = fdiv <8 x float> %1070, %1073, !dbg !63
  %1075 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1074, <8 x float> zeroinitializer, <8 x float> %1072), !dbg !63
  %1076 = icmp eq <8 x i32> %cont_load20.i, zeroinitializer, !dbg !63
  %1077 = sext <8 x i1> %1076 to <8 x i32>, !dbg !63
  %1078 = bitcast <8 x i32> %cont_load20.i to <8 x float>, !dbg !63
  %1079 = bitcast <8 x i32> %1077 to <8 x float>, !dbg !63
  %1080 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1078, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %1079), !dbg !63
  %1081 = bitcast <8 x float> %1080 to <8 x i32>, !dbg !63
  %1082 = shl <8 x i32> %1081, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !63
  %1083 = xor <8 x i32> %1082, %1081, !dbg !63
  %1084 = lshr <8 x i32> %1083, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !63
  %1085 = xor <8 x i32> %1083, %1084, !dbg !63
  %1086 = shl <8 x i32> %1085, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !63
  %1087 = xor <8 x i32> %1085, %1086, !dbg !63
  %1088 = and <8 x i32> %1087, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !63
  %1089 = or <8 x i32> %1088, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !63
  %1090 = bitcast <8 x i32> %1089 to <8 x float>, !dbg !16
  %1091 = fadd <8 x float> %1090, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !63
  %1092 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1075, <8 x float> %1091, i8 2), !dbg !63
  %1093 = bitcast <8 x float> %1092 to <8 x i32>, !dbg !63
  %1094 = icmp eq <8 x i32> %1087, zeroinitializer, !dbg !63
  %1095 = sext <8 x i1> %1094 to <8 x i32>, !dbg !63
  %1096 = bitcast <8 x i32> %1087 to <8 x float>, !dbg !63
  %1097 = bitcast <8 x i32> %1095 to <8 x float>, !dbg !63
  %1098 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1096, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %1097), !dbg !63
  %1099 = bitcast <8 x float> %1098 to <8 x i32>, !dbg !63
  %1100 = shl <8 x i32> %1099, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !63
  %1101 = xor <8 x i32> %1100, %1099, !dbg !63
  %1102 = lshr <8 x i32> %1101, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !63
  %1103 = xor <8 x i32> %1101, %1102, !dbg !63
  %1104 = shl <8 x i32> %1103, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !63
  %1105 = xor <8 x i32> %1103, %1104, !dbg !63
  %1106 = icmp eq <8 x i32> %1105, zeroinitializer, !dbg !63
  %1107 = sext <8 x i1> %1106 to <8 x i32>, !dbg !63
  %1108 = bitcast <8 x i32> %1105 to <8 x float>, !dbg !63
  %1109 = bitcast <8 x i32> %1107 to <8 x float>, !dbg !63
  %1110 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1108, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %1109), !dbg !63
  %1111 = bitcast <8 x float> %1110 to <8 x i32>, !dbg !63
  %1112 = shl <8 x i32> %1111, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !63
  %1113 = xor <8 x i32> %1112, %1111, !dbg !63
  %1114 = lshr <8 x i32> %1113, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !63
  %1115 = xor <8 x i32> %1113, %1114, !dbg !63
  %1116 = shl <8 x i32> %1115, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !63
  %1117 = xor <8 x i32> %1115, %1116, !dbg !63
  %1118 = and <8 x i32> %1117, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !63
  %1119 = or <8 x i32> %1118, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !63
  %1120 = bitcast <8 x i32> %1119 to <8 x float>, !dbg !16
  %1121 = fadd <8 x float> %1120, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !63
  %1122 = and <8 x i32> %1105, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !63
  %1123 = or <8 x i32> %1122, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !63
  %1124 = bitcast <8 x i32> %1123 to <8 x float>, !dbg !16
  %1125 = fadd <8 x float> %1124, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !63
  %phi_SIMD.i = fmul <8 x float> %1125, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, !dbg !63
  %1126 = fmul <8 x float> %947, %829, !dbg !63
  %1127 = fmul <8 x float> %cont_load6.i, %945, !dbg !63
  %1128 = fsub <8 x float> %1126, %1127, !dbg !63
  %1129 = fmul <8 x float> %cont_load10.i, %949, !dbg !63
  %1130 = fsub <8 x float> %1128, %1129, !dbg !63
  %1131 = fmul <8 x float> %1130, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, !dbg !63
  %1132 = fmul <8 x float> %949, %1131, !dbg !63
  %1133 = fadd <8 x float> %1132, %cont_load10.i, !dbg !63
  %1134 = fmul <8 x float> %945, %1131, !dbg !63
  %1135 = fadd <8 x float> %1134, %cont_load6.i, !dbg !63
  %1136 = fmul <8 x float> %947, %1131, !dbg !63
  %1137 = fadd <8 x float> %1136, %cont_load8.i, !dbg !63
  %1138 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1075, !dbg !63
  %1139 = fmul <8 x float> %1023, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !63
  %1140 = fmul <8 x float> %1045, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !63
  %1141 = fmul <8 x float> %1068, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !63
  %1142 = xor <8 x i32> %1093, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !63
  %1143 = bitcast <8 x float> %1121 to <8 x i32>, !dbg !16
  %1144 = uitofp <8 x i32> %1143 to <8 x float>, !dbg !64
  %y_SIMD.i = fmul <8 x float> %1144, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !64
  %1145 = fadd <8 x float> %y_SIMD.i, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !64
  %1146 = and <8 x i32> %1143, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !64
  %mx_SIMD.i = or <8 x i32> %1146, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !64
  %1147 = bitcast <8 x i32> %mx_SIMD.i to <8 x float>, !dbg !16
  %1148 = fmul <8 x float> %1147, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !64
  %1149 = fsub <8 x float> %1145, %1148, !dbg !64
  %1150 = fadd <8 x float> %1147, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !64
  %1151 = bitcast <8 x i32> %1142 to <8 x float>, !dbg !64
  %1152 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1150, <8 x float> %1151), !dbg !64
  %1153 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1152, !dbg !64
  %1154 = fsub <8 x float> %1149, %1153, !dbg !64
  %1155 = fmul <8 x float> %1154, <float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000>, !dbg !64
  %1156 = fcmp fast olt <8 x float> %1155, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !64
  %1157 = select <8 x i1> %1156, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %1155, !dbg !64
  %1158 = fadd <8 x float> %1157, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !64
  %1159 = fptosi <8 x float> %1157 to <8 x i32>, !dbg !64
  %1160 = sitofp <8 x i32> %1159 to <8 x float>, !dbg !64
  %1161 = fsub <8 x float> %1157, %1160, !dbg !64
  %1162 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1155, <8 x float> zeroinitializer, i8 1), !dbg !64
  %1163 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1162), !dbg !64
  %z_SIMD.i = fadd <8 x float> %1161, %1163, !dbg !64
  %1164 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z_SIMD.i, !dbg !64
  %1165 = bitcast <8 x i32> %1142 to <8 x float>, !dbg !64
  %1166 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1164, <8 x float> %1165), !dbg !64
  %1167 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1166, !dbg !64
  %1168 = fadd <8 x float> %1158, %1167, !dbg !64
  %1169 = fmul <8 x float> %z_SIMD.i, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !64
  %1170 = fsub <8 x float> %1168, %1169, !dbg !64
  %1171 = fmul <8 x float> %1170, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !64
  %1172 = fptosi <8 x float> %1171 to <8 x i32>, !dbg !64
  %1173 = bitcast <8 x i32> %1172 to <8 x float>, !dbg !16
  %.mapped44.i = call <8 x float> @xfminf_avx2(<8 x float> %1173, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>), !dbg !16
  %1174 = fmul <8 x float> %.mapped44.i, %.mapped44.i, !dbg !65
  %1175 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1174, !dbg !65
  %.mapped45.i = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %1175), !dbg !16
  %.mapped46.i = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i), !dbg !16
  %.mapped47.i = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i), !dbg !16
  %1176 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %1133, i8 2), !dbg !66
  %1177 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1176), !dbg !66
  %1178 = fmul <8 x float> %1177, %1135, !dbg !66
  %1179 = fmul <8 x float> %1178, %1135, !dbg !66
  %1180 = fadd <8 x float> %1177, %1133, !dbg !66
  %1181 = bitcast <8 x i32> %1142 to <8 x float>, !dbg !66
  %1182 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1180, <8 x float> %1181), !dbg !66
  %a_SIMD.i = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %1182, !dbg !66
  %1183 = fmul <8 x float> %1179, %a_SIMD.i, !dbg !66
  %1184 = fadd <8 x float> %1183, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !66
  %x_SIMD.i = fmul <8 x float> %.mapped45.i, %.mapped46.i, !dbg !66
  %1185 = fmul <8 x float> %1184, %x_SIMD.i, !dbg !66
  %1186 = fmul <8 x float> %1135, %1137, !dbg !66
  %b153_SIMD.i = fmul <8 x float> %1186, %a_SIMD.i, !dbg !66
  %y154_SIMD.i = fmul <8 x float> %.mapped45.i, %.mapped47.i, !dbg !66
  %1187 = fmul <8 x float> %b153_SIMD.i, %y154_SIMD.i, !dbg !66
  %1188 = fadd <8 x float> %1185, %1187, !dbg !66
  %1189 = fmul <8 x float> %1135, %.mapped44.i, !dbg !66
  %1190 = fadd <8 x float> %1188, %1189, !dbg !66
  %1191 = fmul <8 x float> %1190, %945, !dbg !66
  %1192 = fmul <8 x float> %1177, %b153_SIMD.i, !dbg !66
  %1193 = fmul <8 x float> %1192, %x_SIMD.i, !dbg !66
  %1194 = fmul <8 x float> %1137, %1137, !dbg !66
  %1195 = fmul <8 x float> %1194, %a_SIMD.i, !dbg !66
  %1196 = fadd <8 x float> %1177, %1195, !dbg !66
  %1197 = fmul <8 x float> %1196, %y154_SIMD.i, !dbg !66
  %1198 = fadd <8 x float> %1193, %1197, !dbg !66
  %1199 = fmul <8 x float> %1137, %.mapped44.i, !dbg !66
  %1200 = fadd <8 x float> %1198, %1199, !dbg !66
  %1201 = fmul <8 x float> %1200, %947, !dbg !66
  %1202 = fadd <8 x float> %1191, %1201, !dbg !66
  %1203 = fneg <8 x float> %1177, !dbg !66
  %1204 = fmul <8 x float> %1135, %1203, !dbg !66
  %1205 = fmul <8 x float> %1204, %x_SIMD.i, !dbg !66
  %1206 = fmul <8 x float> %1137, %y154_SIMD.i, !dbg !66
  %1207 = fsub <8 x float> %1205, %1206, !dbg !66
  %1208 = fmul <8 x float> %1133, %.mapped44.i, !dbg !66
  %1209 = fadd <8 x float> %1207, %1208, !dbg !66
  %1210 = fmul <8 x float> %1209, %949, !dbg !66
  %1211 = fadd <8 x float> %1202, %1210, !dbg !66
  %1212 = fcmp fast oge <8 x float> %1211, zeroinitializer, !dbg !67
  %1213 = select <8 x i1> %1212, <8 x float> %1211, <8 x float> zeroinitializer, !dbg !67
  %1214 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %.mapped44.i, <8 x float> zeroinitializer, i8 20), !dbg !16
  %1215 = bitcast <8 x i32> %1142 to <8 x float>, !dbg !67
  %1216 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped44.i, <8 x float> %1215), !dbg !67
  %1217 = fdiv <8 x float> %1121, %1216, !dbg !67
  %1218 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %1217, <8 x float> %1214), !dbg !67
  %1219 = fmul <8 x float> %1218, <float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01>, !dbg !67
  %pdf_SIMD.i = fmul <8 x float> %1219, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !67
  %1220 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %pdf_SIMD.i, i8 1), !dbg !67
  %1221 = bitcast <8 x float> %1220 to <8 x i32>, !dbg !67
  %1222 = and <8 x i32> %1142, %1221, !dbg !67
  %1223 = xor <8 x i32> %1221, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !67
  %1224 = and <8 x i32> %1142, %1223, !dbg !16
  %1225 = fmul <8 x float> %1190, %923, !dbg !68
  %1226 = fmul <8 x float> %1200, %925, !dbg !68
  %1227 = fadd <8 x float> %1225, %1226, !dbg !68
  %1228 = fmul <8 x float> %1209, %927, !dbg !68
  %1229 = fadd <8 x float> %1227, %1228, !dbg !68
  %1230 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %1229, i8 1), !dbg !68
  %1231 = bitcast <8 x float> %1230 to <8 x i32>, !dbg !68
  %1232 = and <8 x i32> %1222, %1231, !dbg !68
  %1233 = xor <8 x i32> %1231, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !68
  %1234 = and <8 x i32> %1222, %1233, !dbg !16
  %1235 = or <8 x i32> %1224, %1234, !dbg !69
  %1236 = or <8 x i32> %1235, %1232, !dbg !69
  %1237 = bitcast <8 x i32> %1232 to <8 x float>, !dbg !70
  %1238 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %pdf_SIMD.i, <8 x float> %1237), !dbg !70
  %1239 = fmul <8 x float> %pdf_SIMD.i, <float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01>, !dbg !71
  %1240 = bitcast <8 x i32> %1232 to <8 x float>, !dbg !71
  %1241 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01>, <8 x float> %1240), !dbg !71
  %1242 = fdiv <8 x float> %1239, %1241, !dbg !71
  %1243 = fmul <8 x float> %1023, %1242, !dbg !71
  %1244 = fmul <8 x float> %1045, %1242, !dbg !71
  %1245 = fmul <8 x float> %1068, %1242, !dbg !71
  %1246 = bitcast <8 x i32> %1232 to <8 x float>, !dbg !16
  %1247 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %1243, <8 x float> %1246), !dbg !16
  %1248 = bitcast <8 x i32> %1232 to <8 x float>, !dbg !16
  %1249 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %1244, <8 x float> %1248), !dbg !16
  %1250 = bitcast <8 x i32> %1232 to <8 x float>, !dbg !16
  %1251 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %1245, <8 x float> %1250), !dbg !16
  %1252 = fmul <8 x float> %1213, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !72
  %1253 = fmul <8 x float> %1138, %1252, !dbg !72
  %1254 = fmul <8 x float> %1075, %1238, !dbg !72
  %1255 = fadd <8 x float> %1253, %1254, !dbg !72
  %1256 = fmul <8 x float> %1138, %1139, !dbg !72
  %1257 = fmul <8 x float> %1075, %1247, !dbg !72
  %1258 = fadd <8 x float> %1256, %1257, !dbg !72
  %1259 = fmul <8 x float> %1138, %1140, !dbg !72
  %1260 = fmul <8 x float> %1075, %1249, !dbg !72
  %1261 = fadd <8 x float> %1259, %1260, !dbg !72
  %1262 = fmul <8 x float> %1138, %1141, !dbg !72
  %1263 = fmul <8 x float> %1075, %1251, !dbg !72
  %1264 = fadd <8 x float> %1262, %1263, !dbg !72
  %1265 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1121, !dbg !64
  %.mapped51.i = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %1265), !dbg !16
  %.mapped52.i = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %1121), !dbg !16
  %.mapped53.i = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i), !dbg !16
  %.mapped54.i = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i), !dbg !16
  %1266 = fmul <8 x float> %.mapped51.i, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !66
  %1267 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %1266, i8 1), !dbg !66
  %1268 = bitcast <8 x float> %1267 to <8 x i32>, !dbg !66
  %1269 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %949, i8 2), !dbg !66
  %1270 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1269), !dbg !66
  %1271 = fmul <8 x float> %1270, %945, !dbg !66
  %1272 = fmul <8 x float> %1271, %945, !dbg !66
  %1273 = fadd <8 x float> %1270, %949, !dbg !66
  %1274 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1273, <8 x float> %1092), !dbg !66
  %a155_SIMD.i = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %1274, !dbg !66
  %1275 = fmul <8 x float> %1272, %a155_SIMD.i, !dbg !66
  %1276 = fadd <8 x float> %1275, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !66
  %x156_SIMD.i = fmul <8 x float> %.mapped52.i, %.mapped53.i, !dbg !66
  %1277 = fmul <8 x float> %1276, %x156_SIMD.i, !dbg !66
  %1278 = fmul <8 x float> %945, %947, !dbg !66
  %b157_SIMD.i = fmul <8 x float> %1278, %a155_SIMD.i, !dbg !66
  %y158_SIMD.i = fmul <8 x float> %.mapped52.i, %.mapped54.i, !dbg !66
  %1279 = fmul <8 x float> %b157_SIMD.i, %y158_SIMD.i, !dbg !66
  %1280 = fadd <8 x float> %1277, %1279, !dbg !66
  %1281 = fmul <8 x float> %945, %.mapped51.i, !dbg !66
  %1282 = fadd <8 x float> %1280, %1281, !dbg !66
  %1283 = fmul <8 x float> %1270, %b157_SIMD.i, !dbg !66
  %1284 = fmul <8 x float> %1283, %x156_SIMD.i, !dbg !66
  %1285 = fmul <8 x float> %947, %947, !dbg !66
  %1286 = fmul <8 x float> %1285, %a155_SIMD.i, !dbg !66
  %1287 = fadd <8 x float> %1270, %1286, !dbg !66
  %1288 = fmul <8 x float> %1287, %y158_SIMD.i, !dbg !66
  %1289 = fadd <8 x float> %1284, %1288, !dbg !66
  %1290 = fmul <8 x float> %947, %.mapped51.i, !dbg !66
  %1291 = fadd <8 x float> %1289, %1290, !dbg !66
  %1292 = fneg <8 x float> %1270, !dbg !66
  %1293 = fmul <8 x float> %945, %1292, !dbg !66
  %1294 = fmul <8 x float> %1293, %x156_SIMD.i, !dbg !66
  %1295 = fmul <8 x float> %947, %y158_SIMD.i, !dbg !66
  %1296 = fsub <8 x float> %1294, %1295, !dbg !66
  %1297 = fmul <8 x float> %949, %.mapped51.i, !dbg !66
  %1298 = fadd <8 x float> %1296, %1297, !dbg !66
  %1299 = and <8 x i32> %1093, %1268, !dbg !66
  %1300 = xor <8 x i32> %1268, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !66
  %1301 = and <8 x i32> %1093, %1300, !dbg !16
  %1302 = fmul <8 x float> %1282, %923, !dbg !68
  %1303 = fmul <8 x float> %1291, %925, !dbg !68
  %1304 = fadd <8 x float> %1302, %1303, !dbg !68
  %1305 = fmul <8 x float> %1298, %927, !dbg !68
  %1306 = fadd <8 x float> %1304, %1305, !dbg !68
  %1307 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %1306, i8 1), !dbg !68
  %1308 = bitcast <8 x float> %1307 to <8 x i32>, !dbg !68
  %1309 = and <8 x i32> %1299, %1308, !dbg !68
  %1310 = xor <8 x i32> %1308, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !68
  %1311 = and <8 x i32> %1299, %1310, !dbg !16
  %1312 = or <8 x i32> %1301, %1311, !dbg !69
  %1313 = or <8 x i32> %1312, %1309, !dbg !69
  %1314 = bitcast <8 x i32> %1309 to <8 x float>, !dbg !70
  %1315 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1266, <8 x float> %1314), !dbg !70
  %1316 = bitcast <8 x i32> %1309 to <8 x float>, !dbg !70
  %1317 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %1139, <8 x float> %1316), !dbg !70
  %1318 = bitcast <8 x i32> %1309 to <8 x float>, !dbg !70
  %1319 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %1140, <8 x float> %1318), !dbg !70
  %1320 = bitcast <8 x i32> %1309 to <8 x float>, !dbg !73
  %1321 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %1141, <8 x float> %1320), !dbg !73
  %1322 = fmul <8 x float> %1282, %1135, !dbg !73
  %1323 = fmul <8 x float> %1291, %1137, !dbg !73
  %1324 = fadd <8 x float> %1322, %1323, !dbg !73
  %1325 = fmul <8 x float> %1298, %1133, !dbg !73
  %1326 = fadd <8 x float> %1324, %1325, !dbg !73
  %1327 = fcmp fast oge <8 x float> %1326, zeroinitializer, !dbg !74
  %1328 = select <8 x i1> %1327, <8 x float> %1326, <8 x float> zeroinitializer, !dbg !74
  %1329 = fmul <8 x float> %1138, %1315, !dbg !74
  %1330 = bitcast <8 x float> %1328 to <8 x i32>, !dbg !16
  %1331 = uitofp <8 x i32> %1330 to <8 x float>, !dbg !74
  %y159_SIMD.i = fmul <8 x float> %1331, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !74
  %1332 = fadd <8 x float> %y159_SIMD.i, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !74
  %1333 = and <8 x i32> %1330, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !74
  %mx160_SIMD.i = or <8 x i32> %1333, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !74
  %1334 = bitcast <8 x i32> %mx160_SIMD.i to <8 x float>, !dbg !16
  %1335 = fmul <8 x float> %1334, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !74
  %1336 = fsub <8 x float> %1332, %1335, !dbg !74
  %1337 = fadd <8 x float> %1334, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !74
  %1338 = bitcast <8 x i32> %1313 to <8 x float>, !dbg !74
  %1339 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1337, <8 x float> %1338), !dbg !74
  %1340 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1339, !dbg !74
  %1341 = fsub <8 x float> %1336, %1340, !dbg !74
  %1342 = fmul <8 x float> %1341, <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, !dbg !74
  %1343 = fcmp fast olt <8 x float> %1342, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !74
  %1344 = select <8 x i1> %1343, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %1342, !dbg !74
  %1345 = fadd <8 x float> %1344, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !74
  %1346 = fptosi <8 x float> %1344 to <8 x i32>, !dbg !74
  %1347 = sitofp <8 x i32> %1346 to <8 x float>, !dbg !74
  %1348 = fsub <8 x float> %1344, %1347, !dbg !74
  %1349 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1342, <8 x float> zeroinitializer, i8 1), !dbg !74
  %1350 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1349), !dbg !74
  %z161_SIMD.i = fadd <8 x float> %1348, %1350, !dbg !74
  %1351 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z161_SIMD.i, !dbg !74
  %1352 = bitcast <8 x i32> %1313 to <8 x float>, !dbg !74
  %1353 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1351, <8 x float> %1352), !dbg !74
  %1354 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1353, !dbg !74
  %1355 = fadd <8 x float> %1345, %1354, !dbg !74
  %1356 = fmul <8 x float> %z161_SIMD.i, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !74
  %1357 = fsub <8 x float> %1355, %1356, !dbg !74
  %1358 = fmul <8 x float> %1357, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !74
  %1359 = fptosi <8 x float> %1358 to <8 x i32>, !dbg !74
  %1360 = bitcast <8 x i32> %1359 to <8 x float>, !dbg !16
  %1361 = fmul <8 x float> %1360, <float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01>, !dbg !74
  %1362 = fmul <8 x float> %1361, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !74
  %1363 = fmul <8 x float> %1075, %1362, !dbg !74
  %1364 = fadd <8 x float> %1329, %1363, !dbg !74
  %1365 = fmul <8 x float> %1138, %1317, !dbg !74
  %1366 = fmul <8 x float> %1360, <float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01>, !dbg !74
  %1367 = fmul <8 x float> %1366, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !74
  %1368 = fmul <8 x float> %1023, %1367, !dbg !74
  %1369 = fmul <8 x float> %1075, %1368, !dbg !74
  %1370 = fadd <8 x float> %1365, %1369, !dbg !74
  %1371 = fmul <8 x float> %1138, %1319, !dbg !74
  %1372 = fmul <8 x float> %1045, %1367, !dbg !74
  %1373 = fmul <8 x float> %1075, %1372, !dbg !74
  %1374 = fadd <8 x float> %1371, %1373, !dbg !74
  %1375 = fmul <8 x float> %1138, %1321, !dbg !74
  %1376 = fmul <8 x float> %1068, %1367, !dbg !74
  %1377 = fmul <8 x float> %1075, %1376, !dbg !74
  %1378 = fadd <8 x float> %1375, %1377, !dbg !74
  %1379 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1380 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1282, <8 x float> %1190, <8 x float> %1379), !dbg !16
  %1381 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1382 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1291, <8 x float> %1200, <8 x float> %1381), !dbg !16
  %1383 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1384 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1298, <8 x float> %1209, <8 x float> %1383), !dbg !16
  %1385 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1386 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %.mapped51.i, <8 x float> %1213, <8 x float> %1385), !dbg !16
  %1387 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1388 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1364, <8 x float> %1255, <8 x float> %1387), !dbg !16
  %1389 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1390 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1370, <8 x float> %1258, <8 x float> %1389), !dbg !16
  %1391 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1392 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1374, <8 x float> %1261, <8 x float> %1391), !dbg !16
  %1393 = bitcast <8 x i32> %1236 to <8 x float>, !dbg !16
  %1394 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1378, <8 x float> %1264, <8 x float> %1393), !dbg !16
  %1395 = or <8 x i32> %1313, %1236, !dbg !75
  %1396 = fmul <8 x float> %cont_load6.i, %cont_load14.i, !dbg !53
  %1397 = fadd <8 x float> %cont_load.i, %1396, !dbg !53
  %1398 = sext i32 %unroll_step21987 to i64, !dbg !53
  %1399 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %1398, !dbg !53
  %vec_cast102.i = bitcast float* %1399 to <8 x float>*, !dbg !53
  %1400 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1397, <8 x float>* %vec_cast102.i, i32 4, <8 x i1> %1400), !dbg !53
  %1401 = fmul <8 x float> %cont_load8.i, %cont_load14.i, !dbg !53
  %1402 = fadd <8 x float> %cont_load2.i, %1401, !dbg !53
  %1403 = sext i32 %unroll_step21987 to i64, !dbg !53
  %1404 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %1403, !dbg !53
  %vec_cast103.i = bitcast float* %1404 to <8 x float>*, !dbg !53
  %1405 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1402, <8 x float>* %vec_cast103.i, i32 4, <8 x i1> %1405), !dbg !53
  %1406 = fmul <8 x float> %cont_load10.i, %cont_load14.i, !dbg !53
  %1407 = fadd <8 x float> %cont_load4.i, %1406, !dbg !53
  %1408 = sext i32 %unroll_step21987 to i64, !dbg !53
  %1409 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %1408, !dbg !53
  %vec_cast104.i = bitcast float* %1409 to <8 x float>*, !dbg !53
  %1410 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1407, <8 x float>* %vec_cast104.i, i32 4, <8 x i1> %1410), !dbg !53
  %1411 = sext i32 %unroll_step21987 to i64, !dbg !53
  %1412 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %1411, !dbg !53
  %vec_cast105.i = bitcast float* %1412 to <8 x float>*, !dbg !53
  %1413 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1380, <8 x float>* %vec_cast105.i, i32 4, <8 x i1> %1413), !dbg !53
  %1414 = sext i32 %unroll_step21987 to i64, !dbg !53
  %1415 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %1414, !dbg !53
  %vec_cast106.i = bitcast float* %1415 to <8 x float>*, !dbg !53
  %1416 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1382, <8 x float>* %vec_cast106.i, i32 4, <8 x i1> %1416), !dbg !53
  %1417 = sext i32 %unroll_step21987 to i64, !dbg !53
  %1418 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %1417, !dbg !53
  %vec_cast107.i = bitcast float* %1418 to <8 x float>*, !dbg !53
  %1419 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1384, <8 x float>* %vec_cast107.i, i32 4, <8 x i1> %1419), !dbg !53
  %1420 = sext i32 %unroll_step21987 to i64, !dbg !53
  %1421 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %1420, !dbg !53
  %vec_cast108.i = bitcast float* %1421 to <8 x float>*, !dbg !53
  %1422 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>, <8 x float>* %vec_cast108.i, i32 4, <8 x i1> %1422), !dbg !53
  %1423 = sext i32 %unroll_step21987 to i64, !dbg !16
  %1424 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %1423, !dbg !16
  %vec_cast109.i = bitcast float* %1424 to <8 x float>*, !dbg !16
  %1425 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000>, <8 x float>* %vec_cast109.i, i32 4, <8 x i1> %1425), !dbg !53
  %1426 = sext i32 %unroll_step21987 to i64, !dbg !16
  %1427 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %1426, !dbg !16
  %vec_cast110.i = bitcast i32* %1427 to <8 x i32>*, !dbg !16
  %1428 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %1117, <8 x i32>* %vec_cast110.i, i32 4, <8 x i1> %1428), !dbg !53
  %1429 = fmul <8 x float> %cont_load22.i, %1390, !dbg !53
  %1430 = bitcast <8 x i32> %1395 to <8 x float>, !dbg !53
  %1431 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1388, <8 x float> %1430), !dbg !53
  %1432 = fdiv <8 x float> %1386, %1431, !dbg !53
  %1433 = fmul <8 x float> %1429, %1432, !dbg !53
  %1434 = sext i32 %unroll_step21987 to i64, !dbg !16
  %1435 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %1434, !dbg !16
  %vec_cast112.i = bitcast float* %1435 to <8 x float>*, !dbg !16
  %1436 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1433, <8 x float>* %vec_cast112.i, i32 4, <8 x i1> %1436), !dbg !53
  %1437 = fmul <8 x float> %cont_load24.i, %1392, !dbg !53
  %1438 = fmul <8 x float> %1437, %1432, !dbg !53
  %1439 = sext i32 %unroll_step21987 to i64, !dbg !16
  %1440 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %1439, !dbg !16
  %vec_cast113.i = bitcast float* %1440 to <8 x float>*, !dbg !16
  %1441 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1438, <8 x float>* %vec_cast113.i, i32 4, <8 x i1> %1441), !dbg !53
  %1442 = fmul <8 x float> %cont_load26.i, %1394, !dbg !53
  %1443 = fmul <8 x float> %1442, %1432, !dbg !53
  %1444 = sext i32 %unroll_step21987 to i64, !dbg !16
  %1445 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %1444, !dbg !16
  %vec_cast114.i = bitcast float* %1445 to <8 x float>*, !dbg !16
  %1446 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1443, <8 x float>* %vec_cast114.i, i32 4, <8 x i1> %1446), !dbg !53
  %1447 = bitcast <8 x i32> %1395 to <8 x float>, !dbg !53
  %1448 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %1388, <8 x float> %1447), !dbg !53
  %1449 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1448, !dbg !53
  %1450 = sext i32 %unroll_step21987 to i64, !dbg !16
  %1451 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %1450, !dbg !16
  %vec_cast116.i = bitcast float* %1451 to <8 x float>*, !dbg !16
  %1452 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %1449, <8 x float>* %vec_cast116.i, i32 4, <8 x i1> %1452), !dbg !53
  %1453 = add nsw <8 x i32> %cont_load30.i, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !53
  %1454 = sext i32 %unroll_step21987 to i64, !dbg !16
  %1455 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %1454, !dbg !16
  %vec_cast117.i = bitcast i32* %1455 to <8 x i32>*, !dbg !16
  %1456 = icmp ne <8 x i32> %1395, zeroinitializer, !dbg !53
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %1453, <8 x i32>* %vec_cast117.i, i32 4, <8 x i1> %1456), !dbg !53
  %1457 = add nsw i32 %unroll_step21987, 8, !dbg !76
  %1458 = icmp slt i32 %1457, %152, !dbg !15
  br i1 %1458, label %expr_true156, label %expr_false22, !dbg !15

expr_true158:                                     ; preds = %expr_false16, %if_join262
  %unroll_step18986 = phi i32 [ %2001, %if_join262 ], [ %144, %expr_false16 ]
  %1459 = sext i32 %unroll_step18986 to i64, !dbg !16
  %1460 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %1459, !dbg !16
  %1461 = load float, float* %1460, align 4, !dbg !16
  %1462 = sext i32 %unroll_step18986 to i64, !dbg !16
  %1463 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %1462, !dbg !16
  %1464 = load float, float* %1463, align 4, !dbg !16
  %1465 = sext i32 %unroll_step18986 to i64, !dbg !16
  %1466 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %1465, !dbg !16
  %1467 = load float, float* %1466, align 4, !dbg !16
  %1468 = sext i32 %unroll_step18986 to i64, !dbg !16
  %1469 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %1468, !dbg !16
  %1470 = load float, float* %1469, align 4, !dbg !16
  %1471 = sext i32 %unroll_step18986 to i64, !dbg !16
  %1472 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %1471, !dbg !16
  %1473 = load float, float* %1472, align 4, !dbg !16
  %1474 = sext i32 %unroll_step18986 to i64, !dbg !16
  %1475 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %1474, !dbg !16
  %1476 = load float, float* %1475, align 4, !dbg !16
  %1477 = fneg float %1473, !dbg !17
  %1478 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1479 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %1478, !dbg !18
  %1480 = load i32, i32* %1479, align 4, !dbg !18
  %1481 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1482 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %1481, !dbg !18
  %1483 = load float, float* %1482, align 4, !dbg !18
  %1484 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1485 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %1484, !dbg !18
  %1486 = load float, float* %1485, align 4, !dbg !18
  %1487 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1488 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %1487, !dbg !18
  %1489 = load float, float* %1488, align 4, !dbg !18
  %1490 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1491 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %1490, !dbg !18
  %1492 = load i32, i32* %1491, align 4, !dbg !18
  %1493 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1494 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %1493, !dbg !18
  %1495 = load float, float* %1494, align 4, !dbg !18
  %1496 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1497 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %1496, !dbg !18
  %1498 = load float, float* %1497, align 4, !dbg !18
  %1499 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1500 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %1499, !dbg !18
  %1501 = load float, float* %1500, align 4, !dbg !18
  %1502 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1503 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1066, i64 0, i64 %1502, !dbg !18
  %1504 = load float, float* %1503, align 4, !dbg !18
  %1505 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1506 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %1505, !dbg !18
  %1507 = load i32, i32* %1506, align 4, !dbg !18
  store i32 %1492, i32* %state_2192937.repack, align 8, !dbg !18
  store float %1495, float* %state_2192937.repack1253.repack, align 4, !dbg !18
  store float %1498, float* %state_2192937.repack1253.repack1260, align 8, !dbg !18
  store float %1501, float* %state_2192937.repack1253.repack1262, align 4, !dbg !18
  store float %1504, float* %state_2192937.repack1255, align 8, !dbg !18
  store i32 %1507, i32* %state_2192937.repack1257, align 4, !dbg !18
  %1508 = shl nsw i32 %1480, 2, !dbg !18
  %1509 = sext i32 %1508 to i64, !dbg !18
  %1510 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %1509, !dbg !18
  %1511 = load i32, i32* %1510, align 4, !dbg !18
  %1512 = or i32 %1508, 1, !dbg !18
  %1513 = sext i32 %1512 to i64, !dbg !18
  %1514 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %1513, !dbg !18
  %1515 = load i32, i32* %1514, align 4, !dbg !18
  %1516 = or i32 %1508, 2, !dbg !18
  %1517 = sext i32 %1516 to i64, !dbg !18
  %1518 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %1517, !dbg !18
  %1519 = load i32, i32* %1518, align 4, !dbg !18
  %1520 = sext i32 %1480 to i64, !dbg !18
  %.elt1264 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %1520, i32 0, !dbg !18
  %.unpack1265 = load float, float* %.elt1264, align 4, !dbg !18
  %.elt1266 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %1520, i32 1, !dbg !18
  %.unpack1267 = load float, float* %.elt1266, align 4, !dbg !18
  %.elt1268 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %1520, i32 2, !dbg !18
  %.unpack1269 = load float, float* %.elt1268, align 4, !dbg !18
  %1521 = sext i32 %1511 to i64, !dbg !18
  %.elt1270 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1521, i32 0, !dbg !18
  %.unpack1271 = load float, float* %.elt1270, align 4, !dbg !18
  %.elt1272 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1521, i32 1, !dbg !18
  %.unpack1273 = load float, float* %.elt1272, align 4, !dbg !18
  %.elt1274 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1521, i32 2, !dbg !18
  %.unpack1275 = load float, float* %.elt1274, align 4, !dbg !18
  %1522 = sext i32 %1515 to i64, !dbg !18
  %.elt1276 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1522, i32 0, !dbg !18
  %.unpack1277 = load float, float* %.elt1276, align 4, !dbg !18
  %.elt1278 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1522, i32 1, !dbg !18
  %.unpack1279 = load float, float* %.elt1278, align 4, !dbg !18
  %.elt1280 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1522, i32 2, !dbg !18
  %.unpack1281 = load float, float* %.elt1280, align 4, !dbg !18
  %1523 = sext i32 %1519 to i64, !dbg !18
  %.elt1282 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1523, i32 0, !dbg !18
  %.unpack1283 = load float, float* %.elt1282, align 4, !dbg !18
  %.elt1284 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1523, i32 1, !dbg !18
  %.unpack1285 = load float, float* %.elt1284, align 4, !dbg !18
  %.elt1286 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %1523, i32 2, !dbg !18
  %.unpack1287 = load float, float* %.elt1286, align 4, !dbg !18
  %1524 = fsub float 1.000000e+00, %1486, !dbg !18
  %1525 = fsub float %1524, %1489, !dbg !18
  %1526 = fmul float %1525, %.unpack1271, !dbg !18
  %1527 = fmul float %1486, %.unpack1277, !dbg !18
  %1528 = fadd float %1526, %1527, !dbg !18
  %1529 = fmul float %1489, %.unpack1283, !dbg !18
  %1530 = fadd float %1528, %1529, !dbg !18
  %1531 = fmul float %1530, %1530, !dbg !18
  %1532 = fmul float %1525, %.unpack1273, !dbg !18
  %1533 = fmul float %1486, %.unpack1279, !dbg !18
  %1534 = fadd float %1532, %1533, !dbg !18
  %1535 = fmul float %1489, %.unpack1285, !dbg !18
  %1536 = fadd float %1534, %1535, !dbg !18
  %1537 = fmul float %1536, %1536, !dbg !18
  %1538 = fadd float %1531, %1537, !dbg !18
  %1539 = fmul float %1525, %.unpack1275, !dbg !18
  %1540 = fmul float %1486, %.unpack1281, !dbg !18
  %1541 = fadd float %1539, %1540, !dbg !18
  %1542 = fmul float %1489, %.unpack1287, !dbg !18
  %1543 = fadd float %1541, %1542, !dbg !18
  %1544 = fmul float %1543, %1543, !dbg !18
  %1545 = fadd float %1538, %1544, !dbg !18
  %1546 = call float @llvm.sqrt.f32(float %1545), !dbg !18
  %1547 = fmul float %1470, %.unpack1265, !dbg !19
  %1548 = fmul float %1473, %.unpack1267, !dbg !19
  %1549 = fadd float %1547, %1548, !dbg !19
  %1550 = fmul float %1476, %.unpack1269, !dbg !19
  %1551 = fadd float %1549, %1550, !dbg !19
  %is_entering532 = fcmp ugt float %1551, 0.000000e+00, !dbg !19
  %1552 = fneg float %.unpack1265, !dbg !19
  %1553 = fneg float %.unpack1267, !dbg !19
  %1554 = fneg float %.unpack1269, !dbg !19
  %.pn1292 = select i1 %is_entering532, float %1552, float %.unpack1265, !dbg !19
  %.pn1290 = select i1 %is_entering532, float %1553, float %.unpack1267, !dbg !19
  %.pn1288 = select i1 %is_entering532, float %1554, float %.unpack1269, !dbg !19
  %1555 = fdiv float 1.000000e+00, %1546, !dbg !20
  %1556 = fmul float %1530, %1555, !dbg !20
  %1557 = fmul float %1470, %1556, !dbg !20
  %1558 = fmul float %1536, %1555, !dbg !20
  %1559 = fmul float %1473, %1558, !dbg !20
  %1560 = fadd float %1557, %1559, !dbg !20
  %1561 = fmul float %1543, %1555, !dbg !20
  %1562 = fmul float %1476, %1561, !dbg !20
  %1563 = fadd float %1560, %1562, !dbg !20
  %1564 = fcmp ugt float %1563, 0.000000e+00, !dbg !20
  %1565 = fneg float %1556, !dbg !20
  %1566 = fneg float %1558, !dbg !20
  %1567 = fneg float %1561, !dbg !20
  %.pn1298 = select i1 %1564, float %1565, float %1556, !dbg !20
  %.pn1296 = select i1 %1564, float %1566, float %1558, !dbg !20
  %.pn1294 = select i1 %1564, float %1567, float %1561, !dbg !20
  %1568 = sext i32 %1511 to i64, !dbg !21
  %.elt1299 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %1568, i32 0, !dbg !21
  %.unpack1300 = load float, float* %.elt1299, align 4, !dbg !21
  %1569 = sext i32 %1515 to i64, !dbg !21
  %.elt1303 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %1569, i32 0, !dbg !21
  %.unpack1304 = load float, float* %.elt1303, align 4, !dbg !21
  %1570 = sext i32 %1519 to i64, !dbg !21
  %.elt1307 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %1570, i32 0, !dbg !21
  %.unpack1308 = load float, float* %.elt1307, align 4, !dbg !21
  %1571 = fmul float %1525, %.unpack1300, !dbg !21
  %1572 = fmul float %1486, %.unpack1304, !dbg !21
  %1573 = fadd float %1571, %1572, !dbg !21
  %1574 = fmul float %1489, %.unpack1308, !dbg !21
  %1575 = fadd float %1573, %1574, !dbg !21
  %1576 = call float @llvm.floor.f32(float %1575), !dbg !21
  %.elt1309 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %1570, i32 1, !dbg !21
  %.unpack1310 = load float, float* %.elt1309, align 4, !dbg !21
  %.elt1305 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %1569, i32 1, !dbg !21
  %.unpack1306 = load float, float* %.elt1305, align 4, !dbg !21
  %.elt1301 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %1568, i32 1, !dbg !21
  %.unpack1302 = load float, float* %.elt1301, align 4, !dbg !21
  %1577 = fmul float %1525, %.unpack1302, !dbg !22
  %1578 = fmul float %1486, %.unpack1306, !dbg !22
  %1579 = fadd float %1577, %1578, !dbg !22
  %1580 = fmul float %1489, %.unpack1310, !dbg !22
  %1581 = fadd float %1579, %1580, !dbg !22
  %1582 = call float @llvm.floor.f32(float %1581), !dbg !22
  %1583 = fsub float %1575, %1576, !dbg !22
  %u533 = fmul float %1583, %8, !dbg !22
  %1584 = fptosi float %u533 to i32, !dbg !22
  %1585 = icmp sgt i32 %9, %1584, !dbg !22
  %_cont185 = select i1 %1585, i32 %1584, i32 %9, !dbg !22
  %1586 = fsub float %1581, %1582, !dbg !23
  %v534 = fmul float %1586, %10, !dbg !23
  %1587 = fptosi float %v534 to i32, !dbg !23
  %1588 = icmp sgt i32 %11, %1587, !dbg !23
  %.1494 = select i1 %1588, i32 %1587, i32 %11, !dbg !24
  %1589 = add nsw i32 %_cont185, 1, !dbg !25
  %1590 = icmp slt i32 %1589, %9, !dbg !25
  %_cont193 = select i1 %1590, i32 %1589, i32 %9, !dbg !25
  %1591 = add nsw i32 %.1494, 1, !dbg !26
  %1592 = icmp slt i32 %1591, %11, !dbg !26
  %.1495 = select i1 %1592, i32 %1591, i32 %11, !dbg !24
  %1593 = sitofp i32 %1587 to float, !dbg !27
  %ky535 = fsub float %v534, %1593, !dbg !27
  %1594 = fsub float 1.000000e+00, %ky535, !dbg !27
  %1595 = sitofp i32 %1584 to float, !dbg !27
  %kx536 = fsub float %u533, %1595, !dbg !27
  %1596 = fsub float 1.000000e+00, %kx536, !dbg !27
  %1597 = mul nsw i32 %.1494, %width_2188513, !dbg !27
  %1598 = add nsw i32 %1597, %_cont185, !dbg !27
  %1599 = sext i32 %1598 to i64, !dbg !27
  %1600 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %1599, !dbg !27
  %1601 = load i32, i32* %1600, align 4, !dbg !27
  %r537 = and i32 %1601, 255, !dbg !27
  %1602 = uitofp i32 %r537 to float, !dbg !27
  %1603 = fmul float %1602, 0x3F70101020000000, !dbg !27
  %1604 = fmul float %1596, %1603, !dbg !27
  %1605 = add nsw i32 %1597, %_cont193, !dbg !27
  %1606 = sext i32 %1605 to i64, !dbg !27
  %1607 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %1606, !dbg !27
  %1608 = load i32, i32* %1607, align 4, !dbg !27
  %r538 = and i32 %1608, 255, !dbg !27
  %1609 = uitofp i32 %r538 to float, !dbg !27
  %1610 = fmul float %1609, 0x3F70101020000000, !dbg !27
  %1611 = fmul float %kx536, %1610, !dbg !27
  %1612 = fadd float %1604, %1611, !dbg !27
  %1613 = fmul float %1594, %1612, !dbg !27
  %1614 = mul nsw i32 %.1495, %width_2188513, !dbg !27
  %1615 = add nsw i32 %1614, %_cont185, !dbg !27
  %1616 = sext i32 %1615 to i64, !dbg !27
  %1617 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %1616, !dbg !27
  %1618 = load i32, i32* %1617, align 4, !dbg !27
  %r539 = and i32 %1618, 255, !dbg !27
  %1619 = uitofp i32 %r539 to float, !dbg !27
  %1620 = fmul float %1619, 0x3F70101020000000, !dbg !27
  %1621 = fmul float %1596, %1620, !dbg !27
  %1622 = add nsw i32 %1614, %_cont193, !dbg !27
  %1623 = sext i32 %1622 to i64, !dbg !27
  %1624 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %1623, !dbg !27
  %1625 = load i32, i32* %1624, align 4, !dbg !27
  %r540 = and i32 %1625, 255, !dbg !27
  %1626 = uitofp i32 %r540 to float, !dbg !27
  %1627 = fmul float %1626, 0x3F70101020000000, !dbg !27
  %1628 = fmul float %kx536, %1627, !dbg !27
  %1629 = fadd float %1621, %1628, !dbg !27
  %1630 = fmul float %ky535, %1629, !dbg !27
  %1631 = fadd float %1613, %1630, !dbg !27
  %1632 = fmul float %1631, 0x3FCB367A00000000, !dbg !27
  %1633 = lshr i32 %1601, 8, !dbg !27
  %g541 = and i32 %1633, 255, !dbg !27
  %1634 = uitofp i32 %g541 to float, !dbg !27
  %1635 = fmul float %1634, 0x3F70101020000000, !dbg !27
  %1636 = fmul float %1596, %1635, !dbg !27
  %1637 = lshr i32 %1608, 8, !dbg !27
  %g542 = and i32 %1637, 255, !dbg !27
  %1638 = uitofp i32 %g542 to float, !dbg !27
  %1639 = fmul float %1638, 0x3F70101020000000, !dbg !27
  %1640 = fmul float %kx536, %1639, !dbg !27
  %1641 = fadd float %1636, %1640, !dbg !27
  %1642 = fmul float %1594, %1641, !dbg !27
  %1643 = lshr i32 %1618, 8, !dbg !27
  %g543 = and i32 %1643, 255, !dbg !27
  %1644 = uitofp i32 %g543 to float, !dbg !27
  %1645 = fmul float %1644, 0x3F70101020000000, !dbg !27
  %1646 = fmul float %1596, %1645, !dbg !27
  %1647 = lshr i32 %1625, 8, !dbg !27
  %g544 = and i32 %1647, 255, !dbg !27
  %1648 = uitofp i32 %g544 to float, !dbg !27
  %1649 = fmul float %1648, 0x3F70101020000000, !dbg !27
  %1650 = fmul float %kx536, %1649, !dbg !27
  %1651 = fadd float %1646, %1650, !dbg !27
  %1652 = fmul float %ky535, %1651, !dbg !27
  %1653 = fadd float %1642, %1652, !dbg !27
  %1654 = fmul float %1653, 0x3FE6E2EB20000000, !dbg !27
  %1655 = fadd float %1632, %1654, !dbg !27
  %1656 = lshr i32 %1601, 16, !dbg !27
  %b545 = and i32 %1656, 255, !dbg !27
  %1657 = uitofp i32 %b545 to float, !dbg !27
  %1658 = fmul float %1657, 0x3F70101020000000, !dbg !27
  %1659 = fmul float %1596, %1658, !dbg !27
  %1660 = lshr i32 %1608, 16, !dbg !27
  %b546 = and i32 %1660, 255, !dbg !27
  %1661 = uitofp i32 %b546 to float, !dbg !27
  %1662 = fmul float %1661, 0x3F70101020000000, !dbg !27
  %1663 = fmul float %kx536, %1662, !dbg !27
  %1664 = fadd float %1659, %1663, !dbg !27
  %1665 = fmul float %1594, %1664, !dbg !27
  %1666 = lshr i32 %1618, 16, !dbg !27
  %b547 = and i32 %1666, 255, !dbg !27
  %1667 = uitofp i32 %b547 to float, !dbg !27
  %1668 = fmul float %1667, 0x3F70101020000000, !dbg !27
  %1669 = fmul float %1596, %1668, !dbg !27
  %1670 = lshr i32 %1625, 16, !dbg !27
  %b548 = and i32 %1670, 255, !dbg !27
  %1671 = uitofp i32 %b548 to float, !dbg !27
  %1672 = fmul float %1671, 0x3F70101020000000, !dbg !27
  %1673 = fmul float %kx536, %1672, !dbg !27
  %1674 = fadd float %1669, %1673, !dbg !27
  %1675 = fmul float %ky535, %1674, !dbg !27
  %1676 = fadd float %1665, %1675, !dbg !27
  %1677 = fmul float %1676, 0x3FB27BB300000000, !dbg !27
  %1678 = fadd float %1655, %1677, !dbg !27
  %1679 = fadd float %1678, 0x3FE6E2EB20000000, !dbg !27
  %1680 = fcmp oeq float %1679, 0.000000e+00, !dbg !27
  %1681 = fdiv float %1678, %1679, !dbg !27
  %1682 = select i1 %1680, float 0.000000e+00, float %1681, !dbg !27
  %1683 = load i32, i32* %14, align 8, !dbg !27
  %1684 = icmp eq i32 %1683, 0, !dbg !27
  %1685 = select i1 %1684, i32 1, i32 %1683, !dbg !27
  %1686 = shl i32 %1685, 13, !dbg !27
  %1687 = xor i32 %1685, %1686, !dbg !27
  %1688 = lshr i32 %1687, 17, !dbg !27
  %1689 = xor i32 %1687, %1688, !dbg !27
  %1690 = shl i32 %1689, 5, !dbg !27
  %1691 = xor i32 %1689, %1690, !dbg !27
  %1692 = and i32 %1691, 8388607, !dbg !27
  %1693 = or i32 %1692, 1065353216, !dbg !27
  %1694 = bitcast i32 %1693 to float, !dbg !27
  %1695 = fadd float %1694, -1.000000e+00, !dbg !27
  %1696 = fcmp ugt float %1682, %1695, !dbg !27
  store i32 %1691, i32* %14, align 8, !dbg !27
  %1697 = icmp eq i32 %1691, 0, !dbg !27
  %1698 = select i1 %1697, i32 1, i32 %1691, !dbg !27
  %1699 = shl i32 %1698, 13, !dbg !27
  %1700 = xor i32 %1698, %1699, !dbg !27
  %1701 = lshr i32 %1700, 17, !dbg !27
  %1702 = xor i32 %1700, %1701, !dbg !27
  %1703 = shl i32 %1702, 5, !dbg !27
  %1704 = xor i32 %1702, %1703, !dbg !27
  %1705 = icmp eq i32 %1704, 0, !dbg !27
  %1706 = select i1 %1705, i32 1, i32 %1704, !dbg !27
  %1707 = shl i32 %1706, 13, !dbg !27
  %1708 = xor i32 %1706, %1707, !dbg !27
  %1709 = lshr i32 %1708, 17, !dbg !27
  %1710 = xor i32 %1708, %1709, !dbg !27
  %1711 = shl i32 %1710, 5, !dbg !27
  %1712 = xor i32 %1710, %1711, !dbg !27
  %1713 = and i32 %1712, 8388607, !dbg !27
  %1714 = or i32 %1713, 1065353216, !dbg !27
  %1715 = bitcast i32 %1714 to float, !dbg !27
  %1716 = fadd float %1715, -1.000000e+00, !dbg !27
  %1717 = and i32 %1704, 8388607, !dbg !27
  %1718 = or i32 %1717, 1065353216, !dbg !27
  %1719 = bitcast i32 %1718 to float, !dbg !27
  %1720 = fadd float %1719, -1.000000e+00, !dbg !27
  %phi552 = fmul float %1720, 0x401921FB60000000, !dbg !27
  %1721 = fmul float %.pn1296, %1477, !dbg !27
  %1722 = fmul float %1470, %.pn1298, !dbg !27
  %1723 = fsub float %1721, %1722, !dbg !27
  %1724 = fmul float %1476, %.pn1294, !dbg !27
  %1725 = fsub float %1723, %1724, !dbg !27
  %1726 = fmul float %1725, 2.000000e+00, !dbg !27
  %1727 = fmul float %.pn1294, %1726, !dbg !27
  %1728 = fadd float %1727, %1476, !dbg !27
  %1729 = fmul float %.pn1298, %1726, !dbg !27
  %1730 = fadd float %1729, %1470, !dbg !27
  %1731 = fmul float %.pn1296, %1726, !dbg !27
  %1732 = fadd float %1731, %1473, !dbg !27
  %1733 = fsub float 1.000000e+00, %1682, !dbg !27
  store i32 %1712, i32* %14, align 8, !dbg !28
  br i1 %1696, label %expr_false198, label %expr_true230, !dbg !27

expr_false198:                                    ; preds = %expr_true158
  %1734 = bitcast float %1716 to i32, !dbg !28
  %1735 = uitofp i32 %1734 to float, !dbg !28
  %y549 = fmul float %1735, 0x3E80000000000000, !dbg !28
  %1736 = fadd float %y549, 0xC05F0E6EE0000000, !dbg !28
  %1737 = and i32 %1734, 8388607, !dbg !28
  %mx550 = or i32 %1737, 1056964608, !dbg !28
  %1738 = bitcast i32 %mx550 to float, !dbg !28
  %1739 = fmul float %1738, 0x3FF7F7EEA0000000, !dbg !28
  %1740 = fsub float %1736, %1739, !dbg !28
  %1741 = fadd float %1738, 0x3FD6889F20000000, !dbg !28
  %1742 = fdiv float 0x3FFB9D3460000000, %1741, !dbg !28
  %1743 = fsub float %1740, %1742, !dbg !28
  %1744 = fmul float %1743, 0x3FB3B13B20000000, !dbg !28
  %1745 = fcmp olt float %1744, -1.260000e+02, !dbg !28
  %1746 = select i1 %1745, float -1.260000e+02, float %1744, !dbg !28
  %1747 = fadd float %1746, 0x405E518A20000000, !dbg !28
  %1748 = fptosi float %1746 to i32, !dbg !28
  %1749 = sitofp i32 %1748 to float, !dbg !28
  %1750 = fsub float %1746, %1749, !dbg !28
  %1751 = fcmp olt float %1744, 0.000000e+00, !dbg !28
  %1752 = select i1 %1751, float 1.000000e+00, float 0.000000e+00, !dbg !28
  %z551 = fadd float %1750, %1752, !dbg !28
  %1753 = fsub float 0x40135EBF00000000, %z551, !dbg !28
  %1754 = fdiv float 0x403BBA5FC0000000, %1753, !dbg !28
  %1755 = fadd float %1747, %1754, !dbg !28
  %1756 = fmul float %z551, 0x3FF7D791A0000000, !dbg !28
  %1757 = fsub float %1755, %1756, !dbg !28
  %1758 = fmul float %1757, 0x4160000000000000, !dbg !28
  %1759 = fptosi float %1758 to i32, !dbg !28
  %1760 = bitcast i32 %1759 to float, !dbg !28
  %1761 = call float @llvm.minnum.f32(float %1760, float 1.000000e+00), !dbg !28
  %1762 = fmul float %1761, %1761, !dbg !29
  %1763 = fsub float 1.000000e+00, %1762, !dbg !29
  %1764 = call float @llvm.sqrt.f32(float %1763), !dbg !29
  %1765 = call float @llvm.cos.f32(float %phi552), !dbg !30
  %1766 = call float @llvm.sin.f32(float %phi552), !dbg !31
  %1767 = fcmp oge float %1728, 0.000000e+00, !dbg !32
  %1768 = select i1 %1767, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %1769 = fmul float %1768, %1730, !dbg !32
  %1770 = fmul float %1769, %1730, !dbg !32
  %1771 = fadd float %1768, %1728, !dbg !32
  %a553 = fdiv float -1.000000e+00, %1771, !dbg !32
  %1772 = fmul float %1770, %a553, !dbg !32
  %1773 = fadd float %1772, 1.000000e+00, !dbg !32
  %x554 = fmul float %1764, %1765, !dbg !32
  %1774 = fmul float %1773, %x554, !dbg !32
  %1775 = fmul float %1730, %1732, !dbg !32
  %b555 = fmul float %1775, %a553, !dbg !32
  %y556 = fmul float %1764, %1766, !dbg !32
  %1776 = fmul float %b555, %y556, !dbg !32
  %1777 = fadd float %1774, %1776, !dbg !32
  %1778 = fmul float %1730, %1761, !dbg !32
  %1779 = fadd float %1777, %1778, !dbg !32
  %1780 = fmul float %1779, %.pn1298, !dbg !32
  %1781 = fmul float %1768, %b555, !dbg !32
  %1782 = fmul float %1781, %x554, !dbg !32
  %1783 = fmul float %1732, %1732, !dbg !32
  %1784 = fmul float %1783, %a553, !dbg !32
  %1785 = fadd float %1768, %1784, !dbg !32
  %1786 = fmul float %1785, %y556, !dbg !32
  %1787 = fadd float %1782, %1786, !dbg !32
  %1788 = fmul float %1732, %1761, !dbg !32
  %1789 = fadd float %1787, %1788, !dbg !32
  %1790 = fmul float %1789, %.pn1296, !dbg !32
  %1791 = fadd float %1780, %1790, !dbg !32
  %1792 = fneg float %1768, !dbg !32
  %1793 = fmul float %1730, %1792, !dbg !32
  %1794 = fmul float %1793, %x554, !dbg !32
  %1795 = fmul float %1732, %y556, !dbg !32
  %1796 = fsub float %1794, %1795, !dbg !32
  %1797 = fmul float %1728, %1761, !dbg !32
  %1798 = fadd float %1796, %1797, !dbg !32
  %1799 = fmul float %1798, %.pn1294, !dbg !32
  %1800 = fadd float %1791, %1799, !dbg !32
  %1801 = fcmp oge float %1800, 0.000000e+00, !dbg !32
  %positive_cos_cont210 = select i1 %1801, float %1800, float 0.000000e+00, !dbg !32
  %1802 = fcmp une float %1761, 0.000000e+00, !dbg !33
  %1803 = fdiv float %1716, %1761, !dbg !33
  %.op1311 = fmul float %1803, 1.300000e+01, !dbg !33
  %.op1311.op = fmul float %.op1311, 0x3FC45F3060000000, !dbg !33
  %pdf557 = select i1 %1802, float %.op1311.op, float 0.000000e+00, !dbg !33
  %1804 = fcmp ogt float %pdf557, 0.000000e+00, !dbg !33
  br i1 %1804, label %expr_true212, label %infix_result216, !dbg !33

expr_true212:                                     ; preds = %expr_false198
  %1805 = fmul float %1779, %.pn1292, !dbg !34
  %1806 = fmul float %1789, %.pn1290, !dbg !34
  %1807 = fadd float %1805, %1806, !dbg !34
  %1808 = fmul float %1798, %.pn1288, !dbg !34
  %1809 = fadd float %1807, %1808, !dbg !34
  %1810 = fcmp ogt float %1809, 0.000000e+00, !dbg !34
  br i1 %1810, label %expr_true215, label %infix_result216, !dbg !34

expr_true215:                                     ; preds = %expr_true212
  br label %infix_result216, !dbg !35

infix_result216:                                  ; preds = %expr_false198, %expr_true212, %expr_true215
  %infix_result217 = phi i1 [ true, %expr_true215 ], [ false, %expr_true212 ], [ false, %expr_false198 ], !dbg !36
  %pdf557. = select i1 %infix_result217, float %pdf557, float 1.000000e+00, !dbg !37
  br i1 %infix_result217, label %expr_true223, label %if_join224, !dbg !38

expr_true223:                                     ; preds = %infix_result216
  %1811 = fmul float %pdf557, 1.400000e+01, !dbg !39
  %1812 = fdiv float %1811, 1.300000e+01, !dbg !39
  %1813 = fmul float %1631, %1812, !dbg !39
  %1814 = insertvalue %5 undef, float %1813, 0, !dbg !39
  %1815 = fmul float %1653, %1812, !dbg !39
  %1816 = insertvalue %5 %1814, float %1815, 1, !dbg !39
  %1817 = fmul float %1676, %1812, !dbg !39
  %1818 = insertvalue %5 %1816, float %1817, 2, !dbg !39
  br label %if_join224, !dbg !39

if_join224:                                       ; preds = %infix_result216, %expr_true223
  %if_join225 = phi %5 [ %1818, %expr_true223 ], [ zeroinitializer, %infix_result216 ], !dbg !40
  %.op1518 = fmul float %1800, 0x3FD45F3060000000, !dbg !41
  %1819 = select i1 %1801, float %.op1518, float 0.000000e+00, !dbg !41
  %1820 = fmul float %1733, %1819, !dbg !41
  %1821 = fmul float %1682, %pdf557., !dbg !41
  %1822 = fadd float %1820, %1821, !dbg !41
  %1823 = fmul float %1733, 0.000000e+00, !dbg !41
  %1824 = extractvalue %5 %if_join225, 0, !dbg !41
  %1825 = fmul float %1682, %1824, !dbg !41
  %1826 = fadd float %1823, %1825, !dbg !41
  %1827 = fmul float %1733, 0x3FD45F3060000000, !dbg !41
  %1828 = extractvalue %5 %if_join225, 1, !dbg !41
  %1829 = fmul float %1682, %1828, !dbg !41
  %1830 = fadd float %1827, %1829, !dbg !41
  %1831 = extractvalue %5 %if_join225, 2, !dbg !41
  br label %if_join262, !dbg !41

expr_true230:                                     ; preds = %expr_true158
  %1832 = fsub float 1.000000e+00, %1716, !dbg !28
  %1833 = call float @llvm.sqrt.f32(float %1832), !dbg !28
  %1834 = call float @llvm.sqrt.f32(float %1716), !dbg !42
  %1835 = call float @llvm.cos.f32(float %phi552), !dbg !43
  %1836 = call float @llvm.sin.f32(float %phi552), !dbg !31
  %1837 = fmul float %1833, 0x3FD45F3060000000, !dbg !32
  %1838 = fcmp ogt float %1837, 0.000000e+00, !dbg !32
  %1839 = fcmp oge float %.pn1294, 0.000000e+00, !dbg !32
  %1840 = select i1 %1839, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %1841 = fmul float %1840, %.pn1298, !dbg !32
  %1842 = fmul float %1841, %.pn1298, !dbg !32
  %1843 = fadd float %1840, %.pn1294, !dbg !32
  %a558 = fdiv float -1.000000e+00, %1843, !dbg !32
  %1844 = fmul float %1842, %a558, !dbg !32
  %1845 = fadd float %1844, 1.000000e+00, !dbg !32
  %x559 = fmul float %1834, %1835, !dbg !32
  %1846 = fmul float %1845, %x559, !dbg !32
  %1847 = fmul float %.pn1298, %.pn1296, !dbg !32
  %b560 = fmul float %1847, %a558, !dbg !32
  %y561 = fmul float %1834, %1836, !dbg !32
  %1848 = fmul float %b560, %y561, !dbg !32
  %1849 = fadd float %1846, %1848, !dbg !32
  %1850 = fmul float %.pn1298, %1833, !dbg !32
  %1851 = fadd float %1849, %1850, !dbg !32
  %1852 = fmul float %1840, %b560, !dbg !32
  %1853 = fmul float %1852, %x559, !dbg !32
  %1854 = fmul float %.pn1296, %.pn1296, !dbg !32
  %1855 = fmul float %1854, %a558, !dbg !32
  %1856 = fadd float %1840, %1855, !dbg !32
  %1857 = fmul float %1856, %y561, !dbg !32
  %1858 = fadd float %1853, %1857, !dbg !32
  %1859 = fmul float %.pn1296, %1833, !dbg !32
  %1860 = fadd float %1858, %1859, !dbg !32
  %1861 = fneg float %1840, !dbg !32
  %1862 = fmul float %.pn1298, %1861, !dbg !32
  %1863 = fmul float %1862, %x559, !dbg !32
  %1864 = fmul float %.pn1296, %y561, !dbg !32
  %1865 = fsub float %1863, %1864, !dbg !32
  %1866 = fmul float %.pn1294, %1833, !dbg !32
  %1867 = fadd float %1865, %1866, !dbg !32
  br i1 %1838, label %expr_true240, label %infix_result244, !dbg !32

expr_true240:                                     ; preds = %expr_true230
  %1868 = fmul float %1851, %.pn1292, !dbg !34
  %1869 = fmul float %1860, %.pn1290, !dbg !34
  %1870 = fadd float %1868, %1869, !dbg !34
  %1871 = fmul float %1867, %.pn1288, !dbg !34
  %1872 = fadd float %1870, %1871, !dbg !34
  %1873 = fcmp ogt float %1872, 0.000000e+00, !dbg !34
  br i1 %1873, label %expr_true243, label %infix_result244, !dbg !34

expr_true243:                                     ; preds = %expr_true240
  br label %infix_result244, !dbg !35

infix_result244:                                  ; preds = %expr_true230, %expr_true240, %expr_true243
  %infix_result245 = phi i1 [ true, %expr_true243 ], [ false, %expr_true240 ], [ false, %expr_true230 ], !dbg !36
  %.1497 = select i1 %infix_result245, float %1837, float 1.000000e+00, !dbg !37
  %if_join253 = select i1 %infix_result245, %5 { float 0.000000e+00, float 0x3FD45F3060000000, float 0.000000e+00 }, %5 zeroinitializer, !dbg !38
  %1874 = fmul float %1851, %1730, !dbg !40
  %1875 = fmul float %1860, %1732, !dbg !40
  %1876 = fadd float %1874, %1875, !dbg !40
  %1877 = fmul float %1867, %1728, !dbg !40
  %1878 = fadd float %1876, %1877, !dbg !40
  %1879 = fcmp oge float %1878, 0.000000e+00, !dbg !40
  %.1498 = select i1 %1879, float %1878, float 0.000000e+00, !dbg !44
  %positive_cos_cont261 = select i1 %1879, float %1878, float 0.000000e+00, !dbg !45
  %1880 = fmul float %1733, %.1497, !dbg !46
  %1881 = bitcast float %.1498 to i32, !dbg !46
  %1882 = uitofp i32 %1881 to float, !dbg !46
  %y562 = fmul float %1882, 0x3E80000000000000, !dbg !46
  %1883 = fadd float %y562, 0xC05F0E6EE0000000, !dbg !46
  %1884 = and i32 %1881, 8388607, !dbg !46
  %mx563 = or i32 %1884, 1056964608, !dbg !46
  %1885 = bitcast i32 %mx563 to float, !dbg !46
  %1886 = fmul float %1885, 0x3FF7F7EEA0000000, !dbg !46
  %1887 = fsub float %1883, %1886, !dbg !46
  %1888 = fadd float %1885, 0x3FD6889F20000000, !dbg !46
  %1889 = fdiv float 0x3FFB9D3460000000, %1888, !dbg !46
  %1890 = fsub float %1887, %1889, !dbg !46
  %1891 = fmul float %1890, 1.200000e+01, !dbg !46
  %1892 = fcmp olt float %1891, -1.260000e+02, !dbg !46
  %1893 = select i1 %1892, float -1.260000e+02, float %1891, !dbg !46
  %1894 = fadd float %1893, 0x405E518A20000000, !dbg !46
  %1895 = fptosi float %1893 to i32, !dbg !46
  %1896 = sitofp i32 %1895 to float, !dbg !46
  %1897 = fsub float %1893, %1896, !dbg !46
  %1898 = fcmp olt float %1891, 0.000000e+00, !dbg !46
  %1899 = select i1 %1898, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z564 = fadd float %1897, %1899, !dbg !46
  %1900 = fsub float 0x40135EBF00000000, %z564, !dbg !46
  %1901 = fdiv float 0x403BBA5FC0000000, %1900, !dbg !46
  %1902 = fadd float %1894, %1901, !dbg !46
  %1903 = fmul float %z564, 0x3FF7D791A0000000, !dbg !46
  %1904 = fsub float %1902, %1903, !dbg !46
  %1905 = fmul float %1904, 0x4160000000000000, !dbg !46
  %1906 = fptosi float %1905 to i32, !dbg !46
  %1907 = bitcast i32 %1906 to float, !dbg !46
  %1908 = fmul float %1907, 1.300000e+01, !dbg !46
  %1909 = fmul float %1908, 0x3FC45F3060000000, !dbg !46
  %1910 = fmul float %1682, %1909, !dbg !46
  %1911 = fadd float %1880, %1910, !dbg !46
  %1912 = extractvalue %5 %if_join253, 0, !dbg !46
  %1913 = fmul float %1733, %1912, !dbg !46
  %1914 = bitcast float %positive_cos_cont261 to i32, !dbg !46
  %1915 = uitofp i32 %1914 to float, !dbg !46
  %y565 = fmul float %1915, 0x3E80000000000000, !dbg !46
  %1916 = fadd float %y565, 0xC05F0E6EE0000000, !dbg !46
  %1917 = and i32 %1914, 8388607, !dbg !46
  %mx566 = or i32 %1917, 1056964608, !dbg !46
  %1918 = bitcast i32 %mx566 to float, !dbg !46
  %1919 = fmul float %1918, 0x3FF7F7EEA0000000, !dbg !46
  %1920 = fsub float %1916, %1919, !dbg !46
  %1921 = fadd float %1918, 0x3FD6889F20000000, !dbg !46
  %1922 = fdiv float 0x3FFB9D3460000000, %1921, !dbg !46
  %1923 = fsub float %1920, %1922, !dbg !46
  %1924 = fmul float %1923, 1.200000e+01, !dbg !46
  %1925 = fcmp olt float %1924, -1.260000e+02, !dbg !46
  %1926 = select i1 %1925, float -1.260000e+02, float %1924, !dbg !46
  %1927 = fadd float %1926, 0x405E518A20000000, !dbg !46
  %1928 = fptosi float %1926 to i32, !dbg !46
  %1929 = sitofp i32 %1928 to float, !dbg !46
  %1930 = fsub float %1926, %1929, !dbg !46
  %1931 = fcmp olt float %1924, 0.000000e+00, !dbg !46
  %1932 = select i1 %1931, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z567 = fadd float %1930, %1932, !dbg !46
  %1933 = fsub float 0x40135EBF00000000, %z567, !dbg !46
  %1934 = fdiv float 0x403BBA5FC0000000, %1933, !dbg !46
  %1935 = fadd float %1927, %1934, !dbg !46
  %1936 = fmul float %z567, 0x3FF7D791A0000000, !dbg !46
  %1937 = fsub float %1935, %1936, !dbg !46
  %1938 = fmul float %1937, 0x4160000000000000, !dbg !46
  %1939 = fptosi float %1938 to i32, !dbg !46
  %1940 = bitcast i32 %1939 to float, !dbg !46
  %1941 = fmul float %1940, 1.400000e+01, !dbg !46
  %1942 = fmul float %1941, 0x3FC45F3060000000, !dbg !46
  %1943 = fmul float %1631, %1942, !dbg !46
  %1944 = fmul float %1682, %1943, !dbg !46
  %1945 = fadd float %1913, %1944, !dbg !46
  %1946 = extractvalue %5 %if_join253, 1, !dbg !46
  %1947 = fmul float %1733, %1946, !dbg !46
  %1948 = fmul float %1653, %1942, !dbg !46
  %1949 = fmul float %1682, %1948, !dbg !46
  %1950 = fadd float %1947, %1949, !dbg !46
  %1951 = extractvalue %5 %if_join253, 2, !dbg !46
  %1952 = fmul float %1733, %1951, !dbg !46
  %1953 = fmul float %1676, %1942, !dbg !46
  br label %if_join262, !dbg !46

if_join262:                                       ; preds = %infix_result244, %if_join224
  %.sink1501 = phi float [ %1953, %infix_result244 ], [ %1831, %if_join224 ]
  %.sink1499 = phi float [ %1952, %infix_result244 ], [ %1823, %if_join224 ]
  %.pn1321 = phi float [ %1851, %infix_result244 ], [ %1779, %if_join224 ]
  %.pn1319 = phi float [ %1860, %infix_result244 ], [ %1789, %if_join224 ]
  %.pn1317 = phi float [ %1867, %infix_result244 ], [ %1798, %if_join224 ]
  %positive_cos_cont210.pn = phi float [ %1833, %infix_result244 ], [ %positive_cos_cont210, %if_join224 ]
  %if_join264 = phi float [ %1911, %infix_result244 ], [ %1822, %if_join224 ], !dbg !47
  %.pn1327 = phi float [ %1945, %infix_result244 ], [ %1826, %if_join224 ]
  %.pn1325 = phi float [ %1950, %infix_result244 ], [ %1830, %if_join224 ]
  %1954 = fmul float %1682, %.sink1501, !dbg !48
  %1955 = fadd float %.sink1499, %1954, !dbg !48
  %.unpack1329 = load float, float* %.elt1328, align 4, !dbg !47
  %.unpack1331 = load float, float* %.elt1330, align 8, !dbg !47
  %.unpack1333 = load float, float* %.elt1332, align 4, !dbg !47
  %1956 = load i32, i32* %14, align 8, !dbg !18
  %1957 = load i32, i32* %15, align 4, !dbg !18
  %1958 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1959 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %1958, !dbg !18
  %1960 = fmul float %1470, %1483, !dbg !18
  %1961 = fadd float %1461, %1960, !dbg !18
  store float %1961, float* %1959, align 4, !dbg !18
  %1962 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1963 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %1962, !dbg !18
  %1964 = fmul float %1473, %1483, !dbg !18
  %1965 = fadd float %1464, %1964, !dbg !18
  store float %1965, float* %1963, align 4, !dbg !18
  %1966 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1967 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %1966, !dbg !18
  %1968 = fmul float %1476, %1483, !dbg !18
  %1969 = fadd float %1467, %1968, !dbg !18
  store float %1969, float* %1967, align 4, !dbg !18
  %1970 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1971 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %1970, !dbg !18
  store float %.pn1321, float* %1971, align 4, !dbg !18
  %1972 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1973 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %1972, !dbg !18
  store float %.pn1319, float* %1973, align 4, !dbg !18
  %1974 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1975 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %1974, !dbg !18
  store float %.pn1317, float* %1975, align 4, !dbg !18
  %1976 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1977 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %1976, !dbg !18
  store float 0x3F1A36E2E0000000, float* %1977, align 4, !dbg !18
  %1978 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1979 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %1978, !dbg !18
  store float 0x47EFFFFFE0000000, float* %1979, align 4, !dbg !18
  %1980 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1981 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %1980, !dbg !18
  store i32 %1956, i32* %1981, align 4, !dbg !18
  %1982 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1983 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %1982, !dbg !18
  %1984 = fmul float %.unpack1329, %.pn1327, !dbg !18
  %1985 = fdiv float %positive_cos_cont210.pn, %if_join264, !dbg !18
  %1986 = fmul float %1984, %1985, !dbg !18
  store float %1986, float* %1983, align 4, !dbg !18
  %1987 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1988 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %1987, !dbg !18
  %1989 = fmul float %.unpack1331, %.pn1325, !dbg !18
  %1990 = fmul float %1989, %1985, !dbg !18
  store float %1990, float* %1988, align 4, !dbg !18
  %1991 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1992 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %1991, !dbg !18
  %1993 = fmul float %.unpack1333, %1955, !dbg !18
  %1994 = fmul float %1993, %1985, !dbg !18
  store float %1994, float* %1992, align 4, !dbg !18
  %1995 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1996 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %1995, !dbg !18
  %1997 = fdiv float 1.000000e+00, %if_join264, !dbg !18
  store float %1997, float* %1996, align 4, !dbg !18
  %1998 = sext i32 %unroll_step18986 to i64, !dbg !18
  %1999 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %1998, !dbg !18
  %2000 = add nsw i32 %1957, 1, !dbg !18
  store i32 %2000, i32* %1999, align 4, !dbg !18
  %2001 = add nsw i32 %unroll_step18986, 1, !dbg !18
  %2002 = icmp slt i32 %2001, %140, !dbg !15
  br i1 %2002, label %expr_true158, label %expr_false19, !dbg !15

expr_true275:                                     ; preds = %expr_false13, %expr_true275
  %unroll_step15985 = phi i32 [ %2635, %expr_true275 ], [ %139, %expr_false13 ]
  %2003 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2004 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %2003, !dbg !16
  %vec_cast.i624 = bitcast float* %2004 to <8 x float>*, !dbg !16
  %cont_load.i625 = load <8 x float>, <8 x float>* %vec_cast.i624, align 4, !dbg !16
  %2005 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2006 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %2005, !dbg !16
  %vec_cast1.i626 = bitcast float* %2006 to <8 x float>*, !dbg !16
  %cont_load2.i627 = load <8 x float>, <8 x float>* %vec_cast1.i626, align 4, !dbg !16
  %2007 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2008 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %2007, !dbg !16
  %vec_cast3.i628 = bitcast float* %2008 to <8 x float>*, !dbg !16
  %cont_load4.i629 = load <8 x float>, <8 x float>* %vec_cast3.i628, align 4, !dbg !16
  %2009 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2010 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %2009, !dbg !16
  %vec_cast5.i630 = bitcast float* %2010 to <8 x float>*, !dbg !16
  %cont_load6.i631 = load <8 x float>, <8 x float>* %vec_cast5.i630, align 4, !dbg !16
  %2011 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2012 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %2011, !dbg !16
  %vec_cast7.i632 = bitcast float* %2012 to <8 x float>*, !dbg !16
  %cont_load8.i633 = load <8 x float>, <8 x float>* %vec_cast7.i632, align 4, !dbg !16
  %2013 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2014 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %2013, !dbg !16
  %vec_cast9.i634 = bitcast float* %2014 to <8 x float>*, !dbg !16
  %cont_load10.i635 = load <8 x float>, <8 x float>* %vec_cast9.i634, align 4, !dbg !16
  %2015 = fneg <8 x float> %cont_load8.i633, !dbg !77
  %2016 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2017 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %2016, !dbg !16
  %vec_cast11.i636 = bitcast i32* %2017 to <8 x i32>*, !dbg !16
  %cont_load12.i637 = load <8 x i32>, <8 x i32>* %vec_cast11.i636, align 4, !dbg !16
  %2018 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2019 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %2018, !dbg !16
  %vec_cast13.i638 = bitcast float* %2019 to <8 x float>*, !dbg !16
  %cont_load14.i639 = load <8 x float>, <8 x float>* %vec_cast13.i638, align 4, !dbg !16
  %2020 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2021 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %2020, !dbg !16
  %vec_cast15.i640 = bitcast float* %2021 to <8 x float>*, !dbg !16
  %cont_load16.i641 = load <8 x float>, <8 x float>* %vec_cast15.i640, align 4, !dbg !16
  %2022 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2023 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %2022, !dbg !16
  %vec_cast17.i642 = bitcast float* %2023 to <8 x float>*, !dbg !16
  %cont_load18.i643 = load <8 x float>, <8 x float>* %vec_cast17.i642, align 4, !dbg !16
  %2024 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2025 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %2024, !dbg !16
  %vec_cast19.i644 = bitcast i32* %2025 to <8 x i32>*, !dbg !16
  %cont_load20.i645 = load <8 x i32>, <8 x i32>* %vec_cast19.i644, align 4, !dbg !16
  %2026 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2027 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %2026, !dbg !16
  %vec_cast21.i646 = bitcast float* %2027 to <8 x float>*, !dbg !16
  %cont_load22.i647 = load <8 x float>, <8 x float>* %vec_cast21.i646, align 4, !dbg !16
  %2028 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2029 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %2028, !dbg !16
  %vec_cast23.i656 = bitcast float* %2029 to <8 x float>*, !dbg !16
  %cont_load24.i657 = load <8 x float>, <8 x float>* %vec_cast23.i656, align 4, !dbg !16
  %2030 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2031 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %2030, !dbg !16
  %vec_cast25.i666 = bitcast float* %2031 to <8 x float>*, !dbg !16
  %cont_load26.i667 = load <8 x float>, <8 x float>* %vec_cast25.i666, align 4, !dbg !16
  %2032 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2033 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %2032, !dbg !16
  %vec_cast29.i678 = bitcast i32* %2033 to <8 x i32>*, !dbg !16
  %cont_load30.i679 = load <8 x i32>, <8 x i32>* %vec_cast29.i678, align 4, !dbg !16
  %2034 = shl nsw <8 x i32> %cont_load12.i637, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !81
  %2035 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %65, <8 x i32> %2034, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %2036 = bitcast <8 x float> %2035 to <8 x i32>, !dbg !16
  %2037 = or <8 x i32> %2034, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !81
  %2038 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %66, <8 x i32> %2037, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %2039 = bitcast <8 x float> %2038 to <8 x i32>, !dbg !16
  %2040 = or <8 x i32> %2034, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !81
  %2041 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %67, <8 x i32> %2040, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %2042 = bitcast <8 x float> %2041 to <8 x i32>, !dbg !16
  %2043 = mul <8 x i32> %cont_load12.i637, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2044 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %68, <8 x i32> %2043, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2045 = mul <8 x i32> %cont_load12.i637, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2046 = add <8 x i32> %2045, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %2047 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %69, <8 x i32> %2046, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2048 = mul <8 x i32> %cont_load12.i637, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2049 = add <8 x i32> %2048, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %2050 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %70, <8 x i32> %2049, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2051 = mul <8 x i32> %2036, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2052 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %71, <8 x i32> %2051, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2053 = mul <8 x i32> %2036, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2054 = add <8 x i32> %2053, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %2055 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %72, <8 x i32> %2054, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2056 = mul <8 x i32> %2036, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2057 = add <8 x i32> %2056, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %2058 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %73, <8 x i32> %2057, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2059 = mul <8 x i32> %2039, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2060 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %74, <8 x i32> %2059, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2061 = mul <8 x i32> %2039, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2062 = add <8 x i32> %2061, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %2063 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %75, <8 x i32> %2062, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2064 = mul <8 x i32> %2039, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2065 = add <8 x i32> %2064, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %2066 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %76, <8 x i32> %2065, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2067 = mul <8 x i32> %2042, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2068 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %77, <8 x i32> %2067, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2069 = mul <8 x i32> %2042, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2070 = add <8 x i32> %2069, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %2071 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %78, <8 x i32> %2070, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2072 = mul <8 x i32> %2042, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %2073 = add <8 x i32> %2072, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %2074 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %79, <8 x i32> %2073, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2075 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %cont_load16.i641, !dbg !81
  %2076 = fsub <8 x float> %2075, %cont_load18.i643, !dbg !81
  %2077 = fmul <8 x float> %2076, %2052, !dbg !81
  %2078 = fmul <8 x float> %cont_load16.i641, %2060, !dbg !81
  %2079 = fadd <8 x float> %2077, %2078, !dbg !81
  %2080 = fmul <8 x float> %cont_load18.i643, %2068, !dbg !81
  %2081 = fadd <8 x float> %2079, %2080, !dbg !81
  %2082 = fmul <8 x float> %2081, %2081, !dbg !81
  %2083 = fmul <8 x float> %2076, %2055, !dbg !81
  %2084 = fmul <8 x float> %cont_load16.i641, %2063, !dbg !81
  %2085 = fadd <8 x float> %2083, %2084, !dbg !81
  %2086 = fmul <8 x float> %cont_load18.i643, %2071, !dbg !81
  %2087 = fadd <8 x float> %2085, %2086, !dbg !81
  %2088 = fmul <8 x float> %2087, %2087, !dbg !81
  %2089 = fadd <8 x float> %2082, %2088, !dbg !81
  %2090 = fmul <8 x float> %2076, %2058, !dbg !81
  %2091 = fmul <8 x float> %cont_load16.i641, %2066, !dbg !81
  %2092 = fadd <8 x float> %2090, %2091, !dbg !81
  %2093 = fmul <8 x float> %cont_load18.i643, %2074, !dbg !81
  %2094 = fadd <8 x float> %2092, %2093, !dbg !81
  %2095 = fmul <8 x float> %2094, %2094, !dbg !81
  %2096 = fadd <8 x float> %2089, %2095, !dbg !81
  %.mapped.i681 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %2096), !dbg !16
  %2097 = fmul <8 x float> %cont_load6.i631, %2044, !dbg !82
  %2098 = fmul <8 x float> %cont_load8.i633, %2047, !dbg !82
  %2099 = fadd <8 x float> %2097, %2098, !dbg !82
  %2100 = fmul <8 x float> %cont_load10.i635, %2050, !dbg !82
  %2101 = fadd <8 x float> %2099, %2100, !dbg !82
  %2102 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2101, <8 x float> zeroinitializer, i8 2), !dbg !82
  %2103 = bitcast <8 x float> %2102 to <8 x i32>, !dbg !82
  %2104 = xor <8 x i32> %2103, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !16
  %2105 = fneg <8 x float> %2044, !dbg !83
  %2106 = fneg <8 x float> %2047, !dbg !83
  %2107 = fneg <8 x float> %2050, !dbg !83
  %2108 = bitcast <8 x i32> %2104 to <8 x float>, !dbg !16
  %2109 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2044, <8 x float> %2105, <8 x float> %2108), !dbg !16
  %2110 = bitcast <8 x i32> %2104 to <8 x float>, !dbg !16
  %2111 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2047, <8 x float> %2106, <8 x float> %2110), !dbg !16
  %2112 = bitcast <8 x i32> %2104 to <8 x float>, !dbg !16
  %2113 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2050, <8 x float> %2107, <8 x float> %2112), !dbg !16
  %2114 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped.i681, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>), !dbg !84
  %2115 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2114, !dbg !84
  %2116 = fmul <8 x float> %2081, %2115, !dbg !84
  %2117 = fmul <8 x float> %cont_load6.i631, %2116, !dbg !84
  %2118 = fmul <8 x float> %2087, %2115, !dbg !84
  %2119 = fmul <8 x float> %cont_load8.i633, %2118, !dbg !84
  %2120 = fadd <8 x float> %2117, %2119, !dbg !84
  %2121 = fmul <8 x float> %2094, %2115, !dbg !84
  %2122 = fmul <8 x float> %cont_load10.i635, %2121, !dbg !84
  %2123 = fadd <8 x float> %2120, %2122, !dbg !84
  %2124 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2123, <8 x float> zeroinitializer, i8 2), !dbg !84
  %2125 = bitcast <8 x float> %2124 to <8 x i32>, !dbg !84
  %2126 = xor <8 x i32> %2125, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !84
  %2127 = fneg <8 x float> %2116, !dbg !85
  %2128 = fneg <8 x float> %2118, !dbg !85
  %2129 = fneg <8 x float> %2121, !dbg !85
  %2130 = bitcast <8 x i32> %2126 to <8 x float>, !dbg !16
  %2131 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2116, <8 x float> %2127, <8 x float> %2130), !dbg !16
  %2132 = bitcast <8 x i32> %2126 to <8 x float>, !dbg !16
  %2133 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2118, <8 x float> %2128, <8 x float> %2132), !dbg !16
  %2134 = bitcast <8 x i32> %2126 to <8 x float>, !dbg !16
  %2135 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2121, <8 x float> %2129, <8 x float> %2134), !dbg !16
  %2136 = shl <8 x i32> %2036, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %2137 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %80, <8 x i32> %2136, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2138 = shl <8 x i32> %2036, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %2139 = or <8 x i32> %2138, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %2140 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %81, <8 x i32> %2139, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2141 = shl <8 x i32> %2039, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %2142 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %82, <8 x i32> %2141, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2143 = shl <8 x i32> %2039, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %2144 = or <8 x i32> %2143, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %2145 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %83, <8 x i32> %2144, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2146 = shl <8 x i32> %2042, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %2147 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %84, <8 x i32> %2146, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %2148 = shl <8 x i32> %2042, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !86
  %2149 = or <8 x i32> %2148, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !86
  %2150 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %85, <8 x i32> %2149, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !86
  %2151 = fmul <8 x float> %2076, %2137, !dbg !86
  %2152 = fmul <8 x float> %cont_load16.i641, %2142, !dbg !86
  %2153 = fadd <8 x float> %2151, %2152, !dbg !86
  %2154 = fmul <8 x float> %cont_load18.i643, %2147, !dbg !86
  %2155 = fadd <8 x float> %2153, %2154, !dbg !86
  %.mapped31.i684 = call <8 x float> @xfloorf_avx2(<8 x float> %2155), !dbg !16
  %2156 = fmul <8 x float> %2076, %2140, !dbg !87
  %2157 = fmul <8 x float> %cont_load16.i641, %2145, !dbg !87
  %2158 = fadd <8 x float> %2156, %2157, !dbg !87
  %2159 = fmul <8 x float> %cont_load18.i643, %2150, !dbg !87
  %2160 = fadd <8 x float> %2158, %2159, !dbg !87
  %.mapped32.i685 = call <8 x float> @xfloorf_avx2(<8 x float> %2160), !dbg !16
  %2161 = fsub <8 x float> %2155, %.mapped31.i684, !dbg !87
  %u_SIMD.i688 = fmul <8 x float> %2161, %.splat.i687, !dbg !87
  %2162 = fptosi <8 x float> %u_SIMD.i688 to <8 x i32>, !dbg !87
  %2163 = icmp sgt <8 x i32> %.splat34.i690, %2162, !dbg !88
  %2164 = select <8 x i1> %2163, <8 x i32> %2162, <8 x i32> %.splat34.i690, !dbg !88
  %2165 = fsub <8 x float> %2160, %.mapped32.i685, !dbg !88
  %v_SIMD.i693 = fmul <8 x float> %2165, %.splat36.i692, !dbg !88
  %2166 = fptosi <8 x float> %v_SIMD.i693 to <8 x i32>, !dbg !88
  %2167 = icmp sgt <8 x i32> %.splat38.i695, %2166, !dbg !89
  %2168 = select <8 x i1> %2167, <8 x i32> %2166, <8 x i32> %.splat38.i695, !dbg !89
  %2169 = add nsw <8 x i32> %2164, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !89
  %2170 = icmp slt <8 x i32> %2169, %.splat34.i690, !dbg !90
  %2171 = select <8 x i1> %2170, <8 x i32> %2169, <8 x i32> %.splat34.i690, !dbg !90
  %2172 = add nsw <8 x i32> %2168, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !90
  %2173 = icmp slt <8 x i32> %2172, %.splat38.i695, !dbg !91
  %2174 = select <8 x i1> %2173, <8 x i32> %2172, <8 x i32> %.splat38.i695, !dbg !91
  %2175 = sitofp <8 x i32> %2166 to <8 x float>, !dbg !91
  %ky_SIMD.i696 = fsub <8 x float> %v_SIMD.i693, %2175, !dbg !91
  %2176 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %ky_SIMD.i696, !dbg !91
  %2177 = sitofp <8 x i32> %2162 to <8 x float>, !dbg !91
  %kx_SIMD.i697 = fsub <8 x float> %u_SIMD.i688, %2177, !dbg !91
  %2178 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %kx_SIMD.i697, !dbg !91
  %2179 = mul nsw <8 x i32> %2168, %.splat40.i683, !dbg !91
  %2180 = add nsw <8 x i32> %2179, %2164, !dbg !91
  %2181 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %90, <8 x i32> %2180, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !91
  %2182 = bitcast <8 x float> %2181 to <8 x i32>, !dbg !91
  %r_SIMD.i698 = and <8 x i32> %2182, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2183 = uitofp <8 x i32> %r_SIMD.i698 to <8 x float>, !dbg !91
  %2184 = fmul <8 x float> %2183, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2185 = fmul <8 x float> %2178, %2184, !dbg !91
  %2186 = add nsw <8 x i32> %2179, %2171, !dbg !91
  %2187 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %91, <8 x i32> %2186, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !91
  %2188 = bitcast <8 x float> %2187 to <8 x i32>, !dbg !91
  %r108_SIMD.i = and <8 x i32> %2188, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2189 = uitofp <8 x i32> %r108_SIMD.i to <8 x float>, !dbg !91
  %2190 = fmul <8 x float> %2189, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2191 = fmul <8 x float> %kx_SIMD.i697, %2190, !dbg !91
  %2192 = fadd <8 x float> %2185, %2191, !dbg !91
  %2193 = fmul <8 x float> %2176, %2192, !dbg !91
  %2194 = mul nsw <8 x i32> %2174, %.splat40.i683, !dbg !91
  %2195 = add nsw <8 x i32> %2194, %2164, !dbg !91
  %2196 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %92, <8 x i32> %2195, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !91
  %2197 = bitcast <8 x float> %2196 to <8 x i32>, !dbg !91
  %r109_SIMD.i = and <8 x i32> %2197, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2198 = uitofp <8 x i32> %r109_SIMD.i to <8 x float>, !dbg !91
  %2199 = fmul <8 x float> %2198, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2200 = fmul <8 x float> %2178, %2199, !dbg !91
  %2201 = add nsw <8 x i32> %2194, %2171, !dbg !91
  %2202 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %93, <8 x i32> %2201, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !91
  %2203 = bitcast <8 x float> %2202 to <8 x i32>, !dbg !91
  %r110_SIMD.i = and <8 x i32> %2203, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2204 = uitofp <8 x i32> %r110_SIMD.i to <8 x float>, !dbg !91
  %2205 = fmul <8 x float> %2204, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2206 = fmul <8 x float> %kx_SIMD.i697, %2205, !dbg !91
  %2207 = fadd <8 x float> %2200, %2206, !dbg !91
  %2208 = fmul <8 x float> %ky_SIMD.i696, %2207, !dbg !91
  %2209 = fadd <8 x float> %2193, %2208, !dbg !91
  %2210 = fmul <8 x float> %2209, <float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000>, !dbg !91
  %2211 = lshr <8 x i32> %2182, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !91
  %g_SIMD.i699 = and <8 x i32> %2211, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2212 = uitofp <8 x i32> %g_SIMD.i699 to <8 x float>, !dbg !91
  %2213 = fmul <8 x float> %2212, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2214 = fmul <8 x float> %2178, %2213, !dbg !91
  %2215 = lshr <8 x i32> %2188, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !91
  %g111_SIMD.i = and <8 x i32> %2215, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2216 = uitofp <8 x i32> %g111_SIMD.i to <8 x float>, !dbg !91
  %2217 = fmul <8 x float> %2216, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2218 = fmul <8 x float> %kx_SIMD.i697, %2217, !dbg !91
  %2219 = fadd <8 x float> %2214, %2218, !dbg !91
  %2220 = fmul <8 x float> %2176, %2219, !dbg !91
  %2221 = lshr <8 x i32> %2197, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !91
  %g112_SIMD.i = and <8 x i32> %2221, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2222 = uitofp <8 x i32> %g112_SIMD.i to <8 x float>, !dbg !91
  %2223 = fmul <8 x float> %2222, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2224 = fmul <8 x float> %2178, %2223, !dbg !91
  %2225 = lshr <8 x i32> %2203, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !91
  %g113_SIMD.i = and <8 x i32> %2225, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2226 = uitofp <8 x i32> %g113_SIMD.i to <8 x float>, !dbg !91
  %2227 = fmul <8 x float> %2226, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2228 = fmul <8 x float> %kx_SIMD.i697, %2227, !dbg !91
  %2229 = fadd <8 x float> %2224, %2228, !dbg !91
  %2230 = fmul <8 x float> %ky_SIMD.i696, %2229, !dbg !91
  %2231 = fadd <8 x float> %2220, %2230, !dbg !91
  %2232 = fmul <8 x float> %2231, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>, !dbg !91
  %2233 = fadd <8 x float> %2210, %2232, !dbg !91
  %2234 = lshr <8 x i32> %2182, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !91
  %b_SIMD.i700 = and <8 x i32> %2234, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2235 = uitofp <8 x i32> %b_SIMD.i700 to <8 x float>, !dbg !91
  %2236 = fmul <8 x float> %2235, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2237 = fmul <8 x float> %2178, %2236, !dbg !91
  %2238 = lshr <8 x i32> %2188, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !91
  %b114_SIMD.i = and <8 x i32> %2238, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2239 = uitofp <8 x i32> %b114_SIMD.i to <8 x float>, !dbg !91
  %2240 = fmul <8 x float> %2239, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2241 = fmul <8 x float> %kx_SIMD.i697, %2240, !dbg !91
  %2242 = fadd <8 x float> %2237, %2241, !dbg !91
  %2243 = fmul <8 x float> %2176, %2242, !dbg !91
  %2244 = lshr <8 x i32> %2197, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !91
  %b115_SIMD.i = and <8 x i32> %2244, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2245 = uitofp <8 x i32> %b115_SIMD.i to <8 x float>, !dbg !91
  %2246 = fmul <8 x float> %2245, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2247 = fmul <8 x float> %2178, %2246, !dbg !91
  %2248 = lshr <8 x i32> %2203, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !91
  %b116_SIMD.i = and <8 x i32> %2248, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !91
  %2249 = uitofp <8 x i32> %b116_SIMD.i to <8 x float>, !dbg !91
  %2250 = fmul <8 x float> %2249, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !91
  %2251 = fmul <8 x float> %kx_SIMD.i697, %2250, !dbg !91
  %2252 = fadd <8 x float> %2247, %2251, !dbg !91
  %2253 = fmul <8 x float> %ky_SIMD.i696, %2252, !dbg !91
  %2254 = fadd <8 x float> %2243, %2253, !dbg !91
  %2255 = fmul <8 x float> %2254, <float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000>, !dbg !91
  %2256 = fadd <8 x float> %2233, %2255, !dbg !91
  %2257 = fadd <8 x float> %2256, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>, !dbg !91
  %2258 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2257, <8 x float> zeroinitializer, i8 0), !dbg !16
  %2259 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2257, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>), !dbg !91
  %2260 = fdiv <8 x float> %2256, %2259, !dbg !91
  %2261 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2260, <8 x float> zeroinitializer, <8 x float> %2258), !dbg !91
  %2262 = icmp eq <8 x i32> %cont_load20.i645, zeroinitializer, !dbg !91
  %2263 = sext <8 x i1> %2262 to <8 x i32>, !dbg !91
  %2264 = bitcast <8 x i32> %cont_load20.i645 to <8 x float>, !dbg !91
  %2265 = bitcast <8 x i32> %2263 to <8 x float>, !dbg !91
  %2266 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2264, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %2265), !dbg !91
  %2267 = bitcast <8 x float> %2266 to <8 x i32>, !dbg !91
  %2268 = shl <8 x i32> %2267, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !91
  %2269 = xor <8 x i32> %2268, %2267, !dbg !91
  %2270 = lshr <8 x i32> %2269, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !91
  %2271 = xor <8 x i32> %2269, %2270, !dbg !91
  %2272 = shl <8 x i32> %2271, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !91
  %2273 = xor <8 x i32> %2271, %2272, !dbg !91
  %2274 = and <8 x i32> %2273, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !91
  %2275 = or <8 x i32> %2274, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !91
  %2276 = bitcast <8 x i32> %2275 to <8 x float>, !dbg !16
  %2277 = fadd <8 x float> %2276, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !91
  %2278 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2261, <8 x float> %2277, i8 2), !dbg !91
  %2279 = bitcast <8 x float> %2278 to <8 x i32>, !dbg !91
  %2280 = icmp eq <8 x i32> %2273, zeroinitializer, !dbg !91
  %2281 = sext <8 x i1> %2280 to <8 x i32>, !dbg !91
  %2282 = bitcast <8 x i32> %2273 to <8 x float>, !dbg !91
  %2283 = bitcast <8 x i32> %2281 to <8 x float>, !dbg !91
  %2284 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2282, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %2283), !dbg !91
  %2285 = bitcast <8 x float> %2284 to <8 x i32>, !dbg !91
  %2286 = shl <8 x i32> %2285, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !91
  %2287 = xor <8 x i32> %2286, %2285, !dbg !91
  %2288 = lshr <8 x i32> %2287, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !91
  %2289 = xor <8 x i32> %2287, %2288, !dbg !91
  %2290 = shl <8 x i32> %2289, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !91
  %2291 = xor <8 x i32> %2289, %2290, !dbg !91
  %2292 = icmp eq <8 x i32> %2291, zeroinitializer, !dbg !91
  %2293 = sext <8 x i1> %2292 to <8 x i32>, !dbg !91
  %2294 = bitcast <8 x i32> %2291 to <8 x float>, !dbg !91
  %2295 = bitcast <8 x i32> %2293 to <8 x float>, !dbg !91
  %2296 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2294, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %2295), !dbg !91
  %2297 = bitcast <8 x float> %2296 to <8 x i32>, !dbg !91
  %2298 = shl <8 x i32> %2297, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !91
  %2299 = xor <8 x i32> %2298, %2297, !dbg !91
  %2300 = lshr <8 x i32> %2299, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !91
  %2301 = xor <8 x i32> %2299, %2300, !dbg !91
  %2302 = shl <8 x i32> %2301, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !91
  %2303 = xor <8 x i32> %2301, %2302, !dbg !91
  %2304 = and <8 x i32> %2303, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !91
  %2305 = or <8 x i32> %2304, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !91
  %2306 = bitcast <8 x i32> %2305 to <8 x float>, !dbg !16
  %2307 = fadd <8 x float> %2306, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !91
  %2308 = and <8 x i32> %2291, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !91
  %2309 = or <8 x i32> %2308, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !91
  %2310 = bitcast <8 x i32> %2309 to <8 x float>, !dbg !16
  %2311 = fadd <8 x float> %2310, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !91
  %phi_SIMD.i701 = fmul <8 x float> %2311, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, !dbg !91
  %2312 = fmul <8 x float> %2133, %2015, !dbg !91
  %2313 = fmul <8 x float> %cont_load6.i631, %2131, !dbg !91
  %2314 = fsub <8 x float> %2312, %2313, !dbg !91
  %2315 = fmul <8 x float> %cont_load10.i635, %2135, !dbg !91
  %2316 = fsub <8 x float> %2314, %2315, !dbg !91
  %2317 = fmul <8 x float> %2316, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, !dbg !91
  %2318 = fmul <8 x float> %2135, %2317, !dbg !91
  %2319 = fadd <8 x float> %2318, %cont_load10.i635, !dbg !91
  %2320 = fmul <8 x float> %2131, %2317, !dbg !91
  %2321 = fadd <8 x float> %2320, %cont_load6.i631, !dbg !91
  %2322 = fmul <8 x float> %2133, %2317, !dbg !91
  %2323 = fadd <8 x float> %2322, %cont_load8.i633, !dbg !91
  %2324 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2261, !dbg !91
  %2325 = xor <8 x i32> %2279, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !91
  %2326 = bitcast <8 x float> %2307 to <8 x i32>, !dbg !16
  %2327 = uitofp <8 x i32> %2326 to <8 x float>, !dbg !92
  %y_SIMD.i702 = fmul <8 x float> %2327, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !92
  %2328 = fadd <8 x float> %y_SIMD.i702, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !92
  %2329 = and <8 x i32> %2326, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !92
  %mx_SIMD.i703 = or <8 x i32> %2329, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !92
  %2330 = bitcast <8 x i32> %mx_SIMD.i703 to <8 x float>, !dbg !16
  %2331 = fmul <8 x float> %2330, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !92
  %2332 = fsub <8 x float> %2328, %2331, !dbg !92
  %2333 = fadd <8 x float> %2330, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !92
  %2334 = bitcast <8 x i32> %2325 to <8 x float>, !dbg !92
  %2335 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2333, <8 x float> %2334), !dbg !92
  %2336 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2335, !dbg !92
  %2337 = fsub <8 x float> %2332, %2336, !dbg !92
  %2338 = fmul <8 x float> %2337, <float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000, float 0x3FB3B13B20000000>, !dbg !92
  %2339 = fcmp fast olt <8 x float> %2338, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !92
  %2340 = select <8 x i1> %2339, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %2338, !dbg !92
  %2341 = fadd <8 x float> %2340, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !92
  %2342 = fptosi <8 x float> %2340 to <8 x i32>, !dbg !92
  %2343 = sitofp <8 x i32> %2342 to <8 x float>, !dbg !92
  %2344 = fsub <8 x float> %2340, %2343, !dbg !92
  %2345 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2338, <8 x float> zeroinitializer, i8 1), !dbg !92
  %2346 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2345), !dbg !92
  %z_SIMD.i704 = fadd <8 x float> %2344, %2346, !dbg !92
  %2347 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z_SIMD.i704, !dbg !92
  %2348 = bitcast <8 x i32> %2325 to <8 x float>, !dbg !92
  %2349 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2347, <8 x float> %2348), !dbg !92
  %2350 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2349, !dbg !92
  %2351 = fadd <8 x float> %2341, %2350, !dbg !92
  %2352 = fmul <8 x float> %z_SIMD.i704, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !92
  %2353 = fsub <8 x float> %2351, %2352, !dbg !92
  %2354 = fmul <8 x float> %2353, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !92
  %2355 = fptosi <8 x float> %2354 to <8 x i32>, !dbg !92
  %2356 = bitcast <8 x i32> %2355 to <8 x float>, !dbg !16
  %.mapped44.i705 = call <8 x float> @xfminf_avx2(<8 x float> %2356, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>), !dbg !16
  %2357 = fmul <8 x float> %.mapped44.i705, %.mapped44.i705, !dbg !93
  %2358 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2357, !dbg !93
  %.mapped45.i706 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %2358), !dbg !16
  %.mapped46.i707 = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i701), !dbg !16
  %.mapped47.i708 = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i701), !dbg !16
  %2359 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %2319, i8 2), !dbg !94
  %2360 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2359), !dbg !94
  %2361 = fmul <8 x float> %2360, %2321, !dbg !94
  %2362 = fmul <8 x float> %2361, %2321, !dbg !94
  %2363 = fadd <8 x float> %2360, %2319, !dbg !94
  %2364 = bitcast <8 x i32> %2325 to <8 x float>, !dbg !94
  %2365 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2363, <8 x float> %2364), !dbg !94
  %a_SIMD.i709 = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %2365, !dbg !94
  %2366 = fmul <8 x float> %2362, %a_SIMD.i709, !dbg !94
  %2367 = fadd <8 x float> %2366, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !94
  %x_SIMD.i710 = fmul <8 x float> %.mapped45.i706, %.mapped46.i707, !dbg !94
  %2368 = fmul <8 x float> %2367, %x_SIMD.i710, !dbg !94
  %2369 = fmul <8 x float> %2321, %2323, !dbg !94
  %b117_SIMD.i = fmul <8 x float> %2369, %a_SIMD.i709, !dbg !94
  %y118_SIMD.i = fmul <8 x float> %.mapped45.i706, %.mapped47.i708, !dbg !94
  %2370 = fmul <8 x float> %b117_SIMD.i, %y118_SIMD.i, !dbg !94
  %2371 = fadd <8 x float> %2368, %2370, !dbg !94
  %2372 = fmul <8 x float> %2321, %.mapped44.i705, !dbg !94
  %2373 = fadd <8 x float> %2371, %2372, !dbg !94
  %2374 = fmul <8 x float> %2373, %2131, !dbg !94
  %2375 = fmul <8 x float> %2360, %b117_SIMD.i, !dbg !94
  %2376 = fmul <8 x float> %2375, %x_SIMD.i710, !dbg !94
  %2377 = fmul <8 x float> %2323, %2323, !dbg !94
  %2378 = fmul <8 x float> %2377, %a_SIMD.i709, !dbg !94
  %2379 = fadd <8 x float> %2360, %2378, !dbg !94
  %2380 = fmul <8 x float> %2379, %y118_SIMD.i, !dbg !94
  %2381 = fadd <8 x float> %2376, %2380, !dbg !94
  %2382 = fmul <8 x float> %2323, %.mapped44.i705, !dbg !94
  %2383 = fadd <8 x float> %2381, %2382, !dbg !94
  %2384 = fmul <8 x float> %2383, %2133, !dbg !94
  %2385 = fadd <8 x float> %2374, %2384, !dbg !94
  %2386 = fneg <8 x float> %2360, !dbg !94
  %2387 = fmul <8 x float> %2321, %2386, !dbg !94
  %2388 = fmul <8 x float> %2387, %x_SIMD.i710, !dbg !94
  %2389 = fmul <8 x float> %2323, %y118_SIMD.i, !dbg !94
  %2390 = fsub <8 x float> %2388, %2389, !dbg !94
  %2391 = fmul <8 x float> %2319, %.mapped44.i705, !dbg !94
  %2392 = fadd <8 x float> %2390, %2391, !dbg !94
  %2393 = fmul <8 x float> %2392, %2135, !dbg !94
  %2394 = fadd <8 x float> %2385, %2393, !dbg !94
  %2395 = fcmp fast oge <8 x float> %2394, zeroinitializer, !dbg !95
  %2396 = select <8 x i1> %2395, <8 x float> %2394, <8 x float> zeroinitializer, !dbg !95
  %2397 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %.mapped44.i705, <8 x float> zeroinitializer, i8 20), !dbg !16
  %2398 = bitcast <8 x i32> %2325 to <8 x float>, !dbg !95
  %2399 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped44.i705, <8 x float> %2398), !dbg !95
  %2400 = fdiv <8 x float> %2307, %2399, !dbg !95
  %2401 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %2400, <8 x float> %2397), !dbg !95
  %2402 = fmul <8 x float> %2401, <float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01>, !dbg !95
  %pdf_SIMD.i711 = fmul <8 x float> %2402, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !95
  %2403 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %pdf_SIMD.i711, i8 1), !dbg !95
  %2404 = bitcast <8 x float> %2403 to <8 x i32>, !dbg !95
  %2405 = and <8 x i32> %2325, %2404, !dbg !95
  %2406 = xor <8 x i32> %2404, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !95
  %2407 = and <8 x i32> %2325, %2406, !dbg !16
  %2408 = fmul <8 x float> %2373, %2109, !dbg !96
  %2409 = fmul <8 x float> %2383, %2111, !dbg !96
  %2410 = fadd <8 x float> %2408, %2409, !dbg !96
  %2411 = fmul <8 x float> %2392, %2113, !dbg !96
  %2412 = fadd <8 x float> %2410, %2411, !dbg !96
  %2413 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %2412, i8 1), !dbg !96
  %2414 = bitcast <8 x float> %2413 to <8 x i32>, !dbg !96
  %2415 = and <8 x i32> %2405, %2414, !dbg !96
  %2416 = xor <8 x i32> %2414, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !96
  %2417 = and <8 x i32> %2405, %2416, !dbg !16
  %2418 = or <8 x i32> %2407, %2417, !dbg !97
  %2419 = or <8 x i32> %2418, %2415, !dbg !97
  %2420 = bitcast <8 x i32> %2415 to <8 x float>, !dbg !98
  %2421 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %pdf_SIMD.i711, <8 x float> %2420), !dbg !98
  %2422 = fmul <8 x float> %pdf_SIMD.i711, <float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01>, !dbg !99
  %2423 = bitcast <8 x i32> %2415 to <8 x float>, !dbg !99
  %2424 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01>, <8 x float> %2423), !dbg !99
  %2425 = fdiv <8 x float> %2422, %2424, !dbg !99
  %2426 = fmul <8 x float> %2209, %2425, !dbg !99
  %2427 = fmul <8 x float> %2231, %2425, !dbg !99
  %2428 = fmul <8 x float> %2254, %2425, !dbg !99
  %2429 = bitcast <8 x i32> %2415 to <8 x float>, !dbg !16
  %2430 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %2426, <8 x float> %2429), !dbg !16
  %2431 = bitcast <8 x i32> %2415 to <8 x float>, !dbg !16
  %2432 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %2427, <8 x float> %2431), !dbg !16
  %2433 = bitcast <8 x i32> %2415 to <8 x float>, !dbg !16
  %2434 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %2428, <8 x float> %2433), !dbg !16
  %2435 = fmul <8 x float> %2396, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !100
  %2436 = fmul <8 x float> %2324, %2435, !dbg !100
  %2437 = fmul <8 x float> %2261, %2421, !dbg !100
  %2438 = fadd <8 x float> %2436, %2437, !dbg !100
  %2439 = fmul <8 x float> %2324, zeroinitializer, !dbg !100
  %2440 = fmul <8 x float> %2261, %2430, !dbg !100
  %2441 = fadd <8 x float> %2439, %2440, !dbg !100
  %2442 = fmul <8 x float> %2324, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !100
  %2443 = fmul <8 x float> %2261, %2432, !dbg !100
  %2444 = fadd <8 x float> %2442, %2443, !dbg !100
  %2445 = fmul <8 x float> %2261, %2434, !dbg !100
  %2446 = fadd <8 x float> %2439, %2445, !dbg !100
  %2447 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2307, !dbg !92
  %.mapped51.i712 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %2447), !dbg !16
  %.mapped52.i713 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %2307), !dbg !16
  %.mapped53.i714 = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i701), !dbg !16
  %.mapped54.i715 = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i701), !dbg !16
  %2448 = fmul <8 x float> %.mapped51.i712, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !94
  %2449 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %2448, i8 1), !dbg !94
  %2450 = bitcast <8 x float> %2449 to <8 x i32>, !dbg !94
  %2451 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %2135, i8 2), !dbg !94
  %2452 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2451), !dbg !94
  %2453 = fmul <8 x float> %2452, %2131, !dbg !94
  %2454 = fmul <8 x float> %2453, %2131, !dbg !94
  %2455 = fadd <8 x float> %2452, %2135, !dbg !94
  %2456 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2455, <8 x float> %2278), !dbg !94
  %a119_SIMD.i = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %2456, !dbg !94
  %2457 = fmul <8 x float> %2454, %a119_SIMD.i, !dbg !94
  %2458 = fadd <8 x float> %2457, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !94
  %x120_SIMD.i = fmul <8 x float> %.mapped52.i713, %.mapped53.i714, !dbg !94
  %2459 = fmul <8 x float> %2458, %x120_SIMD.i, !dbg !94
  %2460 = fmul <8 x float> %2131, %2133, !dbg !94
  %b121_SIMD.i = fmul <8 x float> %2460, %a119_SIMD.i, !dbg !94
  %y122_SIMD.i = fmul <8 x float> %.mapped52.i713, %.mapped54.i715, !dbg !94
  %2461 = fmul <8 x float> %b121_SIMD.i, %y122_SIMD.i, !dbg !94
  %2462 = fadd <8 x float> %2459, %2461, !dbg !94
  %2463 = fmul <8 x float> %2131, %.mapped51.i712, !dbg !94
  %2464 = fadd <8 x float> %2462, %2463, !dbg !94
  %2465 = fmul <8 x float> %2452, %b121_SIMD.i, !dbg !94
  %2466 = fmul <8 x float> %2465, %x120_SIMD.i, !dbg !94
  %2467 = fmul <8 x float> %2133, %2133, !dbg !94
  %2468 = fmul <8 x float> %2467, %a119_SIMD.i, !dbg !94
  %2469 = fadd <8 x float> %2452, %2468, !dbg !94
  %2470 = fmul <8 x float> %2469, %y122_SIMD.i, !dbg !94
  %2471 = fadd <8 x float> %2466, %2470, !dbg !94
  %2472 = fmul <8 x float> %2133, %.mapped51.i712, !dbg !94
  %2473 = fadd <8 x float> %2471, %2472, !dbg !94
  %2474 = fneg <8 x float> %2452, !dbg !94
  %2475 = fmul <8 x float> %2131, %2474, !dbg !94
  %2476 = fmul <8 x float> %2475, %x120_SIMD.i, !dbg !94
  %2477 = fmul <8 x float> %2133, %y122_SIMD.i, !dbg !94
  %2478 = fsub <8 x float> %2476, %2477, !dbg !94
  %2479 = fmul <8 x float> %2135, %.mapped51.i712, !dbg !94
  %2480 = fadd <8 x float> %2478, %2479, !dbg !94
  %2481 = and <8 x i32> %2279, %2450, !dbg !94
  %2482 = xor <8 x i32> %2450, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !94
  %2483 = and <8 x i32> %2279, %2482, !dbg !16
  %2484 = fmul <8 x float> %2464, %2109, !dbg !96
  %2485 = fmul <8 x float> %2473, %2111, !dbg !96
  %2486 = fadd <8 x float> %2484, %2485, !dbg !96
  %2487 = fmul <8 x float> %2480, %2113, !dbg !96
  %2488 = fadd <8 x float> %2486, %2487, !dbg !96
  %2489 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %2488, i8 1), !dbg !96
  %2490 = bitcast <8 x float> %2489 to <8 x i32>, !dbg !96
  %2491 = and <8 x i32> %2481, %2490, !dbg !96
  %2492 = xor <8 x i32> %2490, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !96
  %2493 = and <8 x i32> %2481, %2492, !dbg !16
  %2494 = or <8 x i32> %2483, %2493, !dbg !97
  %2495 = or <8 x i32> %2494, %2491, !dbg !97
  %2496 = bitcast <8 x i32> %2491 to <8 x float>, !dbg !98
  %2497 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2448, <8 x float> %2496), !dbg !98
  %2498 = bitcast <8 x i32> %2491 to <8 x float>, !dbg !101
  %2499 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> %2498), !dbg !101
  %2500 = fmul <8 x float> %2464, %2321, !dbg !101
  %2501 = fmul <8 x float> %2473, %2323, !dbg !101
  %2502 = fadd <8 x float> %2500, %2501, !dbg !101
  %2503 = fmul <8 x float> %2480, %2319, !dbg !101
  %2504 = fadd <8 x float> %2502, %2503, !dbg !101
  %2505 = fcmp fast oge <8 x float> %2504, zeroinitializer, !dbg !102
  %2506 = select <8 x i1> %2505, <8 x float> %2504, <8 x float> zeroinitializer, !dbg !102
  %2507 = fmul <8 x float> %2324, %2497, !dbg !102
  %2508 = bitcast <8 x float> %2506 to <8 x i32>, !dbg !16
  %2509 = uitofp <8 x i32> %2508 to <8 x float>, !dbg !102
  %y123_SIMD.i = fmul <8 x float> %2509, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !102
  %2510 = fadd <8 x float> %y123_SIMD.i, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !102
  %2511 = and <8 x i32> %2508, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !102
  %mx124_SIMD.i = or <8 x i32> %2511, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !102
  %2512 = bitcast <8 x i32> %mx124_SIMD.i to <8 x float>, !dbg !16
  %2513 = fmul <8 x float> %2512, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !102
  %2514 = fsub <8 x float> %2510, %2513, !dbg !102
  %2515 = fadd <8 x float> %2512, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !102
  %2516 = bitcast <8 x i32> %2495 to <8 x float>, !dbg !102
  %2517 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2515, <8 x float> %2516), !dbg !102
  %2518 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2517, !dbg !102
  %2519 = fsub <8 x float> %2514, %2518, !dbg !102
  %2520 = fmul <8 x float> %2519, <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, !dbg !102
  %2521 = fcmp fast olt <8 x float> %2520, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !102
  %2522 = select <8 x i1> %2521, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %2520, !dbg !102
  %2523 = fadd <8 x float> %2522, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !102
  %2524 = fptosi <8 x float> %2522 to <8 x i32>, !dbg !102
  %2525 = sitofp <8 x i32> %2524 to <8 x float>, !dbg !102
  %2526 = fsub <8 x float> %2522, %2525, !dbg !102
  %2527 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2520, <8 x float> zeroinitializer, i8 1), !dbg !102
  %2528 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2527), !dbg !102
  %z125_SIMD.i = fadd <8 x float> %2526, %2528, !dbg !102
  %2529 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z125_SIMD.i, !dbg !102
  %2530 = bitcast <8 x i32> %2495 to <8 x float>, !dbg !102
  %2531 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2529, <8 x float> %2530), !dbg !102
  %2532 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2531, !dbg !102
  %2533 = fadd <8 x float> %2523, %2532, !dbg !102
  %2534 = fmul <8 x float> %z125_SIMD.i, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !102
  %2535 = fsub <8 x float> %2533, %2534, !dbg !102
  %2536 = fmul <8 x float> %2535, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !102
  %2537 = fptosi <8 x float> %2536 to <8 x i32>, !dbg !102
  %2538 = bitcast <8 x i32> %2537 to <8 x float>, !dbg !16
  %2539 = fmul <8 x float> %2538, <float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01, float 1.300000e+01>, !dbg !102
  %2540 = fmul <8 x float> %2539, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !102
  %2541 = fmul <8 x float> %2261, %2540, !dbg !102
  %2542 = fadd <8 x float> %2507, %2541, !dbg !102
  %2543 = fmul <8 x float> %2324, zeroinitializer, !dbg !102
  %2544 = fmul <8 x float> %2538, <float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01, float 1.400000e+01>, !dbg !102
  %2545 = fmul <8 x float> %2544, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !102
  %2546 = fmul <8 x float> %2209, %2545, !dbg !102
  %2547 = fmul <8 x float> %2261, %2546, !dbg !102
  %2548 = fadd <8 x float> %2543, %2547, !dbg !102
  %2549 = fmul <8 x float> %2324, %2499, !dbg !102
  %2550 = fmul <8 x float> %2231, %2545, !dbg !102
  %2551 = fmul <8 x float> %2261, %2550, !dbg !102
  %2552 = fadd <8 x float> %2549, %2551, !dbg !102
  %2553 = fmul <8 x float> %2324, zeroinitializer, !dbg !102
  %2554 = fmul <8 x float> %2254, %2545, !dbg !102
  %2555 = fmul <8 x float> %2261, %2554, !dbg !102
  %2556 = fadd <8 x float> %2553, %2555, !dbg !102
  %2557 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2558 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2464, <8 x float> %2373, <8 x float> %2557), !dbg !16
  %2559 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2560 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2473, <8 x float> %2383, <8 x float> %2559), !dbg !16
  %2561 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2562 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2480, <8 x float> %2392, <8 x float> %2561), !dbg !16
  %2563 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2564 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %.mapped51.i712, <8 x float> %2396, <8 x float> %2563), !dbg !16
  %2565 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2566 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2542, <8 x float> %2438, <8 x float> %2565), !dbg !16
  %2567 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2568 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2548, <8 x float> %2441, <8 x float> %2567), !dbg !16
  %2569 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2570 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2552, <8 x float> %2444, <8 x float> %2569), !dbg !16
  %2571 = bitcast <8 x i32> %2419 to <8 x float>, !dbg !16
  %2572 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2556, <8 x float> %2446, <8 x float> %2571), !dbg !16
  %2573 = or <8 x i32> %2495, %2419, !dbg !103
  %2574 = fmul <8 x float> %cont_load6.i631, %cont_load14.i639, !dbg !81
  %2575 = fadd <8 x float> %cont_load.i625, %2574, !dbg !81
  %2576 = sext i32 %unroll_step15985 to i64, !dbg !81
  %2577 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %2576, !dbg !81
  %vec_cast102.i740 = bitcast float* %2577 to <8 x float>*, !dbg !81
  %2578 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2575, <8 x float>* %vec_cast102.i740, i32 4, <8 x i1> %2578), !dbg !81
  %2579 = fmul <8 x float> %cont_load8.i633, %cont_load14.i639, !dbg !81
  %2580 = fadd <8 x float> %cont_load2.i627, %2579, !dbg !81
  %2581 = sext i32 %unroll_step15985 to i64, !dbg !81
  %2582 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %2581, !dbg !81
  %vec_cast103.i741 = bitcast float* %2582 to <8 x float>*, !dbg !81
  %2583 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2580, <8 x float>* %vec_cast103.i741, i32 4, <8 x i1> %2583), !dbg !81
  %2584 = fmul <8 x float> %cont_load10.i635, %cont_load14.i639, !dbg !81
  %2585 = fadd <8 x float> %cont_load4.i629, %2584, !dbg !81
  %2586 = sext i32 %unroll_step15985 to i64, !dbg !81
  %2587 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %2586, !dbg !81
  %vec_cast104.i742 = bitcast float* %2587 to <8 x float>*, !dbg !81
  %2588 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2585, <8 x float>* %vec_cast104.i742, i32 4, <8 x i1> %2588), !dbg !81
  %2589 = sext i32 %unroll_step15985 to i64, !dbg !81
  %2590 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %2589, !dbg !81
  %vec_cast105.i743 = bitcast float* %2590 to <8 x float>*, !dbg !81
  %2591 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2558, <8 x float>* %vec_cast105.i743, i32 4, <8 x i1> %2591), !dbg !81
  %2592 = sext i32 %unroll_step15985 to i64, !dbg !81
  %2593 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %2592, !dbg !81
  %vec_cast106.i744 = bitcast float* %2593 to <8 x float>*, !dbg !81
  %2594 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2560, <8 x float>* %vec_cast106.i744, i32 4, <8 x i1> %2594), !dbg !81
  %2595 = sext i32 %unroll_step15985 to i64, !dbg !81
  %2596 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %2595, !dbg !81
  %vec_cast107.i745 = bitcast float* %2596 to <8 x float>*, !dbg !81
  %2597 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2562, <8 x float>* %vec_cast107.i745, i32 4, <8 x i1> %2597), !dbg !81
  %2598 = sext i32 %unroll_step15985 to i64, !dbg !81
  %2599 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %2598, !dbg !81
  %vec_cast108.i746 = bitcast float* %2599 to <8 x float>*, !dbg !81
  %2600 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>, <8 x float>* %vec_cast108.i746, i32 4, <8 x i1> %2600), !dbg !81
  %2601 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2602 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %2601, !dbg !16
  %vec_cast109.i747 = bitcast float* %2602 to <8 x float>*, !dbg !16
  %2603 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000>, <8 x float>* %vec_cast109.i747, i32 4, <8 x i1> %2603), !dbg !81
  %2604 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2605 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %2604, !dbg !16
  %vec_cast110.i748 = bitcast i32* %2605 to <8 x i32>*, !dbg !16
  %2606 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2303, <8 x i32>* %vec_cast110.i748, i32 4, <8 x i1> %2606), !dbg !81
  %2607 = fmul <8 x float> %cont_load22.i647, %2568, !dbg !81
  %2608 = bitcast <8 x i32> %2573 to <8 x float>, !dbg !81
  %2609 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2566, <8 x float> %2608), !dbg !81
  %2610 = fdiv <8 x float> %2564, %2609, !dbg !81
  %2611 = fmul <8 x float> %2607, %2610, !dbg !81
  %2612 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2613 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %2612, !dbg !16
  %vec_cast112.i749 = bitcast float* %2613 to <8 x float>*, !dbg !16
  %2614 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2611, <8 x float>* %vec_cast112.i749, i32 4, <8 x i1> %2614), !dbg !81
  %2615 = fmul <8 x float> %cont_load24.i657, %2570, !dbg !81
  %2616 = fmul <8 x float> %2615, %2610, !dbg !81
  %2617 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2618 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %2617, !dbg !16
  %vec_cast113.i750 = bitcast float* %2618 to <8 x float>*, !dbg !16
  %2619 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2616, <8 x float>* %vec_cast113.i750, i32 4, <8 x i1> %2619), !dbg !81
  %2620 = fmul <8 x float> %cont_load26.i667, %2572, !dbg !81
  %2621 = fmul <8 x float> %2620, %2610, !dbg !81
  %2622 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2623 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %2622, !dbg !16
  %vec_cast114.i751 = bitcast float* %2623 to <8 x float>*, !dbg !16
  %2624 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2621, <8 x float>* %vec_cast114.i751, i32 4, <8 x i1> %2624), !dbg !81
  %2625 = bitcast <8 x i32> %2573 to <8 x float>, !dbg !81
  %2626 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2566, <8 x float> %2625), !dbg !81
  %2627 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2626, !dbg !81
  %2628 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2629 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %2628, !dbg !16
  %vec_cast116.i752 = bitcast float* %2629 to <8 x float>*, !dbg !16
  %2630 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %2627, <8 x float>* %vec_cast116.i752, i32 4, <8 x i1> %2630), !dbg !81
  %2631 = add nsw <8 x i32> %cont_load30.i679, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !81
  %2632 = sext i32 %unroll_step15985 to i64, !dbg !16
  %2633 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %2632, !dbg !16
  %vec_cast117.i753 = bitcast i32* %2633 to <8 x i32>*, !dbg !16
  %2634 = icmp ne <8 x i32> %2573, zeroinitializer, !dbg !81
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2631, <8 x i32>* %vec_cast117.i753, i32 4, <8 x i1> %2634), !dbg !81
  %2635 = add nsw i32 %unroll_step15985, 8, !dbg !76
  %2636 = icmp slt i32 %2635, %144, !dbg !15
  br i1 %2636, label %expr_true275, label %expr_false16, !dbg !15

expr_true277:                                     ; preds = %expr_false10, %if_join381
  %unroll_step12984 = phi i32 [ %3180, %if_join381 ], [ %136, %expr_false10 ]
  %2637 = sext i32 %unroll_step12984 to i64, !dbg !16
  %2638 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %2637, !dbg !16
  %2639 = load float, float* %2638, align 4, !dbg !16
  %2640 = sext i32 %unroll_step12984 to i64, !dbg !16
  %2641 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %2640, !dbg !16
  %2642 = load float, float* %2641, align 4, !dbg !16
  %2643 = sext i32 %unroll_step12984 to i64, !dbg !16
  %2644 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %2643, !dbg !16
  %2645 = load float, float* %2644, align 4, !dbg !16
  %2646 = sext i32 %unroll_step12984 to i64, !dbg !16
  %2647 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %2646, !dbg !16
  %2648 = load float, float* %2647, align 4, !dbg !16
  %2649 = sext i32 %unroll_step12984 to i64, !dbg !16
  %2650 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %2649, !dbg !16
  %2651 = load float, float* %2650, align 4, !dbg !16
  %2652 = sext i32 %unroll_step12984 to i64, !dbg !16
  %2653 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %2652, !dbg !16
  %2654 = load float, float* %2653, align 4, !dbg !16
  %2655 = fneg float %2651, !dbg !17
  %2656 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2657 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %2656, !dbg !18
  %2658 = load i32, i32* %2657, align 4, !dbg !18
  %2659 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2660 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %2659, !dbg !18
  %2661 = load float, float* %2660, align 4, !dbg !18
  %2662 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2663 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %2662, !dbg !18
  %2664 = load float, float* %2663, align 4, !dbg !18
  %2665 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2666 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %2665, !dbg !18
  %2667 = load float, float* %2666, align 4, !dbg !18
  %2668 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2669 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %2668, !dbg !18
  %2670 = load i32, i32* %2669, align 4, !dbg !18
  %2671 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2672 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %2671, !dbg !18
  %2673 = load float, float* %2672, align 4, !dbg !18
  %2674 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2675 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %2674, !dbg !18
  %2676 = load float, float* %2675, align 4, !dbg !18
  %2677 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2678 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %2677, !dbg !18
  %2679 = load float, float* %2678, align 4, !dbg !18
  %2680 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2681 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1066, i64 0, i64 %2680, !dbg !18
  %2682 = load float, float* %2681, align 4, !dbg !18
  %2683 = sext i32 %unroll_step12984 to i64, !dbg !18
  %2684 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %2683, !dbg !18
  %2685 = load i32, i32* %2684, align 4, !dbg !18
  store i32 %2670, i32* %state_2191104.repack, align 8, !dbg !18
  store float %2673, float* %state_2191104.repack1335.repack, align 4, !dbg !18
  store float %2676, float* %state_2191104.repack1335.repack1342, align 8, !dbg !18
  store float %2679, float* %state_2191104.repack1335.repack1344, align 4, !dbg !18
  store float %2682, float* %state_2191104.repack1337, align 8, !dbg !18
  store i32 %2685, i32* %state_2191104.repack1339, align 4, !dbg !18
  %2686 = shl nsw i32 %2658, 2, !dbg !18
  %2687 = sext i32 %2686 to i64, !dbg !18
  %2688 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %2687, !dbg !18
  %2689 = load i32, i32* %2688, align 4, !dbg !18
  %2690 = or i32 %2686, 1, !dbg !18
  %2691 = sext i32 %2690 to i64, !dbg !18
  %2692 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %2691, !dbg !18
  %2693 = load i32, i32* %2692, align 4, !dbg !18
  %2694 = or i32 %2686, 2, !dbg !18
  %2695 = sext i32 %2694 to i64, !dbg !18
  %2696 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %2695, !dbg !18
  %2697 = load i32, i32* %2696, align 4, !dbg !18
  %2698 = sext i32 %2658 to i64, !dbg !18
  %.elt1346 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %2698, i32 0, !dbg !18
  %.unpack1347 = load float, float* %.elt1346, align 4, !dbg !18
  %.elt1348 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %2698, i32 1, !dbg !18
  %.unpack1349 = load float, float* %.elt1348, align 4, !dbg !18
  %.elt1350 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %2698, i32 2, !dbg !18
  %.unpack1351 = load float, float* %.elt1350, align 4, !dbg !18
  %2699 = sext i32 %2689 to i64, !dbg !18
  %.elt1352 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2699, i32 0, !dbg !18
  %.unpack1353 = load float, float* %.elt1352, align 4, !dbg !18
  %.elt1354 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2699, i32 1, !dbg !18
  %.unpack1355 = load float, float* %.elt1354, align 4, !dbg !18
  %.elt1356 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2699, i32 2, !dbg !18
  %.unpack1357 = load float, float* %.elt1356, align 4, !dbg !18
  %2700 = sext i32 %2693 to i64, !dbg !18
  %.elt1358 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2700, i32 0, !dbg !18
  %.unpack1359 = load float, float* %.elt1358, align 4, !dbg !18
  %.elt1360 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2700, i32 1, !dbg !18
  %.unpack1361 = load float, float* %.elt1360, align 4, !dbg !18
  %.elt1362 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2700, i32 2, !dbg !18
  %.unpack1363 = load float, float* %.elt1362, align 4, !dbg !18
  %2701 = sext i32 %2697 to i64, !dbg !18
  %.elt1364 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2701, i32 0, !dbg !18
  %.unpack1365 = load float, float* %.elt1364, align 4, !dbg !18
  %.elt1366 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2701, i32 1, !dbg !18
  %.unpack1367 = load float, float* %.elt1366, align 4, !dbg !18
  %.elt1368 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %2701, i32 2, !dbg !18
  %.unpack1369 = load float, float* %.elt1368, align 4, !dbg !18
  %2702 = fsub float 1.000000e+00, %2664, !dbg !18
  %2703 = fsub float %2702, %2667, !dbg !18
  %2704 = fmul float %2703, %.unpack1353, !dbg !18
  %2705 = fmul float %2664, %.unpack1359, !dbg !18
  %2706 = fadd float %2704, %2705, !dbg !18
  %2707 = fmul float %2667, %.unpack1365, !dbg !18
  %2708 = fadd float %2706, %2707, !dbg !18
  %2709 = fmul float %2708, %2708, !dbg !18
  %2710 = fmul float %2703, %.unpack1355, !dbg !18
  %2711 = fmul float %2664, %.unpack1361, !dbg !18
  %2712 = fadd float %2710, %2711, !dbg !18
  %2713 = fmul float %2667, %.unpack1367, !dbg !18
  %2714 = fadd float %2712, %2713, !dbg !18
  %2715 = fmul float %2714, %2714, !dbg !18
  %2716 = fadd float %2709, %2715, !dbg !18
  %2717 = fmul float %2703, %.unpack1357, !dbg !18
  %2718 = fmul float %2664, %.unpack1363, !dbg !18
  %2719 = fadd float %2717, %2718, !dbg !18
  %2720 = fmul float %2667, %.unpack1369, !dbg !18
  %2721 = fadd float %2719, %2720, !dbg !18
  %2722 = fmul float %2721, %2721, !dbg !18
  %2723 = fadd float %2716, %2722, !dbg !18
  %2724 = call float @llvm.sqrt.f32(float %2723), !dbg !18
  %2725 = fmul float %2648, %.unpack1347, !dbg !19
  %2726 = fmul float %2651, %.unpack1349, !dbg !19
  %2727 = fadd float %2725, %2726, !dbg !19
  %2728 = fmul float %2654, %.unpack1351, !dbg !19
  %2729 = fadd float %2727, %2728, !dbg !19
  %is_entering568 = fcmp ugt float %2729, 0.000000e+00, !dbg !19
  %2730 = fneg float %.unpack1347, !dbg !19
  %2731 = fneg float %.unpack1349, !dbg !19
  %2732 = fneg float %.unpack1351, !dbg !19
  %.pn1374 = select i1 %is_entering568, float %2730, float %.unpack1347, !dbg !19
  %.pn1372 = select i1 %is_entering568, float %2731, float %.unpack1349, !dbg !19
  %.pn1370 = select i1 %is_entering568, float %2732, float %.unpack1351, !dbg !19
  %2733 = fdiv float 1.000000e+00, %2724, !dbg !20
  %2734 = fmul float %2708, %2733, !dbg !20
  %2735 = fmul float %2648, %2734, !dbg !20
  %2736 = fmul float %2714, %2733, !dbg !20
  %2737 = fmul float %2651, %2736, !dbg !20
  %2738 = fadd float %2735, %2737, !dbg !20
  %2739 = fmul float %2721, %2733, !dbg !20
  %2740 = fmul float %2654, %2739, !dbg !20
  %2741 = fadd float %2738, %2740, !dbg !20
  %2742 = fcmp ugt float %2741, 0.000000e+00, !dbg !20
  %2743 = fneg float %2734, !dbg !20
  %2744 = fneg float %2736, !dbg !20
  %2745 = fneg float %2739, !dbg !20
  %.pn1380 = select i1 %2742, float %2743, float %2734, !dbg !20
  %.pn1378 = select i1 %2742, float %2744, float %2736, !dbg !20
  %.pn1376 = select i1 %2742, float %2745, float %2739, !dbg !20
  %2746 = sext i32 %2689 to i64, !dbg !21
  %.elt1381 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %2746, i32 0, !dbg !21
  %.unpack1382 = load float, float* %.elt1381, align 4, !dbg !21
  %2747 = sext i32 %2693 to i64, !dbg !21
  %.elt1385 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %2747, i32 0, !dbg !21
  %.unpack1386 = load float, float* %.elt1385, align 4, !dbg !21
  %2748 = sext i32 %2697 to i64, !dbg !21
  %.elt1389 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %2748, i32 0, !dbg !21
  %.unpack1390 = load float, float* %.elt1389, align 4, !dbg !21
  %2749 = fmul float %2703, %.unpack1382, !dbg !21
  %2750 = fmul float %2664, %.unpack1386, !dbg !21
  %2751 = fadd float %2749, %2750, !dbg !21
  %2752 = fmul float %2667, %.unpack1390, !dbg !21
  %2753 = fadd float %2751, %2752, !dbg !21
  %2754 = call float @llvm.floor.f32(float %2753), !dbg !21
  %.elt1391 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %2748, i32 1, !dbg !21
  %.unpack1392 = load float, float* %.elt1391, align 4, !dbg !21
  %.elt1387 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %2747, i32 1, !dbg !21
  %.unpack1388 = load float, float* %.elt1387, align 4, !dbg !21
  %.elt1383 = getelementptr inbounds [0 x %3], [0 x %3]* %texcoords_2188510, i64 0, i64 %2746, i32 1, !dbg !21
  %.unpack1384 = load float, float* %.elt1383, align 4, !dbg !21
  %2755 = fmul float %2703, %.unpack1384, !dbg !22
  %2756 = fmul float %2664, %.unpack1388, !dbg !22
  %2757 = fadd float %2755, %2756, !dbg !22
  %2758 = fmul float %2667, %.unpack1392, !dbg !22
  %2759 = fadd float %2757, %2758, !dbg !22
  %2760 = call float @llvm.floor.f32(float %2759), !dbg !22
  %2761 = fsub float %2753, %2754, !dbg !22
  %u569 = fmul float %2761, %8, !dbg !22
  %2762 = fptosi float %u569 to i32, !dbg !22
  %2763 = icmp sgt i32 %9, %2762, !dbg !22
  %_cont304 = select i1 %2763, i32 %2762, i32 %9, !dbg !22
  %2764 = fsub float %2759, %2760, !dbg !23
  %v570 = fmul float %2764, %10, !dbg !23
  %2765 = fptosi float %v570 to i32, !dbg !23
  %2766 = icmp sgt i32 %11, %2765, !dbg !23
  %.1502 = select i1 %2766, i32 %2765, i32 %11, !dbg !24
  %2767 = add nsw i32 %_cont304, 1, !dbg !25
  %2768 = icmp slt i32 %2767, %9, !dbg !25
  %_cont312 = select i1 %2768, i32 %2767, i32 %9, !dbg !25
  %2769 = add nsw i32 %.1502, 1, !dbg !26
  %2770 = icmp slt i32 %2769, %11, !dbg !26
  %.1503 = select i1 %2770, i32 %2769, i32 %11, !dbg !24
  %2771 = sitofp i32 %2765 to float, !dbg !27
  %ky571 = fsub float %v570, %2771, !dbg !27
  %2772 = fsub float 1.000000e+00, %ky571, !dbg !27
  %2773 = sitofp i32 %2762 to float, !dbg !27
  %kx572 = fsub float %u569, %2773, !dbg !27
  %2774 = fsub float 1.000000e+00, %kx572, !dbg !27
  %2775 = mul nsw i32 %.1502, %width_2188513, !dbg !27
  %2776 = add nsw i32 %2775, %_cont304, !dbg !27
  %2777 = sext i32 %2776 to i64, !dbg !27
  %2778 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %2777, !dbg !27
  %2779 = load i32, i32* %2778, align 4, !dbg !27
  %r573 = and i32 %2779, 255, !dbg !27
  %2780 = uitofp i32 %r573 to float, !dbg !27
  %2781 = fmul float %2780, 0x3F70101020000000, !dbg !27
  %2782 = fmul float %2774, %2781, !dbg !27
  %2783 = add nsw i32 %2775, %_cont312, !dbg !27
  %2784 = sext i32 %2783 to i64, !dbg !27
  %2785 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %2784, !dbg !27
  %2786 = load i32, i32* %2785, align 4, !dbg !27
  %r574 = and i32 %2786, 255, !dbg !27
  %2787 = uitofp i32 %r574 to float, !dbg !27
  %2788 = fmul float %2787, 0x3F70101020000000, !dbg !27
  %2789 = fmul float %kx572, %2788, !dbg !27
  %2790 = fadd float %2782, %2789, !dbg !27
  %2791 = fmul float %2772, %2790, !dbg !27
  %2792 = mul nsw i32 %.1503, %width_2188513, !dbg !27
  %2793 = add nsw i32 %2792, %_cont304, !dbg !27
  %2794 = sext i32 %2793 to i64, !dbg !27
  %2795 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %2794, !dbg !27
  %2796 = load i32, i32* %2795, align 4, !dbg !27
  %r575 = and i32 %2796, 255, !dbg !27
  %2797 = uitofp i32 %r575 to float, !dbg !27
  %2798 = fmul float %2797, 0x3F70101020000000, !dbg !27
  %2799 = fmul float %2774, %2798, !dbg !27
  %2800 = add nsw i32 %2792, %_cont312, !dbg !27
  %2801 = sext i32 %2800 to i64, !dbg !27
  %2802 = getelementptr inbounds [0 x i32], [0 x i32]* %pixels_2188512, i64 0, i64 %2801, !dbg !27
  %2803 = load i32, i32* %2802, align 4, !dbg !27
  %r576 = and i32 %2803, 255, !dbg !27
  %2804 = uitofp i32 %r576 to float, !dbg !27
  %2805 = fmul float %2804, 0x3F70101020000000, !dbg !27
  %2806 = fmul float %kx572, %2805, !dbg !27
  %2807 = fadd float %2799, %2806, !dbg !27
  %2808 = fmul float %ky571, %2807, !dbg !27
  %2809 = fadd float %2791, %2808, !dbg !27
  %2810 = fmul float %2809, 0x3FCB367A00000000, !dbg !27
  %2811 = lshr i32 %2779, 8, !dbg !27
  %g577 = and i32 %2811, 255, !dbg !27
  %2812 = uitofp i32 %g577 to float, !dbg !27
  %2813 = fmul float %2812, 0x3F70101020000000, !dbg !27
  %2814 = fmul float %2774, %2813, !dbg !27
  %2815 = lshr i32 %2786, 8, !dbg !27
  %g578 = and i32 %2815, 255, !dbg !27
  %2816 = uitofp i32 %g578 to float, !dbg !27
  %2817 = fmul float %2816, 0x3F70101020000000, !dbg !27
  %2818 = fmul float %kx572, %2817, !dbg !27
  %2819 = fadd float %2814, %2818, !dbg !27
  %2820 = fmul float %2772, %2819, !dbg !27
  %2821 = lshr i32 %2796, 8, !dbg !27
  %g579 = and i32 %2821, 255, !dbg !27
  %2822 = uitofp i32 %g579 to float, !dbg !27
  %2823 = fmul float %2822, 0x3F70101020000000, !dbg !27
  %2824 = fmul float %2774, %2823, !dbg !27
  %2825 = lshr i32 %2803, 8, !dbg !27
  %g580 = and i32 %2825, 255, !dbg !27
  %2826 = uitofp i32 %g580 to float, !dbg !27
  %2827 = fmul float %2826, 0x3F70101020000000, !dbg !27
  %2828 = fmul float %kx572, %2827, !dbg !27
  %2829 = fadd float %2824, %2828, !dbg !27
  %2830 = fmul float %ky571, %2829, !dbg !27
  %2831 = fadd float %2820, %2830, !dbg !27
  %2832 = fmul float %2831, 0x3FE6E2EB20000000, !dbg !27
  %2833 = fadd float %2810, %2832, !dbg !27
  %2834 = lshr i32 %2779, 16, !dbg !27
  %b581 = and i32 %2834, 255, !dbg !27
  %2835 = uitofp i32 %b581 to float, !dbg !27
  %2836 = fmul float %2835, 0x3F70101020000000, !dbg !27
  %2837 = fmul float %2774, %2836, !dbg !27
  %2838 = lshr i32 %2786, 16, !dbg !27
  %b582 = and i32 %2838, 255, !dbg !27
  %2839 = uitofp i32 %b582 to float, !dbg !27
  %2840 = fmul float %2839, 0x3F70101020000000, !dbg !27
  %2841 = fmul float %kx572, %2840, !dbg !27
  %2842 = fadd float %2837, %2841, !dbg !27
  %2843 = fmul float %2772, %2842, !dbg !27
  %2844 = lshr i32 %2796, 16, !dbg !27
  %b583 = and i32 %2844, 255, !dbg !27
  %2845 = uitofp i32 %b583 to float, !dbg !27
  %2846 = fmul float %2845, 0x3F70101020000000, !dbg !27
  %2847 = fmul float %2774, %2846, !dbg !27
  %2848 = lshr i32 %2803, 16, !dbg !27
  %b584 = and i32 %2848, 255, !dbg !27
  %2849 = uitofp i32 %b584 to float, !dbg !27
  %2850 = fmul float %2849, 0x3F70101020000000, !dbg !27
  %2851 = fmul float %kx572, %2850, !dbg !27
  %2852 = fadd float %2847, %2851, !dbg !27
  %2853 = fmul float %ky571, %2852, !dbg !27
  %2854 = fadd float %2843, %2853, !dbg !27
  %2855 = fmul float %2854, 0x3FB27BB300000000, !dbg !27
  %2856 = fadd float %2833, %2855, !dbg !27
  %2857 = fadd float %2856, 0x3FE6E2EB20000000, !dbg !27
  %2858 = fcmp oeq float %2857, 0.000000e+00, !dbg !27
  %2859 = fdiv float 0x3FE6E2EB20000000, %2857, !dbg !27
  %2860 = select i1 %2858, float 0.000000e+00, float %2859, !dbg !27
  %2861 = load i32, i32* %16, align 8, !dbg !27
  %2862 = icmp eq i32 %2861, 0, !dbg !27
  %2863 = select i1 %2862, i32 1, i32 %2861, !dbg !27
  %2864 = shl i32 %2863, 13, !dbg !27
  %2865 = xor i32 %2863, %2864, !dbg !27
  %2866 = lshr i32 %2865, 17, !dbg !27
  %2867 = xor i32 %2865, %2866, !dbg !27
  %2868 = shl i32 %2867, 5, !dbg !27
  %2869 = xor i32 %2867, %2868, !dbg !27
  %2870 = and i32 %2869, 8388607, !dbg !27
  %2871 = or i32 %2870, 1065353216, !dbg !27
  %2872 = bitcast i32 %2871 to float, !dbg !27
  %2873 = fadd float %2872, -1.000000e+00, !dbg !27
  %2874 = fcmp ugt float %2860, %2873, !dbg !27
  store i32 %2869, i32* %16, align 8, !dbg !27
  %2875 = icmp eq i32 %2869, 0, !dbg !27
  %2876 = select i1 %2875, i32 1, i32 %2869, !dbg !27
  %2877 = shl i32 %2876, 13, !dbg !27
  %2878 = xor i32 %2876, %2877, !dbg !27
  %2879 = lshr i32 %2878, 17, !dbg !27
  %2880 = xor i32 %2878, %2879, !dbg !27
  %2881 = shl i32 %2880, 5, !dbg !27
  %2882 = xor i32 %2880, %2881, !dbg !27
  %2883 = icmp eq i32 %2882, 0, !dbg !27
  %2884 = select i1 %2883, i32 1, i32 %2882, !dbg !27
  %2885 = shl i32 %2884, 13, !dbg !27
  %2886 = xor i32 %2884, %2885, !dbg !27
  %2887 = lshr i32 %2886, 17, !dbg !27
  %2888 = xor i32 %2886, %2887, !dbg !27
  %2889 = shl i32 %2888, 5, !dbg !27
  %2890 = xor i32 %2888, %2889, !dbg !27
  %2891 = and i32 %2890, 8388607, !dbg !27
  %2892 = or i32 %2891, 1065353216, !dbg !27
  %2893 = bitcast i32 %2892 to float, !dbg !27
  %2894 = fadd float %2893, -1.000000e+00, !dbg !27
  %2895 = and i32 %2882, 8388607, !dbg !27
  %2896 = or i32 %2895, 1065353216, !dbg !27
  %2897 = bitcast i32 %2896 to float, !dbg !27
  %2898 = fadd float %2897, -1.000000e+00, !dbg !27
  %phi588 = fmul float %2898, 0x401921FB60000000, !dbg !27
  %2899 = fmul float %.pn1378, %2655, !dbg !27
  %2900 = fmul float %2648, %.pn1380, !dbg !27
  %2901 = fsub float %2899, %2900, !dbg !27
  %2902 = fmul float %2654, %.pn1376, !dbg !27
  %2903 = fsub float %2901, %2902, !dbg !27
  %2904 = fmul float %2903, 2.000000e+00, !dbg !27
  %2905 = fmul float %.pn1376, %2904, !dbg !27
  %2906 = fadd float %2905, %2654, !dbg !27
  %2907 = fmul float %.pn1380, %2904, !dbg !27
  %2908 = fadd float %2907, %2648, !dbg !27
  %2909 = fmul float %.pn1378, %2904, !dbg !27
  %2910 = fadd float %2909, %2651, !dbg !27
  %2911 = fsub float 1.000000e+00, %2860, !dbg !27
  %2912 = fmul float %2809, 0x3FD45F3060000000, !dbg !27
  %2913 = fmul float %2831, 0x3FD45F3060000000, !dbg !27
  %2914 = fmul float %2854, 0x3FD45F3060000000, !dbg !27
  store i32 %2890, i32* %16, align 8, !dbg !28
  br i1 %2874, label %expr_false317, label %expr_true349, !dbg !27

expr_false317:                                    ; preds = %expr_true277
  %2915 = bitcast float %2894 to i32, !dbg !28
  %2916 = uitofp i32 %2915 to float, !dbg !28
  %y585 = fmul float %2916, 0x3E80000000000000, !dbg !28
  %2917 = fadd float %y585, 0xC05F0E6EE0000000, !dbg !28
  %2918 = and i32 %2915, 8388607, !dbg !28
  %mx586 = or i32 %2918, 1056964608, !dbg !28
  %2919 = bitcast i32 %mx586 to float, !dbg !28
  %2920 = fmul float %2919, 0x3FF7F7EEA0000000, !dbg !28
  %2921 = fsub float %2917, %2920, !dbg !28
  %2922 = fadd float %2919, 0x3FD6889F20000000, !dbg !28
  %2923 = fdiv float 0x3FFB9D3460000000, %2922, !dbg !28
  %2924 = fsub float %2921, %2923, !dbg !28
  %2925 = fmul float %2924, 0x3F851D07E0000000, !dbg !28
  %2926 = fcmp olt float %2925, -1.260000e+02, !dbg !28
  %2927 = select i1 %2926, float -1.260000e+02, float %2925, !dbg !28
  %2928 = fadd float %2927, 0x405E518A20000000, !dbg !28
  %2929 = fptosi float %2927 to i32, !dbg !28
  %2930 = sitofp i32 %2929 to float, !dbg !28
  %2931 = fsub float %2927, %2930, !dbg !28
  %2932 = fcmp olt float %2925, 0.000000e+00, !dbg !28
  %2933 = select i1 %2932, float 1.000000e+00, float 0.000000e+00, !dbg !28
  %z587 = fadd float %2931, %2933, !dbg !28
  %2934 = fsub float 0x40135EBF00000000, %z587, !dbg !28
  %2935 = fdiv float 0x403BBA5FC0000000, %2934, !dbg !28
  %2936 = fadd float %2928, %2935, !dbg !28
  %2937 = fmul float %z587, 0x3FF7D791A0000000, !dbg !28
  %2938 = fsub float %2936, %2937, !dbg !28
  %2939 = fmul float %2938, 0x4160000000000000, !dbg !28
  %2940 = fptosi float %2939 to i32, !dbg !28
  %2941 = bitcast i32 %2940 to float, !dbg !28
  %2942 = call float @llvm.minnum.f32(float %2941, float 1.000000e+00), !dbg !28
  %2943 = fmul float %2942, %2942, !dbg !29
  %2944 = fsub float 1.000000e+00, %2943, !dbg !29
  %2945 = call float @llvm.sqrt.f32(float %2944), !dbg !29
  %2946 = call float @llvm.cos.f32(float %phi588), !dbg !30
  %2947 = call float @llvm.sin.f32(float %phi588), !dbg !31
  %2948 = fcmp oge float %2906, 0.000000e+00, !dbg !32
  %2949 = select i1 %2948, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %2950 = fmul float %2949, %2908, !dbg !32
  %2951 = fmul float %2950, %2908, !dbg !32
  %2952 = fadd float %2949, %2906, !dbg !32
  %a589 = fdiv float -1.000000e+00, %2952, !dbg !32
  %2953 = fmul float %2951, %a589, !dbg !32
  %2954 = fadd float %2953, 1.000000e+00, !dbg !32
  %x590 = fmul float %2945, %2946, !dbg !32
  %2955 = fmul float %2954, %x590, !dbg !32
  %2956 = fmul float %2908, %2910, !dbg !32
  %b591 = fmul float %2956, %a589, !dbg !32
  %y592 = fmul float %2945, %2947, !dbg !32
  %2957 = fmul float %b591, %y592, !dbg !32
  %2958 = fadd float %2955, %2957, !dbg !32
  %2959 = fmul float %2908, %2942, !dbg !32
  %2960 = fadd float %2958, %2959, !dbg !32
  %2961 = fmul float %2960, %.pn1380, !dbg !32
  %2962 = fmul float %2949, %b591, !dbg !32
  %2963 = fmul float %2962, %x590, !dbg !32
  %2964 = fmul float %2910, %2910, !dbg !32
  %2965 = fmul float %2964, %a589, !dbg !32
  %2966 = fadd float %2949, %2965, !dbg !32
  %2967 = fmul float %2966, %y592, !dbg !32
  %2968 = fadd float %2963, %2967, !dbg !32
  %2969 = fmul float %2910, %2942, !dbg !32
  %2970 = fadd float %2968, %2969, !dbg !32
  %2971 = fmul float %2970, %.pn1378, !dbg !32
  %2972 = fadd float %2961, %2971, !dbg !32
  %2973 = fneg float %2949, !dbg !32
  %2974 = fmul float %2908, %2973, !dbg !32
  %2975 = fmul float %2974, %x590, !dbg !32
  %2976 = fmul float %2910, %y592, !dbg !32
  %2977 = fsub float %2975, %2976, !dbg !32
  %2978 = fmul float %2906, %2942, !dbg !32
  %2979 = fadd float %2977, %2978, !dbg !32
  %2980 = fmul float %2979, %.pn1376, !dbg !32
  %2981 = fadd float %2972, %2980, !dbg !32
  %2982 = fcmp oge float %2981, 0.000000e+00, !dbg !32
  %positive_cos_cont329 = select i1 %2982, float %2981, float 0.000000e+00, !dbg !32
  %2983 = fcmp une float %2942, 0.000000e+00, !dbg !33
  %2984 = fdiv float %2894, %2942, !dbg !33
  %.op1393 = fmul float %2984, 9.700000e+01, !dbg !33
  %.op1393.op = fmul float %.op1393, 0x3FC45F3060000000, !dbg !33
  %pdf593 = select i1 %2983, float %.op1393.op, float 0.000000e+00, !dbg !33
  %2985 = fcmp ogt float %pdf593, 0.000000e+00, !dbg !33
  br i1 %2985, label %expr_true331, label %infix_result335, !dbg !33

expr_true331:                                     ; preds = %expr_false317
  %2986 = fmul float %2960, %.pn1374, !dbg !34
  %2987 = fmul float %2970, %.pn1372, !dbg !34
  %2988 = fadd float %2986, %2987, !dbg !34
  %2989 = fmul float %2979, %.pn1370, !dbg !34
  %2990 = fadd float %2988, %2989, !dbg !34
  %2991 = fcmp ogt float %2990, 0.000000e+00, !dbg !34
  br i1 %2991, label %expr_true334, label %infix_result335, !dbg !34

expr_true334:                                     ; preds = %expr_true331
  br label %infix_result335, !dbg !35

infix_result335:                                  ; preds = %expr_false317, %expr_true331, %expr_true334
  %infix_result336 = phi i1 [ true, %expr_true334 ], [ false, %expr_true331 ], [ false, %expr_false317 ], !dbg !36
  %pdf593. = select i1 %infix_result336, float %pdf593, float 1.000000e+00, !dbg !37
  br i1 %infix_result336, label %expr_true342, label %if_join343, !dbg !38

expr_true342:                                     ; preds = %infix_result335
  %2992 = fmul float %pdf593, 9.800000e+01, !dbg !39
  %2993 = fdiv float %2992, 9.700000e+01, !dbg !39
  %2994 = fmul float %2993, 0.000000e+00, !dbg !39
  %2995 = insertvalue %5 undef, float %2994, 0, !dbg !39
  %2996 = insertvalue %5 %2995, float %2993, 1, !dbg !39
  %2997 = insertvalue %5 %2996, float %2994, 2, !dbg !39
  br label %if_join343, !dbg !39

if_join343:                                       ; preds = %infix_result335, %expr_true342
  %if_join344 = phi %5 [ %2997, %expr_true342 ], [ zeroinitializer, %infix_result335 ], !dbg !40
  %.op1520 = fmul float %2981, 0x3FD45F3060000000, !dbg !41
  %2998 = select i1 %2982, float %.op1520, float 0.000000e+00, !dbg !41
  %2999 = fmul float %2911, %2998, !dbg !41
  %3000 = fmul float %2860, %pdf593., !dbg !41
  %3001 = fadd float %2999, %3000, !dbg !41
  %3002 = fmul float %2911, %2912, !dbg !41
  %3003 = extractvalue %5 %if_join344, 0, !dbg !41
  %3004 = fmul float %2860, %3003, !dbg !41
  %3005 = fadd float %3002, %3004, !dbg !41
  %3006 = fmul float %2911, %2913, !dbg !41
  %3007 = extractvalue %5 %if_join344, 1, !dbg !41
  %3008 = fmul float %2860, %3007, !dbg !41
  %3009 = fadd float %3006, %3008, !dbg !41
  %3010 = extractvalue %5 %if_join344, 2, !dbg !41
  %3011 = fmul float %2860, %3010, !dbg !41
  br label %if_join381, !dbg !41

expr_true349:                                     ; preds = %expr_true277
  %3012 = fsub float 1.000000e+00, %2894, !dbg !28
  %3013 = call float @llvm.sqrt.f32(float %3012), !dbg !28
  %3014 = call float @llvm.sqrt.f32(float %2894), !dbg !42
  %3015 = call float @llvm.cos.f32(float %phi588), !dbg !43
  %3016 = call float @llvm.sin.f32(float %phi588), !dbg !31
  %3017 = fmul float %3013, 0x3FD45F3060000000, !dbg !32
  %3018 = fcmp ogt float %3017, 0.000000e+00, !dbg !32
  %3019 = fcmp oge float %.pn1376, 0.000000e+00, !dbg !32
  %3020 = select i1 %3019, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %3021 = fmul float %3020, %.pn1380, !dbg !32
  %3022 = fmul float %3021, %.pn1380, !dbg !32
  %3023 = fadd float %3020, %.pn1376, !dbg !32
  %a594 = fdiv float -1.000000e+00, %3023, !dbg !32
  %3024 = fmul float %3022, %a594, !dbg !32
  %3025 = fadd float %3024, 1.000000e+00, !dbg !32
  %x595 = fmul float %3014, %3015, !dbg !32
  %3026 = fmul float %3025, %x595, !dbg !32
  %3027 = fmul float %.pn1380, %.pn1378, !dbg !32
  %b596 = fmul float %3027, %a594, !dbg !32
  %y597 = fmul float %3014, %3016, !dbg !32
  %3028 = fmul float %b596, %y597, !dbg !32
  %3029 = fadd float %3026, %3028, !dbg !32
  %3030 = fmul float %.pn1380, %3013, !dbg !32
  %3031 = fadd float %3029, %3030, !dbg !32
  %3032 = fmul float %3020, %b596, !dbg !32
  %3033 = fmul float %3032, %x595, !dbg !32
  %3034 = fmul float %.pn1378, %.pn1378, !dbg !32
  %3035 = fmul float %3034, %a594, !dbg !32
  %3036 = fadd float %3020, %3035, !dbg !32
  %3037 = fmul float %3036, %y597, !dbg !32
  %3038 = fadd float %3033, %3037, !dbg !32
  %3039 = fmul float %.pn1378, %3013, !dbg !32
  %3040 = fadd float %3038, %3039, !dbg !32
  %3041 = fneg float %3020, !dbg !32
  %3042 = fmul float %.pn1380, %3041, !dbg !32
  %3043 = fmul float %3042, %x595, !dbg !32
  %3044 = fmul float %.pn1378, %y597, !dbg !32
  %3045 = fsub float %3043, %3044, !dbg !32
  %3046 = fmul float %.pn1376, %3013, !dbg !32
  %3047 = fadd float %3045, %3046, !dbg !32
  br i1 %3018, label %expr_true359, label %infix_result363, !dbg !32

expr_true359:                                     ; preds = %expr_true349
  %3048 = fmul float %3031, %.pn1374, !dbg !34
  %3049 = fmul float %3040, %.pn1372, !dbg !34
  %3050 = fadd float %3048, %3049, !dbg !34
  %3051 = fmul float %3047, %.pn1370, !dbg !34
  %3052 = fadd float %3050, %3051, !dbg !34
  %3053 = fcmp ogt float %3052, 0.000000e+00, !dbg !34
  br i1 %3053, label %expr_true362, label %infix_result363, !dbg !34

expr_true362:                                     ; preds = %expr_true359
  br label %infix_result363, !dbg !35

infix_result363:                                  ; preds = %expr_true349, %expr_true359, %expr_true362
  %infix_result364 = phi i1 [ true, %expr_true362 ], [ false, %expr_true359 ], [ false, %expr_true349 ], !dbg !36
  %.1505 = select i1 %infix_result364, float %3017, float 1.000000e+00, !dbg !37
  %3054 = insertvalue %5 undef, float %2912, 0, !dbg !38
  %3055 = insertvalue %5 %3054, float %2913, 1, !dbg !38
  %3056 = insertvalue %5 %3055, float %2914, 2, !dbg !38
  %if_join372 = select i1 %infix_result364, %5 %3056, %5 zeroinitializer, !dbg !38
  %3057 = fmul float %3031, %2908, !dbg !40
  %3058 = fmul float %3040, %2910, !dbg !40
  %3059 = fadd float %3057, %3058, !dbg !40
  %3060 = fmul float %3047, %2906, !dbg !40
  %3061 = fadd float %3059, %3060, !dbg !40
  %3062 = fcmp oge float %3061, 0.000000e+00, !dbg !40
  %.1506 = select i1 %3062, float %3061, float 0.000000e+00, !dbg !44
  %positive_cos_cont380 = select i1 %3062, float %3061, float 0.000000e+00, !dbg !45
  %3063 = fmul float %2911, %.1505, !dbg !46
  %3064 = bitcast float %.1506 to i32, !dbg !46
  %3065 = uitofp i32 %3064 to float, !dbg !46
  %y598 = fmul float %3065, 0x3E80000000000000, !dbg !46
  %3066 = fadd float %y598, 0xC05F0E6EE0000000, !dbg !46
  %3067 = and i32 %3064, 8388607, !dbg !46
  %mx599 = or i32 %3067, 1056964608, !dbg !46
  %3068 = bitcast i32 %mx599 to float, !dbg !46
  %3069 = fmul float %3068, 0x3FF7F7EEA0000000, !dbg !46
  %3070 = fsub float %3066, %3069, !dbg !46
  %3071 = fadd float %3068, 0x3FD6889F20000000, !dbg !46
  %3072 = fdiv float 0x3FFB9D3460000000, %3071, !dbg !46
  %3073 = fsub float %3070, %3072, !dbg !46
  %3074 = fmul float %3073, 9.600000e+01, !dbg !46
  %3075 = fcmp olt float %3074, -1.260000e+02, !dbg !46
  %3076 = select i1 %3075, float -1.260000e+02, float %3074, !dbg !46
  %3077 = fadd float %3076, 0x405E518A20000000, !dbg !46
  %3078 = fptosi float %3076 to i32, !dbg !46
  %3079 = sitofp i32 %3078 to float, !dbg !46
  %3080 = fsub float %3076, %3079, !dbg !46
  %3081 = fcmp olt float %3074, 0.000000e+00, !dbg !46
  %3082 = select i1 %3081, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z600 = fadd float %3080, %3082, !dbg !46
  %3083 = fsub float 0x40135EBF00000000, %z600, !dbg !46
  %3084 = fdiv float 0x403BBA5FC0000000, %3083, !dbg !46
  %3085 = fadd float %3077, %3084, !dbg !46
  %3086 = fmul float %z600, 0x3FF7D791A0000000, !dbg !46
  %3087 = fsub float %3085, %3086, !dbg !46
  %3088 = fmul float %3087, 0x4160000000000000, !dbg !46
  %3089 = fptosi float %3088 to i32, !dbg !46
  %3090 = bitcast i32 %3089 to float, !dbg !46
  %3091 = fmul float %3090, 9.700000e+01, !dbg !46
  %3092 = fmul float %3091, 0x3FC45F3060000000, !dbg !46
  %3093 = fmul float %2860, %3092, !dbg !46
  %3094 = fadd float %3063, %3093, !dbg !46
  %3095 = extractvalue %5 %if_join372, 0, !dbg !46
  %3096 = fmul float %2911, %3095, !dbg !46
  %3097 = bitcast float %positive_cos_cont380 to i32, !dbg !46
  %3098 = uitofp i32 %3097 to float, !dbg !46
  %y601 = fmul float %3098, 0x3E80000000000000, !dbg !46
  %3099 = fadd float %y601, 0xC05F0E6EE0000000, !dbg !46
  %3100 = and i32 %3097, 8388607, !dbg !46
  %mx602 = or i32 %3100, 1056964608, !dbg !46
  %3101 = bitcast i32 %mx602 to float, !dbg !46
  %3102 = fmul float %3101, 0x3FF7F7EEA0000000, !dbg !46
  %3103 = fsub float %3099, %3102, !dbg !46
  %3104 = fadd float %3101, 0x3FD6889F20000000, !dbg !46
  %3105 = fdiv float 0x3FFB9D3460000000, %3104, !dbg !46
  %3106 = fsub float %3103, %3105, !dbg !46
  %3107 = fmul float %3106, 9.600000e+01, !dbg !46
  %3108 = fcmp olt float %3107, -1.260000e+02, !dbg !46
  %3109 = select i1 %3108, float -1.260000e+02, float %3107, !dbg !46
  %3110 = fadd float %3109, 0x405E518A20000000, !dbg !46
  %3111 = fptosi float %3109 to i32, !dbg !46
  %3112 = sitofp i32 %3111 to float, !dbg !46
  %3113 = fsub float %3109, %3112, !dbg !46
  %3114 = fcmp olt float %3107, 0.000000e+00, !dbg !46
  %3115 = select i1 %3114, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z603 = fadd float %3113, %3115, !dbg !46
  %3116 = fsub float 0x40135EBF00000000, %z603, !dbg !46
  %3117 = fdiv float 0x403BBA5FC0000000, %3116, !dbg !46
  %3118 = fadd float %3110, %3117, !dbg !46
  %3119 = fmul float %z603, 0x3FF7D791A0000000, !dbg !46
  %3120 = fsub float %3118, %3119, !dbg !46
  %3121 = fmul float %3120, 0x4160000000000000, !dbg !46
  %3122 = fptosi float %3121 to i32, !dbg !46
  %3123 = bitcast i32 %3122 to float, !dbg !46
  %3124 = fmul float %3123, 9.800000e+01, !dbg !46
  %3125 = fmul float %3124, 0x3FC45F3060000000, !dbg !46
  %3126 = fmul float %3125, 0.000000e+00, !dbg !46
  %3127 = fmul float %2860, %3126, !dbg !46
  %3128 = fadd float %3096, %3127, !dbg !46
  %3129 = extractvalue %5 %if_join372, 1, !dbg !46
  %3130 = fmul float %2911, %3129, !dbg !46
  %3131 = fmul float %2860, %3125, !dbg !46
  %3132 = fadd float %3130, %3131, !dbg !46
  %3133 = extractvalue %5 %if_join372, 2, !dbg !46
  br label %if_join381, !dbg !46

if_join381:                                       ; preds = %infix_result363, %if_join343
  %.sink1508 = phi float [ %3127, %infix_result363 ], [ %3011, %if_join343 ]
  %.pn1519 = phi float [ %3133, %infix_result363 ], [ %2914, %if_join343 ]
  %.pn1403 = phi float [ %3031, %infix_result363 ], [ %2960, %if_join343 ]
  %.pn1401 = phi float [ %3040, %infix_result363 ], [ %2970, %if_join343 ]
  %.pn1399 = phi float [ %3047, %infix_result363 ], [ %2979, %if_join343 ]
  %positive_cos_cont329.pn = phi float [ %3013, %infix_result363 ], [ %positive_cos_cont329, %if_join343 ]
  %if_join383 = phi float [ %3094, %infix_result363 ], [ %3001, %if_join343 ], !dbg !47
  %.pn1409 = phi float [ %3128, %infix_result363 ], [ %3005, %if_join343 ]
  %.pn1407 = phi float [ %3132, %infix_result363 ], [ %3009, %if_join343 ]
  %.sink1507 = fmul float %2911, %.pn1519, !dbg !48
  %3134 = fadd float %.sink1507, %.sink1508, !dbg !48
  %.unpack1411 = load float, float* %.elt1410, align 4, !dbg !47
  %.unpack1413 = load float, float* %.elt1412, align 8, !dbg !47
  %.unpack1415 = load float, float* %.elt1414, align 4, !dbg !47
  %3135 = load i32, i32* %16, align 8, !dbg !18
  %3136 = load i32, i32* %17, align 4, !dbg !18
  %3137 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3138 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %3137, !dbg !18
  %3139 = fmul float %2648, %2661, !dbg !18
  %3140 = fadd float %2639, %3139, !dbg !18
  store float %3140, float* %3138, align 4, !dbg !18
  %3141 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3142 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %3141, !dbg !18
  %3143 = fmul float %2651, %2661, !dbg !18
  %3144 = fadd float %2642, %3143, !dbg !18
  store float %3144, float* %3142, align 4, !dbg !18
  %3145 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3146 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %3145, !dbg !18
  %3147 = fmul float %2654, %2661, !dbg !18
  %3148 = fadd float %2645, %3147, !dbg !18
  store float %3148, float* %3146, align 4, !dbg !18
  %3149 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3150 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %3149, !dbg !18
  store float %.pn1403, float* %3150, align 4, !dbg !18
  %3151 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3152 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %3151, !dbg !18
  store float %.pn1401, float* %3152, align 4, !dbg !18
  %3153 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3154 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %3153, !dbg !18
  store float %.pn1399, float* %3154, align 4, !dbg !18
  %3155 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3156 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %3155, !dbg !18
  store float 0x3F1A36E2E0000000, float* %3156, align 4, !dbg !18
  %3157 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3158 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %3157, !dbg !18
  store float 0x47EFFFFFE0000000, float* %3158, align 4, !dbg !18
  %3159 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3160 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %3159, !dbg !18
  store i32 %3135, i32* %3160, align 4, !dbg !18
  %3161 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3162 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %3161, !dbg !18
  %3163 = fmul float %.unpack1411, %.pn1409, !dbg !18
  %3164 = fdiv float %positive_cos_cont329.pn, %if_join383, !dbg !18
  %3165 = fmul float %3163, %3164, !dbg !18
  store float %3165, float* %3162, align 4, !dbg !18
  %3166 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3167 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %3166, !dbg !18
  %3168 = fmul float %.unpack1413, %.pn1407, !dbg !18
  %3169 = fmul float %3168, %3164, !dbg !18
  store float %3169, float* %3167, align 4, !dbg !18
  %3170 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3171 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %3170, !dbg !18
  %3172 = fmul float %.unpack1415, %3134, !dbg !18
  %3173 = fmul float %3172, %3164, !dbg !18
  store float %3173, float* %3171, align 4, !dbg !18
  %3174 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3175 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %3174, !dbg !18
  %3176 = fdiv float 1.000000e+00, %if_join383, !dbg !18
  store float %3176, float* %3175, align 4, !dbg !18
  %3177 = sext i32 %unroll_step12984 to i64, !dbg !18
  %3178 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %3177, !dbg !18
  %3179 = add nsw i32 %3136, 1, !dbg !18
  store i32 %3179, i32* %3178, align 4, !dbg !18
  %3180 = add nsw i32 %unroll_step12984, 1, !dbg !18
  %3181 = icmp slt i32 %3180, %132, !dbg !15
  br i1 %3181, label %expr_true277, label %expr_false13, !dbg !15

expr_true394:                                     ; preds = %expr_false7, %expr_true394
  %unroll_step9983 = phi i32 [ %3817, %expr_true394 ], [ %131, %expr_false7 ]
  %3182 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3183 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %3182, !dbg !16
  %vec_cast.i754 = bitcast float* %3183 to <8 x float>*, !dbg !16
  %cont_load.i755 = load <8 x float>, <8 x float>* %vec_cast.i754, align 4, !dbg !16
  %3184 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3185 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %3184, !dbg !16
  %vec_cast1.i756 = bitcast float* %3185 to <8 x float>*, !dbg !16
  %cont_load2.i757 = load <8 x float>, <8 x float>* %vec_cast1.i756, align 4, !dbg !16
  %3186 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3187 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %3186, !dbg !16
  %vec_cast3.i758 = bitcast float* %3187 to <8 x float>*, !dbg !16
  %cont_load4.i759 = load <8 x float>, <8 x float>* %vec_cast3.i758, align 4, !dbg !16
  %3188 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3189 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %3188, !dbg !16
  %vec_cast5.i760 = bitcast float* %3189 to <8 x float>*, !dbg !16
  %cont_load6.i761 = load <8 x float>, <8 x float>* %vec_cast5.i760, align 4, !dbg !16
  %3190 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3191 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %3190, !dbg !16
  %vec_cast7.i762 = bitcast float* %3191 to <8 x float>*, !dbg !16
  %cont_load8.i763 = load <8 x float>, <8 x float>* %vec_cast7.i762, align 4, !dbg !16
  %3192 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3193 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %3192, !dbg !16
  %vec_cast9.i764 = bitcast float* %3193 to <8 x float>*, !dbg !16
  %cont_load10.i765 = load <8 x float>, <8 x float>* %vec_cast9.i764, align 4, !dbg !16
  %3194 = fneg <8 x float> %cont_load8.i763, !dbg !104
  %3195 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3196 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %3195, !dbg !16
  %vec_cast11.i766 = bitcast i32* %3196 to <8 x i32>*, !dbg !16
  %cont_load12.i767 = load <8 x i32>, <8 x i32>* %vec_cast11.i766, align 4, !dbg !16
  %3197 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3198 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %3197, !dbg !16
  %vec_cast13.i768 = bitcast float* %3198 to <8 x float>*, !dbg !16
  %cont_load14.i769 = load <8 x float>, <8 x float>* %vec_cast13.i768, align 4, !dbg !16
  %3199 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3200 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %3199, !dbg !16
  %vec_cast15.i770 = bitcast float* %3200 to <8 x float>*, !dbg !16
  %cont_load16.i771 = load <8 x float>, <8 x float>* %vec_cast15.i770, align 4, !dbg !16
  %3201 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3202 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %3201, !dbg !16
  %vec_cast17.i772 = bitcast float* %3202 to <8 x float>*, !dbg !16
  %cont_load18.i773 = load <8 x float>, <8 x float>* %vec_cast17.i772, align 4, !dbg !16
  %3203 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3204 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %3203, !dbg !16
  %vec_cast19.i774 = bitcast i32* %3204 to <8 x i32>*, !dbg !16
  %cont_load20.i775 = load <8 x i32>, <8 x i32>* %vec_cast19.i774, align 4, !dbg !16
  %3205 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3206 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %3205, !dbg !16
  %vec_cast21.i776 = bitcast float* %3206 to <8 x float>*, !dbg !16
  %cont_load22.i777 = load <8 x float>, <8 x float>* %vec_cast21.i776, align 4, !dbg !16
  %3207 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3208 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %3207, !dbg !16
  %vec_cast23.i786 = bitcast float* %3208 to <8 x float>*, !dbg !16
  %cont_load24.i787 = load <8 x float>, <8 x float>* %vec_cast23.i786, align 4, !dbg !16
  %3209 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3210 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %3209, !dbg !16
  %vec_cast25.i796 = bitcast float* %3210 to <8 x float>*, !dbg !16
  %cont_load26.i797 = load <8 x float>, <8 x float>* %vec_cast25.i796, align 4, !dbg !16
  %3211 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3212 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %3211, !dbg !16
  %vec_cast29.i808 = bitcast i32* %3212 to <8 x i32>*, !dbg !16
  %cont_load30.i809 = load <8 x i32>, <8 x i32>* %vec_cast29.i808, align 4, !dbg !16
  %3213 = shl nsw <8 x i32> %cont_load12.i767, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !108
  %3214 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %36, <8 x i32> %3213, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %3215 = bitcast <8 x float> %3214 to <8 x i32>, !dbg !16
  %3216 = or <8 x i32> %3213, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !108
  %3217 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %37, <8 x i32> %3216, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %3218 = bitcast <8 x float> %3217 to <8 x i32>, !dbg !16
  %3219 = or <8 x i32> %3213, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !108
  %3220 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %38, <8 x i32> %3219, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %3221 = bitcast <8 x float> %3220 to <8 x i32>, !dbg !16
  %3222 = mul <8 x i32> %cont_load12.i767, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3223 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %39, <8 x i32> %3222, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3224 = mul <8 x i32> %cont_load12.i767, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3225 = add <8 x i32> %3224, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %3226 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %40, <8 x i32> %3225, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3227 = mul <8 x i32> %cont_load12.i767, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3228 = add <8 x i32> %3227, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %3229 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %41, <8 x i32> %3228, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3230 = mul <8 x i32> %3215, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3231 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %42, <8 x i32> %3230, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3232 = mul <8 x i32> %3215, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3233 = add <8 x i32> %3232, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %3234 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %43, <8 x i32> %3233, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3235 = mul <8 x i32> %3215, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3236 = add <8 x i32> %3235, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %3237 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %44, <8 x i32> %3236, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3238 = mul <8 x i32> %3218, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3239 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %45, <8 x i32> %3238, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3240 = mul <8 x i32> %3218, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3241 = add <8 x i32> %3240, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %3242 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %46, <8 x i32> %3241, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3243 = mul <8 x i32> %3218, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3244 = add <8 x i32> %3243, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %3245 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %47, <8 x i32> %3244, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3246 = mul <8 x i32> %3221, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3247 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %48, <8 x i32> %3246, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3248 = mul <8 x i32> %3221, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3249 = add <8 x i32> %3248, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %3250 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %49, <8 x i32> %3249, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3251 = mul <8 x i32> %3221, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %3252 = add <8 x i32> %3251, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %3253 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %50, <8 x i32> %3252, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3254 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %cont_load16.i771, !dbg !108
  %3255 = fsub <8 x float> %3254, %cont_load18.i773, !dbg !108
  %3256 = fmul <8 x float> %3255, %3231, !dbg !108
  %3257 = fmul <8 x float> %cont_load16.i771, %3239, !dbg !108
  %3258 = fadd <8 x float> %3256, %3257, !dbg !108
  %3259 = fmul <8 x float> %cont_load18.i773, %3247, !dbg !108
  %3260 = fadd <8 x float> %3258, %3259, !dbg !108
  %3261 = fmul <8 x float> %3260, %3260, !dbg !108
  %3262 = fmul <8 x float> %3255, %3234, !dbg !108
  %3263 = fmul <8 x float> %cont_load16.i771, %3242, !dbg !108
  %3264 = fadd <8 x float> %3262, %3263, !dbg !108
  %3265 = fmul <8 x float> %cont_load18.i773, %3250, !dbg !108
  %3266 = fadd <8 x float> %3264, %3265, !dbg !108
  %3267 = fmul <8 x float> %3266, %3266, !dbg !108
  %3268 = fadd <8 x float> %3261, %3267, !dbg !108
  %3269 = fmul <8 x float> %3255, %3237, !dbg !108
  %3270 = fmul <8 x float> %cont_load16.i771, %3245, !dbg !108
  %3271 = fadd <8 x float> %3269, %3270, !dbg !108
  %3272 = fmul <8 x float> %cont_load18.i773, %3253, !dbg !108
  %3273 = fadd <8 x float> %3271, %3272, !dbg !108
  %3274 = fmul <8 x float> %3273, %3273, !dbg !108
  %3275 = fadd <8 x float> %3268, %3274, !dbg !108
  %.mapped.i822 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %3275), !dbg !16
  %3276 = fmul <8 x float> %cont_load6.i761, %3223, !dbg !109
  %3277 = fmul <8 x float> %cont_load8.i763, %3226, !dbg !109
  %3278 = fadd <8 x float> %3276, %3277, !dbg !109
  %3279 = fmul <8 x float> %cont_load10.i765, %3229, !dbg !109
  %3280 = fadd <8 x float> %3278, %3279, !dbg !109
  %3281 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3280, <8 x float> zeroinitializer, i8 2), !dbg !109
  %3282 = bitcast <8 x float> %3281 to <8 x i32>, !dbg !109
  %3283 = xor <8 x i32> %3282, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !16
  %3284 = fneg <8 x float> %3223, !dbg !110
  %3285 = fneg <8 x float> %3226, !dbg !110
  %3286 = fneg <8 x float> %3229, !dbg !110
  %3287 = bitcast <8 x i32> %3283 to <8 x float>, !dbg !16
  %3288 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3223, <8 x float> %3284, <8 x float> %3287), !dbg !16
  %3289 = bitcast <8 x i32> %3283 to <8 x float>, !dbg !16
  %3290 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3226, <8 x float> %3285, <8 x float> %3289), !dbg !16
  %3291 = bitcast <8 x i32> %3283 to <8 x float>, !dbg !16
  %3292 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3229, <8 x float> %3286, <8 x float> %3291), !dbg !16
  %3293 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped.i822, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>), !dbg !111
  %3294 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3293, !dbg !111
  %3295 = fmul <8 x float> %3260, %3294, !dbg !111
  %3296 = fmul <8 x float> %cont_load6.i761, %3295, !dbg !111
  %3297 = fmul <8 x float> %3266, %3294, !dbg !111
  %3298 = fmul <8 x float> %cont_load8.i763, %3297, !dbg !111
  %3299 = fadd <8 x float> %3296, %3298, !dbg !111
  %3300 = fmul <8 x float> %3273, %3294, !dbg !111
  %3301 = fmul <8 x float> %cont_load10.i765, %3300, !dbg !111
  %3302 = fadd <8 x float> %3299, %3301, !dbg !111
  %3303 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3302, <8 x float> zeroinitializer, i8 2), !dbg !111
  %3304 = bitcast <8 x float> %3303 to <8 x i32>, !dbg !111
  %3305 = xor <8 x i32> %3304, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !111
  %3306 = fneg <8 x float> %3295, !dbg !112
  %3307 = fneg <8 x float> %3297, !dbg !112
  %3308 = fneg <8 x float> %3300, !dbg !112
  %3309 = bitcast <8 x i32> %3305 to <8 x float>, !dbg !16
  %3310 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3295, <8 x float> %3306, <8 x float> %3309), !dbg !16
  %3311 = bitcast <8 x i32> %3305 to <8 x float>, !dbg !16
  %3312 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3297, <8 x float> %3307, <8 x float> %3311), !dbg !16
  %3313 = bitcast <8 x i32> %3305 to <8 x float>, !dbg !16
  %3314 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3300, <8 x float> %3308, <8 x float> %3313), !dbg !16
  %3315 = shl <8 x i32> %3215, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %3316 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %51, <8 x i32> %3315, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3317 = shl <8 x i32> %3215, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %3318 = or <8 x i32> %3317, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %3319 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %52, <8 x i32> %3318, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3320 = shl <8 x i32> %3218, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %3321 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %53, <8 x i32> %3320, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3322 = shl <8 x i32> %3218, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %3323 = or <8 x i32> %3322, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %3324 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %54, <8 x i32> %3323, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3325 = shl <8 x i32> %3221, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !16
  %3326 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %55, <8 x i32> %3325, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %3327 = shl <8 x i32> %3221, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, !dbg !113
  %3328 = or <8 x i32> %3327, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !113
  %3329 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %56, <8 x i32> %3328, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !113
  %3330 = fmul <8 x float> %3255, %3316, !dbg !113
  %3331 = fmul <8 x float> %cont_load16.i771, %3321, !dbg !113
  %3332 = fadd <8 x float> %3330, %3331, !dbg !113
  %3333 = fmul <8 x float> %cont_load18.i773, %3326, !dbg !113
  %3334 = fadd <8 x float> %3332, %3333, !dbg !113
  %.mapped31.i831 = call <8 x float> @xfloorf_avx2(<8 x float> %3334), !dbg !16
  %3335 = fmul <8 x float> %3255, %3319, !dbg !114
  %3336 = fmul <8 x float> %cont_load16.i771, %3324, !dbg !114
  %3337 = fadd <8 x float> %3335, %3336, !dbg !114
  %3338 = fmul <8 x float> %cont_load18.i773, %3329, !dbg !114
  %3339 = fadd <8 x float> %3337, %3338, !dbg !114
  %.mapped32.i832 = call <8 x float> @xfloorf_avx2(<8 x float> %3339), !dbg !16
  %3340 = fsub <8 x float> %3334, %.mapped31.i831, !dbg !114
  %u_SIMD.i835 = fmul <8 x float> %3340, %.splat.i834, !dbg !114
  %3341 = fptosi <8 x float> %u_SIMD.i835 to <8 x i32>, !dbg !114
  %3342 = icmp sgt <8 x i32> %.splat34.i837, %3341, !dbg !115
  %3343 = select <8 x i1> %3342, <8 x i32> %3341, <8 x i32> %.splat34.i837, !dbg !115
  %3344 = fsub <8 x float> %3339, %.mapped32.i832, !dbg !115
  %v_SIMD.i840 = fmul <8 x float> %3344, %.splat36.i839, !dbg !115
  %3345 = fptosi <8 x float> %v_SIMD.i840 to <8 x i32>, !dbg !115
  %3346 = icmp sgt <8 x i32> %.splat38.i842, %3345, !dbg !116
  %3347 = select <8 x i1> %3346, <8 x i32> %3345, <8 x i32> %.splat38.i842, !dbg !116
  %3348 = add nsw <8 x i32> %3343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !116
  %3349 = icmp slt <8 x i32> %3348, %.splat34.i837, !dbg !117
  %3350 = select <8 x i1> %3349, <8 x i32> %3348, <8 x i32> %.splat34.i837, !dbg !117
  %3351 = add nsw <8 x i32> %3347, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !117
  %3352 = icmp slt <8 x i32> %3351, %.splat38.i842, !dbg !118
  %3353 = select <8 x i1> %3352, <8 x i32> %3351, <8 x i32> %.splat38.i842, !dbg !118
  %3354 = sitofp <8 x i32> %3345 to <8 x float>, !dbg !118
  %ky_SIMD.i843 = fsub <8 x float> %v_SIMD.i840, %3354, !dbg !118
  %3355 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %ky_SIMD.i843, !dbg !118
  %3356 = sitofp <8 x i32> %3341 to <8 x float>, !dbg !118
  %kx_SIMD.i844 = fsub <8 x float> %u_SIMD.i835, %3356, !dbg !118
  %3357 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %kx_SIMD.i844, !dbg !118
  %3358 = mul nsw <8 x i32> %3347, %.splat40.i824, !dbg !118
  %3359 = add nsw <8 x i32> %3358, %3343, !dbg !118
  %3360 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %61, <8 x i32> %3359, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !118
  %3361 = bitcast <8 x float> %3360 to <8 x i32>, !dbg !118
  %r_SIMD.i845 = and <8 x i32> %3361, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3362 = uitofp <8 x i32> %r_SIMD.i845 to <8 x float>, !dbg !118
  %3363 = fmul <8 x float> %3362, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3364 = fmul <8 x float> %3357, %3363, !dbg !118
  %3365 = add nsw <8 x i32> %3358, %3350, !dbg !118
  %3366 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %62, <8 x i32> %3365, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !118
  %3367 = bitcast <8 x float> %3366 to <8 x i32>, !dbg !118
  %r108_SIMD.i846 = and <8 x i32> %3367, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3368 = uitofp <8 x i32> %r108_SIMD.i846 to <8 x float>, !dbg !118
  %3369 = fmul <8 x float> %3368, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3370 = fmul <8 x float> %kx_SIMD.i844, %3369, !dbg !118
  %3371 = fadd <8 x float> %3364, %3370, !dbg !118
  %3372 = fmul <8 x float> %3355, %3371, !dbg !118
  %3373 = mul nsw <8 x i32> %3353, %.splat40.i824, !dbg !118
  %3374 = add nsw <8 x i32> %3373, %3343, !dbg !118
  %3375 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %63, <8 x i32> %3374, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !118
  %3376 = bitcast <8 x float> %3375 to <8 x i32>, !dbg !118
  %r109_SIMD.i847 = and <8 x i32> %3376, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3377 = uitofp <8 x i32> %r109_SIMD.i847 to <8 x float>, !dbg !118
  %3378 = fmul <8 x float> %3377, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3379 = fmul <8 x float> %3357, %3378, !dbg !118
  %3380 = add nsw <8 x i32> %3373, %3350, !dbg !118
  %3381 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %64, <8 x i32> %3380, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !118
  %3382 = bitcast <8 x float> %3381 to <8 x i32>, !dbg !118
  %r110_SIMD.i848 = and <8 x i32> %3382, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3383 = uitofp <8 x i32> %r110_SIMD.i848 to <8 x float>, !dbg !118
  %3384 = fmul <8 x float> %3383, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3385 = fmul <8 x float> %kx_SIMD.i844, %3384, !dbg !118
  %3386 = fadd <8 x float> %3379, %3385, !dbg !118
  %3387 = fmul <8 x float> %ky_SIMD.i843, %3386, !dbg !118
  %3388 = fadd <8 x float> %3372, %3387, !dbg !118
  %3389 = fmul <8 x float> %3388, <float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000>, !dbg !118
  %3390 = lshr <8 x i32> %3361, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !118
  %g_SIMD.i849 = and <8 x i32> %3390, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3391 = uitofp <8 x i32> %g_SIMD.i849 to <8 x float>, !dbg !118
  %3392 = fmul <8 x float> %3391, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3393 = fmul <8 x float> %3357, %3392, !dbg !118
  %3394 = lshr <8 x i32> %3367, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !118
  %g111_SIMD.i850 = and <8 x i32> %3394, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3395 = uitofp <8 x i32> %g111_SIMD.i850 to <8 x float>, !dbg !118
  %3396 = fmul <8 x float> %3395, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3397 = fmul <8 x float> %kx_SIMD.i844, %3396, !dbg !118
  %3398 = fadd <8 x float> %3393, %3397, !dbg !118
  %3399 = fmul <8 x float> %3355, %3398, !dbg !118
  %3400 = lshr <8 x i32> %3376, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !118
  %g112_SIMD.i851 = and <8 x i32> %3400, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3401 = uitofp <8 x i32> %g112_SIMD.i851 to <8 x float>, !dbg !118
  %3402 = fmul <8 x float> %3401, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3403 = fmul <8 x float> %3357, %3402, !dbg !118
  %3404 = lshr <8 x i32> %3382, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !118
  %g113_SIMD.i852 = and <8 x i32> %3404, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3405 = uitofp <8 x i32> %g113_SIMD.i852 to <8 x float>, !dbg !118
  %3406 = fmul <8 x float> %3405, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3407 = fmul <8 x float> %kx_SIMD.i844, %3406, !dbg !118
  %3408 = fadd <8 x float> %3403, %3407, !dbg !118
  %3409 = fmul <8 x float> %ky_SIMD.i843, %3408, !dbg !118
  %3410 = fadd <8 x float> %3399, %3409, !dbg !118
  %3411 = fmul <8 x float> %3410, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>, !dbg !118
  %3412 = fadd <8 x float> %3389, %3411, !dbg !118
  %3413 = lshr <8 x i32> %3361, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !118
  %b_SIMD.i853 = and <8 x i32> %3413, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3414 = uitofp <8 x i32> %b_SIMD.i853 to <8 x float>, !dbg !118
  %3415 = fmul <8 x float> %3414, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3416 = fmul <8 x float> %3357, %3415, !dbg !118
  %3417 = lshr <8 x i32> %3367, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !118
  %b114_SIMD.i854 = and <8 x i32> %3417, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3418 = uitofp <8 x i32> %b114_SIMD.i854 to <8 x float>, !dbg !118
  %3419 = fmul <8 x float> %3418, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3420 = fmul <8 x float> %kx_SIMD.i844, %3419, !dbg !118
  %3421 = fadd <8 x float> %3416, %3420, !dbg !118
  %3422 = fmul <8 x float> %3355, %3421, !dbg !118
  %3423 = lshr <8 x i32> %3376, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !118
  %b115_SIMD.i855 = and <8 x i32> %3423, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3424 = uitofp <8 x i32> %b115_SIMD.i855 to <8 x float>, !dbg !118
  %3425 = fmul <8 x float> %3424, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3426 = fmul <8 x float> %3357, %3425, !dbg !118
  %3427 = lshr <8 x i32> %3382, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>, !dbg !118
  %b116_SIMD.i856 = and <8 x i32> %3427, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, !dbg !118
  %3428 = uitofp <8 x i32> %b116_SIMD.i856 to <8 x float>, !dbg !118
  %3429 = fmul <8 x float> %3428, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>, !dbg !118
  %3430 = fmul <8 x float> %kx_SIMD.i844, %3429, !dbg !118
  %3431 = fadd <8 x float> %3426, %3430, !dbg !118
  %3432 = fmul <8 x float> %ky_SIMD.i843, %3431, !dbg !118
  %3433 = fadd <8 x float> %3422, %3432, !dbg !118
  %3434 = fmul <8 x float> %3433, <float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000>, !dbg !118
  %3435 = fadd <8 x float> %3412, %3434, !dbg !118
  %3436 = fadd <8 x float> %3435, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>, !dbg !118
  %3437 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3436, <8 x float> zeroinitializer, i8 0), !dbg !16
  %3438 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3436, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>), !dbg !118
  %3439 = fdiv <8 x float> <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>, %3438, !dbg !118
  %3440 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3439, <8 x float> zeroinitializer, <8 x float> %3437), !dbg !118
  %3441 = icmp eq <8 x i32> %cont_load20.i775, zeroinitializer, !dbg !118
  %3442 = sext <8 x i1> %3441 to <8 x i32>, !dbg !118
  %3443 = bitcast <8 x i32> %cont_load20.i775 to <8 x float>, !dbg !118
  %3444 = bitcast <8 x i32> %3442 to <8 x float>, !dbg !118
  %3445 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3443, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %3444), !dbg !118
  %3446 = bitcast <8 x float> %3445 to <8 x i32>, !dbg !118
  %3447 = shl <8 x i32> %3446, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !118
  %3448 = xor <8 x i32> %3447, %3446, !dbg !118
  %3449 = lshr <8 x i32> %3448, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !118
  %3450 = xor <8 x i32> %3448, %3449, !dbg !118
  %3451 = shl <8 x i32> %3450, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !118
  %3452 = xor <8 x i32> %3450, %3451, !dbg !118
  %3453 = and <8 x i32> %3452, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !118
  %3454 = or <8 x i32> %3453, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !118
  %3455 = bitcast <8 x i32> %3454 to <8 x float>, !dbg !16
  %3456 = fadd <8 x float> %3455, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !118
  %3457 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3440, <8 x float> %3456, i8 2), !dbg !118
  %3458 = bitcast <8 x float> %3457 to <8 x i32>, !dbg !118
  %3459 = icmp eq <8 x i32> %3452, zeroinitializer, !dbg !118
  %3460 = sext <8 x i1> %3459 to <8 x i32>, !dbg !118
  %3461 = bitcast <8 x i32> %3452 to <8 x float>, !dbg !118
  %3462 = bitcast <8 x i32> %3460 to <8 x float>, !dbg !118
  %3463 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3461, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %3462), !dbg !118
  %3464 = bitcast <8 x float> %3463 to <8 x i32>, !dbg !118
  %3465 = shl <8 x i32> %3464, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !118
  %3466 = xor <8 x i32> %3465, %3464, !dbg !118
  %3467 = lshr <8 x i32> %3466, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !118
  %3468 = xor <8 x i32> %3466, %3467, !dbg !118
  %3469 = shl <8 x i32> %3468, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !118
  %3470 = xor <8 x i32> %3468, %3469, !dbg !118
  %3471 = icmp eq <8 x i32> %3470, zeroinitializer, !dbg !118
  %3472 = sext <8 x i1> %3471 to <8 x i32>, !dbg !118
  %3473 = bitcast <8 x i32> %3470 to <8 x float>, !dbg !118
  %3474 = bitcast <8 x i32> %3472 to <8 x float>, !dbg !118
  %3475 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3473, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %3474), !dbg !118
  %3476 = bitcast <8 x float> %3475 to <8 x i32>, !dbg !118
  %3477 = shl <8 x i32> %3476, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !118
  %3478 = xor <8 x i32> %3477, %3476, !dbg !118
  %3479 = lshr <8 x i32> %3478, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !118
  %3480 = xor <8 x i32> %3478, %3479, !dbg !118
  %3481 = shl <8 x i32> %3480, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !118
  %3482 = xor <8 x i32> %3480, %3481, !dbg !118
  %3483 = and <8 x i32> %3482, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !118
  %3484 = or <8 x i32> %3483, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !118
  %3485 = bitcast <8 x i32> %3484 to <8 x float>, !dbg !16
  %3486 = fadd <8 x float> %3485, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !118
  %3487 = and <8 x i32> %3470, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !118
  %3488 = or <8 x i32> %3487, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !118
  %3489 = bitcast <8 x i32> %3488 to <8 x float>, !dbg !16
  %3490 = fadd <8 x float> %3489, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !118
  %phi_SIMD.i857 = fmul <8 x float> %3490, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, !dbg !118
  %3491 = fmul <8 x float> %3312, %3194, !dbg !118
  %3492 = fmul <8 x float> %cont_load6.i761, %3310, !dbg !118
  %3493 = fsub <8 x float> %3491, %3492, !dbg !118
  %3494 = fmul <8 x float> %cont_load10.i765, %3314, !dbg !118
  %3495 = fsub <8 x float> %3493, %3494, !dbg !118
  %3496 = fmul <8 x float> %3495, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, !dbg !118
  %3497 = fmul <8 x float> %3314, %3496, !dbg !118
  %3498 = fadd <8 x float> %3497, %cont_load10.i765, !dbg !118
  %3499 = fmul <8 x float> %3310, %3496, !dbg !118
  %3500 = fadd <8 x float> %3499, %cont_load6.i761, !dbg !118
  %3501 = fmul <8 x float> %3312, %3496, !dbg !118
  %3502 = fadd <8 x float> %3501, %cont_load8.i763, !dbg !118
  %3503 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3440, !dbg !118
  %3504 = fmul <8 x float> %3388, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !118
  %3505 = fmul <8 x float> %3410, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !118
  %3506 = fmul <8 x float> %3433, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !118
  %3507 = xor <8 x i32> %3458, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !118
  %3508 = bitcast <8 x float> %3486 to <8 x i32>, !dbg !16
  %3509 = uitofp <8 x i32> %3508 to <8 x float>, !dbg !119
  %y_SIMD.i858 = fmul <8 x float> %3509, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !119
  %3510 = fadd <8 x float> %y_SIMD.i858, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !119
  %3511 = and <8 x i32> %3508, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !119
  %mx_SIMD.i859 = or <8 x i32> %3511, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !119
  %3512 = bitcast <8 x i32> %mx_SIMD.i859 to <8 x float>, !dbg !16
  %3513 = fmul <8 x float> %3512, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !119
  %3514 = fsub <8 x float> %3510, %3513, !dbg !119
  %3515 = fadd <8 x float> %3512, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !119
  %3516 = bitcast <8 x i32> %3507 to <8 x float>, !dbg !119
  %3517 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3515, <8 x float> %3516), !dbg !119
  %3518 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %3517, !dbg !119
  %3519 = fsub <8 x float> %3514, %3518, !dbg !119
  %3520 = fmul <8 x float> %3519, <float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000>, !dbg !119
  %3521 = fcmp fast olt <8 x float> %3520, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !119
  %3522 = select <8 x i1> %3521, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %3520, !dbg !119
  %3523 = fadd <8 x float> %3522, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !119
  %3524 = fptosi <8 x float> %3522 to <8 x i32>, !dbg !119
  %3525 = sitofp <8 x i32> %3524 to <8 x float>, !dbg !119
  %3526 = fsub <8 x float> %3522, %3525, !dbg !119
  %3527 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3520, <8 x float> zeroinitializer, i8 1), !dbg !119
  %3528 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3527), !dbg !119
  %z_SIMD.i860 = fadd <8 x float> %3526, %3528, !dbg !119
  %3529 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z_SIMD.i860, !dbg !119
  %3530 = bitcast <8 x i32> %3507 to <8 x float>, !dbg !119
  %3531 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3529, <8 x float> %3530), !dbg !119
  %3532 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %3531, !dbg !119
  %3533 = fadd <8 x float> %3523, %3532, !dbg !119
  %3534 = fmul <8 x float> %z_SIMD.i860, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !119
  %3535 = fsub <8 x float> %3533, %3534, !dbg !119
  %3536 = fmul <8 x float> %3535, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !119
  %3537 = fptosi <8 x float> %3536 to <8 x i32>, !dbg !119
  %3538 = bitcast <8 x i32> %3537 to <8 x float>, !dbg !16
  %.mapped44.i861 = call <8 x float> @xfminf_avx2(<8 x float> %3538, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>), !dbg !16
  %3539 = fmul <8 x float> %.mapped44.i861, %.mapped44.i861, !dbg !120
  %3540 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3539, !dbg !120
  %.mapped45.i862 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %3540), !dbg !16
  %.mapped46.i863 = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i857), !dbg !16
  %.mapped47.i864 = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i857), !dbg !16
  %3541 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %3498, i8 2), !dbg !121
  %3542 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3541), !dbg !121
  %3543 = fmul <8 x float> %3542, %3500, !dbg !121
  %3544 = fmul <8 x float> %3543, %3500, !dbg !121
  %3545 = fadd <8 x float> %3542, %3498, !dbg !121
  %3546 = bitcast <8 x i32> %3507 to <8 x float>, !dbg !121
  %3547 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3545, <8 x float> %3546), !dbg !121
  %a_SIMD.i865 = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %3547, !dbg !121
  %3548 = fmul <8 x float> %3544, %a_SIMD.i865, !dbg !121
  %3549 = fadd <8 x float> %3548, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !121
  %x_SIMD.i866 = fmul <8 x float> %.mapped45.i862, %.mapped46.i863, !dbg !121
  %3550 = fmul <8 x float> %3549, %x_SIMD.i866, !dbg !121
  %3551 = fmul <8 x float> %3500, %3502, !dbg !121
  %b117_SIMD.i867 = fmul <8 x float> %3551, %a_SIMD.i865, !dbg !121
  %y118_SIMD.i868 = fmul <8 x float> %.mapped45.i862, %.mapped47.i864, !dbg !121
  %3552 = fmul <8 x float> %b117_SIMD.i867, %y118_SIMD.i868, !dbg !121
  %3553 = fadd <8 x float> %3550, %3552, !dbg !121
  %3554 = fmul <8 x float> %3500, %.mapped44.i861, !dbg !121
  %3555 = fadd <8 x float> %3553, %3554, !dbg !121
  %3556 = fmul <8 x float> %3555, %3310, !dbg !121
  %3557 = fmul <8 x float> %3542, %b117_SIMD.i867, !dbg !121
  %3558 = fmul <8 x float> %3557, %x_SIMD.i866, !dbg !121
  %3559 = fmul <8 x float> %3502, %3502, !dbg !121
  %3560 = fmul <8 x float> %3559, %a_SIMD.i865, !dbg !121
  %3561 = fadd <8 x float> %3542, %3560, !dbg !121
  %3562 = fmul <8 x float> %3561, %y118_SIMD.i868, !dbg !121
  %3563 = fadd <8 x float> %3558, %3562, !dbg !121
  %3564 = fmul <8 x float> %3502, %.mapped44.i861, !dbg !121
  %3565 = fadd <8 x float> %3563, %3564, !dbg !121
  %3566 = fmul <8 x float> %3565, %3312, !dbg !121
  %3567 = fadd <8 x float> %3556, %3566, !dbg !121
  %3568 = fneg <8 x float> %3542, !dbg !121
  %3569 = fmul <8 x float> %3500, %3568, !dbg !121
  %3570 = fmul <8 x float> %3569, %x_SIMD.i866, !dbg !121
  %3571 = fmul <8 x float> %3502, %y118_SIMD.i868, !dbg !121
  %3572 = fsub <8 x float> %3570, %3571, !dbg !121
  %3573 = fmul <8 x float> %3498, %.mapped44.i861, !dbg !121
  %3574 = fadd <8 x float> %3572, %3573, !dbg !121
  %3575 = fmul <8 x float> %3574, %3314, !dbg !121
  %3576 = fadd <8 x float> %3567, %3575, !dbg !121
  %3577 = fcmp fast oge <8 x float> %3576, zeroinitializer, !dbg !122
  %3578 = select <8 x i1> %3577, <8 x float> %3576, <8 x float> zeroinitializer, !dbg !122
  %3579 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %.mapped44.i861, <8 x float> zeroinitializer, i8 20), !dbg !16
  %3580 = bitcast <8 x i32> %3507 to <8 x float>, !dbg !122
  %3581 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped44.i861, <8 x float> %3580), !dbg !122
  %3582 = fdiv <8 x float> %3486, %3581, !dbg !122
  %3583 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %3582, <8 x float> %3579), !dbg !122
  %3584 = fmul <8 x float> %3583, <float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01>, !dbg !122
  %pdf_SIMD.i869 = fmul <8 x float> %3584, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !122
  %3585 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %pdf_SIMD.i869, i8 1), !dbg !122
  %3586 = bitcast <8 x float> %3585 to <8 x i32>, !dbg !122
  %3587 = and <8 x i32> %3507, %3586, !dbg !122
  %3588 = xor <8 x i32> %3586, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !122
  %3589 = and <8 x i32> %3507, %3588, !dbg !16
  %3590 = fmul <8 x float> %3555, %3288, !dbg !123
  %3591 = fmul <8 x float> %3565, %3290, !dbg !123
  %3592 = fadd <8 x float> %3590, %3591, !dbg !123
  %3593 = fmul <8 x float> %3574, %3292, !dbg !123
  %3594 = fadd <8 x float> %3592, %3593, !dbg !123
  %3595 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %3594, i8 1), !dbg !123
  %3596 = bitcast <8 x float> %3595 to <8 x i32>, !dbg !123
  %3597 = and <8 x i32> %3587, %3596, !dbg !123
  %3598 = xor <8 x i32> %3596, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !123
  %3599 = and <8 x i32> %3587, %3598, !dbg !16
  %3600 = or <8 x i32> %3589, %3599, !dbg !124
  %3601 = or <8 x i32> %3600, %3597, !dbg !124
  %3602 = bitcast <8 x i32> %3597 to <8 x float>, !dbg !125
  %3603 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %pdf_SIMD.i869, <8 x float> %3602), !dbg !125
  %3604 = fmul <8 x float> %pdf_SIMD.i869, <float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01>, !dbg !126
  %3605 = bitcast <8 x i32> %3597 to <8 x float>, !dbg !126
  %3606 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01>, <8 x float> %3605), !dbg !126
  %3607 = fdiv <8 x float> %3604, %3606, !dbg !126
  %3608 = fmul <8 x float> %3607, zeroinitializer, !dbg !126
  %3609 = bitcast <8 x i32> %3597 to <8 x float>, !dbg !16
  %3610 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %3608, <8 x float> %3609), !dbg !16
  %3611 = bitcast <8 x i32> %3597 to <8 x float>, !dbg !16
  %3612 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %3607, <8 x float> %3611), !dbg !16
  %3613 = bitcast <8 x i32> %3597 to <8 x float>, !dbg !16
  %3614 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %3608, <8 x float> %3613), !dbg !16
  %3615 = fmul <8 x float> %3578, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !127
  %3616 = fmul <8 x float> %3503, %3615, !dbg !127
  %3617 = fmul <8 x float> %3440, %3603, !dbg !127
  %3618 = fadd <8 x float> %3616, %3617, !dbg !127
  %3619 = fmul <8 x float> %3503, %3504, !dbg !127
  %3620 = fmul <8 x float> %3440, %3610, !dbg !127
  %3621 = fadd <8 x float> %3619, %3620, !dbg !127
  %3622 = fmul <8 x float> %3503, %3505, !dbg !127
  %3623 = fmul <8 x float> %3440, %3612, !dbg !127
  %3624 = fadd <8 x float> %3622, %3623, !dbg !127
  %3625 = fmul <8 x float> %3503, %3506, !dbg !127
  %3626 = fmul <8 x float> %3440, %3614, !dbg !127
  %3627 = fadd <8 x float> %3625, %3626, !dbg !127
  %3628 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3486, !dbg !119
  %.mapped51.i870 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %3628), !dbg !16
  %.mapped52.i871 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %3486), !dbg !16
  %.mapped53.i872 = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i857), !dbg !16
  %.mapped54.i873 = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i857), !dbg !16
  %3629 = fmul <8 x float> %.mapped51.i870, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !121
  %3630 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %3629, i8 1), !dbg !121
  %3631 = bitcast <8 x float> %3630 to <8 x i32>, !dbg !121
  %3632 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %3314, i8 2), !dbg !121
  %3633 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3632), !dbg !121
  %3634 = fmul <8 x float> %3633, %3310, !dbg !121
  %3635 = fmul <8 x float> %3634, %3310, !dbg !121
  %3636 = fadd <8 x float> %3633, %3314, !dbg !121
  %3637 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3636, <8 x float> %3457), !dbg !121
  %a119_SIMD.i874 = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %3637, !dbg !121
  %3638 = fmul <8 x float> %3635, %a119_SIMD.i874, !dbg !121
  %3639 = fadd <8 x float> %3638, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !121
  %x120_SIMD.i875 = fmul <8 x float> %.mapped52.i871, %.mapped53.i872, !dbg !121
  %3640 = fmul <8 x float> %3639, %x120_SIMD.i875, !dbg !121
  %3641 = fmul <8 x float> %3310, %3312, !dbg !121
  %b121_SIMD.i876 = fmul <8 x float> %3641, %a119_SIMD.i874, !dbg !121
  %y122_SIMD.i877 = fmul <8 x float> %.mapped52.i871, %.mapped54.i873, !dbg !121
  %3642 = fmul <8 x float> %b121_SIMD.i876, %y122_SIMD.i877, !dbg !121
  %3643 = fadd <8 x float> %3640, %3642, !dbg !121
  %3644 = fmul <8 x float> %3310, %.mapped51.i870, !dbg !121
  %3645 = fadd <8 x float> %3643, %3644, !dbg !121
  %3646 = fmul <8 x float> %3633, %b121_SIMD.i876, !dbg !121
  %3647 = fmul <8 x float> %3646, %x120_SIMD.i875, !dbg !121
  %3648 = fmul <8 x float> %3312, %3312, !dbg !121
  %3649 = fmul <8 x float> %3648, %a119_SIMD.i874, !dbg !121
  %3650 = fadd <8 x float> %3633, %3649, !dbg !121
  %3651 = fmul <8 x float> %3650, %y122_SIMD.i877, !dbg !121
  %3652 = fadd <8 x float> %3647, %3651, !dbg !121
  %3653 = fmul <8 x float> %3312, %.mapped51.i870, !dbg !121
  %3654 = fadd <8 x float> %3652, %3653, !dbg !121
  %3655 = fneg <8 x float> %3633, !dbg !121
  %3656 = fmul <8 x float> %3310, %3655, !dbg !121
  %3657 = fmul <8 x float> %3656, %x120_SIMD.i875, !dbg !121
  %3658 = fmul <8 x float> %3312, %y122_SIMD.i877, !dbg !121
  %3659 = fsub <8 x float> %3657, %3658, !dbg !121
  %3660 = fmul <8 x float> %3314, %.mapped51.i870, !dbg !121
  %3661 = fadd <8 x float> %3659, %3660, !dbg !121
  %3662 = and <8 x i32> %3458, %3631, !dbg !121
  %3663 = xor <8 x i32> %3631, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !121
  %3664 = and <8 x i32> %3458, %3663, !dbg !16
  %3665 = fmul <8 x float> %3645, %3288, !dbg !123
  %3666 = fmul <8 x float> %3654, %3290, !dbg !123
  %3667 = fadd <8 x float> %3665, %3666, !dbg !123
  %3668 = fmul <8 x float> %3661, %3292, !dbg !123
  %3669 = fadd <8 x float> %3667, %3668, !dbg !123
  %3670 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %3669, i8 1), !dbg !123
  %3671 = bitcast <8 x float> %3670 to <8 x i32>, !dbg !123
  %3672 = and <8 x i32> %3662, %3671, !dbg !123
  %3673 = xor <8 x i32> %3671, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !123
  %3674 = and <8 x i32> %3662, %3673, !dbg !16
  %3675 = or <8 x i32> %3664, %3674, !dbg !124
  %3676 = or <8 x i32> %3675, %3672, !dbg !124
  %3677 = bitcast <8 x i32> %3672 to <8 x float>, !dbg !125
  %3678 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3629, <8 x float> %3677), !dbg !125
  %3679 = bitcast <8 x i32> %3672 to <8 x float>, !dbg !125
  %3680 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %3504, <8 x float> %3679), !dbg !125
  %3681 = bitcast <8 x i32> %3672 to <8 x float>, !dbg !125
  %3682 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %3505, <8 x float> %3681), !dbg !125
  %3683 = bitcast <8 x i32> %3672 to <8 x float>, !dbg !128
  %3684 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %3506, <8 x float> %3683), !dbg !128
  %3685 = fmul <8 x float> %3645, %3500, !dbg !128
  %3686 = fmul <8 x float> %3654, %3502, !dbg !128
  %3687 = fadd <8 x float> %3685, %3686, !dbg !128
  %3688 = fmul <8 x float> %3661, %3498, !dbg !128
  %3689 = fadd <8 x float> %3687, %3688, !dbg !128
  %3690 = fcmp fast oge <8 x float> %3689, zeroinitializer, !dbg !129
  %3691 = select <8 x i1> %3690, <8 x float> %3689, <8 x float> zeroinitializer, !dbg !129
  %3692 = fmul <8 x float> %3503, %3678, !dbg !129
  %3693 = bitcast <8 x float> %3691 to <8 x i32>, !dbg !16
  %3694 = uitofp <8 x i32> %3693 to <8 x float>, !dbg !129
  %y123_SIMD.i878 = fmul <8 x float> %3694, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !129
  %3695 = fadd <8 x float> %y123_SIMD.i878, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !129
  %3696 = and <8 x i32> %3693, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !129
  %mx124_SIMD.i879 = or <8 x i32> %3696, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !129
  %3697 = bitcast <8 x i32> %mx124_SIMD.i879 to <8 x float>, !dbg !16
  %3698 = fmul <8 x float> %3697, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !129
  %3699 = fsub <8 x float> %3695, %3698, !dbg !129
  %3700 = fadd <8 x float> %3697, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !129
  %3701 = bitcast <8 x i32> %3676 to <8 x float>, !dbg !129
  %3702 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3700, <8 x float> %3701), !dbg !129
  %3703 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %3702, !dbg !129
  %3704 = fsub <8 x float> %3699, %3703, !dbg !129
  %3705 = fmul <8 x float> %3704, <float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01>, !dbg !129
  %3706 = fcmp fast olt <8 x float> %3705, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !129
  %3707 = select <8 x i1> %3706, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %3705, !dbg !129
  %3708 = fadd <8 x float> %3707, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !129
  %3709 = fptosi <8 x float> %3707 to <8 x i32>, !dbg !129
  %3710 = sitofp <8 x i32> %3709 to <8 x float>, !dbg !129
  %3711 = fsub <8 x float> %3707, %3710, !dbg !129
  %3712 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3705, <8 x float> zeroinitializer, i8 1), !dbg !129
  %3713 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3712), !dbg !129
  %z125_SIMD.i880 = fadd <8 x float> %3711, %3713, !dbg !129
  %3714 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z125_SIMD.i880, !dbg !129
  %3715 = bitcast <8 x i32> %3676 to <8 x float>, !dbg !129
  %3716 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3714, <8 x float> %3715), !dbg !129
  %3717 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %3716, !dbg !129
  %3718 = fadd <8 x float> %3708, %3717, !dbg !129
  %3719 = fmul <8 x float> %z125_SIMD.i880, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !129
  %3720 = fsub <8 x float> %3718, %3719, !dbg !129
  %3721 = fmul <8 x float> %3720, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !129
  %3722 = fptosi <8 x float> %3721 to <8 x i32>, !dbg !129
  %3723 = bitcast <8 x i32> %3722 to <8 x float>, !dbg !16
  %3724 = fmul <8 x float> %3723, <float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01>, !dbg !129
  %3725 = fmul <8 x float> %3724, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !129
  %3726 = fmul <8 x float> %3440, %3725, !dbg !129
  %3727 = fadd <8 x float> %3692, %3726, !dbg !129
  %3728 = fmul <8 x float> %3503, %3680, !dbg !129
  %3729 = fmul <8 x float> %3723, <float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01>, !dbg !129
  %3730 = fmul <8 x float> %3729, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !129
  %3731 = fmul <8 x float> %3730, zeroinitializer, !dbg !129
  %3732 = fmul <8 x float> %3440, %3731, !dbg !129
  %3733 = fadd <8 x float> %3728, %3732, !dbg !129
  %3734 = fmul <8 x float> %3503, %3682, !dbg !129
  %3735 = fmul <8 x float> %3440, %3730, !dbg !129
  %3736 = fadd <8 x float> %3734, %3735, !dbg !129
  %3737 = fmul <8 x float> %3503, %3684, !dbg !129
  %3738 = fadd <8 x float> %3737, %3732, !dbg !129
  %3739 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3740 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3645, <8 x float> %3555, <8 x float> %3739), !dbg !16
  %3741 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3742 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3654, <8 x float> %3565, <8 x float> %3741), !dbg !16
  %3743 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3744 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3661, <8 x float> %3574, <8 x float> %3743), !dbg !16
  %3745 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3746 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %.mapped51.i870, <8 x float> %3578, <8 x float> %3745), !dbg !16
  %3747 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3748 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3727, <8 x float> %3618, <8 x float> %3747), !dbg !16
  %3749 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3750 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3733, <8 x float> %3621, <8 x float> %3749), !dbg !16
  %3751 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3752 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3736, <8 x float> %3624, <8 x float> %3751), !dbg !16
  %3753 = bitcast <8 x i32> %3601 to <8 x float>, !dbg !16
  %3754 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3738, <8 x float> %3627, <8 x float> %3753), !dbg !16
  %3755 = or <8 x i32> %3676, %3601, !dbg !130
  %3756 = fmul <8 x float> %cont_load6.i761, %cont_load14.i769, !dbg !108
  %3757 = fadd <8 x float> %cont_load.i755, %3756, !dbg !108
  %3758 = sext i32 %unroll_step9983 to i64, !dbg !108
  %3759 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %3758, !dbg !108
  %vec_cast102.i905 = bitcast float* %3759 to <8 x float>*, !dbg !108
  %3760 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3757, <8 x float>* %vec_cast102.i905, i32 4, <8 x i1> %3760), !dbg !108
  %3761 = fmul <8 x float> %cont_load8.i763, %cont_load14.i769, !dbg !108
  %3762 = fadd <8 x float> %cont_load2.i757, %3761, !dbg !108
  %3763 = sext i32 %unroll_step9983 to i64, !dbg !108
  %3764 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %3763, !dbg !108
  %vec_cast103.i906 = bitcast float* %3764 to <8 x float>*, !dbg !108
  %3765 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3762, <8 x float>* %vec_cast103.i906, i32 4, <8 x i1> %3765), !dbg !108
  %3766 = fmul <8 x float> %cont_load10.i765, %cont_load14.i769, !dbg !108
  %3767 = fadd <8 x float> %cont_load4.i759, %3766, !dbg !108
  %3768 = sext i32 %unroll_step9983 to i64, !dbg !108
  %3769 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %3768, !dbg !108
  %vec_cast104.i907 = bitcast float* %3769 to <8 x float>*, !dbg !108
  %3770 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3767, <8 x float>* %vec_cast104.i907, i32 4, <8 x i1> %3770), !dbg !108
  %3771 = sext i32 %unroll_step9983 to i64, !dbg !108
  %3772 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %3771, !dbg !108
  %vec_cast105.i908 = bitcast float* %3772 to <8 x float>*, !dbg !108
  %3773 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3740, <8 x float>* %vec_cast105.i908, i32 4, <8 x i1> %3773), !dbg !108
  %3774 = sext i32 %unroll_step9983 to i64, !dbg !108
  %3775 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %3774, !dbg !108
  %vec_cast106.i909 = bitcast float* %3775 to <8 x float>*, !dbg !108
  %3776 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3742, <8 x float>* %vec_cast106.i909, i32 4, <8 x i1> %3776), !dbg !108
  %3777 = sext i32 %unroll_step9983 to i64, !dbg !108
  %3778 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %3777, !dbg !108
  %vec_cast107.i910 = bitcast float* %3778 to <8 x float>*, !dbg !108
  %3779 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3744, <8 x float>* %vec_cast107.i910, i32 4, <8 x i1> %3779), !dbg !108
  %3780 = sext i32 %unroll_step9983 to i64, !dbg !108
  %3781 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %3780, !dbg !108
  %vec_cast108.i911 = bitcast float* %3781 to <8 x float>*, !dbg !108
  %3782 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>, <8 x float>* %vec_cast108.i911, i32 4, <8 x i1> %3782), !dbg !108
  %3783 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3784 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %3783, !dbg !16
  %vec_cast109.i912 = bitcast float* %3784 to <8 x float>*, !dbg !16
  %3785 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000>, <8 x float>* %vec_cast109.i912, i32 4, <8 x i1> %3785), !dbg !108
  %3786 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3787 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %3786, !dbg !16
  %vec_cast110.i913 = bitcast i32* %3787 to <8 x i32>*, !dbg !16
  %3788 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %3482, <8 x i32>* %vec_cast110.i913, i32 4, <8 x i1> %3788), !dbg !108
  %3789 = fmul <8 x float> %cont_load22.i777, %3750, !dbg !108
  %3790 = bitcast <8 x i32> %3755 to <8 x float>, !dbg !108
  %3791 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3748, <8 x float> %3790), !dbg !108
  %3792 = fdiv <8 x float> %3746, %3791, !dbg !108
  %3793 = fmul <8 x float> %3789, %3792, !dbg !108
  %3794 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3795 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %3794, !dbg !16
  %vec_cast112.i914 = bitcast float* %3795 to <8 x float>*, !dbg !16
  %3796 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3793, <8 x float>* %vec_cast112.i914, i32 4, <8 x i1> %3796), !dbg !108
  %3797 = fmul <8 x float> %cont_load24.i787, %3752, !dbg !108
  %3798 = fmul <8 x float> %3797, %3792, !dbg !108
  %3799 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3800 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %3799, !dbg !16
  %vec_cast113.i915 = bitcast float* %3800 to <8 x float>*, !dbg !16
  %3801 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3798, <8 x float>* %vec_cast113.i915, i32 4, <8 x i1> %3801), !dbg !108
  %3802 = fmul <8 x float> %cont_load26.i797, %3754, !dbg !108
  %3803 = fmul <8 x float> %3802, %3792, !dbg !108
  %3804 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3805 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %3804, !dbg !16
  %vec_cast114.i916 = bitcast float* %3805 to <8 x float>*, !dbg !16
  %3806 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3803, <8 x float>* %vec_cast114.i916, i32 4, <8 x i1> %3806), !dbg !108
  %3807 = bitcast <8 x i32> %3755 to <8 x float>, !dbg !108
  %3808 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3748, <8 x float> %3807), !dbg !108
  %3809 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3808, !dbg !108
  %3810 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3811 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %3810, !dbg !16
  %vec_cast116.i917 = bitcast float* %3811 to <8 x float>*, !dbg !16
  %3812 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %3809, <8 x float>* %vec_cast116.i917, i32 4, <8 x i1> %3812), !dbg !108
  %3813 = add nsw <8 x i32> %cont_load30.i809, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !108
  %3814 = sext i32 %unroll_step9983 to i64, !dbg !16
  %3815 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %3814, !dbg !16
  %vec_cast117.i918 = bitcast i32* %3815 to <8 x i32>*, !dbg !16
  %3816 = icmp ne <8 x i32> %3755, zeroinitializer, !dbg !108
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %3813, <8 x i32>* %vec_cast117.i918, i32 4, <8 x i1> %3816), !dbg !108
  %3817 = add nsw i32 %unroll_step9983, 8, !dbg !76
  %3818 = icmp slt i32 %3817, %136, !dbg !15
  br i1 %3818, label %expr_true394, label %expr_false10, !dbg !15

expr_true396:                                     ; preds = %expr_false4, %if_join480
  %unroll_step6982 = phi i32 [ %4231, %if_join480 ], [ %128, %expr_false4 ]
  %3819 = sext i32 %unroll_step6982 to i64, !dbg !16
  %3820 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %3819, !dbg !16
  %3821 = load float, float* %3820, align 4, !dbg !16
  %3822 = sext i32 %unroll_step6982 to i64, !dbg !16
  %3823 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %3822, !dbg !16
  %3824 = load float, float* %3823, align 4, !dbg !16
  %3825 = sext i32 %unroll_step6982 to i64, !dbg !16
  %3826 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %3825, !dbg !16
  %3827 = load float, float* %3826, align 4, !dbg !16
  %3828 = sext i32 %unroll_step6982 to i64, !dbg !16
  %3829 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %3828, !dbg !16
  %3830 = load float, float* %3829, align 4, !dbg !16
  %3831 = sext i32 %unroll_step6982 to i64, !dbg !16
  %3832 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %3831, !dbg !16
  %3833 = load float, float* %3832, align 4, !dbg !16
  %3834 = sext i32 %unroll_step6982 to i64, !dbg !16
  %3835 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %3834, !dbg !16
  %3836 = load float, float* %3835, align 4, !dbg !16
  %3837 = fneg float %3833, !dbg !17
  %3838 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3839 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %3838, !dbg !18
  %3840 = load i32, i32* %3839, align 4, !dbg !18
  %3841 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3842 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %3841, !dbg !18
  %3843 = load float, float* %3842, align 4, !dbg !18
  %3844 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3845 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %3844, !dbg !18
  %3846 = load float, float* %3845, align 4, !dbg !18
  %3847 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3848 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %3847, !dbg !18
  %3849 = load float, float* %3848, align 4, !dbg !18
  %3850 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3851 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %3850, !dbg !18
  %3852 = load i32, i32* %3851, align 4, !dbg !18
  %3853 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3854 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %3853, !dbg !18
  %3855 = load float, float* %3854, align 4, !dbg !18
  %3856 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3857 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %3856, !dbg !18
  %3858 = load float, float* %3857, align 4, !dbg !18
  %3859 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3860 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %3859, !dbg !18
  %3861 = load float, float* %3860, align 4, !dbg !18
  %3862 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3863 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1066, i64 0, i64 %3862, !dbg !18
  %3864 = load float, float* %3863, align 4, !dbg !18
  %3865 = sext i32 %unroll_step6982 to i64, !dbg !18
  %3866 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %3865, !dbg !18
  %3867 = load i32, i32* %3866, align 4, !dbg !18
  store i32 %3852, i32* %state_2189438.repack, align 8, !dbg !18
  store float %3855, float* %state_2189438.repack1417.repack, align 4, !dbg !18
  store float %3858, float* %state_2189438.repack1417.repack1424, align 8, !dbg !18
  store float %3861, float* %state_2189438.repack1417.repack1426, align 4, !dbg !18
  store float %3864, float* %state_2189438.repack1419, align 8, !dbg !18
  store i32 %3867, i32* %state_2189438.repack1421, align 4, !dbg !18
  %3868 = shl nsw i32 %3840, 2, !dbg !18
  %3869 = sext i32 %3868 to i64, !dbg !18
  %3870 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %3869, !dbg !18
  %3871 = load i32, i32* %3870, align 4, !dbg !18
  %3872 = or i32 %3868, 1, !dbg !18
  %3873 = sext i32 %3872 to i64, !dbg !18
  %3874 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %3873, !dbg !18
  %3875 = load i32, i32* %3874, align 4, !dbg !18
  %3876 = or i32 %3868, 2, !dbg !18
  %3877 = sext i32 %3876 to i64, !dbg !18
  %3878 = getelementptr inbounds [0 x i32], [0 x i32]* %indices_2188511, i64 0, i64 %3877, !dbg !18
  %3879 = load i32, i32* %3878, align 4, !dbg !18
  %3880 = sext i32 %3840 to i64, !dbg !18
  %.elt1428 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %3880, i32 0, !dbg !18
  %.unpack1429 = load float, float* %.elt1428, align 4, !dbg !18
  %.elt1430 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %3880, i32 1, !dbg !18
  %.unpack1431 = load float, float* %.elt1430, align 4, !dbg !18
  %.elt1432 = getelementptr inbounds [0 x %2], [0 x %2]* %face_normals_2188509, i64 0, i64 %3880, i32 2, !dbg !18
  %.unpack1433 = load float, float* %.elt1432, align 4, !dbg !18
  %3881 = sext i32 %3871 to i64, !dbg !18
  %.elt1434 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3881, i32 0, !dbg !18
  %.unpack1435 = load float, float* %.elt1434, align 4, !dbg !18
  %.elt1436 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3881, i32 1, !dbg !18
  %.unpack1437 = load float, float* %.elt1436, align 4, !dbg !18
  %.elt1438 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3881, i32 2, !dbg !18
  %.unpack1439 = load float, float* %.elt1438, align 4, !dbg !18
  %3882 = sext i32 %3875 to i64, !dbg !18
  %.elt1440 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3882, i32 0, !dbg !18
  %.unpack1441 = load float, float* %.elt1440, align 4, !dbg !18
  %.elt1442 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3882, i32 1, !dbg !18
  %.unpack1443 = load float, float* %.elt1442, align 4, !dbg !18
  %.elt1444 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3882, i32 2, !dbg !18
  %.unpack1445 = load float, float* %.elt1444, align 4, !dbg !18
  %3883 = sext i32 %3879 to i64, !dbg !18
  %.elt1446 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3883, i32 0, !dbg !18
  %.unpack1447 = load float, float* %.elt1446, align 4, !dbg !18
  %.elt1448 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3883, i32 1, !dbg !18
  %.unpack1449 = load float, float* %.elt1448, align 4, !dbg !18
  %.elt1450 = getelementptr inbounds [0 x %2], [0 x %2]* %normals_2188508, i64 0, i64 %3883, i32 2, !dbg !18
  %.unpack1451 = load float, float* %.elt1450, align 4, !dbg !18
  %3884 = fsub float 1.000000e+00, %3846, !dbg !18
  %3885 = fsub float %3884, %3849, !dbg !18
  %3886 = fmul float %3885, %.unpack1435, !dbg !18
  %3887 = fmul float %3846, %.unpack1441, !dbg !18
  %3888 = fadd float %3886, %3887, !dbg !18
  %3889 = fmul float %3849, %.unpack1447, !dbg !18
  %3890 = fadd float %3888, %3889, !dbg !18
  %3891 = fmul float %3890, %3890, !dbg !18
  %3892 = fmul float %3885, %.unpack1437, !dbg !18
  %3893 = fmul float %3846, %.unpack1443, !dbg !18
  %3894 = fadd float %3892, %3893, !dbg !18
  %3895 = fmul float %3849, %.unpack1449, !dbg !18
  %3896 = fadd float %3894, %3895, !dbg !18
  %3897 = fmul float %3896, %3896, !dbg !18
  %3898 = fadd float %3891, %3897, !dbg !18
  %3899 = fmul float %3885, %.unpack1439, !dbg !18
  %3900 = fmul float %3846, %.unpack1445, !dbg !18
  %3901 = fadd float %3899, %3900, !dbg !18
  %3902 = fmul float %3849, %.unpack1451, !dbg !18
  %3903 = fadd float %3901, %3902, !dbg !18
  %3904 = fmul float %3903, %3903, !dbg !18
  %3905 = fadd float %3898, %3904, !dbg !18
  %3906 = call float @llvm.sqrt.f32(float %3905), !dbg !18
  %3907 = fmul float %3830, %.unpack1429, !dbg !19
  %3908 = fmul float %3833, %.unpack1431, !dbg !19
  %3909 = fadd float %3907, %3908, !dbg !19
  %3910 = fmul float %3836, %.unpack1433, !dbg !19
  %3911 = fadd float %3909, %3910, !dbg !19
  %is_entering604 = fcmp ugt float %3911, 0.000000e+00, !dbg !19
  %3912 = fneg float %.unpack1429, !dbg !19
  %3913 = fneg float %.unpack1431, !dbg !19
  %3914 = fneg float %.unpack1433, !dbg !19
  %.pn1456 = select i1 %is_entering604, float %3912, float %.unpack1429, !dbg !19
  %.pn1454 = select i1 %is_entering604, float %3913, float %.unpack1431, !dbg !19
  %.pn1452 = select i1 %is_entering604, float %3914, float %.unpack1433, !dbg !19
  %3915 = fdiv float 1.000000e+00, %3906, !dbg !20
  %3916 = fmul float %3890, %3915, !dbg !20
  %3917 = fmul float %3830, %3916, !dbg !20
  %3918 = fmul float %3896, %3915, !dbg !20
  %3919 = fmul float %3833, %3918, !dbg !20
  %3920 = fadd float %3917, %3919, !dbg !20
  %3921 = fmul float %3903, %3915, !dbg !20
  %3922 = fmul float %3836, %3921, !dbg !20
  %3923 = fadd float %3920, %3922, !dbg !20
  %3924 = fcmp ugt float %3923, 0.000000e+00, !dbg !20
  %3925 = fneg float %3916, !dbg !20
  %3926 = fneg float %3918, !dbg !20
  %3927 = fneg float %3921, !dbg !20
  %.pn1462 = select i1 %3924, float %3925, float %3916, !dbg !20
  %.pn1460 = select i1 %3924, float %3926, float %3918, !dbg !20
  %.pn1458 = select i1 %3924, float %3927, float %3921, !dbg !20
  %3928 = load i32, i32* %18, align 8, !dbg !21
  %3929 = icmp eq i32 %3928, 0, !dbg !21
  %3930 = select i1 %3929, i32 1, i32 %3928, !dbg !21
  %3931 = shl i32 %3930, 13, !dbg !21
  %3932 = xor i32 %3930, %3931, !dbg !21
  %3933 = lshr i32 %3932, 17, !dbg !21
  %3934 = xor i32 %3932, %3933, !dbg !21
  %3935 = shl i32 %3934, 5, !dbg !21
  %3936 = xor i32 %3934, %3935, !dbg !21
  %3937 = and i32 %3936, 8388607, !dbg !21
  %3938 = or i32 %3937, 1065353216, !dbg !21
  %3939 = bitcast i32 %3938 to float, !dbg !21
  %3940 = fadd float %3939, -1.000000e+00, !dbg !21
  %3941 = fcmp ult float %3940, 5.000000e-01, !dbg !21
  store i32 %3936, i32* %18, align 8, !dbg !21
  %3942 = icmp eq i32 %3936, 0, !dbg !21
  %3943 = select i1 %3942, i32 1, i32 %3936, !dbg !21
  %3944 = shl i32 %3943, 13, !dbg !21
  %3945 = xor i32 %3943, %3944, !dbg !21
  %3946 = lshr i32 %3945, 17, !dbg !21
  %3947 = xor i32 %3945, %3946, !dbg !21
  %3948 = shl i32 %3947, 5, !dbg !21
  %3949 = xor i32 %3947, %3948, !dbg !21
  %3950 = icmp eq i32 %3949, 0, !dbg !21
  %3951 = select i1 %3950, i32 1, i32 %3949, !dbg !21
  %3952 = shl i32 %3951, 13, !dbg !21
  %3953 = xor i32 %3951, %3952, !dbg !21
  %3954 = lshr i32 %3953, 17, !dbg !21
  %3955 = xor i32 %3953, %3954, !dbg !21
  %3956 = shl i32 %3955, 5, !dbg !21
  %3957 = xor i32 %3955, %3956, !dbg !21
  %3958 = and i32 %3957, 8388607, !dbg !21
  %3959 = or i32 %3958, 1065353216, !dbg !21
  %3960 = bitcast i32 %3959 to float, !dbg !21
  %3961 = fadd float %3960, -1.000000e+00, !dbg !21
  %3962 = and i32 %3949, 8388607, !dbg !21
  %3963 = or i32 %3962, 1065353216, !dbg !21
  %3964 = bitcast i32 %3963 to float, !dbg !21
  %3965 = fadd float %3964, -1.000000e+00, !dbg !21
  %phi608 = fmul float %3965, 0x401921FB60000000, !dbg !21
  %3966 = fmul float %.pn1460, %3837, !dbg !21
  %3967 = fmul float %3830, %.pn1462, !dbg !21
  %3968 = fsub float %3966, %3967, !dbg !21
  %3969 = fmul float %3836, %.pn1458, !dbg !21
  %3970 = fsub float %3968, %3969, !dbg !21
  %3971 = fmul float %3970, 2.000000e+00, !dbg !21
  %3972 = fmul float %.pn1458, %3971, !dbg !21
  %3973 = fadd float %3972, %3836, !dbg !21
  %3974 = fmul float %.pn1462, %3971, !dbg !21
  %3975 = fadd float %3974, %3830, !dbg !21
  %3976 = fmul float %.pn1460, %3971, !dbg !21
  %3977 = fadd float %3976, %3833, !dbg !21
  store i32 %3957, i32* %18, align 8, !dbg !28
  br i1 %3941, label %expr_false416, label %expr_true448, !dbg !21

expr_false416:                                    ; preds = %expr_true396
  %3978 = bitcast float %3961 to i32, !dbg !28
  %3979 = uitofp i32 %3978 to float, !dbg !28
  %y605 = fmul float %3979, 0x3E80000000000000, !dbg !28
  %3980 = fadd float %y605, 0xC05F0E6EE0000000, !dbg !28
  %3981 = and i32 %3978, 8388607, !dbg !28
  %mx606 = or i32 %3981, 1056964608, !dbg !28
  %3982 = bitcast i32 %mx606 to float, !dbg !28
  %3983 = fmul float %3982, 0x3FF7F7EEA0000000, !dbg !28
  %3984 = fsub float %3980, %3983, !dbg !28
  %3985 = fadd float %3982, 0x3FD6889F20000000, !dbg !28
  %3986 = fdiv float 0x3FFB9D3460000000, %3985, !dbg !28
  %3987 = fsub float %3984, %3986, !dbg !28
  %3988 = fmul float %3987, 0x3F851D07E0000000, !dbg !28
  %3989 = fcmp olt float %3988, -1.260000e+02, !dbg !28
  %3990 = select i1 %3989, float -1.260000e+02, float %3988, !dbg !28
  %3991 = fadd float %3990, 0x405E518A20000000, !dbg !28
  %3992 = fptosi float %3990 to i32, !dbg !28
  %3993 = sitofp i32 %3992 to float, !dbg !28
  %3994 = fsub float %3990, %3993, !dbg !28
  %3995 = fcmp olt float %3988, 0.000000e+00, !dbg !28
  %3996 = select i1 %3995, float 1.000000e+00, float 0.000000e+00, !dbg !28
  %z607 = fadd float %3994, %3996, !dbg !28
  %3997 = fsub float 0x40135EBF00000000, %z607, !dbg !28
  %3998 = fdiv float 0x403BBA5FC0000000, %3997, !dbg !28
  %3999 = fadd float %3991, %3998, !dbg !28
  %4000 = fmul float %z607, 0x3FF7D791A0000000, !dbg !28
  %4001 = fsub float %3999, %4000, !dbg !28
  %4002 = fmul float %4001, 0x4160000000000000, !dbg !28
  %4003 = fptosi float %4002 to i32, !dbg !28
  %4004 = bitcast i32 %4003 to float, !dbg !28
  %4005 = call float @llvm.minnum.f32(float %4004, float 1.000000e+00), !dbg !28
  %4006 = fmul float %4005, %4005, !dbg !29
  %4007 = fsub float 1.000000e+00, %4006, !dbg !29
  %4008 = call float @llvm.sqrt.f32(float %4007), !dbg !29
  %4009 = call float @llvm.cos.f32(float %phi608), !dbg !30
  %4010 = call float @llvm.sin.f32(float %phi608), !dbg !31
  %4011 = fcmp oge float %3973, 0.000000e+00, !dbg !32
  %4012 = select i1 %4011, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %4013 = fmul float %4012, %3975, !dbg !32
  %4014 = fmul float %4013, %3975, !dbg !32
  %4015 = fadd float %4012, %3973, !dbg !32
  %a609 = fdiv float -1.000000e+00, %4015, !dbg !32
  %4016 = fmul float %4014, %a609, !dbg !32
  %4017 = fadd float %4016, 1.000000e+00, !dbg !32
  %x610 = fmul float %4008, %4009, !dbg !32
  %4018 = fmul float %4017, %x610, !dbg !32
  %4019 = fmul float %3975, %3977, !dbg !32
  %b611 = fmul float %4019, %a609, !dbg !32
  %y612 = fmul float %4008, %4010, !dbg !32
  %4020 = fmul float %b611, %y612, !dbg !32
  %4021 = fadd float %4018, %4020, !dbg !32
  %4022 = fmul float %3975, %4005, !dbg !32
  %4023 = fadd float %4021, %4022, !dbg !32
  %4024 = fmul float %4023, %.pn1462, !dbg !32
  %4025 = fmul float %4012, %b611, !dbg !32
  %4026 = fmul float %4025, %x610, !dbg !32
  %4027 = fmul float %3977, %3977, !dbg !32
  %4028 = fmul float %4027, %a609, !dbg !32
  %4029 = fadd float %4012, %4028, !dbg !32
  %4030 = fmul float %4029, %y612, !dbg !32
  %4031 = fadd float %4026, %4030, !dbg !32
  %4032 = fmul float %3977, %4005, !dbg !32
  %4033 = fadd float %4031, %4032, !dbg !32
  %4034 = fmul float %4033, %.pn1460, !dbg !32
  %4035 = fadd float %4024, %4034, !dbg !32
  %4036 = fneg float %4012, !dbg !32
  %4037 = fmul float %3975, %4036, !dbg !32
  %4038 = fmul float %4037, %x610, !dbg !32
  %4039 = fmul float %3977, %y612, !dbg !32
  %4040 = fsub float %4038, %4039, !dbg !32
  %4041 = fmul float %3973, %4005, !dbg !32
  %4042 = fadd float %4040, %4041, !dbg !32
  %4043 = fmul float %4042, %.pn1458, !dbg !32
  %4044 = fadd float %4035, %4043, !dbg !32
  %4045 = fcmp oge float %4044, 0.000000e+00, !dbg !32
  %positive_cos_cont428 = select i1 %4045, float %4044, float 0.000000e+00, !dbg !32
  %4046 = fcmp une float %4005, 0.000000e+00, !dbg !33
  %4047 = fdiv float %3961, %4005, !dbg !33
  %.op1463 = fmul float %4047, 9.700000e+01, !dbg !33
  %.op1463.op = fmul float %.op1463, 0x3FC45F3060000000, !dbg !33
  %pdf613 = select i1 %4046, float %.op1463.op, float 0.000000e+00, !dbg !33
  %4048 = fcmp ogt float %pdf613, 0.000000e+00, !dbg !33
  br i1 %4048, label %expr_true430, label %infix_result434, !dbg !33

expr_true430:                                     ; preds = %expr_false416
  %4049 = fmul float %4023, %.pn1456, !dbg !34
  %4050 = fmul float %4033, %.pn1454, !dbg !34
  %4051 = fadd float %4049, %4050, !dbg !34
  %4052 = fmul float %4042, %.pn1452, !dbg !34
  %4053 = fadd float %4051, %4052, !dbg !34
  %4054 = fcmp ogt float %4053, 0.000000e+00, !dbg !34
  br i1 %4054, label %expr_true433, label %infix_result434, !dbg !34

expr_true433:                                     ; preds = %expr_true430
  br label %infix_result434, !dbg !35

infix_result434:                                  ; preds = %expr_false416, %expr_true430, %expr_true433
  %infix_result435 = phi i1 [ true, %expr_true433 ], [ false, %expr_true430 ], [ false, %expr_false416 ], !dbg !36
  br i1 %infix_result435, label %expr_true441, label %if_join442, !dbg !38

expr_true441:                                     ; preds = %infix_result434
  %4055 = fmul float %pdf613, 9.800000e+01, !dbg !39
  %4056 = fdiv float %4055, 9.700000e+01, !dbg !39
  %4057 = fmul float %4056, 0.000000e+00, !dbg !39
  %4058 = insertvalue %5 undef, float %4057, 0, !dbg !39
  %4059 = insertvalue %5 %4058, float %4056, 1, !dbg !39
  %4060 = insertvalue %5 %4059, float %4057, 2, !dbg !39
  br label %if_join442, !dbg !39

if_join442:                                       ; preds = %infix_result434, %expr_true441
  %if_join443 = phi %5 [ %4060, %expr_true441 ], [ zeroinitializer, %infix_result434 ], !dbg !40
  %.op1522 = fmul float %4044, 0x3FD45F3060000000, !dbg !41
  %.op1522.op = fmul float %.op1522, 5.000000e-01, !dbg !41
  %4061 = select i1 %4045, float %.op1522.op, float 0.000000e+00, !dbg !41
  %pdf613.op = fmul float %pdf613, 5.000000e-01, !dbg !41
  %4062 = select i1 %infix_result435, float %pdf613.op, float 5.000000e-01, !dbg !41
  %4063 = fadd float %4061, %4062, !dbg !41
  %4064 = extractvalue %5 %if_join443, 0, !dbg !41
  %4065 = fmul float %4064, 5.000000e-01, !dbg !41
  %4066 = fadd float %4065, 0.000000e+00, !dbg !41
  br label %if_join480, !dbg !41

expr_true448:                                     ; preds = %expr_true396
  %4067 = fsub float 1.000000e+00, %3961, !dbg !28
  %4068 = call float @llvm.sqrt.f32(float %4067), !dbg !28
  %4069 = call float @llvm.sqrt.f32(float %3961), !dbg !42
  %4070 = call float @llvm.cos.f32(float %phi608), !dbg !43
  %4071 = call float @llvm.sin.f32(float %phi608), !dbg !31
  %4072 = fmul float %4068, 0x3FD45F3060000000, !dbg !32
  %4073 = fcmp ogt float %4072, 0.000000e+00, !dbg !32
  %4074 = fcmp oge float %.pn1458, 0.000000e+00, !dbg !32
  %4075 = select i1 %4074, float 1.000000e+00, float -1.000000e+00, !dbg !32
  %4076 = fmul float %4075, %.pn1462, !dbg !32
  %4077 = fmul float %4076, %.pn1462, !dbg !32
  %4078 = fadd float %4075, %.pn1458, !dbg !32
  %a614 = fdiv float -1.000000e+00, %4078, !dbg !32
  %4079 = fmul float %4077, %a614, !dbg !32
  %4080 = fadd float %4079, 1.000000e+00, !dbg !32
  %x615 = fmul float %4069, %4070, !dbg !32
  %4081 = fmul float %4080, %x615, !dbg !32
  %4082 = fmul float %.pn1462, %.pn1460, !dbg !32
  %b616 = fmul float %4082, %a614, !dbg !32
  %y617 = fmul float %4069, %4071, !dbg !32
  %4083 = fmul float %b616, %y617, !dbg !32
  %4084 = fadd float %4081, %4083, !dbg !32
  %4085 = fmul float %.pn1462, %4068, !dbg !32
  %4086 = fadd float %4084, %4085, !dbg !32
  %4087 = fmul float %4075, %b616, !dbg !32
  %4088 = fmul float %4087, %x615, !dbg !32
  %4089 = fmul float %.pn1460, %.pn1460, !dbg !32
  %4090 = fmul float %4089, %a614, !dbg !32
  %4091 = fadd float %4075, %4090, !dbg !32
  %4092 = fmul float %4091, %y617, !dbg !32
  %4093 = fadd float %4088, %4092, !dbg !32
  %4094 = fmul float %.pn1460, %4068, !dbg !32
  %4095 = fadd float %4093, %4094, !dbg !32
  %4096 = fneg float %4075, !dbg !32
  %4097 = fmul float %.pn1462, %4096, !dbg !32
  %4098 = fmul float %4097, %x615, !dbg !32
  %4099 = fmul float %.pn1460, %y617, !dbg !32
  %4100 = fsub float %4098, %4099, !dbg !32
  %4101 = fmul float %.pn1458, %4068, !dbg !32
  %4102 = fadd float %4100, %4101, !dbg !32
  br i1 %4073, label %expr_true458, label %infix_result462, !dbg !32

expr_true458:                                     ; preds = %expr_true448
  %4103 = fmul float %4086, %.pn1456, !dbg !34
  %4104 = fmul float %4095, %.pn1454, !dbg !34
  %4105 = fadd float %4103, %4104, !dbg !34
  %4106 = fmul float %4102, %.pn1452, !dbg !34
  %4107 = fadd float %4105, %4106, !dbg !34
  %4108 = fcmp ogt float %4107, 0.000000e+00, !dbg !34
  br i1 %4108, label %expr_true461, label %infix_result462, !dbg !34

expr_true461:                                     ; preds = %expr_true458
  br label %infix_result462, !dbg !35

infix_result462:                                  ; preds = %expr_true448, %expr_true458, %expr_true461
  %infix_result463 = phi i1 [ true, %expr_true461 ], [ false, %expr_true458 ], [ false, %expr_true448 ], !dbg !36
  %if_join471 = select i1 %infix_result463, %5 { float 0.000000e+00, float 0x3FD45F3060000000, float 0.000000e+00 }, %5 zeroinitializer, !dbg !38
  %4109 = fmul float %4086, %3975, !dbg !40
  %4110 = fmul float %4095, %3977, !dbg !40
  %4111 = fadd float %4109, %4110, !dbg !40
  %4112 = fmul float %4102, %3973, !dbg !40
  %4113 = fadd float %4111, %4112, !dbg !40
  %4114 = fcmp oge float %4113, 0.000000e+00, !dbg !40
  %.1511 = select i1 %4114, float %4113, float 0.000000e+00, !dbg !44
  %positive_cos_cont479 = select i1 %4114, float %4113, float 0.000000e+00, !dbg !45
  %.op1521 = fmul float %4072, 5.000000e-01, !dbg !46
  %4115 = select i1 %infix_result463, float %.op1521, float 5.000000e-01, !dbg !46
  %4116 = bitcast float %.1511 to i32, !dbg !46
  %4117 = uitofp i32 %4116 to float, !dbg !46
  %y618 = fmul float %4117, 0x3E80000000000000, !dbg !46
  %4118 = fadd float %y618, 0xC05F0E6EE0000000, !dbg !46
  %4119 = and i32 %4116, 8388607, !dbg !46
  %mx619 = or i32 %4119, 1056964608, !dbg !46
  %4120 = bitcast i32 %mx619 to float, !dbg !46
  %4121 = fmul float %4120, 0x3FF7F7EEA0000000, !dbg !46
  %4122 = fsub float %4118, %4121, !dbg !46
  %4123 = fadd float %4120, 0x3FD6889F20000000, !dbg !46
  %4124 = fdiv float 0x3FFB9D3460000000, %4123, !dbg !46
  %4125 = fsub float %4122, %4124, !dbg !46
  %4126 = fmul float %4125, 9.600000e+01, !dbg !46
  %4127 = fcmp olt float %4126, -1.260000e+02, !dbg !46
  %4128 = select i1 %4127, float -1.260000e+02, float %4126, !dbg !46
  %4129 = fadd float %4128, 0x405E518A20000000, !dbg !46
  %4130 = fptosi float %4128 to i32, !dbg !46
  %4131 = sitofp i32 %4130 to float, !dbg !46
  %4132 = fsub float %4128, %4131, !dbg !46
  %4133 = fcmp olt float %4126, 0.000000e+00, !dbg !46
  %4134 = select i1 %4133, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z620 = fadd float %4132, %4134, !dbg !46
  %4135 = fsub float 0x40135EBF00000000, %z620, !dbg !46
  %4136 = fdiv float 0x403BBA5FC0000000, %4135, !dbg !46
  %4137 = fadd float %4129, %4136, !dbg !46
  %4138 = fmul float %z620, 0x3FF7D791A0000000, !dbg !46
  %4139 = fsub float %4137, %4138, !dbg !46
  %4140 = fmul float %4139, 0x4160000000000000, !dbg !46
  %4141 = fptosi float %4140 to i32, !dbg !46
  %4142 = bitcast i32 %4141 to float, !dbg !46
  %4143 = fmul float %4142, 9.700000e+01, !dbg !46
  %4144 = fmul float %4143, 0x3FC45F3060000000, !dbg !46
  %4145 = fmul float %4144, 5.000000e-01, !dbg !46
  %4146 = fadd float %4115, %4145, !dbg !46
  %4147 = extractvalue %5 %if_join471, 0, !dbg !46
  %4148 = fmul float %4147, 5.000000e-01, !dbg !46
  %4149 = bitcast float %positive_cos_cont479 to i32, !dbg !46
  %4150 = uitofp i32 %4149 to float, !dbg !46
  %y621 = fmul float %4150, 0x3E80000000000000, !dbg !46
  %4151 = fadd float %y621, 0xC05F0E6EE0000000, !dbg !46
  %4152 = and i32 %4149, 8388607, !dbg !46
  %mx622 = or i32 %4152, 1056964608, !dbg !46
  %4153 = bitcast i32 %mx622 to float, !dbg !46
  %4154 = fmul float %4153, 0x3FF7F7EEA0000000, !dbg !46
  %4155 = fsub float %4151, %4154, !dbg !46
  %4156 = fadd float %4153, 0x3FD6889F20000000, !dbg !46
  %4157 = fdiv float 0x3FFB9D3460000000, %4156, !dbg !46
  %4158 = fsub float %4155, %4157, !dbg !46
  %4159 = fmul float %4158, 9.600000e+01, !dbg !46
  %4160 = fcmp olt float %4159, -1.260000e+02, !dbg !46
  %4161 = select i1 %4160, float -1.260000e+02, float %4159, !dbg !46
  %4162 = fadd float %4161, 0x405E518A20000000, !dbg !46
  %4163 = fptosi float %4161 to i32, !dbg !46
  %4164 = sitofp i32 %4163 to float, !dbg !46
  %4165 = fsub float %4161, %4164, !dbg !46
  %4166 = fcmp olt float %4159, 0.000000e+00, !dbg !46
  %4167 = select i1 %4166, float 1.000000e+00, float 0.000000e+00, !dbg !46
  %z623 = fadd float %4165, %4167, !dbg !46
  %4168 = fsub float 0x40135EBF00000000, %z623, !dbg !46
  %4169 = fdiv float 0x403BBA5FC0000000, %4168, !dbg !46
  %4170 = fadd float %4162, %4169, !dbg !46
  %4171 = fmul float %z623, 0x3FF7D791A0000000, !dbg !46
  %4172 = fsub float %4170, %4171, !dbg !46
  %4173 = fmul float %4172, 0x4160000000000000, !dbg !46
  %4174 = fptosi float %4173 to i32, !dbg !46
  %4175 = bitcast i32 %4174 to float, !dbg !46
  %4176 = fmul float %4175, 9.800000e+01, !dbg !46
  %4177 = fmul float %4176, 0x3FC45F3060000000, !dbg !46
  %4178 = fmul float %4177, 0.000000e+00, !dbg !46
  %4179 = fmul float %4178, 5.000000e-01, !dbg !46
  %4180 = fadd float %4148, %4179, !dbg !46
  %4181 = fmul float %4177, 5.000000e-01, !dbg !46
  br label %if_join480, !dbg !46

if_join480:                                       ; preds = %infix_result462, %if_join442
  %.sink1516 = phi float [ %4181, %infix_result462 ], [ 0x3FC45F3060000000, %if_join442 ]
  %if_join471.sink = phi %5 [ %if_join471, %infix_result462 ], [ %if_join443, %if_join442 ]
  %.sink1513 = phi float [ %4179, %infix_result462 ], [ 0.000000e+00, %if_join442 ]
  %.pn1473 = phi float [ %4086, %infix_result462 ], [ %4023, %if_join442 ]
  %.pn1471 = phi float [ %4095, %infix_result462 ], [ %4033, %if_join442 ]
  %.pn1469 = phi float [ %4102, %infix_result462 ], [ %4042, %if_join442 ]
  %positive_cos_cont428.pn = phi float [ %4068, %infix_result462 ], [ %positive_cos_cont428, %if_join442 ]
  %if_join482 = phi float [ %4146, %infix_result462 ], [ %4063, %if_join442 ], !dbg !47
  %.pn1479 = phi float [ %4180, %infix_result462 ], [ %4066, %if_join442 ]
  %.sink1515.in = extractvalue %5 %if_join471.sink, 1, !dbg !48
  %.sink1515 = fmul float %.sink1515.in, 5.000000e-01, !dbg !48
  %4182 = fadd float %.sink1515, %.sink1516, !dbg !48
  %4183 = extractvalue %5 %if_join471.sink, 2, !dbg !48
  %4184 = fmul float %4183, 5.000000e-01, !dbg !48
  %4185 = fadd float %4184, %.sink1513, !dbg !48
  %.unpack1481 = load float, float* %.elt1480, align 4, !dbg !47
  %.unpack1483 = load float, float* %.elt1482, align 8, !dbg !47
  %.unpack1485 = load float, float* %.elt1484, align 4, !dbg !47
  %4186 = load i32, i32* %18, align 8, !dbg !18
  %4187 = load i32, i32* %19, align 4, !dbg !18
  %4188 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4189 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %4188, !dbg !18
  %4190 = fmul float %3830, %3843, !dbg !18
  %4191 = fadd float %3821, %4190, !dbg !18
  store float %4191, float* %4189, align 4, !dbg !18
  %4192 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4193 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %4192, !dbg !18
  %4194 = fmul float %3833, %3843, !dbg !18
  %4195 = fadd float %3824, %4194, !dbg !18
  store float %4195, float* %4193, align 4, !dbg !18
  %4196 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4197 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %4196, !dbg !18
  %4198 = fmul float %3836, %3843, !dbg !18
  %4199 = fadd float %3827, %4198, !dbg !18
  store float %4199, float* %4197, align 4, !dbg !18
  %4200 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4201 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %4200, !dbg !18
  store float %.pn1473, float* %4201, align 4, !dbg !18
  %4202 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4203 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %4202, !dbg !18
  store float %.pn1471, float* %4203, align 4, !dbg !18
  %4204 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4205 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %4204, !dbg !18
  store float %.pn1469, float* %4205, align 4, !dbg !18
  %4206 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4207 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %4206, !dbg !18
  store float 0x3F1A36E2E0000000, float* %4207, align 4, !dbg !18
  %4208 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4209 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %4208, !dbg !18
  store float 0x47EFFFFFE0000000, float* %4209, align 4, !dbg !18
  %4210 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4211 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %4210, !dbg !18
  store i32 %4186, i32* %4211, align 4, !dbg !18
  %4212 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4213 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %4212, !dbg !18
  %4214 = fmul float %.unpack1481, %.pn1479, !dbg !18
  %4215 = fdiv float %positive_cos_cont428.pn, %if_join482, !dbg !18
  %4216 = fmul float %4214, %4215, !dbg !18
  store float %4216, float* %4213, align 4, !dbg !18
  %4217 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4218 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %4217, !dbg !18
  %4219 = fmul float %.unpack1483, %4182, !dbg !18
  %4220 = fmul float %4219, %4215, !dbg !18
  store float %4220, float* %4218, align 4, !dbg !18
  %4221 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4222 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %4221, !dbg !18
  %4223 = fmul float %.unpack1485, %4185, !dbg !18
  %4224 = fmul float %4223, %4215, !dbg !18
  store float %4224, float* %4222, align 4, !dbg !18
  %4225 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4226 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %4225, !dbg !18
  %4227 = fdiv float 1.000000e+00, %if_join482, !dbg !18
  store float %4227, float* %4226, align 4, !dbg !18
  %4228 = sext i32 %unroll_step6982 to i64, !dbg !18
  %4229 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %4228, !dbg !18
  %4230 = add nsw i32 %4187, 1, !dbg !18
  store i32 %4230, i32* %4229, align 4, !dbg !18
  %4231 = add nsw i32 %unroll_step6982, 1, !dbg !18
  %4232 = icmp slt i32 %4231, %124, !dbg !15
  br i1 %4232, label %expr_true396, label %expr_false7, !dbg !15

expr_true493:                                     ; preds = %expr_true, %expr_true493
  %unroll_step3981 = phi i32 [ %4729, %expr_true493 ], [ %123, %expr_true ]
  %4233 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4234 = getelementptr inbounds [0 x float], [0 x float]* %.unpack991, i64 0, i64 %4233, !dbg !16
  %vec_cast.i919 = bitcast float* %4234 to <8 x float>*, !dbg !16
  %cont_load.i920 = load <8 x float>, <8 x float>* %vec_cast.i919, align 4, !dbg !16
  %4235 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4236 = getelementptr inbounds [0 x float], [0 x float]* %.unpack993, i64 0, i64 %4235, !dbg !16
  %vec_cast1.i921 = bitcast float* %4236 to <8 x float>*, !dbg !16
  %cont_load2.i922 = load <8 x float>, <8 x float>* %vec_cast1.i921, align 4, !dbg !16
  %4237 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4238 = getelementptr inbounds [0 x float], [0 x float]* %.unpack995, i64 0, i64 %4237, !dbg !16
  %vec_cast3.i923 = bitcast float* %4238 to <8 x float>*, !dbg !16
  %cont_load4.i924 = load <8 x float>, <8 x float>* %vec_cast3.i923, align 4, !dbg !16
  %4239 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4240 = getelementptr inbounds [0 x float], [0 x float]* %.unpack997, i64 0, i64 %4239, !dbg !16
  %vec_cast5.i925 = bitcast float* %4240 to <8 x float>*, !dbg !16
  %cont_load6.i926 = load <8 x float>, <8 x float>* %vec_cast5.i925, align 4, !dbg !16
  %4241 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4242 = getelementptr inbounds [0 x float], [0 x float]* %.unpack999, i64 0, i64 %4241, !dbg !16
  %vec_cast7.i927 = bitcast float* %4242 to <8 x float>*, !dbg !16
  %cont_load8.i928 = load <8 x float>, <8 x float>* %vec_cast7.i927, align 4, !dbg !16
  %4243 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4244 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1001, i64 0, i64 %4243, !dbg !16
  %vec_cast9.i929 = bitcast float* %4244 to <8 x float>*, !dbg !16
  %cont_load10.i930 = load <8 x float>, <8 x float>* %vec_cast9.i929, align 4, !dbg !16
  %4245 = fneg <8 x float> %cont_load8.i928, !dbg !131
  %4246 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4247 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1011, i64 0, i64 %4246, !dbg !16
  %vec_cast11.i931 = bitcast i32* %4247 to <8 x i32>*, !dbg !16
  %cont_load12.i932 = load <8 x i32>, <8 x i32>* %vec_cast11.i931, align 4, !dbg !16
  %4248 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4249 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1013, i64 0, i64 %4248, !dbg !16
  %vec_cast13.i933 = bitcast float* %4249 to <8 x float>*, !dbg !16
  %cont_load14.i934 = load <8 x float>, <8 x float>* %vec_cast13.i933, align 4, !dbg !16
  %4250 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4251 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1015, i64 0, i64 %4250, !dbg !16
  %vec_cast15.i935 = bitcast float* %4251 to <8 x float>*, !dbg !16
  %cont_load16.i936 = load <8 x float>, <8 x float>* %vec_cast15.i935, align 4, !dbg !16
  %4252 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4253 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1017, i64 0, i64 %4252, !dbg !16
  %vec_cast17.i937 = bitcast float* %4253 to <8 x float>*, !dbg !16
  %cont_load18.i938 = load <8 x float>, <8 x float>* %vec_cast17.i937, align 4, !dbg !16
  %4254 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4255 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1064, i64 0, i64 %4254, !dbg !16
  %vec_cast19.i939 = bitcast i32* %4255 to <8 x i32>*, !dbg !16
  %cont_load20.i940 = load <8 x i32>, <8 x i32>* %vec_cast19.i939, align 4, !dbg !16
  %4256 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4257 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1068, i64 0, i64 %4256, !dbg !16
  %vec_cast21.i941 = bitcast float* %4257 to <8 x float>*, !dbg !16
  %cont_load22.i942 = load <8 x float>, <8 x float>* %vec_cast21.i941, align 4, !dbg !16
  %4258 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4259 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1070, i64 0, i64 %4258, !dbg !16
  %vec_cast23.i944 = bitcast float* %4259 to <8 x float>*, !dbg !16
  %cont_load24.i945 = load <8 x float>, <8 x float>* %vec_cast23.i944, align 4, !dbg !16
  %4260 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4261 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1072, i64 0, i64 %4260, !dbg !16
  %vec_cast25.i952 = bitcast float* %4261 to <8 x float>*, !dbg !16
  %cont_load26.i953 = load <8 x float>, <8 x float>* %vec_cast25.i952, align 4, !dbg !16
  %4262 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4263 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1074, i64 0, i64 %4262, !dbg !16
  %vec_cast29.i962 = bitcast i32* %4263 to <8 x i32>*, !dbg !16
  %cont_load30.i963 = load <8 x i32>, <8 x i32>* %vec_cast29.i962, align 4, !dbg !16
  %4264 = shl nsw <8 x i32> %cont_load12.i932, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !135
  %4265 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %21, <8 x i32> %4264, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %4266 = bitcast <8 x float> %4265 to <8 x i32>, !dbg !16
  %4267 = or <8 x i32> %4264, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !135
  %4268 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %22, <8 x i32> %4267, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %4269 = bitcast <8 x float> %4268 to <8 x i32>, !dbg !16
  %4270 = or <8 x i32> %4264, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, !dbg !135
  %4271 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %23, <8 x i32> %4270, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4), !dbg !16
  %4272 = bitcast <8 x float> %4271 to <8 x i32>, !dbg !16
  %4273 = mul <8 x i32> %cont_load12.i932, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4274 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %24, <8 x i32> %4273, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4275 = mul <8 x i32> %cont_load12.i932, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4276 = add <8 x i32> %4275, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %4277 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %25, <8 x i32> %4276, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4278 = mul <8 x i32> %cont_load12.i932, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4279 = add <8 x i32> %4278, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %4280 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %26, <8 x i32> %4279, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4281 = mul <8 x i32> %4266, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4282 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %27, <8 x i32> %4281, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4283 = mul <8 x i32> %4266, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4284 = add <8 x i32> %4283, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %4285 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %28, <8 x i32> %4284, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4286 = mul <8 x i32> %4266, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4287 = add <8 x i32> %4286, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %4288 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %29, <8 x i32> %4287, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4289 = mul <8 x i32> %4269, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4290 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %30, <8 x i32> %4289, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4291 = mul <8 x i32> %4269, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4292 = add <8 x i32> %4291, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %4293 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %31, <8 x i32> %4292, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4294 = mul <8 x i32> %4269, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4295 = add <8 x i32> %4294, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %4296 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %32, <8 x i32> %4295, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4297 = mul <8 x i32> %4272, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4298 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %33, <8 x i32> %4297, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4299 = mul <8 x i32> %4272, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4300 = add <8 x i32> %4299, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, !dbg !16
  %4301 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %34, <8 x i32> %4300, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4302 = mul <8 x i32> %4272, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>, !dbg !16
  %4303 = add <8 x i32> %4302, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, !dbg !16
  %4304 = call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> undef, i8* %35, <8 x i32> %4303, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1), !dbg !16
  %4305 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %cont_load16.i936, !dbg !135
  %4306 = fsub <8 x float> %4305, %cont_load18.i938, !dbg !135
  %4307 = fmul <8 x float> %4306, %4282, !dbg !135
  %4308 = fmul <8 x float> %cont_load16.i936, %4290, !dbg !135
  %4309 = fadd <8 x float> %4307, %4308, !dbg !135
  %4310 = fmul <8 x float> %cont_load18.i938, %4298, !dbg !135
  %4311 = fadd <8 x float> %4309, %4310, !dbg !135
  %4312 = fmul <8 x float> %4311, %4311, !dbg !135
  %4313 = fmul <8 x float> %4306, %4285, !dbg !135
  %4314 = fmul <8 x float> %cont_load16.i936, %4293, !dbg !135
  %4315 = fadd <8 x float> %4313, %4314, !dbg !135
  %4316 = fmul <8 x float> %cont_load18.i938, %4301, !dbg !135
  %4317 = fadd <8 x float> %4315, %4316, !dbg !135
  %4318 = fmul <8 x float> %4317, %4317, !dbg !135
  %4319 = fadd <8 x float> %4312, %4318, !dbg !135
  %4320 = fmul <8 x float> %4306, %4288, !dbg !135
  %4321 = fmul <8 x float> %cont_load16.i936, %4296, !dbg !135
  %4322 = fadd <8 x float> %4320, %4321, !dbg !135
  %4323 = fmul <8 x float> %cont_load18.i938, %4304, !dbg !135
  %4324 = fadd <8 x float> %4322, %4323, !dbg !135
  %4325 = fmul <8 x float> %4324, %4324, !dbg !135
  %4326 = fadd <8 x float> %4319, %4325, !dbg !135
  %.mapped.i965 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %4326), !dbg !16
  %4327 = fmul <8 x float> %cont_load6.i926, %4274, !dbg !136
  %4328 = fmul <8 x float> %cont_load8.i928, %4277, !dbg !136
  %4329 = fadd <8 x float> %4327, %4328, !dbg !136
  %4330 = fmul <8 x float> %cont_load10.i930, %4280, !dbg !136
  %4331 = fadd <8 x float> %4329, %4330, !dbg !136
  %4332 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4331, <8 x float> zeroinitializer, i8 2), !dbg !136
  %4333 = bitcast <8 x float> %4332 to <8 x i32>, !dbg !136
  %4334 = xor <8 x i32> %4333, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !16
  %4335 = fneg <8 x float> %4274, !dbg !137
  %4336 = fneg <8 x float> %4277, !dbg !137
  %4337 = fneg <8 x float> %4280, !dbg !137
  %4338 = bitcast <8 x i32> %4334 to <8 x float>, !dbg !16
  %4339 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4274, <8 x float> %4335, <8 x float> %4338), !dbg !16
  %4340 = bitcast <8 x i32> %4334 to <8 x float>, !dbg !16
  %4341 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4277, <8 x float> %4336, <8 x float> %4340), !dbg !16
  %4342 = bitcast <8 x i32> %4334 to <8 x float>, !dbg !16
  %4343 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4280, <8 x float> %4337, <8 x float> %4342), !dbg !16
  %4344 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped.i965, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>), !dbg !138
  %4345 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4344, !dbg !138
  %4346 = fmul <8 x float> %4311, %4345, !dbg !138
  %4347 = fmul <8 x float> %cont_load6.i926, %4346, !dbg !138
  %4348 = fmul <8 x float> %4317, %4345, !dbg !138
  %4349 = fmul <8 x float> %cont_load8.i928, %4348, !dbg !138
  %4350 = fadd <8 x float> %4347, %4349, !dbg !138
  %4351 = fmul <8 x float> %4324, %4345, !dbg !138
  %4352 = fmul <8 x float> %cont_load10.i930, %4351, !dbg !138
  %4353 = fadd <8 x float> %4350, %4352, !dbg !138
  %4354 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4353, <8 x float> zeroinitializer, i8 2), !dbg !138
  %4355 = bitcast <8 x float> %4354 to <8 x i32>, !dbg !138
  %4356 = xor <8 x i32> %4355, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !138
  %4357 = fneg <8 x float> %4346, !dbg !139
  %4358 = fneg <8 x float> %4348, !dbg !139
  %4359 = fneg <8 x float> %4351, !dbg !139
  %4360 = bitcast <8 x i32> %4356 to <8 x float>, !dbg !16
  %4361 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4346, <8 x float> %4357, <8 x float> %4360), !dbg !16
  %4362 = bitcast <8 x i32> %4356 to <8 x float>, !dbg !16
  %4363 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4348, <8 x float> %4358, <8 x float> %4362), !dbg !16
  %4364 = bitcast <8 x i32> %4356 to <8 x float>, !dbg !16
  %4365 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4351, <8 x float> %4359, <8 x float> %4364), !dbg !16
  %4366 = icmp eq <8 x i32> %cont_load20.i940, zeroinitializer, !dbg !140
  %4367 = sext <8 x i1> %4366 to <8 x i32>, !dbg !140
  %4368 = bitcast <8 x i32> %cont_load20.i940 to <8 x float>, !dbg !140
  %4369 = bitcast <8 x i32> %4367 to <8 x float>, !dbg !140
  %4370 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4368, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %4369), !dbg !140
  %4371 = bitcast <8 x float> %4370 to <8 x i32>, !dbg !140
  %4372 = shl <8 x i32> %4371, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !140
  %4373 = xor <8 x i32> %4372, %4371, !dbg !140
  %4374 = lshr <8 x i32> %4373, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !140
  %4375 = xor <8 x i32> %4373, %4374, !dbg !140
  %4376 = shl <8 x i32> %4375, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !140
  %4377 = xor <8 x i32> %4375, %4376, !dbg !140
  %4378 = and <8 x i32> %4377, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !140
  %4379 = or <8 x i32> %4378, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !140
  %4380 = bitcast <8 x i32> %4379 to <8 x float>, !dbg !16
  %4381 = fadd <8 x float> %4380, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !140
  %4382 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %4381, i8 2), !dbg !140
  %4383 = bitcast <8 x float> %4382 to <8 x i32>, !dbg !140
  %4384 = icmp eq <8 x i32> %4377, zeroinitializer, !dbg !140
  %4385 = sext <8 x i1> %4384 to <8 x i32>, !dbg !140
  %4386 = bitcast <8 x i32> %4377 to <8 x float>, !dbg !140
  %4387 = bitcast <8 x i32> %4385 to <8 x float>, !dbg !140
  %4388 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4386, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %4387), !dbg !140
  %4389 = bitcast <8 x float> %4388 to <8 x i32>, !dbg !140
  %4390 = shl <8 x i32> %4389, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !140
  %4391 = xor <8 x i32> %4390, %4389, !dbg !140
  %4392 = lshr <8 x i32> %4391, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !140
  %4393 = xor <8 x i32> %4391, %4392, !dbg !140
  %4394 = shl <8 x i32> %4393, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !140
  %4395 = xor <8 x i32> %4393, %4394, !dbg !140
  %4396 = icmp eq <8 x i32> %4395, zeroinitializer, !dbg !140
  %4397 = sext <8 x i1> %4396 to <8 x i32>, !dbg !140
  %4398 = bitcast <8 x i32> %4395 to <8 x float>, !dbg !140
  %4399 = bitcast <8 x i32> %4397 to <8 x float>, !dbg !140
  %4400 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4398, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> %4399), !dbg !140
  %4401 = bitcast <8 x float> %4400 to <8 x i32>, !dbg !140
  %4402 = shl <8 x i32> %4401, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>, !dbg !140
  %4403 = xor <8 x i32> %4402, %4401, !dbg !140
  %4404 = lshr <8 x i32> %4403, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>, !dbg !140
  %4405 = xor <8 x i32> %4403, %4404, !dbg !140
  %4406 = shl <8 x i32> %4405, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>, !dbg !140
  %4407 = xor <8 x i32> %4405, %4406, !dbg !140
  %4408 = and <8 x i32> %4407, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !140
  %4409 = or <8 x i32> %4408, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !140
  %4410 = bitcast <8 x i32> %4409 to <8 x float>, !dbg !16
  %4411 = fadd <8 x float> %4410, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !140
  %4412 = and <8 x i32> %4395, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !140
  %4413 = or <8 x i32> %4412, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, !dbg !140
  %4414 = bitcast <8 x i32> %4413 to <8 x float>, !dbg !16
  %4415 = fadd <8 x float> %4414, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, !dbg !140
  %phi_SIMD.i966 = fmul <8 x float> %4415, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, !dbg !140
  %4416 = fmul <8 x float> %4363, %4245, !dbg !140
  %4417 = fmul <8 x float> %cont_load6.i926, %4361, !dbg !140
  %4418 = fsub <8 x float> %4416, %4417, !dbg !140
  %4419 = fmul <8 x float> %cont_load10.i930, %4365, !dbg !140
  %4420 = fsub <8 x float> %4418, %4419, !dbg !140
  %4421 = fmul <8 x float> %4420, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, !dbg !140
  %4422 = fmul <8 x float> %4365, %4421, !dbg !140
  %4423 = fadd <8 x float> %4422, %cont_load10.i930, !dbg !140
  %4424 = fmul <8 x float> %4361, %4421, !dbg !140
  %4425 = fadd <8 x float> %4424, %cont_load6.i926, !dbg !140
  %4426 = fmul <8 x float> %4363, %4421, !dbg !140
  %4427 = fadd <8 x float> %4426, %cont_load8.i928, !dbg !140
  %4428 = xor <8 x i32> %4383, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !140
  %4429 = bitcast <8 x float> %4411 to <8 x i32>, !dbg !16
  %4430 = uitofp <8 x i32> %4429 to <8 x float>, !dbg !141
  %y_SIMD.i967 = fmul <8 x float> %4430, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !141
  %4431 = fadd <8 x float> %y_SIMD.i967, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !141
  %4432 = and <8 x i32> %4429, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !141
  %mx_SIMD.i968 = or <8 x i32> %4432, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !141
  %4433 = bitcast <8 x i32> %mx_SIMD.i968 to <8 x float>, !dbg !16
  %4434 = fmul <8 x float> %4433, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !141
  %4435 = fsub <8 x float> %4431, %4434, !dbg !141
  %4436 = fadd <8 x float> %4433, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !141
  %4437 = bitcast <8 x i32> %4428 to <8 x float>, !dbg !141
  %4438 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4436, <8 x float> %4437), !dbg !141
  %4439 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %4438, !dbg !141
  %4440 = fsub <8 x float> %4435, %4439, !dbg !141
  %4441 = fmul <8 x float> %4440, <float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000, float 0x3F851D07E0000000>, !dbg !141
  %4442 = fcmp fast olt <8 x float> %4441, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !141
  %4443 = select <8 x i1> %4442, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %4441, !dbg !141
  %4444 = fadd <8 x float> %4443, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !141
  %4445 = fptosi <8 x float> %4443 to <8 x i32>, !dbg !141
  %4446 = sitofp <8 x i32> %4445 to <8 x float>, !dbg !141
  %4447 = fsub <8 x float> %4443, %4446, !dbg !141
  %4448 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4441, <8 x float> zeroinitializer, i8 1), !dbg !141
  %4449 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4448), !dbg !141
  %z_SIMD.i969 = fadd <8 x float> %4447, %4449, !dbg !141
  %4450 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z_SIMD.i969, !dbg !141
  %4451 = bitcast <8 x i32> %4428 to <8 x float>, !dbg !141
  %4452 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4450, <8 x float> %4451), !dbg !141
  %4453 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %4452, !dbg !141
  %4454 = fadd <8 x float> %4444, %4453, !dbg !141
  %4455 = fmul <8 x float> %z_SIMD.i969, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !141
  %4456 = fsub <8 x float> %4454, %4455, !dbg !141
  %4457 = fmul <8 x float> %4456, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !141
  %4458 = fptosi <8 x float> %4457 to <8 x i32>, !dbg !141
  %4459 = bitcast <8 x i32> %4458 to <8 x float>, !dbg !16
  %.mapped33.i = call <8 x float> @xfminf_avx2(<8 x float> %4459, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>), !dbg !16
  %4460 = fmul <8 x float> %.mapped33.i, %.mapped33.i, !dbg !142
  %4461 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4460, !dbg !142
  %.mapped34.i = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %4461), !dbg !16
  %.mapped35.i = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i966), !dbg !16
  %.mapped36.i = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i966), !dbg !16
  %4462 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %4423, i8 2), !dbg !143
  %4463 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4462), !dbg !143
  %4464 = fmul <8 x float> %4463, %4425, !dbg !143
  %4465 = fmul <8 x float> %4464, %4425, !dbg !143
  %4466 = fadd <8 x float> %4463, %4423, !dbg !143
  %4467 = bitcast <8 x i32> %4428 to <8 x float>, !dbg !143
  %4468 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4466, <8 x float> %4467), !dbg !143
  %a_SIMD.i970 = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %4468, !dbg !143
  %4469 = fmul <8 x float> %4465, %a_SIMD.i970, !dbg !143
  %4470 = fadd <8 x float> %4469, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !143
  %x_SIMD.i971 = fmul <8 x float> %.mapped34.i, %.mapped35.i, !dbg !143
  %4471 = fmul <8 x float> %4470, %x_SIMD.i971, !dbg !143
  %4472 = fmul <8 x float> %4425, %4427, !dbg !143
  %b_SIMD.i972 = fmul <8 x float> %4472, %a_SIMD.i970, !dbg !143
  %y88_SIMD.i = fmul <8 x float> %.mapped34.i, %.mapped36.i, !dbg !143
  %4473 = fmul <8 x float> %b_SIMD.i972, %y88_SIMD.i, !dbg !143
  %4474 = fadd <8 x float> %4471, %4473, !dbg !143
  %4475 = fmul <8 x float> %4425, %.mapped33.i, !dbg !143
  %4476 = fadd <8 x float> %4474, %4475, !dbg !143
  %4477 = fmul <8 x float> %4476, %4361, !dbg !143
  %4478 = fmul <8 x float> %4463, %b_SIMD.i972, !dbg !143
  %4479 = fmul <8 x float> %4478, %x_SIMD.i971, !dbg !143
  %4480 = fmul <8 x float> %4427, %4427, !dbg !143
  %4481 = fmul <8 x float> %4480, %a_SIMD.i970, !dbg !143
  %4482 = fadd <8 x float> %4463, %4481, !dbg !143
  %4483 = fmul <8 x float> %4482, %y88_SIMD.i, !dbg !143
  %4484 = fadd <8 x float> %4479, %4483, !dbg !143
  %4485 = fmul <8 x float> %4427, %.mapped33.i, !dbg !143
  %4486 = fadd <8 x float> %4484, %4485, !dbg !143
  %4487 = fmul <8 x float> %4486, %4363, !dbg !143
  %4488 = fadd <8 x float> %4477, %4487, !dbg !143
  %4489 = fneg <8 x float> %4463, !dbg !143
  %4490 = fmul <8 x float> %4425, %4489, !dbg !143
  %4491 = fmul <8 x float> %4490, %x_SIMD.i971, !dbg !143
  %4492 = fmul <8 x float> %4427, %y88_SIMD.i, !dbg !143
  %4493 = fsub <8 x float> %4491, %4492, !dbg !143
  %4494 = fmul <8 x float> %4423, %.mapped33.i, !dbg !143
  %4495 = fadd <8 x float> %4493, %4494, !dbg !143
  %4496 = fmul <8 x float> %4495, %4365, !dbg !143
  %4497 = fadd <8 x float> %4488, %4496, !dbg !143
  %4498 = fcmp fast oge <8 x float> %4497, zeroinitializer, !dbg !144
  %4499 = select <8 x i1> %4498, <8 x float> %4497, <8 x float> zeroinitializer, !dbg !144
  %4500 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %.mapped33.i, <8 x float> zeroinitializer, i8 20), !dbg !16
  %4501 = bitcast <8 x i32> %4428 to <8 x float>, !dbg !144
  %4502 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %.mapped33.i, <8 x float> %4501), !dbg !144
  %4503 = fdiv <8 x float> %4411, %4502, !dbg !144
  %4504 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %4503, <8 x float> %4500), !dbg !144
  %4505 = fmul <8 x float> %4504, <float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01>, !dbg !144
  %pdf_SIMD.i973 = fmul <8 x float> %4505, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !144
  %4506 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %pdf_SIMD.i973, i8 1), !dbg !144
  %4507 = bitcast <8 x float> %4506 to <8 x i32>, !dbg !144
  %4508 = and <8 x i32> %4428, %4507, !dbg !144
  %4509 = xor <8 x i32> %4507, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !144
  %4510 = and <8 x i32> %4428, %4509, !dbg !16
  %4511 = fmul <8 x float> %4476, %4339, !dbg !145
  %4512 = fmul <8 x float> %4486, %4341, !dbg !145
  %4513 = fadd <8 x float> %4511, %4512, !dbg !145
  %4514 = fmul <8 x float> %4495, %4343, !dbg !145
  %4515 = fadd <8 x float> %4513, %4514, !dbg !145
  %4516 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %4515, i8 1), !dbg !145
  %4517 = bitcast <8 x float> %4516 to <8 x i32>, !dbg !145
  %4518 = and <8 x i32> %4508, %4517, !dbg !145
  %4519 = xor <8 x i32> %4517, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !145
  %4520 = and <8 x i32> %4508, %4519, !dbg !16
  %4521 = or <8 x i32> %4510, %4520, !dbg !146
  %4522 = or <8 x i32> %4521, %4518, !dbg !146
  %4523 = bitcast <8 x i32> %4518 to <8 x float>, !dbg !147
  %4524 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %pdf_SIMD.i973, <8 x float> %4523), !dbg !147
  %4525 = fmul <8 x float> %pdf_SIMD.i973, <float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01>, !dbg !148
  %4526 = bitcast <8 x i32> %4518 to <8 x float>, !dbg !148
  %4527 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01>, <8 x float> %4526), !dbg !148
  %4528 = fdiv <8 x float> %4525, %4527, !dbg !148
  %4529 = fmul <8 x float> %4528, zeroinitializer, !dbg !148
  %4530 = bitcast <8 x i32> %4518 to <8 x float>, !dbg !16
  %4531 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %4529, <8 x float> %4530), !dbg !16
  %4532 = bitcast <8 x i32> %4518 to <8 x float>, !dbg !16
  %4533 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %4528, <8 x float> %4532), !dbg !16
  %4534 = bitcast <8 x i32> %4518 to <8 x float>, !dbg !16
  %4535 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %4529, <8 x float> %4534), !dbg !16
  %4536 = fmul <8 x float> %4499, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !149
  %4537 = fmul <8 x float> %4536, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !149
  %4538 = fmul <8 x float> %4524, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !149
  %4539 = fadd <8 x float> %4537, %4538, !dbg !149
  %4540 = fmul <8 x float> %4531, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !149
  %4541 = fadd <8 x float> %4540, zeroinitializer, !dbg !149
  %4542 = fmul <8 x float> %4533, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !149
  %4543 = fadd <8 x float> %4542, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !149
  %4544 = fmul <8 x float> %4535, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !149
  %4545 = fadd <8 x float> %4544, zeroinitializer, !dbg !149
  %4546 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4411, !dbg !141
  %.mapped40.i = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %4546), !dbg !16
  %.mapped41.i = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %4411), !dbg !16
  %.mapped42.i = call <8 x float> @xcosf_u1_avx2(<8 x float> %phi_SIMD.i966), !dbg !16
  %.mapped43.i = call <8 x float> @xsinf_u1_avx2(<8 x float> %phi_SIMD.i966), !dbg !16
  %4547 = fmul <8 x float> %.mapped40.i, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, !dbg !143
  %4548 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %4547, i8 1), !dbg !143
  %4549 = bitcast <8 x float> %4548 to <8 x i32>, !dbg !143
  %4550 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %4365, i8 2), !dbg !143
  %4551 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4550), !dbg !143
  %4552 = fmul <8 x float> %4551, %4361, !dbg !143
  %4553 = fmul <8 x float> %4552, %4361, !dbg !143
  %4554 = fadd <8 x float> %4551, %4365, !dbg !143
  %4555 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4554, <8 x float> %4382), !dbg !143
  %a89_SIMD.i = fdiv <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %4555, !dbg !143
  %4556 = fmul <8 x float> %4553, %a89_SIMD.i, !dbg !143
  %4557 = fadd <8 x float> %4556, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !143
  %x90_SIMD.i = fmul <8 x float> %.mapped41.i, %.mapped42.i, !dbg !143
  %4558 = fmul <8 x float> %4557, %x90_SIMD.i, !dbg !143
  %4559 = fmul <8 x float> %4361, %4363, !dbg !143
  %b91_SIMD.i = fmul <8 x float> %4559, %a89_SIMD.i, !dbg !143
  %y92_SIMD.i = fmul <8 x float> %.mapped41.i, %.mapped43.i, !dbg !143
  %4560 = fmul <8 x float> %b91_SIMD.i, %y92_SIMD.i, !dbg !143
  %4561 = fadd <8 x float> %4558, %4560, !dbg !143
  %4562 = fmul <8 x float> %4361, %.mapped40.i, !dbg !143
  %4563 = fadd <8 x float> %4561, %4562, !dbg !143
  %4564 = fmul <8 x float> %4551, %b91_SIMD.i, !dbg !143
  %4565 = fmul <8 x float> %4564, %x90_SIMD.i, !dbg !143
  %4566 = fmul <8 x float> %4363, %4363, !dbg !143
  %4567 = fmul <8 x float> %4566, %a89_SIMD.i, !dbg !143
  %4568 = fadd <8 x float> %4551, %4567, !dbg !143
  %4569 = fmul <8 x float> %4568, %y92_SIMD.i, !dbg !143
  %4570 = fadd <8 x float> %4565, %4569, !dbg !143
  %4571 = fmul <8 x float> %4363, %.mapped40.i, !dbg !143
  %4572 = fadd <8 x float> %4570, %4571, !dbg !143
  %4573 = fneg <8 x float> %4551, !dbg !143
  %4574 = fmul <8 x float> %4361, %4573, !dbg !143
  %4575 = fmul <8 x float> %4574, %x90_SIMD.i, !dbg !143
  %4576 = fmul <8 x float> %4363, %y92_SIMD.i, !dbg !143
  %4577 = fsub <8 x float> %4575, %4576, !dbg !143
  %4578 = fmul <8 x float> %4365, %.mapped40.i, !dbg !143
  %4579 = fadd <8 x float> %4577, %4578, !dbg !143
  %4580 = and <8 x i32> %4383, %4549, !dbg !143
  %4581 = xor <8 x i32> %4549, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !143
  %4582 = and <8 x i32> %4383, %4581, !dbg !16
  %4583 = fmul <8 x float> %4563, %4339, !dbg !145
  %4584 = fmul <8 x float> %4572, %4341, !dbg !145
  %4585 = fadd <8 x float> %4583, %4584, !dbg !145
  %4586 = fmul <8 x float> %4579, %4343, !dbg !145
  %4587 = fadd <8 x float> %4585, %4586, !dbg !145
  %4588 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> zeroinitializer, <8 x float> %4587, i8 1), !dbg !145
  %4589 = bitcast <8 x float> %4588 to <8 x i32>, !dbg !145
  %4590 = and <8 x i32> %4580, %4589, !dbg !145
  %4591 = xor <8 x i32> %4589, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, !dbg !145
  %4592 = and <8 x i32> %4580, %4591, !dbg !16
  %4593 = or <8 x i32> %4582, %4592, !dbg !146
  %4594 = or <8 x i32> %4593, %4590, !dbg !146
  %4595 = bitcast <8 x i32> %4590 to <8 x float>, !dbg !147
  %4596 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4547, <8 x float> %4595), !dbg !147
  %4597 = bitcast <8 x i32> %4590 to <8 x float>, !dbg !150
  %4598 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> %4597), !dbg !150
  %4599 = fmul <8 x float> %4563, %4425, !dbg !150
  %4600 = fmul <8 x float> %4572, %4427, !dbg !150
  %4601 = fadd <8 x float> %4599, %4600, !dbg !150
  %4602 = fmul <8 x float> %4579, %4423, !dbg !150
  %4603 = fadd <8 x float> %4601, %4602, !dbg !150
  %4604 = fcmp fast oge <8 x float> %4603, zeroinitializer, !dbg !151
  %4605 = select <8 x i1> %4604, <8 x float> %4603, <8 x float> zeroinitializer, !dbg !151
  %4606 = fmul <8 x float> %4596, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !151
  %4607 = bitcast <8 x float> %4605 to <8 x i32>, !dbg !16
  %4608 = uitofp <8 x i32> %4607 to <8 x float>, !dbg !151
  %y93_SIMD.i = fmul <8 x float> %4608, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>, !dbg !151
  %4609 = fadd <8 x float> %y93_SIMD.i, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>, !dbg !151
  %4610 = and <8 x i32> %4607, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>, !dbg !151
  %mx94_SIMD.i = or <8 x i32> %4610, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>, !dbg !151
  %4611 = bitcast <8 x i32> %mx94_SIMD.i to <8 x float>, !dbg !16
  %4612 = fmul <8 x float> %4611, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>, !dbg !151
  %4613 = fsub <8 x float> %4609, %4612, !dbg !151
  %4614 = fadd <8 x float> %4611, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>, !dbg !151
  %4615 = bitcast <8 x i32> %4594 to <8 x float>, !dbg !151
  %4616 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4614, <8 x float> %4615), !dbg !151
  %4617 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %4616, !dbg !151
  %4618 = fsub <8 x float> %4613, %4617, !dbg !151
  %4619 = fmul <8 x float> %4618, <float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01, float 9.600000e+01>, !dbg !151
  %4620 = fcmp fast olt <8 x float> %4619, <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, !dbg !151
  %4621 = select <8 x i1> %4620, <8 x float> <float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02, float -1.260000e+02>, <8 x float> %4619, !dbg !151
  %4622 = fadd <8 x float> %4621, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>, !dbg !151
  %4623 = fptosi <8 x float> %4621 to <8 x i32>, !dbg !151
  %4624 = sitofp <8 x i32> %4623 to <8 x float>, !dbg !151
  %4625 = fsub <8 x float> %4621, %4624, !dbg !151
  %4626 = call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4619, <8 x float> zeroinitializer, i8 1), !dbg !151
  %4627 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4626), !dbg !151
  %z95_SIMD.i = fadd <8 x float> %4625, %4627, !dbg !151
  %4628 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %z95_SIMD.i, !dbg !151
  %4629 = bitcast <8 x i32> %4594 to <8 x float>, !dbg !151
  %4630 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4628, <8 x float> %4629), !dbg !151
  %4631 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %4630, !dbg !151
  %4632 = fadd <8 x float> %4622, %4631, !dbg !151
  %4633 = fmul <8 x float> %z95_SIMD.i, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>, !dbg !151
  %4634 = fsub <8 x float> %4632, %4633, !dbg !151
  %4635 = fmul <8 x float> %4634, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, !dbg !151
  %4636 = fptosi <8 x float> %4635 to <8 x i32>, !dbg !151
  %4637 = bitcast <8 x i32> %4636 to <8 x float>, !dbg !16
  %4638 = fmul <8 x float> %4637, <float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01, float 9.700000e+01>, !dbg !151
  %4639 = fmul <8 x float> %4638, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !151
  %4640 = fmul <8 x float> %4639, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !151
  %4641 = fadd <8 x float> %4606, %4640, !dbg !151
  %4642 = fmul <8 x float> %4637, <float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01, float 9.800000e+01>, !dbg !151
  %4643 = fmul <8 x float> %4642, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>, !dbg !151
  %4644 = fmul <8 x float> %4643, zeroinitializer, !dbg !151
  %4645 = fmul <8 x float> %4644, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !151
  %4646 = fadd <8 x float> %4645, zeroinitializer, !dbg !151
  %4647 = fmul <8 x float> %4598, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !151
  %4648 = fmul <8 x float> %4643, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, !dbg !151
  %4649 = fadd <8 x float> %4647, %4648, !dbg !151
  %4650 = fadd <8 x float> %4645, zeroinitializer, !dbg !151
  %4651 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4652 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4563, <8 x float> %4476, <8 x float> %4651), !dbg !16
  %4653 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4654 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4572, <8 x float> %4486, <8 x float> %4653), !dbg !16
  %4655 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4656 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4579, <8 x float> %4495, <8 x float> %4655), !dbg !16
  %4657 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4658 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %.mapped40.i, <8 x float> %4499, <8 x float> %4657), !dbg !16
  %4659 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4660 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4641, <8 x float> %4539, <8 x float> %4659), !dbg !16
  %4661 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4662 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4646, <8 x float> %4541, <8 x float> %4661), !dbg !16
  %4663 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4664 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4649, <8 x float> %4543, <8 x float> %4663), !dbg !16
  %4665 = bitcast <8 x i32> %4522 to <8 x float>, !dbg !16
  %4666 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4650, <8 x float> %4545, <8 x float> %4665), !dbg !16
  %4667 = or <8 x i32> %4594, %4522, !dbg !152
  %4668 = fmul <8 x float> %cont_load6.i926, %cont_load14.i934, !dbg !135
  %4669 = fadd <8 x float> %cont_load.i920, %4668, !dbg !135
  %4670 = sext i32 %unroll_step3981 to i64, !dbg !135
  %4671 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1099, i64 0, i64 %4670, !dbg !135
  %vec_cast91.i = bitcast float* %4671 to <8 x float>*, !dbg !135
  %4672 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4669, <8 x float>* %vec_cast91.i, i32 4, <8 x i1> %4672), !dbg !135
  %4673 = fmul <8 x float> %cont_load8.i928, %cont_load14.i934, !dbg !135
  %4674 = fadd <8 x float> %cont_load2.i922, %4673, !dbg !135
  %4675 = sext i32 %unroll_step3981 to i64, !dbg !135
  %4676 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1101, i64 0, i64 %4675, !dbg !135
  %vec_cast92.i = bitcast float* %4676 to <8 x float>*, !dbg !135
  %4677 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4674, <8 x float>* %vec_cast92.i, i32 4, <8 x i1> %4677), !dbg !135
  %4678 = fmul <8 x float> %cont_load10.i930, %cont_load14.i934, !dbg !135
  %4679 = fadd <8 x float> %cont_load4.i924, %4678, !dbg !135
  %4680 = sext i32 %unroll_step3981 to i64, !dbg !135
  %4681 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1103, i64 0, i64 %4680, !dbg !135
  %vec_cast93.i = bitcast float* %4681 to <8 x float>*, !dbg !135
  %4682 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4679, <8 x float>* %vec_cast93.i, i32 4, <8 x i1> %4682), !dbg !135
  %4683 = sext i32 %unroll_step3981 to i64, !dbg !135
  %4684 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1105, i64 0, i64 %4683, !dbg !135
  %vec_cast94.i = bitcast float* %4684 to <8 x float>*, !dbg !135
  %4685 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4652, <8 x float>* %vec_cast94.i, i32 4, <8 x i1> %4685), !dbg !135
  %4686 = sext i32 %unroll_step3981 to i64, !dbg !135
  %4687 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1107, i64 0, i64 %4686, !dbg !135
  %vec_cast95.i = bitcast float* %4687 to <8 x float>*, !dbg !135
  %4688 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4654, <8 x float>* %vec_cast95.i, i32 4, <8 x i1> %4688), !dbg !135
  %4689 = sext i32 %unroll_step3981 to i64, !dbg !135
  %4690 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1109, i64 0, i64 %4689, !dbg !135
  %vec_cast96.i = bitcast float* %4690 to <8 x float>*, !dbg !135
  %4691 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4656, <8 x float>* %vec_cast96.i, i32 4, <8 x i1> %4691), !dbg !135
  %4692 = sext i32 %unroll_step3981 to i64, !dbg !135
  %4693 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1111, i64 0, i64 %4692, !dbg !135
  %vec_cast97.i = bitcast float* %4693 to <8 x float>*, !dbg !135
  %4694 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>, <8 x float>* %vec_cast97.i, i32 4, <8 x i1> %4694), !dbg !135
  %4695 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4696 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1113, i64 0, i64 %4695, !dbg !16
  %vec_cast98.i = bitcast float* %4696 to <8 x float>*, !dbg !16
  %4697 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> <float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000>, <8 x float>* %vec_cast98.i, i32 4, <8 x i1> %4697), !dbg !135
  %4698 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4699 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1127, i64 0, i64 %4698, !dbg !16
  %vec_cast99.i = bitcast i32* %4699 to <8 x i32>*, !dbg !16
  %4700 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4407, <8 x i32>* %vec_cast99.i, i32 4, <8 x i1> %4700), !dbg !135
  %4701 = fmul <8 x float> %cont_load22.i942, %4662, !dbg !135
  %4702 = bitcast <8 x i32> %4667 to <8 x float>, !dbg !135
  %4703 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4660, <8 x float> %4702), !dbg !135
  %4704 = fdiv <8 x float> %4658, %4703, !dbg !135
  %4705 = fmul <8 x float> %4701, %4704, !dbg !135
  %4706 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4707 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1131, i64 0, i64 %4706, !dbg !16
  %vec_cast101.i = bitcast float* %4707 to <8 x float>*, !dbg !16
  %4708 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4705, <8 x float>* %vec_cast101.i, i32 4, <8 x i1> %4708), !dbg !135
  %4709 = fmul <8 x float> %cont_load24.i945, %4664, !dbg !135
  %4710 = fmul <8 x float> %4709, %4704, !dbg !135
  %4711 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4712 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1133, i64 0, i64 %4711, !dbg !16
  %vec_cast102.i977 = bitcast float* %4712 to <8 x float>*, !dbg !16
  %4713 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4710, <8 x float>* %vec_cast102.i977, i32 4, <8 x i1> %4713), !dbg !135
  %4714 = fmul <8 x float> %cont_load26.i953, %4666, !dbg !135
  %4715 = fmul <8 x float> %4714, %4704, !dbg !135
  %4716 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4717 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1135, i64 0, i64 %4716, !dbg !16
  %vec_cast103.i978 = bitcast float* %4717 to <8 x float>*, !dbg !16
  %4718 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4715, <8 x float>* %vec_cast103.i978, i32 4, <8 x i1> %4718), !dbg !135
  %4719 = bitcast <8 x i32> %4667 to <8 x float>, !dbg !135
  %4720 = call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4660, <8 x float> %4719), !dbg !135
  %4721 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4720, !dbg !135
  %4722 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4723 = getelementptr inbounds [0 x float], [0 x float]* %.unpack1129, i64 0, i64 %4722, !dbg !16
  %vec_cast105.i979 = bitcast float* %4723 to <8 x float>*, !dbg !16
  %4724 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8f32.p0v8f32(<8 x float> %4721, <8 x float>* %vec_cast105.i979, i32 4, <8 x i1> %4724), !dbg !135
  %4725 = add nsw <8 x i32> %cont_load30.i963, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !135
  %4726 = sext i32 %unroll_step3981 to i64, !dbg !16
  %4727 = getelementptr inbounds [0 x i32], [0 x i32]* %.unpack1137, i64 0, i64 %4726, !dbg !16
  %vec_cast106.i980 = bitcast i32* %4727 to <8 x i32>*, !dbg !16
  %4728 = icmp ne <8 x i32> %4667, zeroinitializer, !dbg !135
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4725, <8 x i32>* %vec_cast106.i980, i32 4, <8 x i1> %4728), !dbg !135
  %4729 = add nsw i32 %unroll_step3981, 8, !dbg !76
  %4730 = icmp slt i32 %4729, %128, !dbg !15
  br i1 %4730, label %expr_true493, label %expr_false4, !dbg !15
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.floor.f32(float) #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.minnum.f32(float, float) #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #0

define void @test_sample_brdf(%6* %sampler_2182957, %3* %u_2182958, %2* %incoming_2182959, %9* %result_2182960) local_unnamed_addr !dbg !153 {
test_sample_brdf:
  %dim_param_2183088 = alloca float, align 4
  %dim_param_2184310 = alloca float, align 4
  %dim_param_2185253 = alloca float, align 4
  %dim_param_2185460 = alloca float, align 4
  %dim_param_2186395 = alloca float, align 4
  %dim_2186355 = alloca i32, align 4
  %slice_offset_2186485 = alloca i32, align 4
  %param_weight_2186377 = alloca [6 x float], align 4
  %dim_2185420 = alloca i32, align 4
  %slice_offset_2185550 = alloca i32, align 4
  %param_weight_2185442 = alloca [6 x float], align 4
  %dim_2185211 = alloca i32, align 4
  %slice_offset_2185346 = alloca i32, align 4
  %param_weight_2185235 = alloca [6 x float], align 4
  %fr_2185388 = alloca %2, align 8
  %phi_m_2185143 = alloca float, align 4
  %first_2184704 = alloca i32, align 4
  %size_2184696 = alloca i32, align 4
  %first_2184436 = alloca i32, align 4
  %size_2184428 = alloca i32, align 4
  %offset_2184456 = alloca i32, align 4
  %dim_2184268 = alloca i32, align 4
  %slice_offset_2184403 = alloca i32, align 4
  %param_weight_2184292 = alloca [4 x float], align 4
  %n_sample_2184458 = alloca %3, align 8
  %first_2183842 = alloca i32, align 4
  %size_2183654 = alloca i32, align 4
  %first_2183392 = alloca i32, align 4
  %size_2183287 = alloca i32, align 4
  %offset_2183412 = alloca i32, align 4
  %dim_2183042 = alloca i32, align 4
  %slice_offset_2183262 = alloca i32, align 4
  %param_weight_2183069 = alloca [4 x float], align 4
  %n_sample_2183414 = alloca %3, align 8
  %sample_2185390 = alloca %3, align 8
  %.elt = getelementptr inbounds %3, %3* %u_2182958, i64 0, i32 0, !dbg !155
  %.unpack = load float, float* %.elt, align 4, !dbg !155
  %.elt370 = getelementptr inbounds %3, %3* %u_2182958, i64 0, i32 1, !dbg !155
  %.unpack371 = load float, float* %.elt370, align 4, !dbg !155
  %.elt372 = getelementptr inbounds %2, %2* %incoming_2182959, i64 0, i32 0, !dbg !155
  %.unpack373 = load float, float* %.elt372, align 4, !dbg !155
  %.elt376 = getelementptr inbounds %2, %2* %incoming_2182959, i64 0, i32 2, !dbg !155
  %.unpack377 = load float, float* %.elt376, align 4, !dbg !155
  %0 = fcmp ugt float %.unpack377, 0.000000e+00, !dbg !155
  br i1 %0, label %expr_false, label %sample_brdf_cont, !dbg !155

expr_false:                                       ; preds = %test_sample_brdf
  %.elt374 = getelementptr inbounds %2, %2* %incoming_2182959, i64 0, i32 1, !dbg !155
  %.unpack375 = load float, float* %.elt374, align 4, !dbg !155
  %1 = fadd float %.unpack377, -1.000000e+00, !dbg !156
  %2 = fmul float %.unpack373, %.unpack373, !dbg !156
  %3 = fmul float %.unpack375, %.unpack375, !dbg !156
  %4 = fadd float %2, %3, !dbg !156
  %5 = fmul float %1, %1, !dbg !156
  %6 = fadd float %4, %5, !dbg !156
  %7 = call float @llvm.sqrt.f32(float %6), !dbg !156
  %8 = fmul float %7, 5.000000e-01, !dbg !157
  %9 = call float @asinf(float %8), !dbg !157
  %10 = call float @atan2f(float %.unpack375, float %.unpack373), !dbg !158
  %11 = fmul float %9, 2.000000e+00, !dbg !159
  %12 = fmul float %11, 0x3FE45F3060000000, !dbg !159
  %13 = call float @llvm.sqrt.f32(float %12), !dbg !159
  %sample_2185390.repack = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 0, !dbg !160
  store float %.unpack371, float* %sample_2185390.repack, align 8, !dbg !160
  %sample_2185390.repack379 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 1, !dbg !160
  store float %.unpack, float* %sample_2185390.repack379, align 4, !dbg !160
  %n_sample_2183414.repack = getelementptr inbounds %3, %3* %n_sample_2183414, i64 0, i32 0, !dbg !160
  store float %.unpack371, float* %n_sample_2183414.repack, align 8, !dbg !160
  %n_sample_2183414.repack382 = getelementptr inbounds %3, %3* %n_sample_2183414, i64 0, i32 1, !dbg !160
  store float %.unpack, float* %n_sample_2183414.repack382, align 4, !dbg !160
  %param_weight_2183069.repack = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 0, !dbg !160
  store float 0.000000e+00, float* %param_weight_2183069.repack, align 4, !dbg !160
  %param_weight_2183069.repack384 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 1, !dbg !160
  store float 0.000000e+00, float* %param_weight_2183069.repack384, align 4, !dbg !160
  %param_weight_2183069.repack385 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 2, !dbg !160
  store float 0.000000e+00, float* %param_weight_2183069.repack385, align 4, !dbg !160
  %param_weight_2183069.repack386 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 3, !dbg !160
  store float 0.000000e+00, float* %param_weight_2183069.repack386, align 4, !dbg !160
  store i32 0, i32* %slice_offset_2183262, align 4, !dbg !160
  store i32 0, i32* %dim_2183042, align 4, !dbg !160
  %14 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, !dbg !160
  %15 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 4, !dbg !160
  %16 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 3, !dbg !160
  %17 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 5, !dbg !160
  %18 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 6, !dbg !160
  br label %expr_true212, !dbg !161

expr_false7:                                      ; preds = %continue226
  %19 = load i32, i32* %slice_offset_2183262, align 4, !dbg !162
  %20 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 0, i32 1, !dbg !162
  %21 = load i32, i32* %20, align 4, !dbg !162
  %offset = mul nsw i32 %19, %21, !dbg !162
  store i32 %offset, i32* %offset_2183412, align 4, !dbg !162
  %22 = getelementptr inbounds %3, %3* %n_sample_2183414, i64 0, i32 1, !dbg !162
  %23 = load float, float* %22, align 4, !dbg !162
  %24 = load i32, i32* %20, align 4, !dbg !162
  %size = add nsw i32 %24, -2, !dbg !162
  store i32 %size, i32* %size_2183287, align 4, !dbg !162
  store i32 1, i32* %first_2183392, align 4, !dbg !162
  %25 = bitcast [4 x float]* %param_weight_2183069 to [0 x float]*, !dbg !162
  %26 = icmp sgt i32 %24, 2, !dbg !163
  br i1 %26, label %expr_true206, label %expr_false9, !dbg !163

expr_false9:                                      ; preds = %if_join211, %expr_false7
  %27 = load i32, i32* %first_2183392, align 4, !dbg !164
  %28 = add nsw i32 %27, -1, !dbg !164
  %29 = icmp slt i32 %size, %28, !dbg !164
  %size. = select i1 %29, i32 %size, i32 %28, !dbg !164
  %.inv = icmp sgt i32 %27, 0, !dbg !164
  %clamp_cont13 = select i1 %.inv, i32 %size., i32 0, !dbg !164
  %30 = load i32, i32* %offset_2183412, align 4, !dbg !165
  %31 = call fastcc float @fetch_marginal_warp2D2_2183292(%7* nonnull %14, i32 %30, i32 %clamp_cont13, [0 x float]* nonnull %25), !dbg !165
  %32 = load float, float* %22, align 4, !dbg !166
  %33 = fsub float %32, %31, !dbg !166
  store float %33, float* %22, align 4, !dbg !166
  %34 = getelementptr inbounds %7, %7* %14, i64 0, i32 0, i32 0, !dbg !166
  %35 = load i32, i32* %34, align 4, !dbg !166
  %36 = load i32, i32* %20, align 4, !dbg !166
  %37 = mul nsw i32 %clamp_cont13, %35, !dbg !166
  store i32 %37, i32* %offset_2183412, align 4, !dbg !166
  %38 = load i32, i32* %slice_offset_2183262, align 4, !dbg !166
  %slice_size = mul nsw i32 %35, %36, !dbg !166
  %39 = mul nsw i32 %38, %slice_size, !dbg !166
  %40 = add nsw i32 %37, %39, !dbg !166
  store i32 %40, i32* %offset_2183412, align 4, !dbg !166
  %41 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 9, !dbg !166
  %42 = load [0 x float]*, [0 x float]** %41, align 8, !dbg !166
  %43 = load i32, i32* %34, align 4, !dbg !166
  %44 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !166
  %45 = getelementptr inbounds [0 x i32], [0 x i32]* %44, i64 0, i64 1, !dbg !166
  %46 = load i32, i32* %45, align 4, !dbg !166
  %47 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 2, !dbg !166
  %48 = load float, float* %47, align 4, !dbg !166
  %49 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 3, !dbg !166
  %50 = load float, float* %49, align 4, !dbg !166
  %51 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !166
  %52 = getelementptr inbounds [0 x i32], [0 x i32]* %51, i64 0, i64 0, !dbg !166
  %53 = load i32, i32* %52, align 4, !dbg !166
  %54 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 0, !dbg !166
  %55 = load float, float* %54, align 4, !dbg !166
  %56 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 1, !dbg !166
  %57 = load float, float* %56, align 4, !dbg !166
  %58 = add nsw i32 %40, %43, !dbg !166
  %59 = add nsw i32 %58, -1, !dbg !166
  %60 = sext i32 %59 to i64, !dbg !166
  %61 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %60, !dbg !166
  %62 = load float, float* %61, align 4, !dbg !166
  %63 = fmul float %62, %55, !dbg !166
  %64 = mul nsw i32 %53, %slice_size, !dbg !166
  %i1 = add nsw i32 %59, %64, !dbg !166
  %65 = sext i32 %i1 to i64, !dbg !166
  %66 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %65, !dbg !166
  %67 = load float, float* %66, align 4, !dbg !166
  %68 = fmul float %67, %57, !dbg !166
  %69 = fadd float %63, %68, !dbg !166
  %70 = fmul float %69, %48, !dbg !166
  %71 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !166
  %72 = getelementptr inbounds [0 x i32], [0 x i32]* %71, i64 0, i64 0, !dbg !166
  %73 = load i32, i32* %72, align 4, !dbg !166
  %74 = load float, float* %54, align 4, !dbg !166
  %75 = load float, float* %56, align 4, !dbg !166
  %76 = mul nsw i32 %46, %slice_size, !dbg !166
  %i1228 = add nsw i32 %59, %76, !dbg !166
  %77 = sext i32 %i1228 to i64, !dbg !166
  %78 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %77, !dbg !166
  %79 = load float, float* %78, align 4, !dbg !166
  %80 = fmul float %79, %74, !dbg !166
  %81 = mul nsw i32 %73, %slice_size, !dbg !166
  %i1229 = add nsw i32 %i1228, %81, !dbg !166
  %82 = sext i32 %i1229 to i64, !dbg !166
  %83 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %82, !dbg !166
  %84 = load float, float* %83, align 4, !dbg !166
  %85 = fmul float %84, %75, !dbg !166
  %86 = fadd float %80, %85, !dbg !166
  %87 = fmul float %86, %50, !dbg !166
  %88 = fadd float %70, %87, !dbg !166
  %89 = load [0 x float]*, [0 x float]** %41, align 8, !dbg !166
  %90 = load i32, i32* %34, align 4, !dbg !166
  %91 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !166
  %92 = getelementptr inbounds [0 x i32], [0 x i32]* %91, i64 0, i64 1, !dbg !166
  %93 = load i32, i32* %92, align 4, !dbg !166
  %94 = load float, float* %47, align 4, !dbg !166
  %95 = load float, float* %49, align 4, !dbg !166
  %96 = getelementptr inbounds [0 x i32], [0 x i32]* %91, i64 0, i64 0, !dbg !166
  %97 = load i32, i32* %96, align 4, !dbg !166
  %98 = load float, float* %54, align 4, !dbg !166
  %99 = load float, float* %56, align 4, !dbg !166
  %100 = shl nsw i32 %90, 1, !dbg !166
  %101 = add nsw i32 %100, -1, !dbg !166
  %102 = add nsw i32 %40, %101, !dbg !166
  %103 = sext i32 %102 to i64, !dbg !166
  %104 = getelementptr inbounds [0 x float], [0 x float]* %89, i64 0, i64 %103, !dbg !166
  %105 = load float, float* %104, align 4, !dbg !166
  %106 = fmul float %105, %98, !dbg !166
  %107 = mul nsw i32 %97, %slice_size, !dbg !166
  %i1230 = add nsw i32 %102, %107, !dbg !166
  %108 = sext i32 %i1230 to i64, !dbg !166
  %109 = getelementptr inbounds [0 x float], [0 x float]* %89, i64 0, i64 %108, !dbg !166
  %110 = load float, float* %109, align 4, !dbg !166
  %111 = fmul float %110, %99, !dbg !166
  %112 = fadd float %106, %111, !dbg !166
  %113 = fmul float %112, %94, !dbg !166
  %114 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !166
  %115 = getelementptr inbounds [0 x i32], [0 x i32]* %114, i64 0, i64 0, !dbg !166
  %116 = load i32, i32* %115, align 4, !dbg !166
  %117 = load float, float* %54, align 4, !dbg !166
  %118 = load float, float* %56, align 4, !dbg !166
  %119 = mul nsw i32 %93, %slice_size, !dbg !166
  %i1231 = add nsw i32 %102, %119, !dbg !166
  %120 = sext i32 %i1231 to i64, !dbg !166
  %121 = getelementptr inbounds [0 x float], [0 x float]* %89, i64 0, i64 %120, !dbg !166
  %122 = load float, float* %121, align 4, !dbg !166
  %123 = fmul float %122, %117, !dbg !166
  %124 = mul nsw i32 %116, %slice_size, !dbg !166
  %i1232 = add nsw i32 %i1231, %124, !dbg !166
  %125 = sext i32 %i1232 to i64, !dbg !166
  %126 = getelementptr inbounds [0 x float], [0 x float]* %89, i64 0, i64 %125, !dbg !166
  %127 = load float, float* %126, align 4, !dbg !166
  %128 = fmul float %127, %118, !dbg !166
  %129 = fadd float %123, %128, !dbg !166
  %130 = fmul float %129, %95, !dbg !166
  %131 = fadd float %113, %130, !dbg !166
  %132 = fsub float %88, %131, !dbg !166
  %133 = fcmp olt float %132, 0.000000e+00, !dbg !166
  %134 = fneg float %132, !dbg !166
  %absf_cont17 = select i1 %133, float %134, float %132, !dbg !166
  %135 = fadd float %88, %131, !dbg !167
  %136 = fmul float %135, 0x3F1A36E2E0000000, !dbg !167
  %is_const = fcmp olt float %absf_cont17, %136, !dbg !167
  br i1 %is_const, label %expr_true21, label %_cont19, !dbg !167

_cont19:                                          ; preds = %expr_false9
  %137 = fmul float %88, %88, !dbg !168
  %138 = load float, float* %22, align 4, !dbg !168
  %139 = fmul float %138, 2.000000e+00, !dbg !168
  %140 = fmul float %139, %132, !dbg !168
  %141 = fsub float %137, %140, !dbg !168
  %142 = call float @llvm.sqrt.f32(float %141), !dbg !168
  %143 = fsub float %88, %142, !dbg !169
  %144 = fdiv float %143, %132, !dbg !169
  br label %if_join, !dbg !169

expr_true21:                                      ; preds = %expr_false9
  %145 = load float, float* %22, align 4, !dbg !168
  %146 = fmul float %145, 2.000000e+00, !dbg !168
  store float %146, float* %22, align 4, !dbg !168
  %147 = fdiv float %146, %135, !dbg !168
  br label %if_join, !dbg !168

if_join:                                          ; preds = %expr_true21, %_cont19
  %storemerge = phi float [ %144, %_cont19 ], [ %147, %expr_true21 ], !dbg !170
  store float %storemerge, float* %22, align 4, !dbg !170
  %148 = getelementptr inbounds %3, %3* %n_sample_2183414, i64 0, i32 0, !dbg !171
  %149 = load float, float* %148, align 8, !dbg !171
  %150 = fsub float 1.000000e+00, %storemerge, !dbg !171
  %151 = fmul float %150, %88, !dbg !171
  %152 = fmul float %storemerge, %131, !dbg !171
  %153 = fadd float %151, %152, !dbg !171
  %154 = fmul float %149, %153, !dbg !171
  store float %154, float* %148, align 8, !dbg !171
  %155 = load i32, i32* %offset_2183412, align 4, !dbg !171
  %156 = insertvalue %3 undef, float %154, 0, !dbg !171
  %.elt389 = getelementptr inbounds %3, %3* %n_sample_2183414, i64 0, i32 1, !dbg !171
  %.unpack390 = load float, float* %.elt389, align 4, !dbg !171
  %157 = insertvalue %3 %156, float %.unpack390, 1, !dbg !171
  %158 = load i32, i32* %34, align 4, !dbg !171
  %size233 = add nsw i32 %158, -2, !dbg !171
  store i32 %size233, i32* %size_2183654, align 4, !dbg !171
  store i32 1, i32* %first_2183842, align 4, !dbg !171
  %159 = icmp sgt i32 %158, 2, !dbg !172
  br i1 %159, label %expr_true200, label %expr_false23, !dbg !172

expr_false23:                                     ; preds = %if_join205, %if_join
  %160 = load i32, i32* %first_2183842, align 4, !dbg !173
  %161 = add nsw i32 %160, -1, !dbg !173
  %162 = icmp slt i32 %size233, %161, !dbg !173
  %size233. = select i1 %162, i32 %size233, i32 %161, !dbg !173
  %.inv547 = icmp sgt i32 %160, 0, !dbg !173
  %clamp_cont29 = select i1 %.inv547, i32 %size233., i32 0, !dbg !173
  %163 = load float, float* %148, align 8, !dbg !174
  %164 = load i32, i32* %offset_2183412, align 4, !dbg !174
  %165 = insertvalue %3 undef, float %163, 0, !dbg !174
  %.elt393 = getelementptr inbounds %3, %3* %n_sample_2183414, i64 0, i32 1, !dbg !174
  %.unpack394 = load float, float* %.elt393, align 4, !dbg !174
  %166 = insertvalue %3 %165, float %.unpack394, 1, !dbg !174
  %167 = call fastcc float @fetch_conditional_warp2D2_2183659(%7* nonnull %14, i32 %164, i32 %clamp_cont29, i32 %slice_size, %3 %166, [0 x float]* nonnull %25), !dbg !174
  %168 = fsub float %163, %167, !dbg !175
  store float %168, float* %148, align 8, !dbg !175
  %169 = load i32, i32* %offset_2183412, align 4, !dbg !175
  %170 = add nsw i32 %169, %clamp_cont29, !dbg !175
  store i32 %170, i32* %offset_2183412, align 4, !dbg !175
  %171 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 7, !dbg !175
  %172 = load [0 x float]*, [0 x float]** %171, align 8, !dbg !175
  %173 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %174 = getelementptr inbounds [0 x i32], [0 x i32]* %173, i64 0, i64 1, !dbg !175
  %175 = load i32, i32* %174, align 4, !dbg !175
  %176 = load float, float* %47, align 4, !dbg !175
  %177 = load float, float* %49, align 4, !dbg !175
  %178 = getelementptr inbounds [0 x i32], [0 x i32]* %173, i64 0, i64 0, !dbg !175
  %179 = load i32, i32* %178, align 4, !dbg !175
  %180 = load float, float* %54, align 4, !dbg !175
  %181 = load float, float* %56, align 4, !dbg !175
  %182 = sext i32 %170 to i64, !dbg !175
  %183 = getelementptr inbounds [0 x float], [0 x float]* %172, i64 0, i64 %182, !dbg !175
  %184 = load float, float* %183, align 4, !dbg !175
  %185 = mul nsw i32 %179, %slice_size, !dbg !175
  %i1234 = add nsw i32 %170, %185, !dbg !175
  %186 = sext i32 %i1234 to i64, !dbg !175
  %187 = getelementptr inbounds [0 x float], [0 x float]* %172, i64 0, i64 %186, !dbg !175
  %188 = load float, float* %187, align 4, !dbg !175
  %189 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %190 = getelementptr inbounds [0 x i32], [0 x i32]* %189, i64 0, i64 0, !dbg !175
  %191 = load i32, i32* %190, align 4, !dbg !175
  %192 = load float, float* %54, align 4, !dbg !175
  %193 = load float, float* %56, align 4, !dbg !175
  %194 = mul nsw i32 %175, %slice_size, !dbg !175
  %i1235 = add nsw i32 %170, %194, !dbg !175
  %195 = sext i32 %i1235 to i64, !dbg !175
  %196 = getelementptr inbounds [0 x float], [0 x float]* %172, i64 0, i64 %195, !dbg !175
  %197 = load float, float* %196, align 4, !dbg !175
  %198 = mul nsw i32 %191, %slice_size, !dbg !175
  %i1236 = add nsw i32 %i1235, %198, !dbg !175
  %199 = sext i32 %i1236 to i64, !dbg !175
  %200 = getelementptr inbounds [0 x float], [0 x float]* %172, i64 0, i64 %199, !dbg !175
  %201 = load float, float* %200, align 4, !dbg !175
  %202 = load [0 x float]*, [0 x float]** %171, align 8, !dbg !175
  %203 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %204 = getelementptr inbounds [0 x i32], [0 x i32]* %203, i64 0, i64 1, !dbg !175
  %205 = load i32, i32* %204, align 4, !dbg !175
  %206 = load float, float* %47, align 4, !dbg !175
  %207 = load float, float* %49, align 4, !dbg !175
  %208 = getelementptr inbounds [0 x i32], [0 x i32]* %203, i64 0, i64 0, !dbg !175
  %209 = load i32, i32* %208, align 4, !dbg !175
  %210 = load float, float* %54, align 4, !dbg !175
  %211 = load float, float* %56, align 4, !dbg !175
  %212 = getelementptr inbounds [0 x float], [0 x float]* %202, i64 0, i64 1, !dbg !175
  %213 = sext i32 %170 to i64, !dbg !175
  %214 = getelementptr inbounds float, float* %212, i64 %213, !dbg !175
  %215 = load float, float* %214, align 4, !dbg !175
  %216 = mul nsw i32 %209, %slice_size, !dbg !175
  %i1237 = add nsw i32 %170, %216, !dbg !175
  %217 = sext i32 %i1237 to i64, !dbg !175
  %218 = getelementptr inbounds float, float* %212, i64 %217, !dbg !175
  %219 = load float, float* %218, align 4, !dbg !175
  %220 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %221 = getelementptr inbounds [0 x i32], [0 x i32]* %220, i64 0, i64 0, !dbg !175
  %222 = load i32, i32* %221, align 4, !dbg !175
  %223 = load float, float* %54, align 4, !dbg !175
  %224 = load float, float* %56, align 4, !dbg !175
  %225 = mul nsw i32 %205, %slice_size, !dbg !175
  %i1238 = add nsw i32 %170, %225, !dbg !175
  %226 = sext i32 %i1238 to i64, !dbg !175
  %227 = getelementptr inbounds float, float* %212, i64 %226, !dbg !175
  %228 = load float, float* %227, align 4, !dbg !175
  %229 = mul nsw i32 %222, %slice_size, !dbg !175
  %i1239 = add nsw i32 %i1238, %229, !dbg !175
  %230 = sext i32 %i1239 to i64, !dbg !175
  %231 = getelementptr inbounds float, float* %212, i64 %230, !dbg !175
  %232 = load float, float* %231, align 4, !dbg !175
  %233 = load [0 x float]*, [0 x float]** %171, align 8, !dbg !175
  %234 = load i32, i32* %34, align 4, !dbg !175
  %235 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %236 = getelementptr inbounds [0 x i32], [0 x i32]* %235, i64 0, i64 1, !dbg !175
  %237 = load i32, i32* %236, align 4, !dbg !175
  %238 = load float, float* %47, align 4, !dbg !175
  %239 = load float, float* %49, align 4, !dbg !175
  %240 = getelementptr inbounds [0 x i32], [0 x i32]* %235, i64 0, i64 0, !dbg !175
  %241 = load i32, i32* %240, align 4, !dbg !175
  %242 = load float, float* %54, align 4, !dbg !175
  %243 = load float, float* %56, align 4, !dbg !175
  %244 = sext i32 %234 to i64, !dbg !175
  %245 = getelementptr inbounds [0 x float], [0 x float]* %233, i64 0, i64 %244, !dbg !175
  %246 = sext i32 %170 to i64, !dbg !175
  %247 = getelementptr inbounds float, float* %245, i64 %246, !dbg !175
  %248 = load float, float* %247, align 4, !dbg !175
  %249 = mul nsw i32 %241, %slice_size, !dbg !175
  %i1240 = add nsw i32 %170, %249, !dbg !175
  %250 = sext i32 %i1240 to i64, !dbg !175
  %251 = getelementptr inbounds float, float* %245, i64 %250, !dbg !175
  %252 = load float, float* %251, align 4, !dbg !175
  %253 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %254 = getelementptr inbounds [0 x i32], [0 x i32]* %253, i64 0, i64 0, !dbg !175
  %255 = load i32, i32* %254, align 4, !dbg !175
  %256 = load float, float* %54, align 4, !dbg !175
  %257 = load float, float* %56, align 4, !dbg !175
  %258 = mul nsw i32 %237, %slice_size, !dbg !175
  %i1241 = add nsw i32 %170, %258, !dbg !175
  %259 = sext i32 %i1241 to i64, !dbg !175
  %260 = getelementptr inbounds float, float* %245, i64 %259, !dbg !175
  %261 = load float, float* %260, align 4, !dbg !175
  %262 = mul nsw i32 %255, %slice_size, !dbg !175
  %i1242 = add nsw i32 %i1241, %262, !dbg !175
  %263 = sext i32 %i1242 to i64, !dbg !175
  %264 = getelementptr inbounds float, float* %245, i64 %263, !dbg !175
  %265 = load float, float* %264, align 4, !dbg !175
  %266 = load [0 x float]*, [0 x float]** %171, align 8, !dbg !175
  %267 = load i32, i32* %34, align 4, !dbg !175
  %268 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %269 = getelementptr inbounds [0 x i32], [0 x i32]* %268, i64 0, i64 1, !dbg !175
  %270 = load i32, i32* %269, align 4, !dbg !175
  %271 = load float, float* %47, align 4, !dbg !175
  %272 = load float, float* %49, align 4, !dbg !175
  %273 = getelementptr inbounds [0 x i32], [0 x i32]* %268, i64 0, i64 0, !dbg !175
  %274 = load i32, i32* %273, align 4, !dbg !175
  %275 = load float, float* %54, align 4, !dbg !175
  %276 = load float, float* %56, align 4, !dbg !175
  %277 = add nsw i32 %267, 1, !dbg !175
  %278 = sext i32 %277 to i64, !dbg !175
  %279 = getelementptr inbounds [0 x float], [0 x float]* %266, i64 0, i64 %278, !dbg !175
  %280 = sext i32 %170 to i64, !dbg !175
  %281 = getelementptr inbounds float, float* %279, i64 %280, !dbg !175
  %282 = load float, float* %281, align 4, !dbg !175
  %283 = mul nsw i32 %274, %slice_size, !dbg !175
  %i1243 = add nsw i32 %170, %283, !dbg !175
  %284 = sext i32 %i1243 to i64, !dbg !175
  %285 = getelementptr inbounds float, float* %279, i64 %284, !dbg !175
  %286 = load float, float* %285, align 4, !dbg !175
  %287 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !175
  %288 = getelementptr inbounds [0 x i32], [0 x i32]* %287, i64 0, i64 0, !dbg !175
  %289 = load i32, i32* %288, align 4, !dbg !175
  %290 = load float, float* %54, align 4, !dbg !175
  %291 = load float, float* %56, align 4, !dbg !175
  %292 = mul nsw i32 %270, %slice_size, !dbg !175
  %i1244 = add nsw i32 %170, %292, !dbg !175
  %293 = sext i32 %i1244 to i64, !dbg !175
  %294 = getelementptr inbounds float, float* %279, i64 %293, !dbg !175
  %295 = load float, float* %294, align 4, !dbg !175
  %296 = mul nsw i32 %289, %slice_size, !dbg !175
  %i1245 = add nsw i32 %i1244, %296, !dbg !175
  %297 = sext i32 %i1245 to i64, !dbg !175
  %298 = getelementptr inbounds float, float* %279, i64 %297, !dbg !175
  %299 = load float, float* %298, align 4, !dbg !175
  %300 = load float, float* %22, align 4, !dbg !175
  %301 = fsub float 1.000000e+00, %300, !dbg !175
  %302 = fmul float %184, %180, !dbg !175
  %303 = fmul float %188, %181, !dbg !175
  %304 = fadd float %302, %303, !dbg !175
  %305 = fmul float %304, %176, !dbg !175
  %306 = fmul float %197, %192, !dbg !175
  %307 = fmul float %201, %193, !dbg !175
  %308 = fadd float %306, %307, !dbg !175
  %309 = fmul float %308, %177, !dbg !175
  %310 = fadd float %305, %309, !dbg !175
  %311 = fmul float %301, %310, !dbg !175
  %312 = load float, float* %22, align 4, !dbg !175
  %313 = fmul float %248, %242, !dbg !175
  %314 = fmul float %252, %243, !dbg !175
  %315 = fadd float %313, %314, !dbg !175
  %316 = fmul float %315, %238, !dbg !175
  %317 = fmul float %261, %256, !dbg !175
  %318 = fmul float %265, %257, !dbg !175
  %319 = fadd float %317, %318, !dbg !175
  %320 = fmul float %319, %239, !dbg !175
  %321 = fadd float %316, %320, !dbg !175
  %322 = fmul float %312, %321, !dbg !175
  %323 = fadd float %311, %322, !dbg !175
  %324 = load float, float* %22, align 4, !dbg !175
  %325 = fsub float 1.000000e+00, %324, !dbg !175
  %326 = fmul float %215, %210, !dbg !175
  %327 = fmul float %219, %211, !dbg !175
  %328 = fadd float %326, %327, !dbg !175
  %329 = fmul float %328, %206, !dbg !175
  %330 = fmul float %228, %223, !dbg !175
  %331 = fmul float %232, %224, !dbg !175
  %332 = fadd float %330, %331, !dbg !175
  %333 = fmul float %332, %207, !dbg !175
  %334 = fadd float %329, %333, !dbg !175
  %335 = fmul float %325, %334, !dbg !175
  %336 = load float, float* %22, align 4, !dbg !175
  %337 = fmul float %282, %275, !dbg !175
  %338 = fmul float %286, %276, !dbg !175
  %339 = fadd float %337, %338, !dbg !175
  %340 = fmul float %339, %271, !dbg !175
  %341 = fmul float %295, %290, !dbg !175
  %342 = fmul float %299, %291, !dbg !175
  %343 = fadd float %341, %342, !dbg !175
  %344 = fmul float %343, %272, !dbg !175
  %345 = fadd float %340, %344, !dbg !175
  %346 = fmul float %336, %345, !dbg !175
  %347 = fadd float %335, %346, !dbg !175
  %348 = fsub float %323, %347, !dbg !175
  %349 = fcmp olt float %348, 0.000000e+00, !dbg !175
  %350 = fneg float %348, !dbg !175
  %absf_cont34 = select i1 %349, float %350, float %348, !dbg !175
  %351 = fadd float %323, %347, !dbg !176
  %352 = fmul float %351, 0x3F1A36E2E0000000, !dbg !176
  %353 = fcmp olt float %absf_cont34, %352, !dbg !176
  br i1 %353, label %expr_true38, label %_cont36, !dbg !176

_cont36:                                          ; preds = %expr_false23
  %354 = fmul float %323, %323, !dbg !177
  %355 = load float, float* %148, align 8, !dbg !177
  %356 = fmul float %355, 2.000000e+00, !dbg !177
  %357 = fmul float %356, %348, !dbg !177
  %358 = fsub float %354, %357, !dbg !177
  %359 = call float @llvm.sqrt.f32(float %358), !dbg !177
  %360 = fsub float %323, %359, !dbg !178
  %361 = fdiv float %360, %348, !dbg !178
  br label %if_join39, !dbg !178

expr_true38:                                      ; preds = %expr_false23
  %362 = load float, float* %148, align 8, !dbg !177
  %363 = fmul float %362, 2.000000e+00, !dbg !177
  %364 = fdiv float %363, %351, !dbg !177
  br label %if_join39, !dbg !177

if_join39:                                        ; preds = %expr_true38, %_cont36
  %storemerge536 = phi float [ %364, %expr_true38 ], [ %361, %_cont36 ], !dbg !170
  store float %storemerge536, float* %148, align 8, !dbg !170
  %.elt397 = getelementptr inbounds %3, %3* %n_sample_2183414, i64 0, i32 1, !dbg !179
  %.unpack398 = load float, float* %.elt397, align 4, !dbg !179
  %.elt399 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 1, i32 0, !dbg !179
  %.unpack400 = load float, float* %.elt399, align 4, !dbg !179
  %.elt401 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 1, i32 1, !dbg !179
  %.unpack402 = load float, float* %.elt401, align 4, !dbg !179
  %365 = load float, float* %148, align 8, !dbg !179
  %366 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 2, i32 0, !dbg !179
  %367 = load float, float* %366, align 4, !dbg !179
  %368 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 3, i32 2, i32 1, !dbg !179
  %369 = load float, float* %368, align 4, !dbg !179
  %370 = sitofp i32 %clamp_cont29 to float, !dbg !179
  %371 = fadd float %storemerge536, %370, !dbg !179
  %372 = fmul float %371, %.unpack400, !dbg !179
  %373 = sitofp i32 %clamp_cont13 to float, !dbg !179
  %374 = fadd float %.unpack398, %373, !dbg !179
  %375 = fmul float %374, %.unpack402, !dbg !179
  %sample_2185390.repack403 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 0, !dbg !179
  store float %372, float* %sample_2185390.repack403, align 8, !dbg !179
  %sample_2185390.repack405 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 1, !dbg !179
  store float %375, float* %sample_2185390.repack405, align 4, !dbg !179
  %n_sample_2184458.repack = getelementptr inbounds %3, %3* %n_sample_2184458, i64 0, i32 0, !dbg !179
  store float %372, float* %n_sample_2184458.repack, align 8, !dbg !179
  %n_sample_2184458.repack408 = getelementptr inbounds %3, %3* %n_sample_2184458, i64 0, i32 1, !dbg !179
  store float %375, float* %n_sample_2184458.repack408, align 4, !dbg !179
  %param_weight_2184292.repack = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 0, !dbg !179
  store float 0.000000e+00, float* %param_weight_2184292.repack, align 4, !dbg !179
  %param_weight_2184292.repack410 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 1, !dbg !179
  store float 0.000000e+00, float* %param_weight_2184292.repack410, align 4, !dbg !179
  %param_weight_2184292.repack411 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 2, !dbg !179
  store float 0.000000e+00, float* %param_weight_2184292.repack411, align 4, !dbg !179
  %param_weight_2184292.repack412 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 3, !dbg !179
  store float 0.000000e+00, float* %param_weight_2184292.repack412, align 4, !dbg !179
  store i32 0, i32* %slice_offset_2184403, align 4, !dbg !179
  store i32 0, i32* %dim_2184268, align 4, !dbg !179
  %376 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, !dbg !179
  %377 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 4, !dbg !179
  %378 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 3, !dbg !179
  %379 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 5, !dbg !179
  %380 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 6, !dbg !179
  br label %expr_true185, !dbg !161

expr_false41:                                     ; preds = %continue199
  %381 = load i32, i32* %slice_offset_2184403, align 4, !dbg !162
  %382 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 0, i32 1, !dbg !162
  %383 = load i32, i32* %382, align 4, !dbg !162
  %offset246 = mul nsw i32 %381, %383, !dbg !162
  store i32 %offset246, i32* %offset_2184456, align 4, !dbg !162
  %384 = getelementptr inbounds %3, %3* %n_sample_2184458, i64 0, i32 1, !dbg !162
  %385 = load float, float* %384, align 4, !dbg !162
  %386 = load i32, i32* %382, align 4, !dbg !162
  %size247 = add nsw i32 %386, -2, !dbg !162
  store i32 %size247, i32* %size_2184428, align 4, !dbg !162
  store i32 1, i32* %first_2184436, align 4, !dbg !162
  %387 = bitcast [4 x float]* %param_weight_2184292 to [0 x float]*, !dbg !162
  %388 = icmp sgt i32 %386, 2, !dbg !163
  br i1 %388, label %expr_true179, label %expr_false43, !dbg !163

expr_false43:                                     ; preds = %if_join184, %expr_false41
  %389 = load i32, i32* %first_2184436, align 4, !dbg !164
  %390 = add nsw i32 %389, -1, !dbg !164
  %391 = icmp slt i32 %size247, %390, !dbg !164
  %size247. = select i1 %391, i32 %size247, i32 %390, !dbg !164
  %.inv548 = icmp sgt i32 %389, 0, !dbg !164
  %clamp_cont49 = select i1 %.inv548, i32 %size247., i32 0, !dbg !164
  %392 = load i32, i32* %offset_2184456, align 4, !dbg !165
  %393 = call fastcc float @fetch_marginal_warp2D2_2183292(%7* nonnull %376, i32 %392, i32 %clamp_cont49, [0 x float]* nonnull %387), !dbg !165
  %394 = load float, float* %384, align 4, !dbg !166
  %395 = fsub float %394, %393, !dbg !166
  store float %395, float* %384, align 4, !dbg !166
  %396 = getelementptr inbounds %7, %7* %376, i64 0, i32 0, i32 0, !dbg !166
  %397 = load i32, i32* %396, align 4, !dbg !166
  %398 = load i32, i32* %382, align 4, !dbg !166
  %399 = mul nsw i32 %clamp_cont49, %397, !dbg !166
  store i32 %399, i32* %offset_2184456, align 4, !dbg !166
  %400 = load i32, i32* %slice_offset_2184403, align 4, !dbg !166
  %slice_size248 = mul nsw i32 %397, %398, !dbg !166
  %401 = mul nsw i32 %400, %slice_size248, !dbg !166
  %402 = add nsw i32 %399, %401, !dbg !166
  store i32 %402, i32* %offset_2184456, align 4, !dbg !166
  %403 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 9, !dbg !166
  %404 = load [0 x float]*, [0 x float]** %403, align 8, !dbg !166
  %405 = load i32, i32* %396, align 4, !dbg !166
  %406 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !166
  %407 = getelementptr inbounds [0 x i32], [0 x i32]* %406, i64 0, i64 1, !dbg !166
  %408 = load i32, i32* %407, align 4, !dbg !166
  %409 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 2, !dbg !166
  %410 = load float, float* %409, align 4, !dbg !166
  %411 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 3, !dbg !166
  %412 = load float, float* %411, align 4, !dbg !166
  %413 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !166
  %414 = getelementptr inbounds [0 x i32], [0 x i32]* %413, i64 0, i64 0, !dbg !166
  %415 = load i32, i32* %414, align 4, !dbg !166
  %416 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 0, !dbg !166
  %417 = load float, float* %416, align 4, !dbg !166
  %418 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 1, !dbg !166
  %419 = load float, float* %418, align 4, !dbg !166
  %420 = add nsw i32 %402, %405, !dbg !166
  %421 = add nsw i32 %420, -1, !dbg !166
  %422 = sext i32 %421 to i64, !dbg !166
  %423 = getelementptr inbounds [0 x float], [0 x float]* %404, i64 0, i64 %422, !dbg !166
  %424 = load float, float* %423, align 4, !dbg !166
  %425 = fmul float %424, %417, !dbg !166
  %426 = mul nsw i32 %415, %slice_size248, !dbg !166
  %i1249 = add nsw i32 %421, %426, !dbg !166
  %427 = sext i32 %i1249 to i64, !dbg !166
  %428 = getelementptr inbounds [0 x float], [0 x float]* %404, i64 0, i64 %427, !dbg !166
  %429 = load float, float* %428, align 4, !dbg !166
  %430 = fmul float %429, %419, !dbg !166
  %431 = fadd float %425, %430, !dbg !166
  %432 = fmul float %431, %410, !dbg !166
  %433 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !166
  %434 = getelementptr inbounds [0 x i32], [0 x i32]* %433, i64 0, i64 0, !dbg !166
  %435 = load i32, i32* %434, align 4, !dbg !166
  %436 = load float, float* %416, align 4, !dbg !166
  %437 = load float, float* %418, align 4, !dbg !166
  %438 = mul nsw i32 %408, %slice_size248, !dbg !166
  %i1250 = add nsw i32 %421, %438, !dbg !166
  %439 = sext i32 %i1250 to i64, !dbg !166
  %440 = getelementptr inbounds [0 x float], [0 x float]* %404, i64 0, i64 %439, !dbg !166
  %441 = load float, float* %440, align 4, !dbg !166
  %442 = fmul float %441, %436, !dbg !166
  %443 = mul nsw i32 %435, %slice_size248, !dbg !166
  %i1251 = add nsw i32 %i1250, %443, !dbg !166
  %444 = sext i32 %i1251 to i64, !dbg !166
  %445 = getelementptr inbounds [0 x float], [0 x float]* %404, i64 0, i64 %444, !dbg !166
  %446 = load float, float* %445, align 4, !dbg !166
  %447 = fmul float %446, %437, !dbg !166
  %448 = fadd float %442, %447, !dbg !166
  %449 = fmul float %448, %412, !dbg !166
  %450 = fadd float %432, %449, !dbg !166
  %451 = load [0 x float]*, [0 x float]** %403, align 8, !dbg !166
  %452 = load i32, i32* %396, align 4, !dbg !166
  %453 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !166
  %454 = getelementptr inbounds [0 x i32], [0 x i32]* %453, i64 0, i64 1, !dbg !166
  %455 = load i32, i32* %454, align 4, !dbg !166
  %456 = load float, float* %409, align 4, !dbg !166
  %457 = load float, float* %411, align 4, !dbg !166
  %458 = getelementptr inbounds [0 x i32], [0 x i32]* %453, i64 0, i64 0, !dbg !166
  %459 = load i32, i32* %458, align 4, !dbg !166
  %460 = load float, float* %416, align 4, !dbg !166
  %461 = load float, float* %418, align 4, !dbg !166
  %462 = shl nsw i32 %452, 1, !dbg !166
  %463 = add nsw i32 %462, -1, !dbg !166
  %464 = add nsw i32 %402, %463, !dbg !166
  %465 = sext i32 %464 to i64, !dbg !166
  %466 = getelementptr inbounds [0 x float], [0 x float]* %451, i64 0, i64 %465, !dbg !166
  %467 = load float, float* %466, align 4, !dbg !166
  %468 = fmul float %467, %460, !dbg !166
  %469 = mul nsw i32 %459, %slice_size248, !dbg !166
  %i1252 = add nsw i32 %464, %469, !dbg !166
  %470 = sext i32 %i1252 to i64, !dbg !166
  %471 = getelementptr inbounds [0 x float], [0 x float]* %451, i64 0, i64 %470, !dbg !166
  %472 = load float, float* %471, align 4, !dbg !166
  %473 = fmul float %472, %461, !dbg !166
  %474 = fadd float %468, %473, !dbg !166
  %475 = fmul float %474, %456, !dbg !166
  %476 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !166
  %477 = getelementptr inbounds [0 x i32], [0 x i32]* %476, i64 0, i64 0, !dbg !166
  %478 = load i32, i32* %477, align 4, !dbg !166
  %479 = load float, float* %416, align 4, !dbg !166
  %480 = load float, float* %418, align 4, !dbg !166
  %481 = mul nsw i32 %455, %slice_size248, !dbg !166
  %i1253 = add nsw i32 %464, %481, !dbg !166
  %482 = sext i32 %i1253 to i64, !dbg !166
  %483 = getelementptr inbounds [0 x float], [0 x float]* %451, i64 0, i64 %482, !dbg !166
  %484 = load float, float* %483, align 4, !dbg !166
  %485 = fmul float %484, %479, !dbg !166
  %486 = mul nsw i32 %478, %slice_size248, !dbg !166
  %i1254 = add nsw i32 %i1253, %486, !dbg !166
  %487 = sext i32 %i1254 to i64, !dbg !166
  %488 = getelementptr inbounds [0 x float], [0 x float]* %451, i64 0, i64 %487, !dbg !166
  %489 = load float, float* %488, align 4, !dbg !166
  %490 = fmul float %489, %480, !dbg !166
  %491 = fadd float %485, %490, !dbg !166
  %492 = fmul float %491, %457, !dbg !166
  %493 = fadd float %475, %492, !dbg !166
  %494 = fsub float %450, %493, !dbg !166
  %495 = fcmp olt float %494, 0.000000e+00, !dbg !166
  %496 = fneg float %494, !dbg !166
  %absf_cont55 = select i1 %495, float %496, float %494, !dbg !166
  %497 = fadd float %450, %493, !dbg !167
  %498 = fmul float %497, 0x3F1A36E2E0000000, !dbg !167
  %is_const255 = fcmp olt float %absf_cont55, %498, !dbg !167
  br i1 %is_const255, label %expr_true59, label %_cont57, !dbg !167

_cont57:                                          ; preds = %expr_false43
  %499 = fmul float %450, %450, !dbg !168
  %500 = load float, float* %384, align 4, !dbg !168
  %501 = fmul float %500, 2.000000e+00, !dbg !168
  %502 = fmul float %501, %494, !dbg !168
  %503 = fsub float %499, %502, !dbg !168
  %504 = call float @llvm.sqrt.f32(float %503), !dbg !168
  %505 = fsub float %450, %504, !dbg !169
  %506 = fdiv float %505, %494, !dbg !169
  br label %if_join60, !dbg !169

expr_true59:                                      ; preds = %expr_false43
  %507 = load float, float* %384, align 4, !dbg !168
  %508 = fmul float %507, 2.000000e+00, !dbg !168
  store float %508, float* %384, align 4, !dbg !168
  %509 = fdiv float %508, %497, !dbg !168
  br label %if_join60, !dbg !168

if_join60:                                        ; preds = %expr_true59, %_cont57
  %storemerge413 = phi float [ %506, %_cont57 ], [ %509, %expr_true59 ], !dbg !170
  store float %storemerge413, float* %384, align 4, !dbg !170
  %510 = getelementptr inbounds %3, %3* %n_sample_2184458, i64 0, i32 0, !dbg !171
  %511 = load float, float* %510, align 8, !dbg !171
  %512 = fsub float 1.000000e+00, %storemerge413, !dbg !171
  %513 = fmul float %512, %450, !dbg !171
  %514 = fmul float %storemerge413, %493, !dbg !171
  %515 = fadd float %513, %514, !dbg !171
  %516 = fmul float %511, %515, !dbg !171
  store float %516, float* %510, align 8, !dbg !171
  %517 = load i32, i32* %offset_2184456, align 4, !dbg !171
  %518 = insertvalue %3 undef, float %516, 0, !dbg !171
  %.elt416 = getelementptr inbounds %3, %3* %n_sample_2184458, i64 0, i32 1, !dbg !171
  %.unpack417 = load float, float* %.elt416, align 4, !dbg !171
  %519 = insertvalue %3 %518, float %.unpack417, 1, !dbg !171
  %520 = load i32, i32* %396, align 4, !dbg !171
  %size256 = add nsw i32 %520, -2, !dbg !171
  store i32 %size256, i32* %size_2184696, align 4, !dbg !171
  store i32 1, i32* %first_2184704, align 4, !dbg !171
  %521 = icmp sgt i32 %520, 2, !dbg !172
  br i1 %521, label %expr_true173, label %expr_false62, !dbg !172

expr_false62:                                     ; preds = %if_join178, %if_join60
  %522 = load i32, i32* %first_2184704, align 4, !dbg !173
  %523 = add nsw i32 %522, -1, !dbg !173
  %524 = icmp slt i32 %size256, %523, !dbg !173
  %size256. = select i1 %524, i32 %size256, i32 %523, !dbg !173
  %.inv549 = icmp sgt i32 %522, 0, !dbg !173
  %clamp_cont68 = select i1 %.inv549, i32 %size256., i32 0, !dbg !173
  %525 = load float, float* %510, align 8, !dbg !174
  %526 = load i32, i32* %offset_2184456, align 4, !dbg !174
  %527 = insertvalue %3 undef, float %525, 0, !dbg !174
  %.elt420 = getelementptr inbounds %3, %3* %n_sample_2184458, i64 0, i32 1, !dbg !174
  %.unpack421 = load float, float* %.elt420, align 4, !dbg !174
  %528 = insertvalue %3 %527, float %.unpack421, 1, !dbg !174
  %529 = call fastcc float @fetch_conditional_warp2D2_2183659(%7* nonnull %376, i32 %526, i32 %clamp_cont68, i32 %slice_size248, %3 %528, [0 x float]* nonnull %387), !dbg !174
  %530 = fsub float %525, %529, !dbg !175
  store float %530, float* %510, align 8, !dbg !175
  %531 = load i32, i32* %offset_2184456, align 4, !dbg !175
  %532 = add nsw i32 %531, %clamp_cont68, !dbg !175
  store i32 %532, i32* %offset_2184456, align 4, !dbg !175
  %533 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 7, !dbg !175
  %534 = load [0 x float]*, [0 x float]** %533, align 8, !dbg !175
  %535 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %536 = getelementptr inbounds [0 x i32], [0 x i32]* %535, i64 0, i64 1, !dbg !175
  %537 = load i32, i32* %536, align 4, !dbg !175
  %538 = load float, float* %409, align 4, !dbg !175
  %539 = load float, float* %411, align 4, !dbg !175
  %540 = getelementptr inbounds [0 x i32], [0 x i32]* %535, i64 0, i64 0, !dbg !175
  %541 = load i32, i32* %540, align 4, !dbg !175
  %542 = load float, float* %416, align 4, !dbg !175
  %543 = load float, float* %418, align 4, !dbg !175
  %544 = sext i32 %532 to i64, !dbg !175
  %545 = getelementptr inbounds [0 x float], [0 x float]* %534, i64 0, i64 %544, !dbg !175
  %546 = load float, float* %545, align 4, !dbg !175
  %547 = mul nsw i32 %541, %slice_size248, !dbg !175
  %i1257 = add nsw i32 %532, %547, !dbg !175
  %548 = sext i32 %i1257 to i64, !dbg !175
  %549 = getelementptr inbounds [0 x float], [0 x float]* %534, i64 0, i64 %548, !dbg !175
  %550 = load float, float* %549, align 4, !dbg !175
  %551 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %552 = getelementptr inbounds [0 x i32], [0 x i32]* %551, i64 0, i64 0, !dbg !175
  %553 = load i32, i32* %552, align 4, !dbg !175
  %554 = load float, float* %416, align 4, !dbg !175
  %555 = load float, float* %418, align 4, !dbg !175
  %556 = mul nsw i32 %537, %slice_size248, !dbg !175
  %i1258 = add nsw i32 %532, %556, !dbg !175
  %557 = sext i32 %i1258 to i64, !dbg !175
  %558 = getelementptr inbounds [0 x float], [0 x float]* %534, i64 0, i64 %557, !dbg !175
  %559 = load float, float* %558, align 4, !dbg !175
  %560 = mul nsw i32 %553, %slice_size248, !dbg !175
  %i1259 = add nsw i32 %i1258, %560, !dbg !175
  %561 = sext i32 %i1259 to i64, !dbg !175
  %562 = getelementptr inbounds [0 x float], [0 x float]* %534, i64 0, i64 %561, !dbg !175
  %563 = load float, float* %562, align 4, !dbg !175
  %564 = load [0 x float]*, [0 x float]** %533, align 8, !dbg !175
  %565 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %566 = getelementptr inbounds [0 x i32], [0 x i32]* %565, i64 0, i64 1, !dbg !175
  %567 = load i32, i32* %566, align 4, !dbg !175
  %568 = load float, float* %409, align 4, !dbg !175
  %569 = load float, float* %411, align 4, !dbg !175
  %570 = getelementptr inbounds [0 x i32], [0 x i32]* %565, i64 0, i64 0, !dbg !175
  %571 = load i32, i32* %570, align 4, !dbg !175
  %572 = load float, float* %416, align 4, !dbg !175
  %573 = load float, float* %418, align 4, !dbg !175
  %574 = getelementptr inbounds [0 x float], [0 x float]* %564, i64 0, i64 1, !dbg !175
  %575 = sext i32 %532 to i64, !dbg !175
  %576 = getelementptr inbounds float, float* %574, i64 %575, !dbg !175
  %577 = load float, float* %576, align 4, !dbg !175
  %578 = mul nsw i32 %571, %slice_size248, !dbg !175
  %i1260 = add nsw i32 %532, %578, !dbg !175
  %579 = sext i32 %i1260 to i64, !dbg !175
  %580 = getelementptr inbounds float, float* %574, i64 %579, !dbg !175
  %581 = load float, float* %580, align 4, !dbg !175
  %582 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %583 = getelementptr inbounds [0 x i32], [0 x i32]* %582, i64 0, i64 0, !dbg !175
  %584 = load i32, i32* %583, align 4, !dbg !175
  %585 = load float, float* %416, align 4, !dbg !175
  %586 = load float, float* %418, align 4, !dbg !175
  %587 = mul nsw i32 %567, %slice_size248, !dbg !175
  %i1261 = add nsw i32 %532, %587, !dbg !175
  %588 = sext i32 %i1261 to i64, !dbg !175
  %589 = getelementptr inbounds float, float* %574, i64 %588, !dbg !175
  %590 = load float, float* %589, align 4, !dbg !175
  %591 = mul nsw i32 %584, %slice_size248, !dbg !175
  %i1262 = add nsw i32 %i1261, %591, !dbg !175
  %592 = sext i32 %i1262 to i64, !dbg !175
  %593 = getelementptr inbounds float, float* %574, i64 %592, !dbg !175
  %594 = load float, float* %593, align 4, !dbg !175
  %595 = load [0 x float]*, [0 x float]** %533, align 8, !dbg !175
  %596 = load i32, i32* %396, align 4, !dbg !175
  %597 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %598 = getelementptr inbounds [0 x i32], [0 x i32]* %597, i64 0, i64 1, !dbg !175
  %599 = load i32, i32* %598, align 4, !dbg !175
  %600 = load float, float* %409, align 4, !dbg !175
  %601 = load float, float* %411, align 4, !dbg !175
  %602 = getelementptr inbounds [0 x i32], [0 x i32]* %597, i64 0, i64 0, !dbg !175
  %603 = load i32, i32* %602, align 4, !dbg !175
  %604 = load float, float* %416, align 4, !dbg !175
  %605 = load float, float* %418, align 4, !dbg !175
  %606 = sext i32 %596 to i64, !dbg !175
  %607 = getelementptr inbounds [0 x float], [0 x float]* %595, i64 0, i64 %606, !dbg !175
  %608 = sext i32 %532 to i64, !dbg !175
  %609 = getelementptr inbounds float, float* %607, i64 %608, !dbg !175
  %610 = load float, float* %609, align 4, !dbg !175
  %611 = mul nsw i32 %603, %slice_size248, !dbg !175
  %i1263 = add nsw i32 %532, %611, !dbg !175
  %612 = sext i32 %i1263 to i64, !dbg !175
  %613 = getelementptr inbounds float, float* %607, i64 %612, !dbg !175
  %614 = load float, float* %613, align 4, !dbg !175
  %615 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %616 = getelementptr inbounds [0 x i32], [0 x i32]* %615, i64 0, i64 0, !dbg !175
  %617 = load i32, i32* %616, align 4, !dbg !175
  %618 = load float, float* %416, align 4, !dbg !175
  %619 = load float, float* %418, align 4, !dbg !175
  %620 = mul nsw i32 %599, %slice_size248, !dbg !175
  %i1264 = add nsw i32 %532, %620, !dbg !175
  %621 = sext i32 %i1264 to i64, !dbg !175
  %622 = getelementptr inbounds float, float* %607, i64 %621, !dbg !175
  %623 = load float, float* %622, align 4, !dbg !175
  %624 = mul nsw i32 %617, %slice_size248, !dbg !175
  %i1265 = add nsw i32 %i1264, %624, !dbg !175
  %625 = sext i32 %i1265 to i64, !dbg !175
  %626 = getelementptr inbounds float, float* %607, i64 %625, !dbg !175
  %627 = load float, float* %626, align 4, !dbg !175
  %628 = load [0 x float]*, [0 x float]** %533, align 8, !dbg !175
  %629 = load i32, i32* %396, align 4, !dbg !175
  %630 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %631 = getelementptr inbounds [0 x i32], [0 x i32]* %630, i64 0, i64 1, !dbg !175
  %632 = load i32, i32* %631, align 4, !dbg !175
  %633 = load float, float* %409, align 4, !dbg !175
  %634 = load float, float* %411, align 4, !dbg !175
  %635 = getelementptr inbounds [0 x i32], [0 x i32]* %630, i64 0, i64 0, !dbg !175
  %636 = load i32, i32* %635, align 4, !dbg !175
  %637 = load float, float* %416, align 4, !dbg !175
  %638 = load float, float* %418, align 4, !dbg !175
  %639 = add nsw i32 %629, 1, !dbg !175
  %640 = sext i32 %639 to i64, !dbg !175
  %641 = getelementptr inbounds [0 x float], [0 x float]* %628, i64 0, i64 %640, !dbg !175
  %642 = sext i32 %532 to i64, !dbg !175
  %643 = getelementptr inbounds float, float* %641, i64 %642, !dbg !175
  %644 = load float, float* %643, align 4, !dbg !175
  %645 = mul nsw i32 %636, %slice_size248, !dbg !175
  %i1266 = add nsw i32 %532, %645, !dbg !175
  %646 = sext i32 %i1266 to i64, !dbg !175
  %647 = getelementptr inbounds float, float* %641, i64 %646, !dbg !175
  %648 = load float, float* %647, align 4, !dbg !175
  %649 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !175
  %650 = getelementptr inbounds [0 x i32], [0 x i32]* %649, i64 0, i64 0, !dbg !175
  %651 = load i32, i32* %650, align 4, !dbg !175
  %652 = load float, float* %416, align 4, !dbg !175
  %653 = load float, float* %418, align 4, !dbg !175
  %654 = mul nsw i32 %632, %slice_size248, !dbg !175
  %i1267 = add nsw i32 %532, %654, !dbg !175
  %655 = sext i32 %i1267 to i64, !dbg !175
  %656 = getelementptr inbounds float, float* %641, i64 %655, !dbg !175
  %657 = load float, float* %656, align 4, !dbg !175
  %658 = mul nsw i32 %651, %slice_size248, !dbg !175
  %i1268 = add nsw i32 %i1267, %658, !dbg !175
  %659 = sext i32 %i1268 to i64, !dbg !175
  %660 = getelementptr inbounds float, float* %641, i64 %659, !dbg !175
  %661 = load float, float* %660, align 4, !dbg !175
  %662 = load float, float* %384, align 4, !dbg !175
  %663 = fsub float 1.000000e+00, %662, !dbg !175
  %664 = fmul float %546, %542, !dbg !175
  %665 = fmul float %550, %543, !dbg !175
  %666 = fadd float %664, %665, !dbg !175
  %667 = fmul float %666, %538, !dbg !175
  %668 = fmul float %559, %554, !dbg !175
  %669 = fmul float %563, %555, !dbg !175
  %670 = fadd float %668, %669, !dbg !175
  %671 = fmul float %670, %539, !dbg !175
  %672 = fadd float %667, %671, !dbg !175
  %673 = fmul float %663, %672, !dbg !175
  %674 = load float, float* %384, align 4, !dbg !175
  %675 = fmul float %610, %604, !dbg !175
  %676 = fmul float %614, %605, !dbg !175
  %677 = fadd float %675, %676, !dbg !175
  %678 = fmul float %677, %600, !dbg !175
  %679 = fmul float %623, %618, !dbg !175
  %680 = fmul float %627, %619, !dbg !175
  %681 = fadd float %679, %680, !dbg !175
  %682 = fmul float %681, %601, !dbg !175
  %683 = fadd float %678, %682, !dbg !175
  %684 = fmul float %674, %683, !dbg !175
  %685 = fadd float %673, %684, !dbg !175
  %686 = load float, float* %384, align 4, !dbg !175
  %687 = fsub float 1.000000e+00, %686, !dbg !175
  %688 = fmul float %577, %572, !dbg !175
  %689 = fmul float %581, %573, !dbg !175
  %690 = fadd float %688, %689, !dbg !175
  %691 = fmul float %690, %568, !dbg !175
  %692 = fmul float %590, %585, !dbg !175
  %693 = fmul float %594, %586, !dbg !175
  %694 = fadd float %692, %693, !dbg !175
  %695 = fmul float %694, %569, !dbg !175
  %696 = fadd float %691, %695, !dbg !175
  %697 = fmul float %687, %696, !dbg !175
  %698 = load float, float* %384, align 4, !dbg !175
  %699 = fmul float %644, %637, !dbg !175
  %700 = fmul float %648, %638, !dbg !175
  %701 = fadd float %699, %700, !dbg !175
  %702 = fmul float %701, %633, !dbg !175
  %703 = fmul float %657, %652, !dbg !175
  %704 = fmul float %661, %653, !dbg !175
  %705 = fadd float %703, %704, !dbg !175
  %706 = fmul float %705, %634, !dbg !175
  %707 = fadd float %702, %706, !dbg !175
  %708 = fmul float %698, %707, !dbg !175
  %709 = fadd float %697, %708, !dbg !175
  %710 = fsub float %685, %709, !dbg !175
  %711 = fcmp olt float %710, 0.000000e+00, !dbg !175
  %712 = fneg float %710, !dbg !175
  %absf_cont74 = select i1 %711, float %712, float %710, !dbg !175
  %713 = fadd float %685, %709, !dbg !176
  %714 = fmul float %713, 0x3F1A36E2E0000000, !dbg !176
  %715 = fcmp olt float %absf_cont74, %714, !dbg !176
  br i1 %715, label %expr_true78, label %_cont76, !dbg !176

_cont76:                                          ; preds = %expr_false62
  %716 = fmul float %685, %685, !dbg !177
  %717 = load float, float* %510, align 8, !dbg !177
  %718 = fmul float %717, 2.000000e+00, !dbg !177
  %719 = fmul float %718, %710, !dbg !177
  %720 = fsub float %716, %719, !dbg !177
  %721 = call float @llvm.sqrt.f32(float %720), !dbg !177
  %722 = fsub float %685, %721, !dbg !178
  %723 = fdiv float %722, %710, !dbg !178
  br label %if_join79, !dbg !178

expr_true78:                                      ; preds = %expr_false62
  %724 = load float, float* %510, align 8, !dbg !177
  %725 = fmul float %724, 2.000000e+00, !dbg !177
  %726 = fdiv float %725, %713, !dbg !177
  br label %if_join79, !dbg !177

if_join79:                                        ; preds = %expr_true78, %_cont76
  %storemerge531 = phi float [ %726, %expr_true78 ], [ %723, %_cont76 ], !dbg !170
  store float %storemerge531, float* %510, align 8, !dbg !170
  %.elt424 = getelementptr inbounds %3, %3* %n_sample_2184458, i64 0, i32 1, !dbg !179
  %.unpack425 = load float, float* %.elt424, align 4, !dbg !179
  %.elt426 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 1, i32 0, !dbg !179
  %.unpack427 = load float, float* %.elt426, align 4, !dbg !179
  %.elt428 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 1, i32 1, !dbg !179
  %.unpack429 = load float, float* %.elt428, align 4, !dbg !179
  %727 = load float, float* %510, align 8, !dbg !179
  %728 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 2, i32 0, !dbg !179
  %729 = load float, float* %728, align 4, !dbg !179
  %730 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 2, i32 2, i32 1, !dbg !179
  %731 = load float, float* %730, align 4, !dbg !179
  %732 = sitofp i32 %clamp_cont49 to float, !dbg !179
  %733 = fadd float %.unpack425, %732, !dbg !179
  %734 = fmul float %733, %.unpack429, !dbg !179
  %735 = fmul float %734, 2.000000e+00, !dbg !179
  %736 = fadd float %735, -1.000000e+00, !dbg !179
  %737 = fmul float %736, 0x400921FB60000000, !dbg !179
  store float %737, float* %phi_m_2185143, align 4, !dbg !179
  %738 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 5, !dbg !179
  %739 = load i1, i1* %738, align 1, !dbg !179
  br i1 %739, label %expr_true81, label %if_join82, !dbg !179

expr_true81:                                      ; preds = %if_join79
  %740 = fadd float %737, %10, !dbg !180
  store float %740, float* %phi_m_2185143, align 4, !dbg !180
  br label %if_join82, !dbg !180

if_join82:                                        ; preds = %if_join79, %expr_true81
  %741 = load float, float* %phi_m_2185143, align 4, !dbg !181
  %742 = call float @llvm.sin.f32(float %741), !dbg !181
  %743 = call float @llvm.cos.f32(float %741), !dbg !182
  %744 = sitofp i32 %clamp_cont68 to float, !dbg !183
  %745 = fadd float %storemerge531, %744, !dbg !183
  %746 = fmul float %745, %.unpack427, !dbg !183
  %747 = fmul float %746, %746, !dbg !183
  %748 = fmul float %747, 0x3FF921FB60000000, !dbg !183
  %749 = call float @llvm.sin.f32(float %748), !dbg !183
  %750 = call float @llvm.cos.f32(float %748), !dbg !184
  %751 = fmul float %743, %749, !dbg !185
  %752 = fmul float %751, %.unpack373, !dbg !185
  %753 = fmul float %742, %749, !dbg !185
  %754 = fmul float %753, %.unpack375, !dbg !185
  %755 = fadd float %752, %754, !dbg !185
  %756 = fmul float %750, %.unpack377, !dbg !185
  %757 = fadd float %755, %756, !dbg !185
  %758 = fmul float %757, 2.000000e+00, !dbg !185
  %759 = fmul float %750, %758, !dbg !185
  %760 = fsub float %759, %.unpack377, !dbg !185
  %761 = fcmp ugt float %760, 0.000000e+00, !dbg !185
  br i1 %761, label %expr_false91, label %sample_brdf_cont, !dbg !185

expr_false91:                                     ; preds = %if_join82
  %fr_2185388.repack = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 0, !dbg !186
  store float 0.000000e+00, float* %fr_2185388.repack, align 8, !dbg !186
  %fr_2185388.repack430 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 1, !dbg !186
  store float 0.000000e+00, float* %fr_2185388.repack430, align 4, !dbg !186
  %fr_2185388.repack431 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 2, !dbg !186
  store float 0.000000e+00, float* %fr_2185388.repack431, align 8, !dbg !186
  %.elt432 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 0, !dbg !186
  %.unpack433 = load float, float* %.elt432, align 8, !dbg !186
  %.elt434 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 1, !dbg !186
  %.unpack435 = load float, float* %.elt434, align 4, !dbg !186
  %param_weight_2185235.repack = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 0, !dbg !186
  store float 0.000000e+00, float* %param_weight_2185235.repack, align 4, !dbg !186
  %param_weight_2185235.repack436 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 1, !dbg !186
  store float 0.000000e+00, float* %param_weight_2185235.repack436, align 4, !dbg !186
  %param_weight_2185235.repack437 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 2, !dbg !186
  store float 0.000000e+00, float* %param_weight_2185235.repack437, align 4, !dbg !186
  %param_weight_2185235.repack438 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 3, !dbg !186
  store float 0.000000e+00, float* %param_weight_2185235.repack438, align 4, !dbg !186
  %param_weight_2185235.repack439 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 4, !dbg !186
  store float 0.000000e+00, float* %param_weight_2185235.repack439, align 4, !dbg !186
  %param_weight_2185235.repack440 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 5, !dbg !186
  store float 0.000000e+00, float* %param_weight_2185235.repack440, align 4, !dbg !186
  store i32 0, i32* %slice_offset_2185346, align 4, !dbg !186
  store i32 0, i32* %dim_2185211, align 4, !dbg !186
  %762 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, !dbg !186
  %763 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 4, !dbg !186
  %764 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 3, !dbg !186
  %765 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 5, !dbg !186
  %766 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 6, !dbg !186
  br label %expr_true154, !dbg !187

expr_false93:                                     ; preds = %continue171
  %767 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 2, !dbg !188
  %.elt441 = getelementptr inbounds %3, %3* %767, i64 0, i32 0, !dbg !188
  %.unpack442 = load float, float* %.elt441, align 4, !dbg !188
  %.elt445 = getelementptr inbounds %7, %7* %762, i64 0, i32 0, i32 0, !dbg !188
  %.unpack446 = load i32, i32* %.elt445, align 4, !dbg !188
  %768 = fmul float %.unpack433, %.unpack442, !dbg !188
  %769 = sitofp i32 %.unpack446 to float, !dbg !188
  %770 = fadd float %769, -2.000000e+00, !dbg !188
  %771 = fcmp olt float %768, %770, !dbg !188
  %772 = select i1 %771, float %768, float %770, !dbg !188
  %773 = call float @llvm.floor.f32(float %772), !dbg !188
  %.elt447 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 0, i32 1, !dbg !188
  %.unpack448 = load i32, i32* %.elt447, align 4, !dbg !188
  %.elt443 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 2, i32 1, !dbg !188
  %.unpack444 = load float, float* %.elt443, align 4, !dbg !188
  %774 = fmul float %.unpack435, %.unpack444, !dbg !189
  %775 = sitofp i32 %.unpack448 to float, !dbg !189
  %776 = fadd float %775, -2.000000e+00, !dbg !189
  %777 = fcmp olt float %774, %776, !dbg !189
  %778 = select i1 %777, float %774, float %776, !dbg !189
  %779 = call float @llvm.floor.f32(float %778), !dbg !189
  %780 = getelementptr inbounds %7, %7* %762, i64 0, i32 0, i32 0, !dbg !190
  %781 = load i32, i32* %780, align 4, !dbg !190
  %782 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 0, i32 1, !dbg !190
  %783 = load i32, i32* %782, align 4, !dbg !190
  %784 = load i32, i32* %slice_offset_2185346, align 4, !dbg !190
  %785 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 7, !dbg !190
  %786 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %787 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %788 = getelementptr inbounds [0 x i32], [0 x i32]* %787, i64 0, i64 2, !dbg !190
  %789 = load i32, i32* %788, align 4, !dbg !190
  %790 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 4, !dbg !190
  %791 = load float, float* %790, align 4, !dbg !190
  %792 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 5, !dbg !190
  %793 = load float, float* %792, align 4, !dbg !190
  %794 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %795 = getelementptr inbounds [0 x i32], [0 x i32]* %794, i64 0, i64 1, !dbg !190
  %796 = load i32, i32* %795, align 4, !dbg !190
  %797 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 2, !dbg !190
  %798 = load float, float* %797, align 4, !dbg !190
  %799 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 3, !dbg !190
  %800 = load float, float* %799, align 4, !dbg !190
  %801 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %802 = getelementptr inbounds [0 x i32], [0 x i32]* %801, i64 0, i64 0, !dbg !190
  %803 = load i32, i32* %802, align 4, !dbg !190
  %804 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 0, !dbg !190
  %805 = load float, float* %804, align 4, !dbg !190
  %806 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 1, !dbg !190
  %807 = load float, float* %806, align 4, !dbg !190
  %808 = fptosi float %773 to i32, !dbg !190
  %809 = fptosi float %779 to i32, !dbg !190
  %810 = mul nsw i32 %781, %809, !dbg !190
  %index = add nsw i32 %810, %808, !dbg !190
  %size269 = mul nsw i32 %781, %783, !dbg !190
  %811 = mul nsw i32 %784, %size269, !dbg !190
  %812 = add nsw i32 %index, %811, !dbg !190
  %813 = sext i32 %812 to i64, !dbg !190
  %814 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %813, !dbg !190
  %815 = load float, float* %814, align 4, !dbg !190
  %816 = mul nsw i32 %803, %size269, !dbg !190
  %i1270 = add nsw i32 %812, %816, !dbg !190
  %817 = sext i32 %i1270 to i64, !dbg !190
  %818 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %817, !dbg !190
  %819 = load float, float* %818, align 4, !dbg !190
  %820 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %821 = getelementptr inbounds [0 x i32], [0 x i32]* %820, i64 0, i64 0, !dbg !190
  %822 = load i32, i32* %821, align 4, !dbg !190
  %823 = load float, float* %804, align 4, !dbg !190
  %824 = load float, float* %806, align 4, !dbg !190
  %825 = mul nsw i32 %796, %size269, !dbg !190
  %i1271 = add nsw i32 %812, %825, !dbg !190
  %826 = sext i32 %i1271 to i64, !dbg !190
  %827 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %826, !dbg !190
  %828 = load float, float* %827, align 4, !dbg !190
  %829 = mul nsw i32 %822, %size269, !dbg !190
  %i1272 = add nsw i32 %i1271, %829, !dbg !190
  %830 = sext i32 %i1272 to i64, !dbg !190
  %831 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %830, !dbg !190
  %832 = load float, float* %831, align 4, !dbg !190
  %833 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %834 = getelementptr inbounds [0 x i32], [0 x i32]* %833, i64 0, i64 1, !dbg !190
  %835 = load i32, i32* %834, align 4, !dbg !190
  %836 = load float, float* %797, align 4, !dbg !190
  %837 = load float, float* %799, align 4, !dbg !190
  %838 = getelementptr inbounds [0 x i32], [0 x i32]* %833, i64 0, i64 0, !dbg !190
  %839 = load i32, i32* %838, align 4, !dbg !190
  %840 = load float, float* %804, align 4, !dbg !190
  %841 = load float, float* %806, align 4, !dbg !190
  %842 = mul nsw i32 %789, %size269, !dbg !190
  %i1273 = add nsw i32 %812, %842, !dbg !190
  %843 = sext i32 %i1273 to i64, !dbg !190
  %844 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %843, !dbg !190
  %845 = load float, float* %844, align 4, !dbg !190
  %846 = mul nsw i32 %839, %size269, !dbg !190
  %i1274 = add nsw i32 %i1273, %846, !dbg !190
  %847 = sext i32 %i1274 to i64, !dbg !190
  %848 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %847, !dbg !190
  %849 = load float, float* %848, align 4, !dbg !190
  %850 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %851 = getelementptr inbounds [0 x i32], [0 x i32]* %850, i64 0, i64 0, !dbg !190
  %852 = load i32, i32* %851, align 4, !dbg !190
  %853 = load float, float* %804, align 4, !dbg !190
  %854 = load float, float* %806, align 4, !dbg !190
  %855 = mul nsw i32 %835, %size269, !dbg !190
  %i1275 = add nsw i32 %i1273, %855, !dbg !190
  %856 = sext i32 %i1275 to i64, !dbg !190
  %857 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %856, !dbg !190
  %858 = load float, float* %857, align 4, !dbg !190
  %859 = mul nsw i32 %852, %size269, !dbg !190
  %i1276 = add nsw i32 %i1275, %859, !dbg !190
  %860 = sext i32 %i1276 to i64, !dbg !190
  %861 = getelementptr inbounds [0 x float], [0 x float]* %786, i64 0, i64 %860, !dbg !190
  %862 = load float, float* %861, align 4, !dbg !190
  %863 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %864 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %865 = getelementptr inbounds [0 x i32], [0 x i32]* %864, i64 0, i64 2, !dbg !190
  %866 = load i32, i32* %865, align 4, !dbg !190
  %867 = load float, float* %790, align 4, !dbg !190
  %868 = load float, float* %792, align 4, !dbg !190
  %869 = getelementptr inbounds [0 x i32], [0 x i32]* %864, i64 0, i64 1, !dbg !190
  %870 = load i32, i32* %869, align 4, !dbg !190
  %871 = load float, float* %797, align 4, !dbg !190
  %872 = load float, float* %799, align 4, !dbg !190
  %873 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %874 = getelementptr inbounds [0 x i32], [0 x i32]* %873, i64 0, i64 0, !dbg !190
  %875 = load i32, i32* %874, align 4, !dbg !190
  %876 = load float, float* %804, align 4, !dbg !190
  %877 = load float, float* %806, align 4, !dbg !190
  %878 = getelementptr inbounds [0 x float], [0 x float]* %863, i64 0, i64 1, !dbg !190
  %879 = sext i32 %812 to i64, !dbg !190
  %880 = getelementptr inbounds float, float* %878, i64 %879, !dbg !190
  %881 = load float, float* %880, align 4, !dbg !190
  %882 = mul nsw i32 %875, %size269, !dbg !190
  %i1277 = add nsw i32 %812, %882, !dbg !190
  %883 = sext i32 %i1277 to i64, !dbg !190
  %884 = getelementptr inbounds float, float* %878, i64 %883, !dbg !190
  %885 = load float, float* %884, align 4, !dbg !190
  %886 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %887 = getelementptr inbounds [0 x i32], [0 x i32]* %886, i64 0, i64 0, !dbg !190
  %888 = load i32, i32* %887, align 4, !dbg !190
  %889 = load float, float* %804, align 4, !dbg !190
  %890 = load float, float* %806, align 4, !dbg !190
  %891 = mul nsw i32 %870, %size269, !dbg !190
  %i1278 = add nsw i32 %812, %891, !dbg !190
  %892 = sext i32 %i1278 to i64, !dbg !190
  %893 = getelementptr inbounds float, float* %878, i64 %892, !dbg !190
  %894 = load float, float* %893, align 4, !dbg !190
  %895 = mul nsw i32 %888, %size269, !dbg !190
  %i1279 = add nsw i32 %i1278, %895, !dbg !190
  %896 = sext i32 %i1279 to i64, !dbg !190
  %897 = getelementptr inbounds float, float* %878, i64 %896, !dbg !190
  %898 = load float, float* %897, align 4, !dbg !190
  %899 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %900 = getelementptr inbounds [0 x i32], [0 x i32]* %899, i64 0, i64 1, !dbg !190
  %901 = load i32, i32* %900, align 4, !dbg !190
  %902 = load float, float* %797, align 4, !dbg !190
  %903 = load float, float* %799, align 4, !dbg !190
  %904 = getelementptr inbounds [0 x i32], [0 x i32]* %899, i64 0, i64 0, !dbg !190
  %905 = load i32, i32* %904, align 4, !dbg !190
  %906 = load float, float* %804, align 4, !dbg !190
  %907 = load float, float* %806, align 4, !dbg !190
  %908 = mul nsw i32 %866, %size269, !dbg !190
  %i1280 = add nsw i32 %812, %908, !dbg !190
  %909 = sext i32 %i1280 to i64, !dbg !190
  %910 = getelementptr inbounds float, float* %878, i64 %909, !dbg !190
  %911 = load float, float* %910, align 4, !dbg !190
  %912 = mul nsw i32 %905, %size269, !dbg !190
  %i1281 = add nsw i32 %i1280, %912, !dbg !190
  %913 = sext i32 %i1281 to i64, !dbg !190
  %914 = getelementptr inbounds float, float* %878, i64 %913, !dbg !190
  %915 = load float, float* %914, align 4, !dbg !190
  %916 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %917 = getelementptr inbounds [0 x i32], [0 x i32]* %916, i64 0, i64 0, !dbg !190
  %918 = load i32, i32* %917, align 4, !dbg !190
  %919 = load float, float* %804, align 4, !dbg !190
  %920 = load float, float* %806, align 4, !dbg !190
  %921 = mul nsw i32 %901, %size269, !dbg !190
  %i1282 = add nsw i32 %i1280, %921, !dbg !190
  %922 = sext i32 %i1282 to i64, !dbg !190
  %923 = getelementptr inbounds float, float* %878, i64 %922, !dbg !190
  %924 = load float, float* %923, align 4, !dbg !190
  %925 = mul nsw i32 %918, %size269, !dbg !190
  %i1283 = add nsw i32 %i1282, %925, !dbg !190
  %926 = sext i32 %i1283 to i64, !dbg !190
  %927 = getelementptr inbounds float, float* %878, i64 %926, !dbg !190
  %928 = load float, float* %927, align 4, !dbg !190
  %929 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %930 = load i32, i32* %780, align 4, !dbg !190
  %931 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %932 = getelementptr inbounds [0 x i32], [0 x i32]* %931, i64 0, i64 2, !dbg !190
  %933 = load i32, i32* %932, align 4, !dbg !190
  %934 = load float, float* %790, align 4, !dbg !190
  %935 = load float, float* %792, align 4, !dbg !190
  %936 = getelementptr inbounds [0 x i32], [0 x i32]* %931, i64 0, i64 1, !dbg !190
  %937 = load i32, i32* %936, align 4, !dbg !190
  %938 = load float, float* %797, align 4, !dbg !190
  %939 = load float, float* %799, align 4, !dbg !190
  %940 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %941 = getelementptr inbounds [0 x i32], [0 x i32]* %940, i64 0, i64 0, !dbg !190
  %942 = load i32, i32* %941, align 4, !dbg !190
  %943 = load float, float* %804, align 4, !dbg !190
  %944 = load float, float* %806, align 4, !dbg !190
  %945 = sext i32 %930 to i64, !dbg !190
  %946 = getelementptr inbounds [0 x float], [0 x float]* %929, i64 0, i64 %945, !dbg !190
  %947 = sext i32 %812 to i64, !dbg !190
  %948 = getelementptr inbounds float, float* %946, i64 %947, !dbg !190
  %949 = load float, float* %948, align 4, !dbg !190
  %950 = mul nsw i32 %942, %size269, !dbg !190
  %i1284 = add nsw i32 %812, %950, !dbg !190
  %951 = sext i32 %i1284 to i64, !dbg !190
  %952 = getelementptr inbounds float, float* %946, i64 %951, !dbg !190
  %953 = load float, float* %952, align 4, !dbg !190
  %954 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %955 = getelementptr inbounds [0 x i32], [0 x i32]* %954, i64 0, i64 0, !dbg !190
  %956 = load i32, i32* %955, align 4, !dbg !190
  %957 = load float, float* %804, align 4, !dbg !190
  %958 = load float, float* %806, align 4, !dbg !190
  %959 = mul nsw i32 %937, %size269, !dbg !190
  %i1285 = add nsw i32 %812, %959, !dbg !190
  %960 = sext i32 %i1285 to i64, !dbg !190
  %961 = getelementptr inbounds float, float* %946, i64 %960, !dbg !190
  %962 = load float, float* %961, align 4, !dbg !190
  %963 = mul nsw i32 %956, %size269, !dbg !190
  %i1286 = add nsw i32 %i1285, %963, !dbg !190
  %964 = sext i32 %i1286 to i64, !dbg !190
  %965 = getelementptr inbounds float, float* %946, i64 %964, !dbg !190
  %966 = load float, float* %965, align 4, !dbg !190
  %967 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %968 = getelementptr inbounds [0 x i32], [0 x i32]* %967, i64 0, i64 1, !dbg !190
  %969 = load i32, i32* %968, align 4, !dbg !190
  %970 = load float, float* %797, align 4, !dbg !190
  %971 = load float, float* %799, align 4, !dbg !190
  %972 = getelementptr inbounds [0 x i32], [0 x i32]* %967, i64 0, i64 0, !dbg !190
  %973 = load i32, i32* %972, align 4, !dbg !190
  %974 = load float, float* %804, align 4, !dbg !190
  %975 = load float, float* %806, align 4, !dbg !190
  %976 = mul nsw i32 %933, %size269, !dbg !190
  %i1287 = add nsw i32 %812, %976, !dbg !190
  %977 = sext i32 %i1287 to i64, !dbg !190
  %978 = getelementptr inbounds float, float* %946, i64 %977, !dbg !190
  %979 = load float, float* %978, align 4, !dbg !190
  %980 = mul nsw i32 %973, %size269, !dbg !190
  %i1288 = add nsw i32 %i1287, %980, !dbg !190
  %981 = sext i32 %i1288 to i64, !dbg !190
  %982 = getelementptr inbounds float, float* %946, i64 %981, !dbg !190
  %983 = load float, float* %982, align 4, !dbg !190
  %984 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %985 = getelementptr inbounds [0 x i32], [0 x i32]* %984, i64 0, i64 0, !dbg !190
  %986 = load i32, i32* %985, align 4, !dbg !190
  %987 = load float, float* %804, align 4, !dbg !190
  %988 = load float, float* %806, align 4, !dbg !190
  %989 = mul nsw i32 %969, %size269, !dbg !190
  %i1289 = add nsw i32 %i1287, %989, !dbg !190
  %990 = sext i32 %i1289 to i64, !dbg !190
  %991 = getelementptr inbounds float, float* %946, i64 %990, !dbg !190
  %992 = load float, float* %991, align 4, !dbg !190
  %993 = mul nsw i32 %986, %size269, !dbg !190
  %i1290 = add nsw i32 %i1289, %993, !dbg !190
  %994 = sext i32 %i1290 to i64, !dbg !190
  %995 = getelementptr inbounds float, float* %946, i64 %994, !dbg !190
  %996 = load float, float* %995, align 4, !dbg !190
  %997 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %998 = load i32, i32* %780, align 4, !dbg !190
  %999 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1000 = getelementptr inbounds [0 x i32], [0 x i32]* %999, i64 0, i64 2, !dbg !190
  %1001 = load i32, i32* %1000, align 4, !dbg !190
  %1002 = load float, float* %790, align 4, !dbg !190
  %1003 = load float, float* %792, align 4, !dbg !190
  %1004 = getelementptr inbounds [0 x i32], [0 x i32]* %999, i64 0, i64 1, !dbg !190
  %1005 = load i32, i32* %1004, align 4, !dbg !190
  %1006 = load float, float* %797, align 4, !dbg !190
  %1007 = load float, float* %799, align 4, !dbg !190
  %1008 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1009 = getelementptr inbounds [0 x i32], [0 x i32]* %1008, i64 0, i64 0, !dbg !190
  %1010 = load i32, i32* %1009, align 4, !dbg !190
  %1011 = load float, float* %804, align 4, !dbg !190
  %1012 = load float, float* %806, align 4, !dbg !190
  %1013 = add nsw i32 %998, 1, !dbg !190
  %1014 = sext i32 %1013 to i64, !dbg !190
  %1015 = getelementptr inbounds [0 x float], [0 x float]* %997, i64 0, i64 %1014, !dbg !190
  %1016 = sext i32 %812 to i64, !dbg !190
  %1017 = getelementptr inbounds float, float* %1015, i64 %1016, !dbg !190
  %1018 = load float, float* %1017, align 4, !dbg !190
  %1019 = mul nsw i32 %1010, %size269, !dbg !190
  %i1291 = add nsw i32 %812, %1019, !dbg !190
  %1020 = sext i32 %i1291 to i64, !dbg !190
  %1021 = getelementptr inbounds float, float* %1015, i64 %1020, !dbg !190
  %1022 = load float, float* %1021, align 4, !dbg !190
  %1023 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1024 = getelementptr inbounds [0 x i32], [0 x i32]* %1023, i64 0, i64 0, !dbg !190
  %1025 = load i32, i32* %1024, align 4, !dbg !190
  %1026 = load float, float* %804, align 4, !dbg !190
  %1027 = load float, float* %806, align 4, !dbg !190
  %1028 = mul nsw i32 %1005, %size269, !dbg !190
  %i1292 = add nsw i32 %812, %1028, !dbg !190
  %1029 = sext i32 %i1292 to i64, !dbg !190
  %1030 = getelementptr inbounds float, float* %1015, i64 %1029, !dbg !190
  %1031 = load float, float* %1030, align 4, !dbg !190
  %1032 = mul nsw i32 %1025, %size269, !dbg !190
  %i1293 = add nsw i32 %i1292, %1032, !dbg !190
  %1033 = sext i32 %i1293 to i64, !dbg !190
  %1034 = getelementptr inbounds float, float* %1015, i64 %1033, !dbg !190
  %1035 = load float, float* %1034, align 4, !dbg !190
  %1036 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1037 = getelementptr inbounds [0 x i32], [0 x i32]* %1036, i64 0, i64 1, !dbg !190
  %1038 = load i32, i32* %1037, align 4, !dbg !190
  %1039 = load float, float* %797, align 4, !dbg !190
  %1040 = load float, float* %799, align 4, !dbg !190
  %1041 = getelementptr inbounds [0 x i32], [0 x i32]* %1036, i64 0, i64 0, !dbg !190
  %1042 = load i32, i32* %1041, align 4, !dbg !190
  %1043 = load float, float* %804, align 4, !dbg !190
  %1044 = load float, float* %806, align 4, !dbg !190
  %1045 = mul nsw i32 %1001, %size269, !dbg !190
  %i1294 = add nsw i32 %812, %1045, !dbg !190
  %1046 = sext i32 %i1294 to i64, !dbg !190
  %1047 = getelementptr inbounds float, float* %1015, i64 %1046, !dbg !190
  %1048 = load float, float* %1047, align 4, !dbg !190
  %1049 = mul nsw i32 %1042, %size269, !dbg !190
  %i1295 = add nsw i32 %i1294, %1049, !dbg !190
  %1050 = sext i32 %i1295 to i64, !dbg !190
  %1051 = getelementptr inbounds float, float* %1015, i64 %1050, !dbg !190
  %1052 = load float, float* %1051, align 4, !dbg !190
  %1053 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1054 = getelementptr inbounds [0 x i32], [0 x i32]* %1053, i64 0, i64 0, !dbg !190
  %1055 = load i32, i32* %1054, align 4, !dbg !190
  %1056 = load float, float* %804, align 4, !dbg !190
  %1057 = load float, float* %806, align 4, !dbg !190
  %1058 = mul nsw i32 %1038, %size269, !dbg !190
  %i1296 = add nsw i32 %i1294, %1058, !dbg !190
  %1059 = sext i32 %i1296 to i64, !dbg !190
  %1060 = getelementptr inbounds float, float* %1015, i64 %1059, !dbg !190
  %1061 = load float, float* %1060, align 4, !dbg !190
  %1062 = mul nsw i32 %1055, %size269, !dbg !190
  %i1297 = add nsw i32 %i1296, %1062, !dbg !190
  %1063 = sext i32 %i1297 to i64, !dbg !190
  %1064 = getelementptr inbounds float, float* %1015, i64 %1063, !dbg !190
  %1065 = load float, float* %1064, align 4, !dbg !190
  %1066 = getelementptr inbounds %3, %3* %767, i64 0, i32 0, !dbg !190
  %1067 = load float, float* %1066, align 4, !dbg !190
  %1068 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 2, i32 1, !dbg !190
  %1069 = load float, float* %1068, align 4, !dbg !190
  %1070 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 0, !dbg !190
  %1071 = fsub float %774, %779, !dbg !190
  %1072 = fsub float 1.000000e+00, %1071, !dbg !190
  %1073 = fsub float %768, %773, !dbg !190
  %1074 = fsub float 1.000000e+00, %1073, !dbg !190
  %1075 = fmul float %815, %805, !dbg !190
  %1076 = fmul float %819, %807, !dbg !190
  %1077 = fadd float %1075, %1076, !dbg !190
  %1078 = fmul float %1077, %798, !dbg !190
  %1079 = fmul float %828, %823, !dbg !190
  %1080 = fmul float %832, %824, !dbg !190
  %1081 = fadd float %1079, %1080, !dbg !190
  %1082 = fmul float %1081, %800, !dbg !190
  %1083 = fadd float %1078, %1082, !dbg !190
  %1084 = fmul float %1083, %791, !dbg !190
  %1085 = fmul float %845, %840, !dbg !190
  %1086 = fmul float %849, %841, !dbg !190
  %1087 = fadd float %1085, %1086, !dbg !190
  %1088 = fmul float %1087, %836, !dbg !190
  %1089 = fmul float %858, %853, !dbg !190
  %1090 = fmul float %862, %854, !dbg !190
  %1091 = fadd float %1089, %1090, !dbg !190
  %1092 = fmul float %1091, %837, !dbg !190
  %1093 = fadd float %1088, %1092, !dbg !190
  %1094 = fmul float %1093, %793, !dbg !190
  %1095 = fadd float %1084, %1094, !dbg !190
  %1096 = fmul float %1074, %1095, !dbg !190
  %1097 = fmul float %881, %876, !dbg !190
  %1098 = fmul float %885, %877, !dbg !190
  %1099 = fadd float %1097, %1098, !dbg !190
  %1100 = fmul float %1099, %871, !dbg !190
  %1101 = fmul float %894, %889, !dbg !190
  %1102 = fmul float %898, %890, !dbg !190
  %1103 = fadd float %1101, %1102, !dbg !190
  %1104 = fmul float %1103, %872, !dbg !190
  %1105 = fadd float %1100, %1104, !dbg !190
  %1106 = fmul float %1105, %867, !dbg !190
  %1107 = fmul float %911, %906, !dbg !190
  %1108 = fmul float %915, %907, !dbg !190
  %1109 = fadd float %1107, %1108, !dbg !190
  %1110 = fmul float %1109, %902, !dbg !190
  %1111 = fmul float %924, %919, !dbg !190
  %1112 = fmul float %928, %920, !dbg !190
  %1113 = fadd float %1111, %1112, !dbg !190
  %1114 = fmul float %1113, %903, !dbg !190
  %1115 = fadd float %1110, %1114, !dbg !190
  %1116 = fmul float %1115, %868, !dbg !190
  %1117 = fadd float %1106, %1116, !dbg !190
  %1118 = fmul float %1073, %1117, !dbg !190
  %1119 = fadd float %1096, %1118, !dbg !190
  %1120 = fmul float %1072, %1119, !dbg !190
  %1121 = fmul float %949, %943, !dbg !190
  %1122 = fmul float %953, %944, !dbg !190
  %1123 = fadd float %1121, %1122, !dbg !190
  %1124 = fmul float %1123, %938, !dbg !190
  %1125 = fmul float %962, %957, !dbg !190
  %1126 = fmul float %966, %958, !dbg !190
  %1127 = fadd float %1125, %1126, !dbg !190
  %1128 = fmul float %1127, %939, !dbg !190
  %1129 = fadd float %1124, %1128, !dbg !190
  %1130 = fmul float %1129, %934, !dbg !190
  %1131 = fmul float %979, %974, !dbg !190
  %1132 = fmul float %983, %975, !dbg !190
  %1133 = fadd float %1131, %1132, !dbg !190
  %1134 = fmul float %1133, %970, !dbg !190
  %1135 = fmul float %992, %987, !dbg !190
  %1136 = fmul float %996, %988, !dbg !190
  %1137 = fadd float %1135, %1136, !dbg !190
  %1138 = fmul float %1137, %971, !dbg !190
  %1139 = fadd float %1134, %1138, !dbg !190
  %1140 = fmul float %1139, %935, !dbg !190
  %1141 = fadd float %1130, %1140, !dbg !190
  %1142 = fmul float %1074, %1141, !dbg !190
  %1143 = fmul float %1018, %1011, !dbg !190
  %1144 = fmul float %1022, %1012, !dbg !190
  %1145 = fadd float %1143, %1144, !dbg !190
  %1146 = fmul float %1145, %1006, !dbg !190
  %1147 = fmul float %1031, %1026, !dbg !190
  %1148 = fmul float %1035, %1027, !dbg !190
  %1149 = fadd float %1147, %1148, !dbg !190
  %1150 = fmul float %1149, %1007, !dbg !190
  %1151 = fadd float %1146, %1150, !dbg !190
  %1152 = fmul float %1151, %1002, !dbg !190
  %1153 = fmul float %1048, %1043, !dbg !190
  %1154 = fmul float %1052, %1044, !dbg !190
  %1155 = fadd float %1153, %1154, !dbg !190
  %1156 = fmul float %1155, %1039, !dbg !190
  %1157 = fmul float %1061, %1056, !dbg !190
  %1158 = fmul float %1065, %1057, !dbg !190
  %1159 = fadd float %1157, %1158, !dbg !190
  %1160 = fmul float %1159, %1040, !dbg !190
  %1161 = fadd float %1156, %1160, !dbg !190
  %1162 = fmul float %1161, %1003, !dbg !190
  %1163 = fadd float %1152, %1162, !dbg !190
  %1164 = fmul float %1073, %1163, !dbg !190
  %1165 = fadd float %1142, %1164, !dbg !190
  %1166 = fmul float %1071, %1165, !dbg !190
  %1167 = fadd float %1120, %1166, !dbg !190
  %hprod = fmul float %1067, %1069, !dbg !190
  %1168 = fmul float %1167, %hprod, !dbg !190
  store float %1168, float* %1070, align 8, !dbg !190
  %.elt449 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 0, !dbg !190
  %.unpack450 = load float, float* %.elt449, align 8, !dbg !190
  %.elt451 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 1, !dbg !190
  %.unpack452 = load float, float* %.elt451, align 4, !dbg !190
  %param_weight_2185442.repack = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 0, !dbg !190
  store float 0.000000e+00, float* %param_weight_2185442.repack, align 4, !dbg !190
  %param_weight_2185442.repack453 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 1, !dbg !190
  store float 0.000000e+00, float* %param_weight_2185442.repack453, align 4, !dbg !190
  %param_weight_2185442.repack454 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 2, !dbg !190
  store float 0.000000e+00, float* %param_weight_2185442.repack454, align 4, !dbg !190
  %param_weight_2185442.repack455 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 3, !dbg !190
  store float 0.000000e+00, float* %param_weight_2185442.repack455, align 4, !dbg !190
  %param_weight_2185442.repack456 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 4, !dbg !190
  store float 0.000000e+00, float* %param_weight_2185442.repack456, align 4, !dbg !190
  %param_weight_2185442.repack457 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 5, !dbg !190
  store float 0.000000e+00, float* %param_weight_2185442.repack457, align 4, !dbg !190
  store i32 0, i32* %slice_offset_2185550, align 4, !dbg !190
  store i32 0, i32* %dim_2185420, align 4, !dbg !190
  br label %expr_true136, !dbg !187

expr_false99:                                     ; preds = %continue153
  %.elt458 = getelementptr inbounds %3, %3* %767, i64 0, i32 0, !dbg !188
  %.unpack459 = load float, float* %.elt458, align 4, !dbg !188
  %.elt462 = getelementptr inbounds %7, %7* %762, i64 0, i32 0, i32 0, !dbg !188
  %.unpack463 = load i32, i32* %.elt462, align 4, !dbg !188
  %1169 = fmul float %.unpack450, %.unpack459, !dbg !188
  %1170 = sitofp i32 %.unpack463 to float, !dbg !188
  %1171 = fadd float %1170, -2.000000e+00, !dbg !188
  %1172 = fcmp olt float %1169, %1171, !dbg !188
  %1173 = select i1 %1172, float %1169, float %1171, !dbg !188
  %1174 = call float @llvm.floor.f32(float %1173), !dbg !188
  %.elt464 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 0, i32 1, !dbg !188
  %.unpack465 = load i32, i32* %.elt464, align 4, !dbg !188
  %.elt460 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 2, i32 1, !dbg !188
  %.unpack461 = load float, float* %.elt460, align 4, !dbg !188
  %1175 = fmul float %.unpack452, %.unpack461, !dbg !189
  %1176 = sitofp i32 %.unpack465 to float, !dbg !189
  %1177 = fadd float %1176, -2.000000e+00, !dbg !189
  %1178 = fcmp olt float %1175, %1177, !dbg !189
  %1179 = select i1 %1178, float %1175, float %1177, !dbg !189
  %1180 = call float @llvm.floor.f32(float %1179), !dbg !189
  %1181 = load i32, i32* %780, align 4, !dbg !190
  %1182 = load i32, i32* %782, align 4, !dbg !190
  %1183 = load i32, i32* %slice_offset_2185550, align 4, !dbg !190
  %1184 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1185 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1186 = getelementptr inbounds [0 x i32], [0 x i32]* %1185, i64 0, i64 2, !dbg !190
  %1187 = load i32, i32* %1186, align 4, !dbg !190
  %1188 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 4, !dbg !190
  %1189 = load float, float* %1188, align 4, !dbg !190
  %1190 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 5, !dbg !190
  %1191 = load float, float* %1190, align 4, !dbg !190
  %1192 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1193 = getelementptr inbounds [0 x i32], [0 x i32]* %1192, i64 0, i64 1, !dbg !190
  %1194 = load i32, i32* %1193, align 4, !dbg !190
  %1195 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 2, !dbg !190
  %1196 = load float, float* %1195, align 4, !dbg !190
  %1197 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 3, !dbg !190
  %1198 = load float, float* %1197, align 4, !dbg !190
  %1199 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1200 = getelementptr inbounds [0 x i32], [0 x i32]* %1199, i64 0, i64 0, !dbg !190
  %1201 = load i32, i32* %1200, align 4, !dbg !190
  %1202 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 0, !dbg !190
  %1203 = load float, float* %1202, align 4, !dbg !190
  %1204 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 1, !dbg !190
  %1205 = load float, float* %1204, align 4, !dbg !190
  %1206 = fptosi float %1174 to i32, !dbg !190
  %1207 = fptosi float %1180 to i32, !dbg !190
  %1208 = mul nsw i32 %1181, %1207, !dbg !190
  %index298 = add nsw i32 %1208, %1206, !dbg !190
  %size299 = mul nsw i32 %1181, %1182, !dbg !190
  %1209 = mul nsw i32 %1183, %size299, !dbg !190
  %1210 = add nsw i32 %index298, %1209, !dbg !190
  %1211 = sext i32 %1210 to i64, !dbg !190
  %1212 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1211, !dbg !190
  %1213 = load float, float* %1212, align 4, !dbg !190
  %1214 = mul nsw i32 %1201, %size299, !dbg !190
  %i1300 = add nsw i32 %1210, %1214, !dbg !190
  %1215 = sext i32 %i1300 to i64, !dbg !190
  %1216 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1215, !dbg !190
  %1217 = load float, float* %1216, align 4, !dbg !190
  %1218 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1219 = getelementptr inbounds [0 x i32], [0 x i32]* %1218, i64 0, i64 0, !dbg !190
  %1220 = load i32, i32* %1219, align 4, !dbg !190
  %1221 = load float, float* %1202, align 4, !dbg !190
  %1222 = load float, float* %1204, align 4, !dbg !190
  %1223 = mul nsw i32 %1194, %size299, !dbg !190
  %i1301 = add nsw i32 %1210, %1223, !dbg !190
  %1224 = sext i32 %i1301 to i64, !dbg !190
  %1225 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1224, !dbg !190
  %1226 = load float, float* %1225, align 4, !dbg !190
  %1227 = mul nsw i32 %1220, %size299, !dbg !190
  %i1302 = add nsw i32 %i1301, %1227, !dbg !190
  %1228 = sext i32 %i1302 to i64, !dbg !190
  %1229 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1228, !dbg !190
  %1230 = load float, float* %1229, align 4, !dbg !190
  %1231 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1232 = getelementptr inbounds [0 x i32], [0 x i32]* %1231, i64 0, i64 1, !dbg !190
  %1233 = load i32, i32* %1232, align 4, !dbg !190
  %1234 = load float, float* %1195, align 4, !dbg !190
  %1235 = load float, float* %1197, align 4, !dbg !190
  %1236 = getelementptr inbounds [0 x i32], [0 x i32]* %1231, i64 0, i64 0, !dbg !190
  %1237 = load i32, i32* %1236, align 4, !dbg !190
  %1238 = load float, float* %1202, align 4, !dbg !190
  %1239 = load float, float* %1204, align 4, !dbg !190
  %1240 = mul nsw i32 %1187, %size299, !dbg !190
  %i1303 = add nsw i32 %1210, %1240, !dbg !190
  %1241 = sext i32 %i1303 to i64, !dbg !190
  %1242 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1241, !dbg !190
  %1243 = load float, float* %1242, align 4, !dbg !190
  %1244 = mul nsw i32 %1237, %size299, !dbg !190
  %i1304 = add nsw i32 %i1303, %1244, !dbg !190
  %1245 = sext i32 %i1304 to i64, !dbg !190
  %1246 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1245, !dbg !190
  %1247 = load float, float* %1246, align 4, !dbg !190
  %1248 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1249 = getelementptr inbounds [0 x i32], [0 x i32]* %1248, i64 0, i64 0, !dbg !190
  %1250 = load i32, i32* %1249, align 4, !dbg !190
  %1251 = load float, float* %1202, align 4, !dbg !190
  %1252 = load float, float* %1204, align 4, !dbg !190
  %1253 = mul nsw i32 %1233, %size299, !dbg !190
  %i1305 = add nsw i32 %i1303, %1253, !dbg !190
  %1254 = sext i32 %i1305 to i64, !dbg !190
  %1255 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1254, !dbg !190
  %1256 = load float, float* %1255, align 4, !dbg !190
  %1257 = mul nsw i32 %1250, %size299, !dbg !190
  %i1306 = add nsw i32 %i1305, %1257, !dbg !190
  %1258 = sext i32 %i1306 to i64, !dbg !190
  %1259 = getelementptr inbounds [0 x float], [0 x float]* %1184, i64 0, i64 %1258, !dbg !190
  %1260 = load float, float* %1259, align 4, !dbg !190
  %1261 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1262 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1263 = getelementptr inbounds [0 x i32], [0 x i32]* %1262, i64 0, i64 2, !dbg !190
  %1264 = load i32, i32* %1263, align 4, !dbg !190
  %1265 = load float, float* %1188, align 4, !dbg !190
  %1266 = load float, float* %1190, align 4, !dbg !190
  %1267 = getelementptr inbounds [0 x i32], [0 x i32]* %1262, i64 0, i64 1, !dbg !190
  %1268 = load i32, i32* %1267, align 4, !dbg !190
  %1269 = load float, float* %1195, align 4, !dbg !190
  %1270 = load float, float* %1197, align 4, !dbg !190
  %1271 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1272 = getelementptr inbounds [0 x i32], [0 x i32]* %1271, i64 0, i64 0, !dbg !190
  %1273 = load i32, i32* %1272, align 4, !dbg !190
  %1274 = load float, float* %1202, align 4, !dbg !190
  %1275 = load float, float* %1204, align 4, !dbg !190
  %1276 = getelementptr inbounds [0 x float], [0 x float]* %1261, i64 0, i64 1, !dbg !190
  %1277 = sext i32 %1210 to i64, !dbg !190
  %1278 = getelementptr inbounds float, float* %1276, i64 %1277, !dbg !190
  %1279 = load float, float* %1278, align 4, !dbg !190
  %1280 = mul nsw i32 %1273, %size299, !dbg !190
  %i1307 = add nsw i32 %1210, %1280, !dbg !190
  %1281 = sext i32 %i1307 to i64, !dbg !190
  %1282 = getelementptr inbounds float, float* %1276, i64 %1281, !dbg !190
  %1283 = load float, float* %1282, align 4, !dbg !190
  %1284 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1285 = getelementptr inbounds [0 x i32], [0 x i32]* %1284, i64 0, i64 0, !dbg !190
  %1286 = load i32, i32* %1285, align 4, !dbg !190
  %1287 = load float, float* %1202, align 4, !dbg !190
  %1288 = load float, float* %1204, align 4, !dbg !190
  %1289 = mul nsw i32 %1268, %size299, !dbg !190
  %i1308 = add nsw i32 %1210, %1289, !dbg !190
  %1290 = sext i32 %i1308 to i64, !dbg !190
  %1291 = getelementptr inbounds float, float* %1276, i64 %1290, !dbg !190
  %1292 = load float, float* %1291, align 4, !dbg !190
  %1293 = mul nsw i32 %1286, %size299, !dbg !190
  %i1309 = add nsw i32 %i1308, %1293, !dbg !190
  %1294 = sext i32 %i1309 to i64, !dbg !190
  %1295 = getelementptr inbounds float, float* %1276, i64 %1294, !dbg !190
  %1296 = load float, float* %1295, align 4, !dbg !190
  %1297 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1298 = getelementptr inbounds [0 x i32], [0 x i32]* %1297, i64 0, i64 1, !dbg !190
  %1299 = load i32, i32* %1298, align 4, !dbg !190
  %1300 = load float, float* %1195, align 4, !dbg !190
  %1301 = load float, float* %1197, align 4, !dbg !190
  %1302 = getelementptr inbounds [0 x i32], [0 x i32]* %1297, i64 0, i64 0, !dbg !190
  %1303 = load i32, i32* %1302, align 4, !dbg !190
  %1304 = load float, float* %1202, align 4, !dbg !190
  %1305 = load float, float* %1204, align 4, !dbg !190
  %1306 = mul nsw i32 %1264, %size299, !dbg !190
  %i1310 = add nsw i32 %1210, %1306, !dbg !190
  %1307 = sext i32 %i1310 to i64, !dbg !190
  %1308 = getelementptr inbounds float, float* %1276, i64 %1307, !dbg !190
  %1309 = load float, float* %1308, align 4, !dbg !190
  %1310 = mul nsw i32 %1303, %size299, !dbg !190
  %i1311 = add nsw i32 %i1310, %1310, !dbg !190
  %1311 = sext i32 %i1311 to i64, !dbg !190
  %1312 = getelementptr inbounds float, float* %1276, i64 %1311, !dbg !190
  %1313 = load float, float* %1312, align 4, !dbg !190
  %1314 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1315 = getelementptr inbounds [0 x i32], [0 x i32]* %1314, i64 0, i64 0, !dbg !190
  %1316 = load i32, i32* %1315, align 4, !dbg !190
  %1317 = load float, float* %1202, align 4, !dbg !190
  %1318 = load float, float* %1204, align 4, !dbg !190
  %1319 = mul nsw i32 %1299, %size299, !dbg !190
  %i1312 = add nsw i32 %i1310, %1319, !dbg !190
  %1320 = sext i32 %i1312 to i64, !dbg !190
  %1321 = getelementptr inbounds float, float* %1276, i64 %1320, !dbg !190
  %1322 = load float, float* %1321, align 4, !dbg !190
  %1323 = mul nsw i32 %1316, %size299, !dbg !190
  %i1313 = add nsw i32 %i1312, %1323, !dbg !190
  %1324 = sext i32 %i1313 to i64, !dbg !190
  %1325 = getelementptr inbounds float, float* %1276, i64 %1324, !dbg !190
  %1326 = load float, float* %1325, align 4, !dbg !190
  %1327 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1328 = load i32, i32* %780, align 4, !dbg !190
  %1329 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1330 = getelementptr inbounds [0 x i32], [0 x i32]* %1329, i64 0, i64 2, !dbg !190
  %1331 = load i32, i32* %1330, align 4, !dbg !190
  %1332 = load float, float* %1188, align 4, !dbg !190
  %1333 = load float, float* %1190, align 4, !dbg !190
  %1334 = getelementptr inbounds [0 x i32], [0 x i32]* %1329, i64 0, i64 1, !dbg !190
  %1335 = load i32, i32* %1334, align 4, !dbg !190
  %1336 = load float, float* %1195, align 4, !dbg !190
  %1337 = load float, float* %1197, align 4, !dbg !190
  %1338 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1339 = getelementptr inbounds [0 x i32], [0 x i32]* %1338, i64 0, i64 0, !dbg !190
  %1340 = load i32, i32* %1339, align 4, !dbg !190
  %1341 = load float, float* %1202, align 4, !dbg !190
  %1342 = load float, float* %1204, align 4, !dbg !190
  %1343 = sext i32 %1328 to i64, !dbg !190
  %1344 = getelementptr inbounds [0 x float], [0 x float]* %1327, i64 0, i64 %1343, !dbg !190
  %1345 = sext i32 %1210 to i64, !dbg !190
  %1346 = getelementptr inbounds float, float* %1344, i64 %1345, !dbg !190
  %1347 = load float, float* %1346, align 4, !dbg !190
  %1348 = mul nsw i32 %1340, %size299, !dbg !190
  %i1314 = add nsw i32 %1210, %1348, !dbg !190
  %1349 = sext i32 %i1314 to i64, !dbg !190
  %1350 = getelementptr inbounds float, float* %1344, i64 %1349, !dbg !190
  %1351 = load float, float* %1350, align 4, !dbg !190
  %1352 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1353 = getelementptr inbounds [0 x i32], [0 x i32]* %1352, i64 0, i64 0, !dbg !190
  %1354 = load i32, i32* %1353, align 4, !dbg !190
  %1355 = load float, float* %1202, align 4, !dbg !190
  %1356 = load float, float* %1204, align 4, !dbg !190
  %1357 = mul nsw i32 %1335, %size299, !dbg !190
  %i1315 = add nsw i32 %1210, %1357, !dbg !190
  %1358 = sext i32 %i1315 to i64, !dbg !190
  %1359 = getelementptr inbounds float, float* %1344, i64 %1358, !dbg !190
  %1360 = load float, float* %1359, align 4, !dbg !190
  %1361 = mul nsw i32 %1354, %size299, !dbg !190
  %i1316 = add nsw i32 %i1315, %1361, !dbg !190
  %1362 = sext i32 %i1316 to i64, !dbg !190
  %1363 = getelementptr inbounds float, float* %1344, i64 %1362, !dbg !190
  %1364 = load float, float* %1363, align 4, !dbg !190
  %1365 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1366 = getelementptr inbounds [0 x i32], [0 x i32]* %1365, i64 0, i64 1, !dbg !190
  %1367 = load i32, i32* %1366, align 4, !dbg !190
  %1368 = load float, float* %1195, align 4, !dbg !190
  %1369 = load float, float* %1197, align 4, !dbg !190
  %1370 = getelementptr inbounds [0 x i32], [0 x i32]* %1365, i64 0, i64 0, !dbg !190
  %1371 = load i32, i32* %1370, align 4, !dbg !190
  %1372 = load float, float* %1202, align 4, !dbg !190
  %1373 = load float, float* %1204, align 4, !dbg !190
  %1374 = mul nsw i32 %1331, %size299, !dbg !190
  %i1317 = add nsw i32 %1210, %1374, !dbg !190
  %1375 = sext i32 %i1317 to i64, !dbg !190
  %1376 = getelementptr inbounds float, float* %1344, i64 %1375, !dbg !190
  %1377 = load float, float* %1376, align 4, !dbg !190
  %1378 = mul nsw i32 %1371, %size299, !dbg !190
  %i1318 = add nsw i32 %i1317, %1378, !dbg !190
  %1379 = sext i32 %i1318 to i64, !dbg !190
  %1380 = getelementptr inbounds float, float* %1344, i64 %1379, !dbg !190
  %1381 = load float, float* %1380, align 4, !dbg !190
  %1382 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1383 = getelementptr inbounds [0 x i32], [0 x i32]* %1382, i64 0, i64 0, !dbg !190
  %1384 = load i32, i32* %1383, align 4, !dbg !190
  %1385 = load float, float* %1202, align 4, !dbg !190
  %1386 = load float, float* %1204, align 4, !dbg !190
  %1387 = mul nsw i32 %1367, %size299, !dbg !190
  %i1319 = add nsw i32 %i1317, %1387, !dbg !190
  %1388 = sext i32 %i1319 to i64, !dbg !190
  %1389 = getelementptr inbounds float, float* %1344, i64 %1388, !dbg !190
  %1390 = load float, float* %1389, align 4, !dbg !190
  %1391 = mul nsw i32 %1384, %size299, !dbg !190
  %i1320 = add nsw i32 %i1319, %1391, !dbg !190
  %1392 = sext i32 %i1320 to i64, !dbg !190
  %1393 = getelementptr inbounds float, float* %1344, i64 %1392, !dbg !190
  %1394 = load float, float* %1393, align 4, !dbg !190
  %1395 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1396 = load i32, i32* %780, align 4, !dbg !190
  %1397 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1398 = getelementptr inbounds [0 x i32], [0 x i32]* %1397, i64 0, i64 2, !dbg !190
  %1399 = load i32, i32* %1398, align 4, !dbg !190
  %1400 = load float, float* %1188, align 4, !dbg !190
  %1401 = load float, float* %1190, align 4, !dbg !190
  %1402 = getelementptr inbounds [0 x i32], [0 x i32]* %1397, i64 0, i64 1, !dbg !190
  %1403 = load i32, i32* %1402, align 4, !dbg !190
  %1404 = load float, float* %1195, align 4, !dbg !190
  %1405 = load float, float* %1197, align 4, !dbg !190
  %1406 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1407 = getelementptr inbounds [0 x i32], [0 x i32]* %1406, i64 0, i64 0, !dbg !190
  %1408 = load i32, i32* %1407, align 4, !dbg !190
  %1409 = load float, float* %1202, align 4, !dbg !190
  %1410 = load float, float* %1204, align 4, !dbg !190
  %1411 = add nsw i32 %1396, 1, !dbg !190
  %1412 = sext i32 %1411 to i64, !dbg !190
  %1413 = getelementptr inbounds [0 x float], [0 x float]* %1395, i64 0, i64 %1412, !dbg !190
  %1414 = sext i32 %1210 to i64, !dbg !190
  %1415 = getelementptr inbounds float, float* %1413, i64 %1414, !dbg !190
  %1416 = load float, float* %1415, align 4, !dbg !190
  %1417 = mul nsw i32 %1408, %size299, !dbg !190
  %i1321 = add nsw i32 %1210, %1417, !dbg !190
  %1418 = sext i32 %i1321 to i64, !dbg !190
  %1419 = getelementptr inbounds float, float* %1413, i64 %1418, !dbg !190
  %1420 = load float, float* %1419, align 4, !dbg !190
  %1421 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1422 = getelementptr inbounds [0 x i32], [0 x i32]* %1421, i64 0, i64 0, !dbg !190
  %1423 = load i32, i32* %1422, align 4, !dbg !190
  %1424 = load float, float* %1202, align 4, !dbg !190
  %1425 = load float, float* %1204, align 4, !dbg !190
  %1426 = mul nsw i32 %1403, %size299, !dbg !190
  %i1322 = add nsw i32 %1210, %1426, !dbg !190
  %1427 = sext i32 %i1322 to i64, !dbg !190
  %1428 = getelementptr inbounds float, float* %1413, i64 %1427, !dbg !190
  %1429 = load float, float* %1428, align 4, !dbg !190
  %1430 = mul nsw i32 %1423, %size299, !dbg !190
  %i1323 = add nsw i32 %i1322, %1430, !dbg !190
  %1431 = sext i32 %i1323 to i64, !dbg !190
  %1432 = getelementptr inbounds float, float* %1413, i64 %1431, !dbg !190
  %1433 = load float, float* %1432, align 4, !dbg !190
  %1434 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1435 = getelementptr inbounds [0 x i32], [0 x i32]* %1434, i64 0, i64 1, !dbg !190
  %1436 = load i32, i32* %1435, align 4, !dbg !190
  %1437 = load float, float* %1195, align 4, !dbg !190
  %1438 = load float, float* %1197, align 4, !dbg !190
  %1439 = getelementptr inbounds [0 x i32], [0 x i32]* %1434, i64 0, i64 0, !dbg !190
  %1440 = load i32, i32* %1439, align 4, !dbg !190
  %1441 = load float, float* %1202, align 4, !dbg !190
  %1442 = load float, float* %1204, align 4, !dbg !190
  %1443 = mul nsw i32 %1399, %size299, !dbg !190
  %i1324 = add nsw i32 %1210, %1443, !dbg !190
  %1444 = sext i32 %i1324 to i64, !dbg !190
  %1445 = getelementptr inbounds float, float* %1413, i64 %1444, !dbg !190
  %1446 = load float, float* %1445, align 4, !dbg !190
  %1447 = mul nsw i32 %1440, %size299, !dbg !190
  %i1325 = add nsw i32 %i1324, %1447, !dbg !190
  %1448 = sext i32 %i1325 to i64, !dbg !190
  %1449 = getelementptr inbounds float, float* %1413, i64 %1448, !dbg !190
  %1450 = load float, float* %1449, align 4, !dbg !190
  %1451 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1452 = getelementptr inbounds [0 x i32], [0 x i32]* %1451, i64 0, i64 0, !dbg !190
  %1453 = load i32, i32* %1452, align 4, !dbg !190
  %1454 = load float, float* %1202, align 4, !dbg !190
  %1455 = load float, float* %1204, align 4, !dbg !190
  %1456 = mul nsw i32 %1436, %size299, !dbg !190
  %i1326 = add nsw i32 %i1324, %1456, !dbg !190
  %1457 = sext i32 %i1326 to i64, !dbg !190
  %1458 = getelementptr inbounds float, float* %1413, i64 %1457, !dbg !190
  %1459 = load float, float* %1458, align 4, !dbg !190
  %1460 = mul nsw i32 %1453, %size299, !dbg !190
  %i1327 = add nsw i32 %i1326, %1460, !dbg !190
  %1461 = sext i32 %i1327 to i64, !dbg !190
  %1462 = getelementptr inbounds float, float* %1413, i64 %1461, !dbg !190
  %1463 = load float, float* %1462, align 4, !dbg !190
  %1464 = load float, float* %1066, align 4, !dbg !190
  %1465 = load float, float* %1068, align 4, !dbg !190
  %1466 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 1, !dbg !190
  %1467 = fsub float %1175, %1180, !dbg !190
  %1468 = fsub float 1.000000e+00, %1467, !dbg !190
  %1469 = fsub float %1169, %1174, !dbg !190
  %1470 = fsub float 1.000000e+00, %1469, !dbg !190
  %1471 = fmul float %1213, %1203, !dbg !190
  %1472 = fmul float %1217, %1205, !dbg !190
  %1473 = fadd float %1471, %1472, !dbg !190
  %1474 = fmul float %1473, %1196, !dbg !190
  %1475 = fmul float %1226, %1221, !dbg !190
  %1476 = fmul float %1230, %1222, !dbg !190
  %1477 = fadd float %1475, %1476, !dbg !190
  %1478 = fmul float %1477, %1198, !dbg !190
  %1479 = fadd float %1474, %1478, !dbg !190
  %1480 = fmul float %1479, %1189, !dbg !190
  %1481 = fmul float %1243, %1238, !dbg !190
  %1482 = fmul float %1247, %1239, !dbg !190
  %1483 = fadd float %1481, %1482, !dbg !190
  %1484 = fmul float %1483, %1234, !dbg !190
  %1485 = fmul float %1256, %1251, !dbg !190
  %1486 = fmul float %1260, %1252, !dbg !190
  %1487 = fadd float %1485, %1486, !dbg !190
  %1488 = fmul float %1487, %1235, !dbg !190
  %1489 = fadd float %1484, %1488, !dbg !190
  %1490 = fmul float %1489, %1191, !dbg !190
  %1491 = fadd float %1480, %1490, !dbg !190
  %1492 = fmul float %1470, %1491, !dbg !190
  %1493 = fmul float %1279, %1274, !dbg !190
  %1494 = fmul float %1283, %1275, !dbg !190
  %1495 = fadd float %1493, %1494, !dbg !190
  %1496 = fmul float %1495, %1269, !dbg !190
  %1497 = fmul float %1292, %1287, !dbg !190
  %1498 = fmul float %1296, %1288, !dbg !190
  %1499 = fadd float %1497, %1498, !dbg !190
  %1500 = fmul float %1499, %1270, !dbg !190
  %1501 = fadd float %1496, %1500, !dbg !190
  %1502 = fmul float %1501, %1265, !dbg !190
  %1503 = fmul float %1309, %1304, !dbg !190
  %1504 = fmul float %1313, %1305, !dbg !190
  %1505 = fadd float %1503, %1504, !dbg !190
  %1506 = fmul float %1505, %1300, !dbg !190
  %1507 = fmul float %1322, %1317, !dbg !190
  %1508 = fmul float %1326, %1318, !dbg !190
  %1509 = fadd float %1507, %1508, !dbg !190
  %1510 = fmul float %1509, %1301, !dbg !190
  %1511 = fadd float %1506, %1510, !dbg !190
  %1512 = fmul float %1511, %1266, !dbg !190
  %1513 = fadd float %1502, %1512, !dbg !190
  %1514 = fmul float %1469, %1513, !dbg !190
  %1515 = fadd float %1492, %1514, !dbg !190
  %1516 = fmul float %1468, %1515, !dbg !190
  %1517 = fmul float %1347, %1341, !dbg !190
  %1518 = fmul float %1351, %1342, !dbg !190
  %1519 = fadd float %1517, %1518, !dbg !190
  %1520 = fmul float %1519, %1336, !dbg !190
  %1521 = fmul float %1360, %1355, !dbg !190
  %1522 = fmul float %1364, %1356, !dbg !190
  %1523 = fadd float %1521, %1522, !dbg !190
  %1524 = fmul float %1523, %1337, !dbg !190
  %1525 = fadd float %1520, %1524, !dbg !190
  %1526 = fmul float %1525, %1332, !dbg !190
  %1527 = fmul float %1377, %1372, !dbg !190
  %1528 = fmul float %1381, %1373, !dbg !190
  %1529 = fadd float %1527, %1528, !dbg !190
  %1530 = fmul float %1529, %1368, !dbg !190
  %1531 = fmul float %1390, %1385, !dbg !190
  %1532 = fmul float %1394, %1386, !dbg !190
  %1533 = fadd float %1531, %1532, !dbg !190
  %1534 = fmul float %1533, %1369, !dbg !190
  %1535 = fadd float %1530, %1534, !dbg !190
  %1536 = fmul float %1535, %1333, !dbg !190
  %1537 = fadd float %1526, %1536, !dbg !190
  %1538 = fmul float %1470, %1537, !dbg !190
  %1539 = fmul float %1416, %1409, !dbg !190
  %1540 = fmul float %1420, %1410, !dbg !190
  %1541 = fadd float %1539, %1540, !dbg !190
  %1542 = fmul float %1541, %1404, !dbg !190
  %1543 = fmul float %1429, %1424, !dbg !190
  %1544 = fmul float %1433, %1425, !dbg !190
  %1545 = fadd float %1543, %1544, !dbg !190
  %1546 = fmul float %1545, %1405, !dbg !190
  %1547 = fadd float %1542, %1546, !dbg !190
  %1548 = fmul float %1547, %1400, !dbg !190
  %1549 = fmul float %1446, %1441, !dbg !190
  %1550 = fmul float %1450, %1442, !dbg !190
  %1551 = fadd float %1549, %1550, !dbg !190
  %1552 = fmul float %1551, %1437, !dbg !190
  %1553 = fmul float %1459, %1454, !dbg !190
  %1554 = fmul float %1463, %1455, !dbg !190
  %1555 = fadd float %1553, %1554, !dbg !190
  %1556 = fmul float %1555, %1438, !dbg !190
  %1557 = fadd float %1552, %1556, !dbg !190
  %1558 = fmul float %1557, %1401, !dbg !190
  %1559 = fadd float %1548, %1558, !dbg !190
  %1560 = fmul float %1469, %1559, !dbg !190
  %1561 = fadd float %1538, %1560, !dbg !190
  %1562 = fmul float %1467, %1561, !dbg !190
  %1563 = fadd float %1516, %1562, !dbg !190
  %hprod328 = fmul float %1464, %1465, !dbg !190
  %1564 = fmul float %1563, %hprod328, !dbg !190
  store float %1564, float* %1466, align 4, !dbg !190
  %.elt466 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 0, !dbg !190
  %.unpack467 = load float, float* %.elt466, align 8, !dbg !190
  %.elt468 = getelementptr inbounds %3, %3* %sample_2185390, i64 0, i32 1, !dbg !190
  %.unpack469 = load float, float* %.elt468, align 4, !dbg !190
  %param_weight_2186377.repack = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 0, !dbg !190
  store float 0.000000e+00, float* %param_weight_2186377.repack, align 4, !dbg !190
  %param_weight_2186377.repack470 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 1, !dbg !190
  store float 0.000000e+00, float* %param_weight_2186377.repack470, align 4, !dbg !190
  %param_weight_2186377.repack471 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 2, !dbg !190
  store float 0.000000e+00, float* %param_weight_2186377.repack471, align 4, !dbg !190
  %param_weight_2186377.repack472 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 3, !dbg !190
  store float 0.000000e+00, float* %param_weight_2186377.repack472, align 4, !dbg !190
  %param_weight_2186377.repack473 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 4, !dbg !190
  store float 0.000000e+00, float* %param_weight_2186377.repack473, align 4, !dbg !190
  %param_weight_2186377.repack474 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 5, !dbg !190
  store float 0.000000e+00, float* %param_weight_2186377.repack474, align 4, !dbg !190
  store i32 0, i32* %slice_offset_2186485, align 4, !dbg !190
  store i32 0, i32* %dim_2186355, align 4, !dbg !190
  br label %expr_true121, !dbg !187

expr_false105:                                    ; preds = %continue
  %.elt475 = getelementptr inbounds %3, %3* %767, i64 0, i32 0, !dbg !188
  %.unpack476 = load float, float* %.elt475, align 4, !dbg !188
  %.elt479 = getelementptr inbounds %7, %7* %762, i64 0, i32 0, i32 0, !dbg !188
  %.unpack480 = load i32, i32* %.elt479, align 4, !dbg !188
  %1565 = fmul float %.unpack467, %.unpack476, !dbg !188
  %1566 = sitofp i32 %.unpack480 to float, !dbg !188
  %1567 = fadd float %1566, -2.000000e+00, !dbg !188
  %1568 = fcmp olt float %1565, %1567, !dbg !188
  %1569 = select i1 %1568, float %1565, float %1567, !dbg !188
  %1570 = call float @llvm.floor.f32(float %1569), !dbg !188
  %.elt481 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 0, i32 1, !dbg !188
  %.unpack482 = load i32, i32* %.elt481, align 4, !dbg !188
  %.elt477 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 4, i32 2, i32 1, !dbg !188
  %.unpack478 = load float, float* %.elt477, align 4, !dbg !188
  %1571 = fmul float %.unpack469, %.unpack478, !dbg !189
  %1572 = sitofp i32 %.unpack482 to float, !dbg !189
  %1573 = fadd float %1572, -2.000000e+00, !dbg !189
  %1574 = fcmp olt float %1571, %1573, !dbg !189
  %1575 = select i1 %1574, float %1571, float %1573, !dbg !189
  %1576 = call float @llvm.floor.f32(float %1575), !dbg !189
  %1577 = load i32, i32* %780, align 4, !dbg !190
  %1578 = load i32, i32* %782, align 4, !dbg !190
  %1579 = load i32, i32* %slice_offset_2186485, align 4, !dbg !190
  %1580 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1581 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1582 = getelementptr inbounds [0 x i32], [0 x i32]* %1581, i64 0, i64 2, !dbg !190
  %1583 = load i32, i32* %1582, align 4, !dbg !190
  %1584 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 4, !dbg !190
  %1585 = load float, float* %1584, align 4, !dbg !190
  %1586 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 5, !dbg !190
  %1587 = load float, float* %1586, align 4, !dbg !190
  %1588 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1589 = getelementptr inbounds [0 x i32], [0 x i32]* %1588, i64 0, i64 1, !dbg !190
  %1590 = load i32, i32* %1589, align 4, !dbg !190
  %1591 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 2, !dbg !190
  %1592 = load float, float* %1591, align 4, !dbg !190
  %1593 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 3, !dbg !190
  %1594 = load float, float* %1593, align 4, !dbg !190
  %1595 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1596 = getelementptr inbounds [0 x i32], [0 x i32]* %1595, i64 0, i64 0, !dbg !190
  %1597 = load i32, i32* %1596, align 4, !dbg !190
  %1598 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 0, !dbg !190
  %1599 = load float, float* %1598, align 4, !dbg !190
  %1600 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 1, !dbg !190
  %1601 = load float, float* %1600, align 4, !dbg !190
  %1602 = fptosi float %1570 to i32, !dbg !190
  %1603 = fptosi float %1576 to i32, !dbg !190
  %1604 = mul nsw i32 %1577, %1603, !dbg !190
  %index329 = add nsw i32 %1604, %1602, !dbg !190
  %size330 = mul nsw i32 %1577, %1578, !dbg !190
  %1605 = mul nsw i32 %1579, %size330, !dbg !190
  %1606 = add nsw i32 %index329, %1605, !dbg !190
  %1607 = sext i32 %1606 to i64, !dbg !190
  %1608 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1607, !dbg !190
  %1609 = load float, float* %1608, align 4, !dbg !190
  %1610 = mul nsw i32 %1597, %size330, !dbg !190
  %i1331 = add nsw i32 %1606, %1610, !dbg !190
  %1611 = sext i32 %i1331 to i64, !dbg !190
  %1612 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1611, !dbg !190
  %1613 = load float, float* %1612, align 4, !dbg !190
  %1614 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1615 = getelementptr inbounds [0 x i32], [0 x i32]* %1614, i64 0, i64 0, !dbg !190
  %1616 = load i32, i32* %1615, align 4, !dbg !190
  %1617 = load float, float* %1598, align 4, !dbg !190
  %1618 = load float, float* %1600, align 4, !dbg !190
  %1619 = mul nsw i32 %1590, %size330, !dbg !190
  %i1332 = add nsw i32 %1606, %1619, !dbg !190
  %1620 = sext i32 %i1332 to i64, !dbg !190
  %1621 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1620, !dbg !190
  %1622 = load float, float* %1621, align 4, !dbg !190
  %1623 = mul nsw i32 %1616, %size330, !dbg !190
  %i1333 = add nsw i32 %i1332, %1623, !dbg !190
  %1624 = sext i32 %i1333 to i64, !dbg !190
  %1625 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1624, !dbg !190
  %1626 = load float, float* %1625, align 4, !dbg !190
  %1627 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1628 = getelementptr inbounds [0 x i32], [0 x i32]* %1627, i64 0, i64 1, !dbg !190
  %1629 = load i32, i32* %1628, align 4, !dbg !190
  %1630 = load float, float* %1591, align 4, !dbg !190
  %1631 = load float, float* %1593, align 4, !dbg !190
  %1632 = getelementptr inbounds [0 x i32], [0 x i32]* %1627, i64 0, i64 0, !dbg !190
  %1633 = load i32, i32* %1632, align 4, !dbg !190
  %1634 = load float, float* %1598, align 4, !dbg !190
  %1635 = load float, float* %1600, align 4, !dbg !190
  %1636 = mul nsw i32 %1583, %size330, !dbg !190
  %i1334 = add nsw i32 %1606, %1636, !dbg !190
  %1637 = sext i32 %i1334 to i64, !dbg !190
  %1638 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1637, !dbg !190
  %1639 = load float, float* %1638, align 4, !dbg !190
  %1640 = mul nsw i32 %1633, %size330, !dbg !190
  %i1335 = add nsw i32 %i1334, %1640, !dbg !190
  %1641 = sext i32 %i1335 to i64, !dbg !190
  %1642 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1641, !dbg !190
  %1643 = load float, float* %1642, align 4, !dbg !190
  %1644 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1645 = getelementptr inbounds [0 x i32], [0 x i32]* %1644, i64 0, i64 0, !dbg !190
  %1646 = load i32, i32* %1645, align 4, !dbg !190
  %1647 = load float, float* %1598, align 4, !dbg !190
  %1648 = load float, float* %1600, align 4, !dbg !190
  %1649 = mul nsw i32 %1629, %size330, !dbg !190
  %i1336 = add nsw i32 %i1334, %1649, !dbg !190
  %1650 = sext i32 %i1336 to i64, !dbg !190
  %1651 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1650, !dbg !190
  %1652 = load float, float* %1651, align 4, !dbg !190
  %1653 = mul nsw i32 %1646, %size330, !dbg !190
  %i1337 = add nsw i32 %i1336, %1653, !dbg !190
  %1654 = sext i32 %i1337 to i64, !dbg !190
  %1655 = getelementptr inbounds [0 x float], [0 x float]* %1580, i64 0, i64 %1654, !dbg !190
  %1656 = load float, float* %1655, align 4, !dbg !190
  %1657 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1658 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1659 = getelementptr inbounds [0 x i32], [0 x i32]* %1658, i64 0, i64 2, !dbg !190
  %1660 = load i32, i32* %1659, align 4, !dbg !190
  %1661 = load float, float* %1584, align 4, !dbg !190
  %1662 = load float, float* %1586, align 4, !dbg !190
  %1663 = getelementptr inbounds [0 x i32], [0 x i32]* %1658, i64 0, i64 1, !dbg !190
  %1664 = load i32, i32* %1663, align 4, !dbg !190
  %1665 = load float, float* %1591, align 4, !dbg !190
  %1666 = load float, float* %1593, align 4, !dbg !190
  %1667 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1668 = getelementptr inbounds [0 x i32], [0 x i32]* %1667, i64 0, i64 0, !dbg !190
  %1669 = load i32, i32* %1668, align 4, !dbg !190
  %1670 = load float, float* %1598, align 4, !dbg !190
  %1671 = load float, float* %1600, align 4, !dbg !190
  %1672 = getelementptr inbounds [0 x float], [0 x float]* %1657, i64 0, i64 1, !dbg !190
  %1673 = sext i32 %1606 to i64, !dbg !190
  %1674 = getelementptr inbounds float, float* %1672, i64 %1673, !dbg !190
  %1675 = load float, float* %1674, align 4, !dbg !190
  %1676 = mul nsw i32 %1669, %size330, !dbg !190
  %i1338 = add nsw i32 %1606, %1676, !dbg !190
  %1677 = sext i32 %i1338 to i64, !dbg !190
  %1678 = getelementptr inbounds float, float* %1672, i64 %1677, !dbg !190
  %1679 = load float, float* %1678, align 4, !dbg !190
  %1680 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1681 = getelementptr inbounds [0 x i32], [0 x i32]* %1680, i64 0, i64 0, !dbg !190
  %1682 = load i32, i32* %1681, align 4, !dbg !190
  %1683 = load float, float* %1598, align 4, !dbg !190
  %1684 = load float, float* %1600, align 4, !dbg !190
  %1685 = mul nsw i32 %1664, %size330, !dbg !190
  %i1339 = add nsw i32 %1606, %1685, !dbg !190
  %1686 = sext i32 %i1339 to i64, !dbg !190
  %1687 = getelementptr inbounds float, float* %1672, i64 %1686, !dbg !190
  %1688 = load float, float* %1687, align 4, !dbg !190
  %1689 = mul nsw i32 %1682, %size330, !dbg !190
  %i1340 = add nsw i32 %i1339, %1689, !dbg !190
  %1690 = sext i32 %i1340 to i64, !dbg !190
  %1691 = getelementptr inbounds float, float* %1672, i64 %1690, !dbg !190
  %1692 = load float, float* %1691, align 4, !dbg !190
  %1693 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1694 = getelementptr inbounds [0 x i32], [0 x i32]* %1693, i64 0, i64 1, !dbg !190
  %1695 = load i32, i32* %1694, align 4, !dbg !190
  %1696 = load float, float* %1591, align 4, !dbg !190
  %1697 = load float, float* %1593, align 4, !dbg !190
  %1698 = getelementptr inbounds [0 x i32], [0 x i32]* %1693, i64 0, i64 0, !dbg !190
  %1699 = load i32, i32* %1698, align 4, !dbg !190
  %1700 = load float, float* %1598, align 4, !dbg !190
  %1701 = load float, float* %1600, align 4, !dbg !190
  %1702 = mul nsw i32 %1660, %size330, !dbg !190
  %i1341 = add nsw i32 %1606, %1702, !dbg !190
  %1703 = sext i32 %i1341 to i64, !dbg !190
  %1704 = getelementptr inbounds float, float* %1672, i64 %1703, !dbg !190
  %1705 = load float, float* %1704, align 4, !dbg !190
  %1706 = mul nsw i32 %1699, %size330, !dbg !190
  %i1342 = add nsw i32 %i1341, %1706, !dbg !190
  %1707 = sext i32 %i1342 to i64, !dbg !190
  %1708 = getelementptr inbounds float, float* %1672, i64 %1707, !dbg !190
  %1709 = load float, float* %1708, align 4, !dbg !190
  %1710 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1711 = getelementptr inbounds [0 x i32], [0 x i32]* %1710, i64 0, i64 0, !dbg !190
  %1712 = load i32, i32* %1711, align 4, !dbg !190
  %1713 = load float, float* %1598, align 4, !dbg !190
  %1714 = load float, float* %1600, align 4, !dbg !190
  %1715 = mul nsw i32 %1695, %size330, !dbg !190
  %i1343 = add nsw i32 %i1341, %1715, !dbg !190
  %1716 = sext i32 %i1343 to i64, !dbg !190
  %1717 = getelementptr inbounds float, float* %1672, i64 %1716, !dbg !190
  %1718 = load float, float* %1717, align 4, !dbg !190
  %1719 = mul nsw i32 %1712, %size330, !dbg !190
  %i1344 = add nsw i32 %i1343, %1719, !dbg !190
  %1720 = sext i32 %i1344 to i64, !dbg !190
  %1721 = getelementptr inbounds float, float* %1672, i64 %1720, !dbg !190
  %1722 = load float, float* %1721, align 4, !dbg !190
  %1723 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1724 = load i32, i32* %780, align 4, !dbg !190
  %1725 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1726 = getelementptr inbounds [0 x i32], [0 x i32]* %1725, i64 0, i64 2, !dbg !190
  %1727 = load i32, i32* %1726, align 4, !dbg !190
  %1728 = load float, float* %1584, align 4, !dbg !190
  %1729 = load float, float* %1586, align 4, !dbg !190
  %1730 = getelementptr inbounds [0 x i32], [0 x i32]* %1725, i64 0, i64 1, !dbg !190
  %1731 = load i32, i32* %1730, align 4, !dbg !190
  %1732 = load float, float* %1591, align 4, !dbg !190
  %1733 = load float, float* %1593, align 4, !dbg !190
  %1734 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1735 = getelementptr inbounds [0 x i32], [0 x i32]* %1734, i64 0, i64 0, !dbg !190
  %1736 = load i32, i32* %1735, align 4, !dbg !190
  %1737 = load float, float* %1598, align 4, !dbg !190
  %1738 = load float, float* %1600, align 4, !dbg !190
  %1739 = sext i32 %1724 to i64, !dbg !190
  %1740 = getelementptr inbounds [0 x float], [0 x float]* %1723, i64 0, i64 %1739, !dbg !190
  %1741 = sext i32 %1606 to i64, !dbg !190
  %1742 = getelementptr inbounds float, float* %1740, i64 %1741, !dbg !190
  %1743 = load float, float* %1742, align 4, !dbg !190
  %1744 = mul nsw i32 %1736, %size330, !dbg !190
  %i1345 = add nsw i32 %1606, %1744, !dbg !190
  %1745 = sext i32 %i1345 to i64, !dbg !190
  %1746 = getelementptr inbounds float, float* %1740, i64 %1745, !dbg !190
  %1747 = load float, float* %1746, align 4, !dbg !190
  %1748 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1749 = getelementptr inbounds [0 x i32], [0 x i32]* %1748, i64 0, i64 0, !dbg !190
  %1750 = load i32, i32* %1749, align 4, !dbg !190
  %1751 = load float, float* %1598, align 4, !dbg !190
  %1752 = load float, float* %1600, align 4, !dbg !190
  %1753 = mul nsw i32 %1731, %size330, !dbg !190
  %i1346 = add nsw i32 %1606, %1753, !dbg !190
  %1754 = sext i32 %i1346 to i64, !dbg !190
  %1755 = getelementptr inbounds float, float* %1740, i64 %1754, !dbg !190
  %1756 = load float, float* %1755, align 4, !dbg !190
  %1757 = mul nsw i32 %1750, %size330, !dbg !190
  %i1347 = add nsw i32 %i1346, %1757, !dbg !190
  %1758 = sext i32 %i1347 to i64, !dbg !190
  %1759 = getelementptr inbounds float, float* %1740, i64 %1758, !dbg !190
  %1760 = load float, float* %1759, align 4, !dbg !190
  %1761 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1762 = getelementptr inbounds [0 x i32], [0 x i32]* %1761, i64 0, i64 1, !dbg !190
  %1763 = load i32, i32* %1762, align 4, !dbg !190
  %1764 = load float, float* %1591, align 4, !dbg !190
  %1765 = load float, float* %1593, align 4, !dbg !190
  %1766 = getelementptr inbounds [0 x i32], [0 x i32]* %1761, i64 0, i64 0, !dbg !190
  %1767 = load i32, i32* %1766, align 4, !dbg !190
  %1768 = load float, float* %1598, align 4, !dbg !190
  %1769 = load float, float* %1600, align 4, !dbg !190
  %1770 = mul nsw i32 %1727, %size330, !dbg !190
  %i1348 = add nsw i32 %1606, %1770, !dbg !190
  %1771 = sext i32 %i1348 to i64, !dbg !190
  %1772 = getelementptr inbounds float, float* %1740, i64 %1771, !dbg !190
  %1773 = load float, float* %1772, align 4, !dbg !190
  %1774 = mul nsw i32 %1767, %size330, !dbg !190
  %i1349 = add nsw i32 %i1348, %1774, !dbg !190
  %1775 = sext i32 %i1349 to i64, !dbg !190
  %1776 = getelementptr inbounds float, float* %1740, i64 %1775, !dbg !190
  %1777 = load float, float* %1776, align 4, !dbg !190
  %1778 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1779 = getelementptr inbounds [0 x i32], [0 x i32]* %1778, i64 0, i64 0, !dbg !190
  %1780 = load i32, i32* %1779, align 4, !dbg !190
  %1781 = load float, float* %1598, align 4, !dbg !190
  %1782 = load float, float* %1600, align 4, !dbg !190
  %1783 = mul nsw i32 %1763, %size330, !dbg !190
  %i1350 = add nsw i32 %i1348, %1783, !dbg !190
  %1784 = sext i32 %i1350 to i64, !dbg !190
  %1785 = getelementptr inbounds float, float* %1740, i64 %1784, !dbg !190
  %1786 = load float, float* %1785, align 4, !dbg !190
  %1787 = mul nsw i32 %1780, %size330, !dbg !190
  %i1351 = add nsw i32 %i1350, %1787, !dbg !190
  %1788 = sext i32 %i1351 to i64, !dbg !190
  %1789 = getelementptr inbounds float, float* %1740, i64 %1788, !dbg !190
  %1790 = load float, float* %1789, align 4, !dbg !190
  %1791 = load [0 x float]*, [0 x float]** %785, align 8, !dbg !190
  %1792 = load i32, i32* %780, align 4, !dbg !190
  %1793 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1794 = getelementptr inbounds [0 x i32], [0 x i32]* %1793, i64 0, i64 2, !dbg !190
  %1795 = load i32, i32* %1794, align 4, !dbg !190
  %1796 = load float, float* %1584, align 4, !dbg !190
  %1797 = load float, float* %1586, align 4, !dbg !190
  %1798 = getelementptr inbounds [0 x i32], [0 x i32]* %1793, i64 0, i64 1, !dbg !190
  %1799 = load i32, i32* %1798, align 4, !dbg !190
  %1800 = load float, float* %1591, align 4, !dbg !190
  %1801 = load float, float* %1593, align 4, !dbg !190
  %1802 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1803 = getelementptr inbounds [0 x i32], [0 x i32]* %1802, i64 0, i64 0, !dbg !190
  %1804 = load i32, i32* %1803, align 4, !dbg !190
  %1805 = load float, float* %1598, align 4, !dbg !190
  %1806 = load float, float* %1600, align 4, !dbg !190
  %1807 = add nsw i32 %1792, 1, !dbg !190
  %1808 = sext i32 %1807 to i64, !dbg !190
  %1809 = getelementptr inbounds [0 x float], [0 x float]* %1791, i64 0, i64 %1808, !dbg !190
  %1810 = sext i32 %1606 to i64, !dbg !190
  %1811 = getelementptr inbounds float, float* %1809, i64 %1810, !dbg !190
  %1812 = load float, float* %1811, align 4, !dbg !190
  %1813 = mul nsw i32 %1804, %size330, !dbg !190
  %i1352 = add nsw i32 %1606, %1813, !dbg !190
  %1814 = sext i32 %i1352 to i64, !dbg !190
  %1815 = getelementptr inbounds float, float* %1809, i64 %1814, !dbg !190
  %1816 = load float, float* %1815, align 4, !dbg !190
  %1817 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1818 = getelementptr inbounds [0 x i32], [0 x i32]* %1817, i64 0, i64 0, !dbg !190
  %1819 = load i32, i32* %1818, align 4, !dbg !190
  %1820 = load float, float* %1598, align 4, !dbg !190
  %1821 = load float, float* %1600, align 4, !dbg !190
  %1822 = mul nsw i32 %1799, %size330, !dbg !190
  %i1353 = add nsw i32 %1606, %1822, !dbg !190
  %1823 = sext i32 %i1353 to i64, !dbg !190
  %1824 = getelementptr inbounds float, float* %1809, i64 %1823, !dbg !190
  %1825 = load float, float* %1824, align 4, !dbg !190
  %1826 = mul nsw i32 %1819, %size330, !dbg !190
  %i1354 = add nsw i32 %i1353, %1826, !dbg !190
  %1827 = sext i32 %i1354 to i64, !dbg !190
  %1828 = getelementptr inbounds float, float* %1809, i64 %1827, !dbg !190
  %1829 = load float, float* %1828, align 4, !dbg !190
  %1830 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1831 = getelementptr inbounds [0 x i32], [0 x i32]* %1830, i64 0, i64 1, !dbg !190
  %1832 = load i32, i32* %1831, align 4, !dbg !190
  %1833 = load float, float* %1591, align 4, !dbg !190
  %1834 = load float, float* %1593, align 4, !dbg !190
  %1835 = getelementptr inbounds [0 x i32], [0 x i32]* %1830, i64 0, i64 0, !dbg !190
  %1836 = load i32, i32* %1835, align 4, !dbg !190
  %1837 = load float, float* %1598, align 4, !dbg !190
  %1838 = load float, float* %1600, align 4, !dbg !190
  %1839 = mul nsw i32 %1795, %size330, !dbg !190
  %i1355 = add nsw i32 %1606, %1839, !dbg !190
  %1840 = sext i32 %i1355 to i64, !dbg !190
  %1841 = getelementptr inbounds float, float* %1809, i64 %1840, !dbg !190
  %1842 = load float, float* %1841, align 4, !dbg !190
  %1843 = mul nsw i32 %1836, %size330, !dbg !190
  %i1356 = add nsw i32 %i1355, %1843, !dbg !190
  %1844 = sext i32 %i1356 to i64, !dbg !190
  %1845 = getelementptr inbounds float, float* %1809, i64 %1844, !dbg !190
  %1846 = load float, float* %1845, align 4, !dbg !190
  %1847 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !190
  %1848 = getelementptr inbounds [0 x i32], [0 x i32]* %1847, i64 0, i64 0, !dbg !190
  %1849 = load i32, i32* %1848, align 4, !dbg !190
  %1850 = load float, float* %1598, align 4, !dbg !190
  %1851 = load float, float* %1600, align 4, !dbg !190
  %1852 = mul nsw i32 %1832, %size330, !dbg !190
  %i1357 = add nsw i32 %i1355, %1852, !dbg !190
  %1853 = sext i32 %i1357 to i64, !dbg !190
  %1854 = getelementptr inbounds float, float* %1809, i64 %1853, !dbg !190
  %1855 = load float, float* %1854, align 4, !dbg !190
  %1856 = mul nsw i32 %1849, %size330, !dbg !190
  %i1358 = add nsw i32 %i1357, %1856, !dbg !190
  %1857 = sext i32 %i1358 to i64, !dbg !190
  %1858 = getelementptr inbounds float, float* %1809, i64 %1857, !dbg !190
  %1859 = load float, float* %1858, align 4, !dbg !190
  %1860 = load float, float* %1066, align 4, !dbg !190
  %1861 = load float, float* %1068, align 4, !dbg !190
  %1862 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 2, !dbg !190
  %1863 = fsub float %1571, %1576, !dbg !190
  %1864 = fsub float 1.000000e+00, %1863, !dbg !190
  %1865 = fsub float %1565, %1570, !dbg !190
  %1866 = fsub float 1.000000e+00, %1865, !dbg !190
  %1867 = fmul float %1609, %1599, !dbg !190
  %1868 = fmul float %1613, %1601, !dbg !190
  %1869 = fadd float %1867, %1868, !dbg !190
  %1870 = fmul float %1869, %1592, !dbg !190
  %1871 = fmul float %1622, %1617, !dbg !190
  %1872 = fmul float %1626, %1618, !dbg !190
  %1873 = fadd float %1871, %1872, !dbg !190
  %1874 = fmul float %1873, %1594, !dbg !190
  %1875 = fadd float %1870, %1874, !dbg !190
  %1876 = fmul float %1875, %1585, !dbg !190
  %1877 = fmul float %1639, %1634, !dbg !190
  %1878 = fmul float %1643, %1635, !dbg !190
  %1879 = fadd float %1877, %1878, !dbg !190
  %1880 = fmul float %1879, %1630, !dbg !190
  %1881 = fmul float %1652, %1647, !dbg !190
  %1882 = fmul float %1656, %1648, !dbg !190
  %1883 = fadd float %1881, %1882, !dbg !190
  %1884 = fmul float %1883, %1631, !dbg !190
  %1885 = fadd float %1880, %1884, !dbg !190
  %1886 = fmul float %1885, %1587, !dbg !190
  %1887 = fadd float %1876, %1886, !dbg !190
  %1888 = fmul float %1866, %1887, !dbg !190
  %1889 = fmul float %1675, %1670, !dbg !190
  %1890 = fmul float %1679, %1671, !dbg !190
  %1891 = fadd float %1889, %1890, !dbg !190
  %1892 = fmul float %1891, %1665, !dbg !190
  %1893 = fmul float %1688, %1683, !dbg !190
  %1894 = fmul float %1692, %1684, !dbg !190
  %1895 = fadd float %1893, %1894, !dbg !190
  %1896 = fmul float %1895, %1666, !dbg !190
  %1897 = fadd float %1892, %1896, !dbg !190
  %1898 = fmul float %1897, %1661, !dbg !190
  %1899 = fmul float %1705, %1700, !dbg !190
  %1900 = fmul float %1709, %1701, !dbg !190
  %1901 = fadd float %1899, %1900, !dbg !190
  %1902 = fmul float %1901, %1696, !dbg !190
  %1903 = fmul float %1718, %1713, !dbg !190
  %1904 = fmul float %1722, %1714, !dbg !190
  %1905 = fadd float %1903, %1904, !dbg !190
  %1906 = fmul float %1905, %1697, !dbg !190
  %1907 = fadd float %1902, %1906, !dbg !190
  %1908 = fmul float %1907, %1662, !dbg !190
  %1909 = fadd float %1898, %1908, !dbg !190
  %1910 = fmul float %1865, %1909, !dbg !190
  %1911 = fadd float %1888, %1910, !dbg !190
  %1912 = fmul float %1864, %1911, !dbg !190
  %1913 = fmul float %1743, %1737, !dbg !190
  %1914 = fmul float %1747, %1738, !dbg !190
  %1915 = fadd float %1913, %1914, !dbg !190
  %1916 = fmul float %1915, %1732, !dbg !190
  %1917 = fmul float %1756, %1751, !dbg !190
  %1918 = fmul float %1760, %1752, !dbg !190
  %1919 = fadd float %1917, %1918, !dbg !190
  %1920 = fmul float %1919, %1733, !dbg !190
  %1921 = fadd float %1916, %1920, !dbg !190
  %1922 = fmul float %1921, %1728, !dbg !190
  %1923 = fmul float %1773, %1768, !dbg !190
  %1924 = fmul float %1777, %1769, !dbg !190
  %1925 = fadd float %1923, %1924, !dbg !190
  %1926 = fmul float %1925, %1764, !dbg !190
  %1927 = fmul float %1786, %1781, !dbg !190
  %1928 = fmul float %1790, %1782, !dbg !190
  %1929 = fadd float %1927, %1928, !dbg !190
  %1930 = fmul float %1929, %1765, !dbg !190
  %1931 = fadd float %1926, %1930, !dbg !190
  %1932 = fmul float %1931, %1729, !dbg !190
  %1933 = fadd float %1922, %1932, !dbg !190
  %1934 = fmul float %1866, %1933, !dbg !190
  %1935 = fmul float %1812, %1805, !dbg !190
  %1936 = fmul float %1816, %1806, !dbg !190
  %1937 = fadd float %1935, %1936, !dbg !190
  %1938 = fmul float %1937, %1800, !dbg !190
  %1939 = fmul float %1825, %1820, !dbg !190
  %1940 = fmul float %1829, %1821, !dbg !190
  %1941 = fadd float %1939, %1940, !dbg !190
  %1942 = fmul float %1941, %1801, !dbg !190
  %1943 = fadd float %1938, %1942, !dbg !190
  %1944 = fmul float %1943, %1796, !dbg !190
  %1945 = fmul float %1842, %1837, !dbg !190
  %1946 = fmul float %1846, %1838, !dbg !190
  %1947 = fadd float %1945, %1946, !dbg !190
  %1948 = fmul float %1947, %1833, !dbg !190
  %1949 = fmul float %1855, %1850, !dbg !190
  %1950 = fmul float %1859, %1851, !dbg !190
  %1951 = fadd float %1949, %1950, !dbg !190
  %1952 = fmul float %1951, %1834, !dbg !190
  %1953 = fadd float %1948, %1952, !dbg !190
  %1954 = fmul float %1953, %1797, !dbg !190
  %1955 = fadd float %1944, %1954, !dbg !190
  %1956 = fmul float %1865, %1955, !dbg !190
  %1957 = fadd float %1934, %1956, !dbg !190
  %1958 = fmul float %1863, %1957, !dbg !190
  %1959 = fadd float %1912, %1958, !dbg !190
  %hprod359 = fmul float %1860, %1861, !dbg !190
  %1960 = fmul float %1959, %hprod359, !dbg !190
  store float %1960, float* %1862, align 8, !dbg !190
  %1961 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 0, i32 2, !dbg !190
  %.elt483 = getelementptr inbounds %3, %3* %1961, i64 0, i32 0, !dbg !190
  %.unpack484 = load float, float* %.elt483, align 4, !dbg !190
  %.elt487 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 0, i32 0, i32 0, !dbg !190
  %.unpack488 = load i32, i32* %.elt487, align 4, !dbg !190
  %1962 = fmul float %746, %.unpack484, !dbg !190
  %1963 = sitofp i32 %.unpack488 to float, !dbg !190
  %1964 = fadd float %1963, -2.000000e+00, !dbg !190
  %1965 = fcmp olt float %1962, %1964, !dbg !190
  %1966 = select i1 %1965, float %1962, float %1964, !dbg !190
  %1967 = call float @llvm.floor.f32(float %1966), !dbg !190
  %.elt489 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 0, i32 0, i32 1, !dbg !190
  %.unpack490 = load i32, i32* %.elt489, align 4, !dbg !190
  %.elt485 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 0, i32 2, i32 1, !dbg !190
  %.unpack486 = load float, float* %.elt485, align 4, !dbg !190
  %1968 = fmul float %734, %.unpack486, !dbg !189
  %1969 = sitofp i32 %.unpack490 to float, !dbg !189
  %1970 = fadd float %1969, -2.000000e+00, !dbg !189
  %1971 = fcmp olt float %1968, %1970, !dbg !189
  %1972 = select i1 %1971, float %1968, float %1970, !dbg !189
  %1973 = call float @llvm.floor.f32(float %1972), !dbg !189
  %1974 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 0, i32 0, i32 0, !dbg !190
  %1975 = load i32, i32* %1974, align 4, !dbg !190
  %1976 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 0, i32 7, !dbg !190
  %1977 = load [0 x float]*, [0 x float]** %1976, align 8, !dbg !190
  %1978 = fptosi float %1967 to i32, !dbg !190
  %1979 = fptosi float %1973 to i32, !dbg !190
  %1980 = mul nsw i32 %1975, %1979, !dbg !190
  %index360 = add nsw i32 %1980, %1978, !dbg !190
  %1981 = sext i32 %index360 to i64, !dbg !190
  %1982 = getelementptr inbounds [0 x float], [0 x float]* %1977, i64 0, i64 %1981, !dbg !190
  %1983 = load float, float* %1982, align 4, !dbg !190
  %1984 = load [0 x float]*, [0 x float]** %1976, align 8, !dbg !190
  %1985 = getelementptr inbounds [0 x float], [0 x float]* %1984, i64 0, i64 1, !dbg !190
  %1986 = sext i32 %index360 to i64, !dbg !190
  %1987 = getelementptr inbounds float, float* %1985, i64 %1986, !dbg !190
  %1988 = load float, float* %1987, align 4, !dbg !190
  %1989 = load i32, i32* %1974, align 4, !dbg !190
  %1990 = sext i32 %1989 to i64, !dbg !190
  %1991 = getelementptr inbounds [0 x float], [0 x float]* %1984, i64 0, i64 %1990, !dbg !190
  %1992 = sext i32 %index360 to i64, !dbg !190
  %1993 = getelementptr inbounds float, float* %1991, i64 %1992, !dbg !190
  %1994 = load float, float* %1993, align 4, !dbg !190
  %1995 = load [0 x float]*, [0 x float]** %1976, align 8, !dbg !190
  %1996 = load i32, i32* %1974, align 4, !dbg !190
  %1997 = add nsw i32 %1996, 1, !dbg !190
  %1998 = sext i32 %1997 to i64, !dbg !190
  %1999 = getelementptr inbounds [0 x float], [0 x float]* %1995, i64 0, i64 %1998, !dbg !190
  %2000 = sext i32 %index360 to i64, !dbg !190
  %2001 = getelementptr inbounds float, float* %1999, i64 %2000, !dbg !190
  %2002 = load float, float* %2001, align 4, !dbg !190
  %2003 = getelementptr inbounds %3, %3* %1961, i64 0, i32 0, !dbg !190
  %2004 = load float, float* %2003, align 4, !dbg !190
  %2005 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 0, i32 2, i32 1, !dbg !190
  %2006 = load float, float* %2005, align 4, !dbg !190
  %2007 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 1, !dbg !190
  %2008 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 1, i32 2, !dbg !190
  %.elt491 = getelementptr inbounds %3, %3* %2008, i64 0, i32 0, !dbg !190
  %.unpack492 = load float, float* %.elt491, align 4, !dbg !190
  %.elt495 = getelementptr inbounds %7, %7* %2007, i64 0, i32 0, i32 0, !dbg !190
  %.unpack496 = load i32, i32* %.elt495, align 4, !dbg !190
  %2009 = fmul float %13, %.unpack492, !dbg !190
  %2010 = sitofp i32 %.unpack496 to float, !dbg !190
  %2011 = fadd float %2010, -2.000000e+00, !dbg !190
  %2012 = fcmp olt float %2009, %2011, !dbg !190
  %2013 = select i1 %2012, float %2009, float %2011, !dbg !190
  %2014 = call float @llvm.floor.f32(float %2013), !dbg !190
  %.elt497 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 1, i32 0, i32 1, !dbg !190
  %.unpack498 = load i32, i32* %.elt497, align 4, !dbg !190
  %.elt493 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 1, i32 2, i32 1, !dbg !190
  %.unpack494 = load float, float* %.elt493, align 4, !dbg !190
  %2015 = fadd float %10, 0x400921FB60000000, !dbg !189
  %2016 = fdiv float %2015, 0x401921FB60000000, !dbg !189
  %2017 = fmul float %2016, %.unpack494, !dbg !189
  %2018 = sitofp i32 %.unpack498 to float, !dbg !189
  %2019 = fadd float %2018, -2.000000e+00, !dbg !189
  %2020 = fcmp olt float %2017, %2019, !dbg !189
  %2021 = select i1 %2020, float %2017, float %2019, !dbg !189
  %2022 = call float @llvm.floor.f32(float %2021), !dbg !189
  %2023 = fmul float %746, 0x4033BD3CE0000000, !dbg !190
  %2024 = fmul float %2023, %749, !dbg !190
  %2025 = fcmp ogt float %2024, 0x3EB0C6F7A0000000, !dbg !190
  %2026 = getelementptr inbounds %7, %7* %2007, i64 0, i32 0, i32 0, !dbg !190
  %2027 = load i32, i32* %2026, align 4, !dbg !190
  %2028 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 1, i32 7, !dbg !190
  %2029 = load [0 x float]*, [0 x float]** %2028, align 8, !dbg !190
  %2030 = fptosi float %2014 to i32, !dbg !190
  %2031 = fptosi float %2022 to i32, !dbg !190
  %2032 = mul nsw i32 %2027, %2031, !dbg !190
  %index361 = add nsw i32 %2032, %2030, !dbg !190
  %2033 = sext i32 %index361 to i64, !dbg !190
  %2034 = getelementptr inbounds [0 x float], [0 x float]* %2029, i64 0, i64 %2033, !dbg !190
  %2035 = load float, float* %2034, align 4, !dbg !190
  %2036 = load [0 x float]*, [0 x float]** %2028, align 8, !dbg !190
  %2037 = getelementptr inbounds [0 x float], [0 x float]* %2036, i64 0, i64 1, !dbg !190
  %2038 = sext i32 %index361 to i64, !dbg !190
  %2039 = getelementptr inbounds float, float* %2037, i64 %2038, !dbg !190
  %2040 = load float, float* %2039, align 4, !dbg !190
  %2041 = load i32, i32* %2026, align 4, !dbg !190
  %2042 = sext i32 %2041 to i64, !dbg !190
  %2043 = getelementptr inbounds [0 x float], [0 x float]* %2036, i64 0, i64 %2042, !dbg !190
  %2044 = sext i32 %index361 to i64, !dbg !190
  %2045 = getelementptr inbounds float, float* %2043, i64 %2044, !dbg !190
  %2046 = load float, float* %2045, align 4, !dbg !190
  %2047 = load [0 x float]*, [0 x float]** %2028, align 8, !dbg !190
  %2048 = load i32, i32* %2026, align 4, !dbg !190
  %2049 = add nsw i32 %2048, 1, !dbg !190
  %2050 = sext i32 %2049 to i64, !dbg !190
  %2051 = getelementptr inbounds [0 x float], [0 x float]* %2047, i64 0, i64 %2050, !dbg !190
  %2052 = sext i32 %index361 to i64, !dbg !190
  %2053 = getelementptr inbounds float, float* %2051, i64 %2052, !dbg !190
  %2054 = load float, float* %2053, align 4, !dbg !190
  %2055 = getelementptr inbounds %3, %3* %2008, i64 0, i32 0, !dbg !190
  %2056 = load float, float* %2055, align 4, !dbg !190
  %2057 = getelementptr inbounds %6, %6* %sampler_2182957, i64 0, i32 1, i32 2, i32 1, !dbg !190
  %2058 = load float, float* %2057, align 4, !dbg !190
  %.elt499 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 0, !dbg !190
  %.unpack500 = load float, float* %.elt499, align 8, !dbg !190
  %.elt501 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 1, !dbg !190
  %.unpack502 = load float, float* %.elt501, align 4, !dbg !190
  %.elt503 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 2, !dbg !190
  %.unpack504 = load float, float* %.elt503, align 8, !dbg !190
  %2059 = fsub float %1968, %1973, !dbg !190
  %2060 = fsub float 1.000000e+00, %2059, !dbg !190
  %2061 = fsub float %1962, %1967, !dbg !190
  %2062 = fsub float 1.000000e+00, %2061, !dbg !190
  %2063 = fmul float %2062, %1983, !dbg !190
  %2064 = fmul float %2061, %1988, !dbg !190
  %2065 = fadd float %2063, %2064, !dbg !190
  %2066 = fmul float %2060, %2065, !dbg !190
  %2067 = fmul float %2062, %1994, !dbg !190
  %2068 = fmul float %2061, %2002, !dbg !190
  %2069 = fadd float %2067, %2068, !dbg !190
  %2070 = fmul float %2059, %2069, !dbg !190
  %2071 = fadd float %2066, %2070, !dbg !190
  %hprod362 = fmul float %2004, %2006, !dbg !190
  %2072 = fmul float %2071, %hprod362, !dbg !190
  %2073 = fsub float %2017, %2022, !dbg !190
  %2074 = fsub float 1.000000e+00, %2073, !dbg !190
  %2075 = fsub float %2009, %2014, !dbg !190
  %2076 = fsub float 1.000000e+00, %2075, !dbg !190
  %2077 = fmul float %2076, %2035, !dbg !190
  %2078 = fmul float %2075, %2040, !dbg !190
  %2079 = fadd float %2077, %2078, !dbg !190
  %2080 = fmul float %2074, %2079, !dbg !190
  %2081 = fmul float %2076, %2046, !dbg !190
  %2082 = fmul float %2075, %2054, !dbg !190
  %2083 = fadd float %2081, %2082, !dbg !190
  %2084 = fmul float %2073, %2083, !dbg !190
  %2085 = fadd float %2080, %2084, !dbg !190
  %hprod363 = fmul float %2056, %2058, !dbg !190
  %2086 = fmul float %2085, %hprod363, !dbg !190
  %2087 = fmul float %2086, 4.000000e+00, !dbg !190
  %2088 = fdiv float %2072, %2087, !dbg !190
  %2089 = fmul float %.unpack500, %2088, !dbg !190
  %2090 = fmul float %.unpack502, %2088, !dbg !190
  %2091 = fmul float %.unpack504, %2088, !dbg !190
  %fr_2185388.repack505 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 0, !dbg !190
  store float %2089, float* %fr_2185388.repack505, align 8, !dbg !190
  %fr_2185388.repack507 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 1, !dbg !190
  store float %2090, float* %fr_2185388.repack507, align 4, !dbg !190
  %fr_2185388.repack509 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 2, !dbg !190
  store float %2091, float* %fr_2185388.repack509, align 8, !dbg !190
  %phi.bo = fmul float %2024, 4.000000e+00, !dbg !190
  %maxf_cont120 = select i1 %2025, float %phi.bo, float 0x3ED0C6F7A0000000, !dbg !190
  %.elt511 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 0, !dbg !191
  %.unpack512 = load float, float* %.elt511, align 8, !dbg !191
  %.elt513 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 1, !dbg !191
  %.unpack514 = load float, float* %.elt513, align 4, !dbg !191
  %.elt515 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 2, !dbg !191
  %.unpack516 = load float, float* %.elt515, align 8, !dbg !191
  %2092 = fsub float 1.000000e+00, %727, !dbg !191
  %2093 = fmul float %2092, %685, !dbg !191
  %2094 = fmul float %727, %709, !dbg !191
  %2095 = fadd float %2093, %2094, !dbg !191
  %2096 = fmul float %729, %731, !dbg !191
  %2097 = fmul float %2095, %2096, !dbg !191
  %2098 = fsub float 1.000000e+00, %365, !dbg !191
  %2099 = fmul float %2098, %323, !dbg !191
  %2100 = fmul float %365, %347, !dbg !191
  %2101 = fadd float %2099, %2100, !dbg !191
  %2102 = fmul float %367, %369, !dbg !191
  %2103 = fmul float %2101, %2102, !dbg !191
  %2104 = fmul float %2097, %2103, !dbg !191
  %2105 = fmul float %.unpack373, %751, !dbg !191
  %2106 = fmul float %.unpack375, %753, !dbg !191
  %2107 = fadd float %2105, %2106, !dbg !191
  %2108 = fmul float %.unpack377, %750, !dbg !191
  %2109 = fadd float %2107, %2108, !dbg !191
  %jacobian = fmul float %maxf_cont120, %2109, !dbg !191
  %pdf = fdiv float %2104, %jacobian, !dbg !191
  %2110 = fdiv float 1.000000e+00, %pdf, !dbg !191
  %2111 = fmul float %.unpack512, %2110, !dbg !191
  %2112 = insertvalue %2 undef, float %2111, 0, !dbg !191
  %2113 = fmul float %.unpack514, %2110, !dbg !191
  %2114 = insertvalue %2 %2112, float %2113, 1, !dbg !191
  %2115 = fmul float %.unpack516, %2110, !dbg !191
  %2116 = insertvalue %2 %2114, float %2115, 2, !dbg !191
  %fr_2185388.repack517 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 0, !dbg !191
  store float %2111, float* %fr_2185388.repack517, align 8, !dbg !191
  %fr_2185388.repack519 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 1, !dbg !191
  store float %2113, float* %fr_2185388.repack519, align 4, !dbg !191
  %fr_2185388.repack521 = getelementptr inbounds %2, %2* %fr_2185388, i64 0, i32 2, !dbg !191
  store float %2115, float* %fr_2185388.repack521, align 8, !dbg !191
  %2117 = insertvalue %9 undef, %2 %2116, 0, !dbg !191
  %2118 = fmul float %751, %758, !dbg !191
  %2119 = fsub float %2118, %.unpack373, !dbg !191
  %2120 = insertvalue %2 undef, float %2119, 0, !dbg !191
  %2121 = fmul float %753, %758, !dbg !191
  %2122 = fsub float %2121, %.unpack375, !dbg !191
  %2123 = insertvalue %2 %2120, float %2122, 1, !dbg !191
  %2124 = insertvalue %2 %2123, float %760, 2, !dbg !191
  %2125 = insertvalue %9 %2117, %2 %2124, 1, !dbg !191
  %2126 = insertvalue %9 %2125, float %pdf, 2, !dbg !191
  br label %sample_brdf_cont, !dbg !191

expr_true121:                                     ; preds = %expr_false99, %continue
  %2127 = load [0 x i32]*, [0 x i32]** %764, align 8, !dbg !188
  %2128 = load i32, i32* %dim_2186355, align 4, !dbg !188
  %2129 = sext i32 %2128 to i64, !dbg !188
  %2130 = getelementptr inbounds [0 x i32], [0 x i32]* %2127, i64 0, i64 %2129, !dbg !188
  %2131 = load i32, i32* %2130, align 4, !dbg !188
  %2132 = icmp eq i32 %2131, 1, !dbg !188
  br i1 %2132, label %expr_true135, label %expr_false122, !dbg !188

expr_false122:                                    ; preds = %expr_true121
  store float %10, float* %dim_param_2186395, align 4, !dbg !192
  %2133 = load i32, i32* %dim_2186355, align 4, !dbg !192
  %2134 = icmp eq i32 %2133, 1, !dbg !192
  br i1 %2134, label %expr_true127, label %expr_false123, !dbg !192

expr_false123:                                    ; preds = %expr_false122
  %2135 = load i32, i32* %dim_2186355, align 4, !dbg !193
  %2136 = icmp eq i32 %2135, 2, !dbg !193
  br i1 %2136, label %expr_true125, label %if_join128, !dbg !193

expr_true125:                                     ; preds = %expr_false123
  store float 2.000000e+00, float* %dim_param_2186395, align 4, !dbg !194
  br label %if_join128, !dbg !194

expr_true127:                                     ; preds = %expr_false122
  store float %11, float* %dim_param_2186395, align 4, !dbg !193
  br label %if_join128, !dbg !193

if_join128:                                       ; preds = %expr_true125, %expr_false123, %expr_true127
  %2137 = load i32, i32* %dim_2186355, align 4, !dbg !195
  %2138 = load float, float* %dim_param_2186395, align 4, !dbg !195
  %2139 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %762, i32 %2137, float %2138), !dbg !195
  %2140 = load [0 x float]*, [0 x float]** %765, align 8, !dbg !196
  %2141 = load i32, i32* %dim_2186355, align 4, !dbg !196
  %2142 = load i32, i32* %766, align 4, !dbg !196
  %2143 = mul nsw i32 %2141, %2142, !dbg !196
  %2144 = add nsw i32 %2143, %2139, !dbg !196
  %2145 = sext i32 %2144 to i64, !dbg !196
  %2146 = getelementptr inbounds [0 x float], [0 x float]* %2140, i64 0, i64 %2145, !dbg !196
  %2147 = load float, float* %2146, align 4, !dbg !196
  %2148 = load [0 x float]*, [0 x float]** %765, align 8, !dbg !196
  %2149 = load i32, i32* %dim_2186355, align 4, !dbg !196
  %2150 = load i32, i32* %766, align 4, !dbg !196
  %2151 = mul nsw i32 %2149, %2150, !dbg !196
  %2152 = add nsw i32 %2151, %2139, !dbg !196
  %2153 = add nsw i32 %2152, 1, !dbg !196
  %2154 = sext i32 %2153 to i64, !dbg !196
  %2155 = getelementptr inbounds [0 x float], [0 x float]* %2148, i64 0, i64 %2154, !dbg !196
  %2156 = load float, float* %2155, align 4, !dbg !196
  %2157 = load i32, i32* %dim_2186355, align 4, !dbg !196
  %2158 = load float, float* %dim_param_2186395, align 4, !dbg !196
  %2159 = fsub float %2158, %2147, !dbg !196
  %2160 = fsub float %2156, %2147, !dbg !196
  %2161 = fdiv float %2159, %2160, !dbg !196
  %2162 = fcmp olt float %2161, 0.000000e+00, !dbg !196
  %2163 = fcmp ogt float %2161, 1.000000e+00, !dbg !196
  %. = select i1 %2163, float 1.000000e+00, float %2161, !dbg !196
  %clampf_cont134 = select i1 %2162, float 0.000000e+00, float %., !dbg !196
  %2164 = shl nsw i32 %2157, 1, !dbg !197
  %2165 = or i32 %2164, 1, !dbg !197
  %2166 = sext i32 %2165 to i64, !dbg !197
  %2167 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 %2166, !dbg !197
  store float %clampf_cont134, float* %2167, align 4, !dbg !197
  %2168 = load i32, i32* %dim_2186355, align 4, !dbg !197
  %2169 = shl nsw i32 %2168, 1, !dbg !197
  %2170 = or i32 %2169, 1, !dbg !197
  %2171 = sext i32 %2170 to i64, !dbg !197
  %2172 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 %2171, !dbg !197
  %2173 = load float, float* %2172, align 4, !dbg !197
  %2174 = shl nsw i32 %2168, 1, !dbg !197
  %2175 = sext i32 %2174 to i64, !dbg !197
  %2176 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 %2175, !dbg !197
  %2177 = fsub float 1.000000e+00, %2173, !dbg !197
  store float %2177, float* %2176, align 4, !dbg !197
  %2178 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !197
  %2179 = load i32, i32* %dim_2186355, align 4, !dbg !197
  %2180 = sext i32 %2179 to i64, !dbg !197
  %2181 = getelementptr inbounds [0 x i32], [0 x i32]* %2178, i64 0, i64 %2180, !dbg !197
  %2182 = load i32, i32* %2181, align 4, !dbg !197
  %2183 = load i32, i32* %slice_offset_2186485, align 4, !dbg !197
  %2184 = mul nsw i32 %2182, %2139, !dbg !197
  %2185 = add nsw i32 %2183, %2184, !dbg !197
  store i32 %2185, i32* %slice_offset_2186485, align 4, !dbg !197
  %2186 = load i32, i32* %dim_2186355, align 4, !dbg !197
  br label %continue, !dbg !197

expr_true135:                                     ; preds = %expr_true121
  %2187 = load i32, i32* %dim_2186355, align 4, !dbg !192
  %2188 = shl nsw i32 %2187, 1, !dbg !192
  %2189 = sext i32 %2188 to i64, !dbg !192
  %2190 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 %2189, !dbg !192
  store float 1.000000e+00, float* %2190, align 4, !dbg !192
  %2191 = load i32, i32* %dim_2186355, align 4, !dbg !192
  %2192 = shl nsw i32 %2191, 1, !dbg !192
  %2193 = or i32 %2192, 1, !dbg !192
  %2194 = sext i32 %2193 to i64, !dbg !192
  %2195 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2186377, i64 0, i64 %2194, !dbg !192
  store float 0.000000e+00, float* %2195, align 4, !dbg !192
  %2196 = load i32, i32* %dim_2186355, align 4, !dbg !192
  br label %continue, !dbg !192

continue:                                         ; preds = %expr_true135, %if_join128
  %storemerge528.in = phi i32 [ %2186, %if_join128 ], [ %2196, %expr_true135 ]
  %storemerge528 = add nsw i32 %storemerge528.in, 1, !dbg !170
  store i32 %storemerge528, i32* %dim_2186355, align 4, !dbg !170
  %2197 = icmp slt i32 %storemerge528.in, 2, !dbg !187
  br i1 %2197, label %expr_true121, label %expr_false105, !dbg !187

expr_true136:                                     ; preds = %expr_false93, %continue153
  %2198 = load [0 x i32]*, [0 x i32]** %764, align 8, !dbg !188
  %2199 = load i32, i32* %dim_2185420, align 4, !dbg !188
  %2200 = sext i32 %2199 to i64, !dbg !188
  %2201 = getelementptr inbounds [0 x i32], [0 x i32]* %2198, i64 0, i64 %2200, !dbg !188
  %2202 = load i32, i32* %2201, align 4, !dbg !188
  %2203 = icmp eq i32 %2202, 1, !dbg !188
  br i1 %2203, label %expr_true152, label %expr_false137, !dbg !188

expr_false137:                                    ; preds = %expr_true136
  store float %10, float* %dim_param_2185460, align 4, !dbg !192
  %2204 = load i32, i32* %dim_2185420, align 4, !dbg !192
  %2205 = icmp eq i32 %2204, 1, !dbg !192
  br i1 %2205, label %expr_true142, label %expr_false138, !dbg !192

expr_false138:                                    ; preds = %expr_false137
  %2206 = load i32, i32* %dim_2185420, align 4, !dbg !193
  %2207 = icmp eq i32 %2206, 2, !dbg !193
  br i1 %2207, label %expr_true140, label %if_join143, !dbg !193

expr_true140:                                     ; preds = %expr_false138
  store float 1.000000e+00, float* %dim_param_2185460, align 4, !dbg !194
  br label %if_join143, !dbg !194

expr_true142:                                     ; preds = %expr_false137
  store float %11, float* %dim_param_2185460, align 4, !dbg !193
  br label %if_join143, !dbg !193

if_join143:                                       ; preds = %expr_true140, %expr_false138, %expr_true142
  %2208 = load i32, i32* %dim_2185420, align 4, !dbg !195
  %2209 = load float, float* %dim_param_2185460, align 4, !dbg !195
  %2210 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %762, i32 %2208, float %2209), !dbg !195
  %2211 = load [0 x float]*, [0 x float]** %765, align 8, !dbg !196
  %2212 = load i32, i32* %dim_2185420, align 4, !dbg !196
  %2213 = load i32, i32* %766, align 4, !dbg !196
  %2214 = mul nsw i32 %2212, %2213, !dbg !196
  %2215 = add nsw i32 %2214, %2210, !dbg !196
  %2216 = sext i32 %2215 to i64, !dbg !196
  %2217 = getelementptr inbounds [0 x float], [0 x float]* %2211, i64 0, i64 %2216, !dbg !196
  %2218 = load float, float* %2217, align 4, !dbg !196
  %2219 = load [0 x float]*, [0 x float]** %765, align 8, !dbg !196
  %2220 = load i32, i32* %dim_2185420, align 4, !dbg !196
  %2221 = load i32, i32* %766, align 4, !dbg !196
  %2222 = mul nsw i32 %2220, %2221, !dbg !196
  %2223 = add nsw i32 %2222, %2210, !dbg !196
  %2224 = add nsw i32 %2223, 1, !dbg !196
  %2225 = sext i32 %2224 to i64, !dbg !196
  %2226 = getelementptr inbounds [0 x float], [0 x float]* %2219, i64 0, i64 %2225, !dbg !196
  %2227 = load float, float* %2226, align 4, !dbg !196
  %2228 = load i32, i32* %dim_2185420, align 4, !dbg !196
  %2229 = load float, float* %dim_param_2185460, align 4, !dbg !196
  %2230 = fsub float %2229, %2218, !dbg !196
  %2231 = fsub float %2227, %2218, !dbg !196
  %2232 = fdiv float %2230, %2231, !dbg !196
  %2233 = fcmp olt float %2232, 0.000000e+00, !dbg !196
  %2234 = fcmp ogt float %2232, 1.000000e+00, !dbg !196
  %.542 = select i1 %2234, float 1.000000e+00, float %2232, !dbg !196
  %clampf_cont151 = select i1 %2233, float 0.000000e+00, float %.542, !dbg !196
  %2235 = shl nsw i32 %2228, 1, !dbg !197
  %2236 = or i32 %2235, 1, !dbg !197
  %2237 = sext i32 %2236 to i64, !dbg !197
  %2238 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 %2237, !dbg !197
  store float %clampf_cont151, float* %2238, align 4, !dbg !197
  %2239 = load i32, i32* %dim_2185420, align 4, !dbg !197
  %2240 = shl nsw i32 %2239, 1, !dbg !197
  %2241 = or i32 %2240, 1, !dbg !197
  %2242 = sext i32 %2241 to i64, !dbg !197
  %2243 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 %2242, !dbg !197
  %2244 = load float, float* %2243, align 4, !dbg !197
  %2245 = shl nsw i32 %2239, 1, !dbg !197
  %2246 = sext i32 %2245 to i64, !dbg !197
  %2247 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 %2246, !dbg !197
  %2248 = fsub float 1.000000e+00, %2244, !dbg !197
  store float %2248, float* %2247, align 4, !dbg !197
  %2249 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !197
  %2250 = load i32, i32* %dim_2185420, align 4, !dbg !197
  %2251 = sext i32 %2250 to i64, !dbg !197
  %2252 = getelementptr inbounds [0 x i32], [0 x i32]* %2249, i64 0, i64 %2251, !dbg !197
  %2253 = load i32, i32* %2252, align 4, !dbg !197
  %2254 = load i32, i32* %slice_offset_2185550, align 4, !dbg !197
  %2255 = mul nsw i32 %2253, %2210, !dbg !197
  %2256 = add nsw i32 %2254, %2255, !dbg !197
  store i32 %2256, i32* %slice_offset_2185550, align 4, !dbg !197
  %2257 = load i32, i32* %dim_2185420, align 4, !dbg !197
  br label %continue153, !dbg !197

expr_true152:                                     ; preds = %expr_true136
  %2258 = load i32, i32* %dim_2185420, align 4, !dbg !192
  %2259 = shl nsw i32 %2258, 1, !dbg !192
  %2260 = sext i32 %2259 to i64, !dbg !192
  %2261 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 %2260, !dbg !192
  store float 1.000000e+00, float* %2261, align 4, !dbg !192
  %2262 = load i32, i32* %dim_2185420, align 4, !dbg !192
  %2263 = shl nsw i32 %2262, 1, !dbg !192
  %2264 = or i32 %2263, 1, !dbg !192
  %2265 = sext i32 %2264 to i64, !dbg !192
  %2266 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185442, i64 0, i64 %2265, !dbg !192
  store float 0.000000e+00, float* %2266, align 4, !dbg !192
  %2267 = load i32, i32* %dim_2185420, align 4, !dbg !192
  br label %continue153, !dbg !192

continue153:                                      ; preds = %expr_true152, %if_join143
  %storemerge529.in = phi i32 [ %2257, %if_join143 ], [ %2267, %expr_true152 ]
  %storemerge529 = add nsw i32 %storemerge529.in, 1, !dbg !170
  store i32 %storemerge529, i32* %dim_2185420, align 4, !dbg !170
  %2268 = icmp slt i32 %storemerge529.in, 2, !dbg !187
  br i1 %2268, label %expr_true136, label %expr_false99, !dbg !187

expr_true154:                                     ; preds = %expr_false91, %continue171
  %2269 = load [0 x i32]*, [0 x i32]** %764, align 8, !dbg !188
  %2270 = load i32, i32* %dim_2185211, align 4, !dbg !188
  %2271 = sext i32 %2270 to i64, !dbg !188
  %2272 = getelementptr inbounds [0 x i32], [0 x i32]* %2269, i64 0, i64 %2271, !dbg !188
  %2273 = load i32, i32* %2272, align 4, !dbg !188
  %2274 = icmp eq i32 %2273, 1, !dbg !188
  br i1 %2274, label %expr_true170, label %expr_false155, !dbg !188

expr_false155:                                    ; preds = %expr_true154
  store float %10, float* %dim_param_2185253, align 4, !dbg !192
  %2275 = load i32, i32* %dim_2185211, align 4, !dbg !192
  %2276 = icmp eq i32 %2275, 1, !dbg !192
  br i1 %2276, label %expr_true160, label %expr_false156, !dbg !192

expr_false156:                                    ; preds = %expr_false155
  %2277 = load i32, i32* %dim_2185211, align 4, !dbg !193
  %2278 = icmp eq i32 %2277, 2, !dbg !193
  br i1 %2278, label %expr_true158, label %if_join161, !dbg !193

expr_true158:                                     ; preds = %expr_false156
  store float 0.000000e+00, float* %dim_param_2185253, align 4, !dbg !194
  br label %if_join161, !dbg !194

expr_true160:                                     ; preds = %expr_false155
  store float %11, float* %dim_param_2185253, align 4, !dbg !193
  br label %if_join161, !dbg !193

if_join161:                                       ; preds = %expr_true158, %expr_false156, %expr_true160
  %2279 = load i32, i32* %dim_2185211, align 4, !dbg !195
  %2280 = load float, float* %dim_param_2185253, align 4, !dbg !195
  %2281 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %762, i32 %2279, float %2280), !dbg !195
  %2282 = load [0 x float]*, [0 x float]** %765, align 8, !dbg !196
  %2283 = load i32, i32* %dim_2185211, align 4, !dbg !196
  %2284 = load i32, i32* %766, align 4, !dbg !196
  %2285 = mul nsw i32 %2283, %2284, !dbg !196
  %2286 = add nsw i32 %2285, %2281, !dbg !196
  %2287 = sext i32 %2286 to i64, !dbg !196
  %2288 = getelementptr inbounds [0 x float], [0 x float]* %2282, i64 0, i64 %2287, !dbg !196
  %2289 = load float, float* %2288, align 4, !dbg !196
  %2290 = load [0 x float]*, [0 x float]** %765, align 8, !dbg !196
  %2291 = load i32, i32* %dim_2185211, align 4, !dbg !196
  %2292 = load i32, i32* %766, align 4, !dbg !196
  %2293 = mul nsw i32 %2291, %2292, !dbg !196
  %2294 = add nsw i32 %2293, %2281, !dbg !196
  %2295 = add nsw i32 %2294, 1, !dbg !196
  %2296 = sext i32 %2295 to i64, !dbg !196
  %2297 = getelementptr inbounds [0 x float], [0 x float]* %2290, i64 0, i64 %2296, !dbg !196
  %2298 = load float, float* %2297, align 4, !dbg !196
  %2299 = load i32, i32* %dim_2185211, align 4, !dbg !196
  %2300 = load float, float* %dim_param_2185253, align 4, !dbg !196
  %2301 = fsub float %2300, %2289, !dbg !196
  %2302 = fsub float %2298, %2289, !dbg !196
  %2303 = fdiv float %2301, %2302, !dbg !196
  %2304 = fcmp olt float %2303, 0.000000e+00, !dbg !196
  %2305 = fcmp ogt float %2303, 1.000000e+00, !dbg !196
  %.543 = select i1 %2305, float 1.000000e+00, float %2303, !dbg !196
  %clampf_cont169 = select i1 %2304, float 0.000000e+00, float %.543, !dbg !196
  %2306 = shl nsw i32 %2299, 1, !dbg !197
  %2307 = or i32 %2306, 1, !dbg !197
  %2308 = sext i32 %2307 to i64, !dbg !197
  %2309 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 %2308, !dbg !197
  store float %clampf_cont169, float* %2309, align 4, !dbg !197
  %2310 = load i32, i32* %dim_2185211, align 4, !dbg !197
  %2311 = shl nsw i32 %2310, 1, !dbg !197
  %2312 = or i32 %2311, 1, !dbg !197
  %2313 = sext i32 %2312 to i64, !dbg !197
  %2314 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 %2313, !dbg !197
  %2315 = load float, float* %2314, align 4, !dbg !197
  %2316 = shl nsw i32 %2310, 1, !dbg !197
  %2317 = sext i32 %2316 to i64, !dbg !197
  %2318 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 %2317, !dbg !197
  %2319 = fsub float 1.000000e+00, %2315, !dbg !197
  store float %2319, float* %2318, align 4, !dbg !197
  %2320 = load [0 x i32]*, [0 x i32]** %763, align 8, !dbg !197
  %2321 = load i32, i32* %dim_2185211, align 4, !dbg !197
  %2322 = sext i32 %2321 to i64, !dbg !197
  %2323 = getelementptr inbounds [0 x i32], [0 x i32]* %2320, i64 0, i64 %2322, !dbg !197
  %2324 = load i32, i32* %2323, align 4, !dbg !197
  %2325 = load i32, i32* %slice_offset_2185346, align 4, !dbg !197
  %2326 = mul nsw i32 %2324, %2281, !dbg !197
  %2327 = add nsw i32 %2325, %2326, !dbg !197
  store i32 %2327, i32* %slice_offset_2185346, align 4, !dbg !197
  %2328 = load i32, i32* %dim_2185211, align 4, !dbg !197
  br label %continue171, !dbg !197

expr_true170:                                     ; preds = %expr_true154
  %2329 = load i32, i32* %dim_2185211, align 4, !dbg !192
  %2330 = shl nsw i32 %2329, 1, !dbg !192
  %2331 = sext i32 %2330 to i64, !dbg !192
  %2332 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 %2331, !dbg !192
  store float 1.000000e+00, float* %2332, align 4, !dbg !192
  %2333 = load i32, i32* %dim_2185211, align 4, !dbg !192
  %2334 = shl nsw i32 %2333, 1, !dbg !192
  %2335 = or i32 %2334, 1, !dbg !192
  %2336 = sext i32 %2335 to i64, !dbg !192
  %2337 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2185235, i64 0, i64 %2336, !dbg !192
  store float 0.000000e+00, float* %2337, align 4, !dbg !192
  %2338 = load i32, i32* %dim_2185211, align 4, !dbg !192
  br label %continue171, !dbg !192

continue171:                                      ; preds = %expr_true170, %if_join161
  %storemerge530.in = phi i32 [ %2328, %if_join161 ], [ %2338, %expr_true170 ]
  %storemerge530 = add nsw i32 %storemerge530.in, 1, !dbg !170
  store i32 %storemerge530, i32* %dim_2185211, align 4, !dbg !170
  %2339 = icmp slt i32 %storemerge530.in, 2, !dbg !187
  br i1 %2339, label %expr_true154, label %expr_false93, !dbg !187

expr_true173:                                     ; preds = %if_join60, %if_join178
  %2340 = load i32, i32* %size_2184696, align 4, !dbg !173
  %2341 = load i32, i32* %first_2184704, align 4, !dbg !173
  %h = ashr i32 %2340, 1, !dbg !173
  %middle = add nsw i32 %2341, %h, !dbg !173
  %2342 = call fastcc float @fetch_conditional_warp2D2_2183659(%7* nonnull %376, i32 %517, i32 %middle, i32 %slice_size248, %3 %519, [0 x float]* nonnull %387), !dbg !173
  %2343 = fcmp olt float %2342, %516, !dbg !198
  br i1 %2343, label %expr_true177, label %if_join178, !dbg !198

expr_true177:                                     ; preds = %expr_true173
  %2344 = add nsw i32 %middle, 1, !dbg !199
  store i32 %2344, i32* %first_2184704, align 4, !dbg !199
  %2345 = load i32, i32* %size_2184696, align 4, !dbg !199
  %.neg = xor i32 %h, -1, !dbg !199
  %2346 = add i32 %2345, %.neg, !dbg !199
  br label %if_join178, !dbg !199

if_join178:                                       ; preds = %expr_true173, %expr_true177
  %storemerge532 = phi i32 [ %2346, %expr_true177 ], [ %h, %expr_true173 ], !dbg !199
  store i32 %storemerge532, i32* %size_2184696, align 4, !dbg !199
  %2347 = icmp sgt i32 %storemerge532, 0, !dbg !172
  br i1 %2347, label %expr_true173, label %expr_false62, !dbg !172

expr_true179:                                     ; preds = %expr_false41, %if_join184
  %2348 = load i32, i32* %size_2184428, align 4, !dbg !164
  %2349 = load i32, i32* %first_2184436, align 4, !dbg !164
  %h364 = ashr i32 %2348, 1, !dbg !164
  %middle365 = add nsw i32 %2349, %h364, !dbg !164
  %2350 = call fastcc float @fetch_marginal_warp2D2_2183292(%7* nonnull %376, i32 %offset246, i32 %middle365, [0 x float]* nonnull %387), !dbg !164
  %2351 = fcmp olt float %2350, %385, !dbg !200
  br i1 %2351, label %expr_true183, label %if_join184, !dbg !200

expr_true183:                                     ; preds = %expr_true179
  %2352 = add nsw i32 %middle365, 1, !dbg !201
  store i32 %2352, i32* %first_2184436, align 4, !dbg !201
  %2353 = load i32, i32* %size_2184428, align 4, !dbg !201
  %.neg534 = xor i32 %h364, -1, !dbg !201
  %2354 = add i32 %2353, %.neg534, !dbg !201
  br label %if_join184, !dbg !201

if_join184:                                       ; preds = %expr_true179, %expr_true183
  %storemerge533 = phi i32 [ %2354, %expr_true183 ], [ %h364, %expr_true179 ], !dbg !201
  store i32 %storemerge533, i32* %size_2184428, align 4, !dbg !201
  %2355 = icmp sgt i32 %storemerge533, 0, !dbg !163
  br i1 %2355, label %expr_true179, label %expr_false43, !dbg !163

expr_true185:                                     ; preds = %if_join39, %continue199
  %2356 = load [0 x i32]*, [0 x i32]** %378, align 8, !dbg !162
  %2357 = load i32, i32* %dim_2184268, align 4, !dbg !162
  %2358 = sext i32 %2357 to i64, !dbg !162
  %2359 = getelementptr inbounds [0 x i32], [0 x i32]* %2356, i64 0, i64 %2358, !dbg !162
  %2360 = load i32, i32* %2359, align 4, !dbg !162
  %2361 = icmp eq i32 %2360, 1, !dbg !162
  br i1 %2361, label %expr_true198, label %expr_false186, !dbg !162

expr_false186:                                    ; preds = %expr_true185
  store float %10, float* %dim_param_2184310, align 4, !dbg !202
  %2362 = load i32, i32* %dim_2184268, align 4, !dbg !202
  %2363 = icmp eq i32 %2362, 1, !dbg !202
  %spec.store.select = select i1 %2363, float %11, float %10, !dbg !202
  store float %spec.store.select, float* %dim_param_2184310, align 4, !dbg !170
  %2364 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %376, i32 %2362, float %spec.store.select), !dbg !203
  %2365 = load [0 x float]*, [0 x float]** %379, align 8, !dbg !204
  %2366 = load i32, i32* %dim_2184268, align 4, !dbg !204
  %2367 = load i32, i32* %380, align 4, !dbg !204
  %2368 = mul nsw i32 %2366, %2367, !dbg !204
  %2369 = add nsw i32 %2368, %2364, !dbg !204
  %2370 = sext i32 %2369 to i64, !dbg !204
  %2371 = getelementptr inbounds [0 x float], [0 x float]* %2365, i64 0, i64 %2370, !dbg !204
  %2372 = load float, float* %2371, align 4, !dbg !204
  %2373 = load [0 x float]*, [0 x float]** %379, align 8, !dbg !204
  %2374 = load i32, i32* %dim_2184268, align 4, !dbg !204
  %2375 = load i32, i32* %380, align 4, !dbg !204
  %2376 = mul nsw i32 %2374, %2375, !dbg !204
  %2377 = add nsw i32 %2376, %2364, !dbg !204
  %2378 = add nsw i32 %2377, 1, !dbg !204
  %2379 = sext i32 %2378 to i64, !dbg !204
  %2380 = getelementptr inbounds [0 x float], [0 x float]* %2373, i64 0, i64 %2379, !dbg !204
  %2381 = load float, float* %2380, align 4, !dbg !204
  %2382 = load i32, i32* %dim_2184268, align 4, !dbg !204
  %2383 = load float, float* %dim_param_2184310, align 4, !dbg !204
  %2384 = fsub float %2383, %2372, !dbg !204
  %2385 = fsub float %2381, %2372, !dbg !204
  %2386 = fdiv float %2384, %2385, !dbg !204
  %2387 = fcmp olt float %2386, 0.000000e+00, !dbg !204
  %2388 = fcmp ogt float %2386, 1.000000e+00, !dbg !204
  %.544 = select i1 %2388, float 1.000000e+00, float %2386, !dbg !204
  %clampf_cont197 = select i1 %2387, float 0.000000e+00, float %.544, !dbg !204
  %2389 = shl nsw i32 %2382, 1, !dbg !205
  %2390 = or i32 %2389, 1, !dbg !205
  %2391 = sext i32 %2390 to i64, !dbg !205
  %2392 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 %2391, !dbg !205
  store float %clampf_cont197, float* %2392, align 4, !dbg !205
  %2393 = load i32, i32* %dim_2184268, align 4, !dbg !205
  %2394 = shl nsw i32 %2393, 1, !dbg !205
  %2395 = or i32 %2394, 1, !dbg !205
  %2396 = sext i32 %2395 to i64, !dbg !205
  %2397 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 %2396, !dbg !205
  %2398 = load float, float* %2397, align 4, !dbg !205
  %2399 = shl nsw i32 %2393, 1, !dbg !205
  %2400 = sext i32 %2399 to i64, !dbg !205
  %2401 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 %2400, !dbg !205
  %2402 = fsub float 1.000000e+00, %2398, !dbg !205
  store float %2402, float* %2401, align 4, !dbg !205
  %2403 = load [0 x i32]*, [0 x i32]** %377, align 8, !dbg !205
  %2404 = load i32, i32* %dim_2184268, align 4, !dbg !205
  %2405 = sext i32 %2404 to i64, !dbg !205
  %2406 = getelementptr inbounds [0 x i32], [0 x i32]* %2403, i64 0, i64 %2405, !dbg !205
  %2407 = load i32, i32* %2406, align 4, !dbg !205
  %2408 = load i32, i32* %slice_offset_2184403, align 4, !dbg !205
  %2409 = mul nsw i32 %2407, %2364, !dbg !205
  %2410 = add nsw i32 %2408, %2409, !dbg !205
  store i32 %2410, i32* %slice_offset_2184403, align 4, !dbg !205
  %2411 = load i32, i32* %dim_2184268, align 4, !dbg !205
  br label %continue199, !dbg !205

expr_true198:                                     ; preds = %expr_true185
  %2412 = load i32, i32* %dim_2184268, align 4, !dbg !202
  %2413 = shl nsw i32 %2412, 1, !dbg !202
  %2414 = sext i32 %2413 to i64, !dbg !202
  %2415 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 %2414, !dbg !202
  store float 1.000000e+00, float* %2415, align 4, !dbg !202
  %2416 = load i32, i32* %dim_2184268, align 4, !dbg !202
  %2417 = shl nsw i32 %2416, 1, !dbg !202
  %2418 = or i32 %2417, 1, !dbg !202
  %2419 = sext i32 %2418 to i64, !dbg !202
  %2420 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2184292, i64 0, i64 %2419, !dbg !202
  store float 0.000000e+00, float* %2420, align 4, !dbg !202
  %2421 = load i32, i32* %dim_2184268, align 4, !dbg !202
  br label %continue199, !dbg !202

continue199:                                      ; preds = %expr_true198, %expr_false186
  %storemerge535.in = phi i32 [ %2411, %expr_false186 ], [ %2421, %expr_true198 ]
  %storemerge535 = add nsw i32 %storemerge535.in, 1, !dbg !170
  store i32 %storemerge535, i32* %dim_2184268, align 4, !dbg !170
  %2422 = icmp slt i32 %storemerge535.in, 1, !dbg !161
  br i1 %2422, label %expr_true185, label %expr_false41, !dbg !161

expr_true200:                                     ; preds = %if_join, %if_join205
  %2423 = load i32, i32* %size_2183654, align 4, !dbg !173
  %2424 = load i32, i32* %first_2183842, align 4, !dbg !173
  %h366 = ashr i32 %2423, 1, !dbg !173
  %middle367 = add nsw i32 %2424, %h366, !dbg !173
  %2425 = call fastcc float @fetch_conditional_warp2D2_2183659(%7* nonnull %14, i32 %155, i32 %middle367, i32 %slice_size, %3 %157, [0 x float]* nonnull %25), !dbg !173
  %2426 = fcmp olt float %2425, %154, !dbg !198
  br i1 %2426, label %expr_true204, label %if_join205, !dbg !198

expr_true204:                                     ; preds = %expr_true200
  %2427 = add nsw i32 %middle367, 1, !dbg !199
  store i32 %2427, i32* %first_2183842, align 4, !dbg !199
  %2428 = load i32, i32* %size_2183654, align 4, !dbg !199
  %.neg538 = xor i32 %h366, -1, !dbg !199
  %2429 = add i32 %2428, %.neg538, !dbg !199
  br label %if_join205, !dbg !199

if_join205:                                       ; preds = %expr_true200, %expr_true204
  %storemerge537 = phi i32 [ %2429, %expr_true204 ], [ %h366, %expr_true200 ], !dbg !199
  store i32 %storemerge537, i32* %size_2183654, align 4, !dbg !199
  %2430 = icmp sgt i32 %storemerge537, 0, !dbg !172
  br i1 %2430, label %expr_true200, label %expr_false23, !dbg !172

expr_true206:                                     ; preds = %expr_false7, %if_join211
  %2431 = load i32, i32* %size_2183287, align 4, !dbg !164
  %2432 = load i32, i32* %first_2183392, align 4, !dbg !164
  %h368 = ashr i32 %2431, 1, !dbg !164
  %middle369 = add nsw i32 %2432, %h368, !dbg !164
  %2433 = call fastcc float @fetch_marginal_warp2D2_2183292(%7* nonnull %14, i32 %offset, i32 %middle369, [0 x float]* nonnull %25), !dbg !164
  %2434 = fcmp olt float %2433, %23, !dbg !200
  br i1 %2434, label %expr_true210, label %if_join211, !dbg !200

expr_true210:                                     ; preds = %expr_true206
  %2435 = add nsw i32 %middle369, 1, !dbg !201
  store i32 %2435, i32* %first_2183392, align 4, !dbg !201
  %2436 = load i32, i32* %size_2183287, align 4, !dbg !201
  %.neg540 = xor i32 %h368, -1, !dbg !201
  %2437 = add i32 %2436, %.neg540, !dbg !201
  br label %if_join211, !dbg !201

if_join211:                                       ; preds = %expr_true206, %expr_true210
  %storemerge539 = phi i32 [ %2437, %expr_true210 ], [ %h368, %expr_true206 ], !dbg !201
  store i32 %storemerge539, i32* %size_2183287, align 4, !dbg !201
  %2438 = icmp sgt i32 %storemerge539, 0, !dbg !163
  br i1 %2438, label %expr_true206, label %expr_false9, !dbg !163

expr_true212:                                     ; preds = %expr_false, %continue226
  %2439 = load [0 x i32]*, [0 x i32]** %16, align 8, !dbg !162
  %2440 = load i32, i32* %dim_2183042, align 4, !dbg !162
  %2441 = sext i32 %2440 to i64, !dbg !162
  %2442 = getelementptr inbounds [0 x i32], [0 x i32]* %2439, i64 0, i64 %2441, !dbg !162
  %2443 = load i32, i32* %2442, align 4, !dbg !162
  %2444 = icmp eq i32 %2443, 1, !dbg !162
  br i1 %2444, label %expr_true225, label %expr_false213, !dbg !162

expr_false213:                                    ; preds = %expr_true212
  store float %10, float* %dim_param_2183088, align 4, !dbg !202
  %2445 = load i32, i32* %dim_2183042, align 4, !dbg !202
  %2446 = icmp eq i32 %2445, 1, !dbg !202
  %spec.store.select546 = select i1 %2446, float %11, float %10, !dbg !202
  store float %spec.store.select546, float* %dim_param_2183088, align 4, !dbg !170
  %2447 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %14, i32 %2445, float %spec.store.select546), !dbg !203
  %2448 = load [0 x float]*, [0 x float]** %17, align 8, !dbg !204
  %2449 = load i32, i32* %dim_2183042, align 4, !dbg !204
  %2450 = load i32, i32* %18, align 4, !dbg !204
  %2451 = mul nsw i32 %2449, %2450, !dbg !204
  %2452 = add nsw i32 %2451, %2447, !dbg !204
  %2453 = sext i32 %2452 to i64, !dbg !204
  %2454 = getelementptr inbounds [0 x float], [0 x float]* %2448, i64 0, i64 %2453, !dbg !204
  %2455 = load float, float* %2454, align 4, !dbg !204
  %2456 = load [0 x float]*, [0 x float]** %17, align 8, !dbg !204
  %2457 = load i32, i32* %dim_2183042, align 4, !dbg !204
  %2458 = load i32, i32* %18, align 4, !dbg !204
  %2459 = mul nsw i32 %2457, %2458, !dbg !204
  %2460 = add nsw i32 %2459, %2447, !dbg !204
  %2461 = add nsw i32 %2460, 1, !dbg !204
  %2462 = sext i32 %2461 to i64, !dbg !204
  %2463 = getelementptr inbounds [0 x float], [0 x float]* %2456, i64 0, i64 %2462, !dbg !204
  %2464 = load float, float* %2463, align 4, !dbg !204
  %2465 = load i32, i32* %dim_2183042, align 4, !dbg !204
  %2466 = load float, float* %dim_param_2183088, align 4, !dbg !204
  %2467 = fsub float %2466, %2455, !dbg !204
  %2468 = fsub float %2464, %2455, !dbg !204
  %2469 = fdiv float %2467, %2468, !dbg !204
  %2470 = fcmp olt float %2469, 0.000000e+00, !dbg !204
  %2471 = fcmp ogt float %2469, 1.000000e+00, !dbg !204
  %.545 = select i1 %2471, float 1.000000e+00, float %2469, !dbg !204
  %clampf_cont224 = select i1 %2470, float 0.000000e+00, float %.545, !dbg !204
  %2472 = shl nsw i32 %2465, 1, !dbg !205
  %2473 = or i32 %2472, 1, !dbg !205
  %2474 = sext i32 %2473 to i64, !dbg !205
  %2475 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 %2474, !dbg !205
  store float %clampf_cont224, float* %2475, align 4, !dbg !205
  %2476 = load i32, i32* %dim_2183042, align 4, !dbg !205
  %2477 = shl nsw i32 %2476, 1, !dbg !205
  %2478 = or i32 %2477, 1, !dbg !205
  %2479 = sext i32 %2478 to i64, !dbg !205
  %2480 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 %2479, !dbg !205
  %2481 = load float, float* %2480, align 4, !dbg !205
  %2482 = shl nsw i32 %2476, 1, !dbg !205
  %2483 = sext i32 %2482 to i64, !dbg !205
  %2484 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 %2483, !dbg !205
  %2485 = fsub float 1.000000e+00, %2481, !dbg !205
  store float %2485, float* %2484, align 4, !dbg !205
  %2486 = load [0 x i32]*, [0 x i32]** %15, align 8, !dbg !205
  %2487 = load i32, i32* %dim_2183042, align 4, !dbg !205
  %2488 = sext i32 %2487 to i64, !dbg !205
  %2489 = getelementptr inbounds [0 x i32], [0 x i32]* %2486, i64 0, i64 %2488, !dbg !205
  %2490 = load i32, i32* %2489, align 4, !dbg !205
  %2491 = load i32, i32* %slice_offset_2183262, align 4, !dbg !205
  %2492 = mul nsw i32 %2490, %2447, !dbg !205
  %2493 = add nsw i32 %2491, %2492, !dbg !205
  store i32 %2493, i32* %slice_offset_2183262, align 4, !dbg !205
  %2494 = load i32, i32* %dim_2183042, align 4, !dbg !205
  br label %continue226, !dbg !205

expr_true225:                                     ; preds = %expr_true212
  %2495 = load i32, i32* %dim_2183042, align 4, !dbg !202
  %2496 = shl nsw i32 %2495, 1, !dbg !202
  %2497 = sext i32 %2496 to i64, !dbg !202
  %2498 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 %2497, !dbg !202
  store float 1.000000e+00, float* %2498, align 4, !dbg !202
  %2499 = load i32, i32* %dim_2183042, align 4, !dbg !202
  %2500 = shl nsw i32 %2499, 1, !dbg !202
  %2501 = or i32 %2500, 1, !dbg !202
  %2502 = sext i32 %2501 to i64, !dbg !202
  %2503 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2183069, i64 0, i64 %2502, !dbg !202
  store float 0.000000e+00, float* %2503, align 4, !dbg !202
  %2504 = load i32, i32* %dim_2183042, align 4, !dbg !202
  br label %continue226, !dbg !202

continue226:                                      ; preds = %expr_true225, %expr_false213
  %storemerge541.in = phi i32 [ %2494, %expr_false213 ], [ %2504, %expr_true225 ]
  %storemerge541 = add nsw i32 %storemerge541.in, 1, !dbg !170
  store i32 %storemerge541, i32* %dim_2183042, align 4, !dbg !170
  %2505 = icmp slt i32 %storemerge541.in, 1, !dbg !161
  br i1 %2505, label %expr_true212, label %expr_false7, !dbg !161

sample_brdf_cont:                                 ; preds = %test_sample_brdf, %if_join82, %expr_false105
  %res = phi %9 [ %2126, %expr_false105 ], [ zeroinitializer, %if_join82 ], [ zeroinitializer, %test_sample_brdf ], !dbg !206
  %2506 = getelementptr inbounds %9, %9* %result_2182960, i64 0, i32 0, i32 0, !dbg !206
  %2507 = extractvalue %9 %res, 0, !dbg !206
  %2508 = extractvalue %2 %2507, 0, !dbg !206
  store float %2508, float* %2506, align 4, !dbg !206
  %2509 = getelementptr inbounds %9, %9* %result_2182960, i64 0, i32 0, i32 1, !dbg !206
  %2510 = extractvalue %2 %2507, 1, !dbg !206
  store float %2510, float* %2509, align 4, !dbg !206
  %2511 = getelementptr inbounds %9, %9* %result_2182960, i64 0, i32 0, i32 2, !dbg !206
  %2512 = extractvalue %2 %2507, 2, !dbg !206
  store float %2512, float* %2511, align 4, !dbg !206
  %2513 = extractvalue %9 %res, 1, !dbg !206
  %.repack = getelementptr inbounds %9, %9* %result_2182960, i64 0, i32 1, i32 0, !dbg !206
  %.elt523 = extractvalue %2 %2513, 0, !dbg !206
  store float %.elt523, float* %.repack, align 4, !dbg !206
  %.repack524 = getelementptr inbounds %9, %9* %result_2182960, i64 0, i32 1, i32 1, !dbg !206
  %.elt525 = extractvalue %2 %2513, 1, !dbg !206
  store float %.elt525, float* %.repack524, align 4, !dbg !206
  %.repack526 = getelementptr inbounds %9, %9* %result_2182960, i64 0, i32 1, i32 2, !dbg !206
  %.elt527 = extractvalue %2 %2513, 2, !dbg !206
  store float %.elt527, float* %.repack526, align 4, !dbg !206
  %2514 = getelementptr inbounds %9, %9* %result_2182960, i64 0, i32 2, !dbg !206
  %2515 = extractvalue %9 %res, 2, !dbg !206
  store float %2515, float* %2514, align 4, !dbg !206
  ret void, !dbg !206
}

declare float @asinf(float) local_unnamed_addr

declare float @atan2f(float, float) local_unnamed_addr

define internal fastcc float @fetch_marginal_warp2D2_2183292(%7* %warp_2183294, i32 %offset_2183295, i32 %idx_2183296, [0 x float]* %param_weight_2183297) unnamed_addr !dbg !207 {
fetch_marginal_warp2D2:
  %0 = getelementptr inbounds %7, %7* %warp_2183294, i64 0, i32 8, !dbg !209
  %1 = load [0 x float]*, [0 x float]** %0, align 8, !dbg !209
  %2 = getelementptr inbounds %7, %7* %warp_2183294, i64 0, i32 0, i32 1, !dbg !209
  %3 = load i32, i32* %2, align 4, !dbg !209
  %4 = getelementptr inbounds %7, %7* %warp_2183294, i64 0, i32 4, !dbg !209
  %5 = load [0 x i32]*, [0 x i32]** %4, align 8, !dbg !209
  %6 = getelementptr inbounds [0 x i32], [0 x i32]* %5, i64 0, i64 1, !dbg !209
  %7 = load i32, i32* %6, align 4, !dbg !209
  %8 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183297, i64 0, i64 2, !dbg !209
  %9 = load float, float* %8, align 4, !dbg !209
  %10 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183297, i64 0, i64 3, !dbg !209
  %11 = load float, float* %10, align 4, !dbg !209
  %12 = load [0 x i32]*, [0 x i32]** %4, align 8, !dbg !209
  %13 = getelementptr inbounds [0 x i32], [0 x i32]* %12, i64 0, i64 0, !dbg !209
  %14 = load i32, i32* %13, align 4, !dbg !209
  %15 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183297, i64 0, i64 0, !dbg !209
  %16 = load float, float* %15, align 4, !dbg !209
  %17 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183297, i64 0, i64 1, !dbg !209
  %18 = load float, float* %17, align 4, !dbg !209
  %19 = add nsw i32 %offset_2183295, %idx_2183296, !dbg !209
  %20 = sext i32 %19 to i64, !dbg !209
  %21 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %20, !dbg !209
  %22 = load float, float* %21, align 4, !dbg !209
  %23 = mul nsw i32 %14, %3, !dbg !209
  %i1 = add nsw i32 %19, %23, !dbg !209
  %24 = sext i32 %i1 to i64, !dbg !209
  %25 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %24, !dbg !209
  %26 = load float, float* %25, align 4, !dbg !209
  %27 = load [0 x i32]*, [0 x i32]** %4, align 8, !dbg !209
  %28 = getelementptr inbounds [0 x i32], [0 x i32]* %27, i64 0, i64 0, !dbg !209
  %29 = load i32, i32* %28, align 4, !dbg !209
  %30 = load float, float* %15, align 4, !dbg !209
  %31 = load float, float* %17, align 4, !dbg !209
  %32 = mul nsw i32 %7, %3, !dbg !209
  %i11 = add nsw i32 %19, %32, !dbg !209
  %33 = sext i32 %i11 to i64, !dbg !209
  %34 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %33, !dbg !209
  %35 = load float, float* %34, align 4, !dbg !209
  %36 = mul nsw i32 %29, %3, !dbg !209
  %i12 = add nsw i32 %i11, %36, !dbg !209
  %37 = sext i32 %i12 to i64, !dbg !209
  %38 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %37, !dbg !209
  %39 = load float, float* %38, align 4, !dbg !209
  %40 = fmul float %22, %16, !dbg !209
  %41 = fmul float %26, %18, !dbg !209
  %42 = fadd float %40, %41, !dbg !209
  %43 = fmul float %42, %9, !dbg !209
  %44 = fmul float %35, %30, !dbg !209
  %45 = fmul float %39, %31, !dbg !209
  %46 = fadd float %44, %45, !dbg !209
  %47 = fmul float %46, %11, !dbg !209
  %48 = fadd float %43, %47, !dbg !209
  ret float %48, !dbg !209
}

define internal fastcc float @fetch_conditional_warp2D2_2183659(%7* %warp_2183661, i32 %offset_2183662, i32 %idx_2183663, i32 %slice_size_2183664, %3 %sample_2183665, [0 x float]* %param_weight_2183666) unnamed_addr !dbg !210 {
fetch_conditional_warp2D2:
  %0 = getelementptr inbounds %7, %7* %warp_2183661, i64 0, i32 9, !dbg !212
  %1 = load [0 x float]*, [0 x float]** %0, align 8, !dbg !212
  %2 = getelementptr inbounds %7, %7* %warp_2183661, i64 0, i32 4, !dbg !212
  %3 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !212
  %4 = getelementptr inbounds [0 x i32], [0 x i32]* %3, i64 0, i64 1, !dbg !212
  %5 = load i32, i32* %4, align 4, !dbg !212
  %6 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183666, i64 0, i64 2, !dbg !212
  %7 = load float, float* %6, align 4, !dbg !212
  %8 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183666, i64 0, i64 3, !dbg !212
  %9 = load float, float* %8, align 4, !dbg !212
  %10 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !212
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %10, i64 0, i64 0, !dbg !212
  %12 = load i32, i32* %11, align 4, !dbg !212
  %13 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183666, i64 0, i64 0, !dbg !212
  %14 = load float, float* %13, align 4, !dbg !212
  %15 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_2183666, i64 0, i64 1, !dbg !212
  %16 = load float, float* %15, align 4, !dbg !212
  %17 = add nsw i32 %offset_2183662, %idx_2183663, !dbg !212
  %18 = sext i32 %17 to i64, !dbg !212
  %19 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %18, !dbg !212
  %20 = load float, float* %19, align 4, !dbg !212
  %21 = mul nsw i32 %12, %slice_size_2183664, !dbg !212
  %i1 = add nsw i32 %17, %21, !dbg !212
  %22 = sext i32 %i1 to i64, !dbg !212
  %23 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %22, !dbg !212
  %24 = load float, float* %23, align 4, !dbg !212
  %25 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !212
  %26 = getelementptr inbounds [0 x i32], [0 x i32]* %25, i64 0, i64 0, !dbg !212
  %27 = load i32, i32* %26, align 4, !dbg !212
  %28 = load float, float* %13, align 4, !dbg !212
  %29 = load float, float* %15, align 4, !dbg !212
  %30 = mul nsw i32 %5, %slice_size_2183664, !dbg !212
  %i11 = add nsw i32 %17, %30, !dbg !212
  %31 = sext i32 %i11 to i64, !dbg !212
  %32 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %31, !dbg !212
  %33 = load float, float* %32, align 4, !dbg !212
  %34 = mul nsw i32 %27, %slice_size_2183664, !dbg !212
  %i12 = add nsw i32 %i11, %34, !dbg !212
  %35 = sext i32 %i12 to i64, !dbg !212
  %36 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %35, !dbg !212
  %37 = load float, float* %36, align 4, !dbg !212
  %38 = load [0 x float]*, [0 x float]** %0, align 8, !dbg !212
  %39 = getelementptr inbounds %7, %7* %warp_2183661, i64 0, i32 0, i32 0, !dbg !212
  %40 = load i32, i32* %39, align 4, !dbg !212
  %41 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !212
  %42 = getelementptr inbounds [0 x i32], [0 x i32]* %41, i64 0, i64 1, !dbg !212
  %43 = load i32, i32* %42, align 4, !dbg !212
  %44 = load float, float* %6, align 4, !dbg !212
  %45 = load float, float* %8, align 4, !dbg !212
  %46 = getelementptr inbounds [0 x i32], [0 x i32]* %41, i64 0, i64 0, !dbg !212
  %47 = load i32, i32* %46, align 4, !dbg !212
  %48 = load float, float* %13, align 4, !dbg !212
  %49 = load float, float* %15, align 4, !dbg !212
  %50 = sext i32 %40 to i64, !dbg !212
  %51 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %50, !dbg !212
  %52 = sext i32 %17 to i64, !dbg !212
  %53 = getelementptr inbounds float, float* %51, i64 %52, !dbg !212
  %54 = load float, float* %53, align 4, !dbg !212
  %55 = mul nsw i32 %47, %slice_size_2183664, !dbg !212
  %i13 = add nsw i32 %17, %55, !dbg !212
  %56 = sext i32 %i13 to i64, !dbg !212
  %57 = getelementptr inbounds float, float* %51, i64 %56, !dbg !212
  %58 = load float, float* %57, align 4, !dbg !212
  %59 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !212
  %60 = getelementptr inbounds [0 x i32], [0 x i32]* %59, i64 0, i64 0, !dbg !212
  %61 = load i32, i32* %60, align 4, !dbg !212
  %62 = load float, float* %13, align 4, !dbg !212
  %63 = load float, float* %15, align 4, !dbg !212
  %64 = mul nsw i32 %43, %slice_size_2183664, !dbg !212
  %i14 = add nsw i32 %17, %64, !dbg !212
  %65 = sext i32 %i14 to i64, !dbg !212
  %66 = getelementptr inbounds float, float* %51, i64 %65, !dbg !212
  %67 = load float, float* %66, align 4, !dbg !212
  %68 = mul nsw i32 %61, %slice_size_2183664, !dbg !212
  %i15 = add nsw i32 %i14, %68, !dbg !212
  %69 = sext i32 %i15 to i64, !dbg !212
  %70 = getelementptr inbounds float, float* %51, i64 %69, !dbg !212
  %71 = load float, float* %70, align 4, !dbg !212
  %72 = extractvalue %3 %sample_2183665, 1, !dbg !212
  %73 = fsub float 1.000000e+00, %72, !dbg !212
  %74 = fmul float %20, %14, !dbg !212
  %75 = fmul float %24, %16, !dbg !212
  %76 = fadd float %74, %75, !dbg !212
  %77 = fmul float %76, %7, !dbg !212
  %78 = fmul float %33, %28, !dbg !212
  %79 = fmul float %37, %29, !dbg !212
  %80 = fadd float %78, %79, !dbg !212
  %81 = fmul float %80, %9, !dbg !212
  %82 = fadd float %77, %81, !dbg !212
  %83 = fmul float %73, %82, !dbg !212
  %84 = fmul float %54, %48, !dbg !212
  %85 = fmul float %58, %49, !dbg !212
  %86 = fadd float %84, %85, !dbg !212
  %87 = fmul float %86, %44, !dbg !212
  %88 = fmul float %67, %62, !dbg !212
  %89 = fmul float %71, %63, !dbg !212
  %90 = fadd float %88, %89, !dbg !212
  %91 = fmul float %90, %45, !dbg !212
  %92 = fadd float %87, %91, !dbg !212
  %93 = fmul float %72, %92, !dbg !212
  %94 = fadd float %83, %93, !dbg !212
  ret float %94, !dbg !212
}

define internal fastcc i32 @find_interval_eval_2183096(%7* %warp_2183098, i32 %dim_2183099, float %param_val_2183100) unnamed_addr !dbg !213 {
find_interval_eval:
  %first_2183115 = alloca i32, align 4
  %size_2183107 = alloca i32, align 4
  %0 = getelementptr inbounds %7, %7* %warp_2183098, i64 0, i32 3, !dbg !215
  %1 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !215
  %2 = sext i32 %dim_2183099 to i64, !dbg !215
  %3 = getelementptr inbounds [0 x i32], [0 x i32]* %1, i64 0, i64 %2, !dbg !215
  %4 = load i32, i32* %3, align 4, !dbg !215
  %size = add nsw i32 %4, -2, !dbg !215
  store i32 %size, i32* %size_2183107, align 4, !dbg !215
  store i32 1, i32* %first_2183115, align 4, !dbg !215
  %5 = getelementptr inbounds %7, %7* %warp_2183098, i64 0, i32 5, !dbg !215
  %6 = getelementptr inbounds %7, %7* %warp_2183098, i64 0, i32 6, !dbg !215
  %7 = icmp sgt i32 %4, 2, !dbg !216
  br i1 %7, label %expr_true4, label %expr_false, !dbg !216

expr_false:                                       ; preds = %if_join, %find_interval_eval
  %8 = load i32, i32* %first_2183115, align 4, !dbg !217
  %9 = add nsw i32 %8, -1, !dbg !217
  %10 = icmp slt i32 %size, %9, !dbg !217
  %spec.select = select i1 %10, i32 %size, i32 %9, !dbg !217
  %.inv = icmp sgt i32 %8, 0, !dbg !217
  %merge = select i1 %.inv, i32 %spec.select, i32 0, !dbg !217
  ret i32 %merge, !dbg !218

expr_true4:                                       ; preds = %find_interval_eval, %if_join
  %11 = load i32, i32* %size_2183107, align 4, !dbg !217
  %12 = load i32, i32* %first_2183115, align 4, !dbg !217
  %13 = load [0 x float]*, [0 x float]** %5, align 8, !dbg !217
  %14 = load i32, i32* %6, align 4, !dbg !217
  %15 = mul nsw i32 %14, %dim_2183099, !dbg !217
  %h = ashr i32 %11, 1, !dbg !217
  %middle = add nsw i32 %12, %h, !dbg !217
  %16 = add nsw i32 %15, %middle, !dbg !217
  %17 = sext i32 %16 to i64, !dbg !217
  %18 = getelementptr inbounds [0 x float], [0 x float]* %13, i64 0, i64 %17, !dbg !217
  %19 = load float, float* %18, align 4, !dbg !217
  %20 = fcmp ugt float %19, %param_val_2183100, !dbg !217
  br i1 %20, label %if_join, label %expr_true6, !dbg !217

expr_true6:                                       ; preds = %expr_true4
  %21 = add nsw i32 %middle, 1, !dbg !219
  store i32 %21, i32* %first_2183115, align 4, !dbg !219
  %22 = load i32, i32* %size_2183107, align 4, !dbg !219
  %.neg = xor i32 %h, -1, !dbg !219
  %23 = add i32 %22, %.neg, !dbg !219
  br label %if_join, !dbg !219

if_join:                                          ; preds = %expr_true4, %expr_true6
  %storemerge = phi i32 [ %23, %expr_true6 ], [ %h, %expr_true4 ], !dbg !219
  store i32 %storemerge, i32* %size_2183107, align 4, !dbg !219
  %24 = icmp sgt i32 %storemerge, 0, !dbg !216
  br i1 %24, label %expr_true4, label %expr_false, !dbg !216
}

define void @test_evaluate_brdf(%6* %sampler_2196431, %2* %incoming_2196432, %2* %outgoing_2196433, %2* %result_2196434) local_unnamed_addr !dbg !220 {
test_evaluate_brdf:
  %dim_param_2197635 = alloca float, align 4
  %dim_param_2197833 = alloca float, align 4
  %dim_param_2198023 = alloca float, align 4
  %dim_2197983 = alloca i32, align 4
  %slice_offset_2198113 = alloca i32, align 4
  %param_weight_2198005 = alloca [6 x float], align 4
  %dim_2197793 = alloca i32, align 4
  %slice_offset_2197923 = alloca i32, align 4
  %param_weight_2197815 = alloca [6 x float], align 4
  %dim_2197593 = alloca i32, align 4
  %slice_offset_2197728 = alloca i32, align 4
  %param_weight_2197617 = alloca [6 x float], align 4
  %fr_2198719 = alloca %2, align 8
  %u_wm_2196528 = alloca %3, align 8
  %.elt = getelementptr inbounds %2, %2* %incoming_2196432, i64 0, i32 0, !dbg !222
  %.unpack = load float, float* %.elt, align 4, !dbg !222
  %.elt187 = getelementptr inbounds %2, %2* %incoming_2196432, i64 0, i32 1, !dbg !222
  %.unpack188 = load float, float* %.elt187, align 4, !dbg !222
  %.elt189 = getelementptr inbounds %2, %2* %incoming_2196432, i64 0, i32 2, !dbg !222
  %.unpack190 = load float, float* %.elt189, align 4, !dbg !222
  %0 = fcmp ugt float %.unpack190, 0.000000e+00, !dbg !222
  %.elt195 = getelementptr inbounds %2, %2* %outgoing_2196433, i64 0, i32 2, !dbg !222
  %.unpack196 = load float, float* %.elt195, align 4, !dbg !222
  %1 = fcmp ugt float %.unpack196, 0.000000e+00
  %or.cond = and i1 %0, %1, !dbg !222
  br i1 %or.cond, label %expr_false1, label %evaluate_brdf_cont, !dbg !222

expr_false1:                                      ; preds = %test_evaluate_brdf
  %.elt193 = getelementptr inbounds %2, %2* %outgoing_2196433, i64 0, i32 1, !dbg !222
  %.unpack194 = load float, float* %.elt193, align 4, !dbg !222
  %.elt191 = getelementptr inbounds %2, %2* %outgoing_2196433, i64 0, i32 0, !dbg !222
  %.unpack192 = load float, float* %.elt191, align 4, !dbg !222
  %2 = insertvalue %2 undef, float %.unpack, 0, !dbg !222
  %3 = insertvalue %2 %2, float %.unpack188, 1, !dbg !222
  %4 = insertvalue %2 %3, float %.unpack190, 2, !dbg !222
  %5 = fadd float %.unpack, %.unpack192, !dbg !223
  %6 = fmul float %5, %5, !dbg !223
  %7 = fadd float %.unpack188, %.unpack194, !dbg !223
  %8 = fmul float %7, %7, !dbg !223
  %9 = fadd float %6, %8, !dbg !223
  %10 = fadd float %.unpack190, %.unpack196, !dbg !223
  %11 = fmul float %10, %10, !dbg !223
  %12 = fadd float %9, %11, !dbg !223
  %13 = call float @llvm.sqrt.f32(float %12), !dbg !223
  %14 = call fastcc float @elevation_2196481(%2 %4), !dbg !224
  %15 = call float @atan2f(float %.unpack188, float %.unpack), !dbg !225
  %16 = fdiv float 1.000000e+00, %13, !dbg !226
  %17 = fmul float %5, %16, !dbg !226
  %18 = insertvalue %2 undef, float %17, 0, !dbg !226
  %19 = fmul float %7, %16, !dbg !226
  %20 = insertvalue %2 %18, float %19, 1, !dbg !226
  %21 = fmul float %10, %16, !dbg !226
  %22 = insertvalue %2 %20, float %21, 2, !dbg !226
  %23 = call fastcc float @elevation_2196481(%2 %22), !dbg !226
  %24 = call float @atan2f(float %19, float %17), !dbg !227
  %25 = fmul float %14, 0x3FE45F3060000000, !dbg !228
  %26 = call float @llvm.sqrt.f32(float %25), !dbg !228
  %27 = fmul float %23, 0x3FE45F3060000000, !dbg !229
  %28 = call float @llvm.sqrt.f32(float %27), !dbg !229
  %29 = fadd float %24, 0x400921FB60000000, !dbg !230
  %30 = fdiv float %29, 0x401921FB60000000, !dbg !230
  %u_wm_2196528.repack = getelementptr inbounds %3, %3* %u_wm_2196528, i64 0, i32 0, !dbg !230
  store float %28, float* %u_wm_2196528.repack, align 8, !dbg !230
  %u_wm_2196528.repack198 = getelementptr inbounds %3, %3* %u_wm_2196528, i64 0, i32 1, !dbg !230
  store float %30, float* %u_wm_2196528.repack198, align 4, !dbg !230
  %31 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 5, !dbg !230
  %32 = load i1, i1* %31, align 1, !dbg !230
  %33 = getelementptr inbounds %3, %3* %u_wm_2196528, i64 0, i32 1, !dbg !230
  br i1 %32, label %expr_true, label %_cont13, !dbg !230

expr_true:                                        ; preds = %expr_false1
  %34 = fsub float %24, %15, !dbg !231
  %35 = fadd float %34, 0x400921FB60000000, !dbg !231
  %36 = fdiv float %35, 0x401921FB60000000, !dbg !231
  store float %36, float* %33, align 4, !dbg !231
  br label %_cont13, !dbg !231

_cont13:                                          ; preds = %expr_true, %expr_false1
  %37 = load float, float* %33, align 4, !dbg !232
  %38 = call float @llvm.floor.f32(float %37), !dbg !232
  %39 = fsub float %37, %38, !dbg !233
  store float %39, float* %33, align 4, !dbg !233
  %.elt200 = getelementptr inbounds %3, %3* %u_wm_2196528, i64 0, i32 0, !dbg !233
  %.unpack201 = load float, float* %.elt200, align 8, !dbg !233
  %40 = insertvalue %3 undef, float %.unpack201, 0, !dbg !233
  %41 = insertvalue %3 %40, float %39, 1, !dbg !233
  %42 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 2, !dbg !233
  %43 = call fastcc %10 @invert_warp2D2_2196548(%7* nonnull %42, %3 %41, float %15, float %14), !dbg !233
  %fr_2198719.repack = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 0, !dbg !234
  store float 0.000000e+00, float* %fr_2198719.repack, align 8, !dbg !234
  %fr_2198719.repack204 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 1, !dbg !234
  store float 0.000000e+00, float* %fr_2198719.repack204, align 4, !dbg !234
  %fr_2198719.repack205 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 2, !dbg !234
  store float 0.000000e+00, float* %fr_2198719.repack205, align 8, !dbg !234
  %param_weight_2197617.repack = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 0, !dbg !234
  store float 0.000000e+00, float* %param_weight_2197617.repack, align 4, !dbg !234
  %param_weight_2197617.repack206 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 1, !dbg !234
  store float 0.000000e+00, float* %param_weight_2197617.repack206, align 4, !dbg !234
  %param_weight_2197617.repack207 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 2, !dbg !234
  store float 0.000000e+00, float* %param_weight_2197617.repack207, align 4, !dbg !234
  %param_weight_2197617.repack208 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 3, !dbg !234
  store float 0.000000e+00, float* %param_weight_2197617.repack208, align 4, !dbg !234
  %param_weight_2197617.repack209 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 4, !dbg !234
  store float 0.000000e+00, float* %param_weight_2197617.repack209, align 4, !dbg !234
  %param_weight_2197617.repack210 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 5, !dbg !234
  store float 0.000000e+00, float* %param_weight_2197617.repack210, align 4, !dbg !234
  store i32 0, i32* %slice_offset_2197728, align 4, !dbg !234
  store i32 0, i32* %dim_2197593, align 4, !dbg !234
  %44 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, !dbg !234
  %45 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 4, !dbg !234
  %46 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 3, !dbg !234
  %47 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 5, !dbg !234
  %48 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 6, !dbg !234
  br label %expr_true74, !dbg !235

expr_false16:                                     ; preds = %continue91
  %49 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 2, !dbg !236
  %.elt211 = getelementptr inbounds %3, %3* %49, i64 0, i32 0, !dbg !236
  %.unpack212 = load float, float* %.elt211, align 4, !dbg !236
  %.elt215 = getelementptr inbounds %7, %7* %44, i64 0, i32 0, i32 0, !dbg !236
  %.unpack216 = load i32, i32* %.elt215, align 4, !dbg !236
  %50 = extractvalue %10 %43, 0, !dbg !236
  %51 = extractvalue %3 %50, 0, !dbg !236
  %52 = fmul float %51, %.unpack212, !dbg !236
  %53 = sitofp i32 %.unpack216 to float, !dbg !236
  %54 = fadd float %53, -2.000000e+00, !dbg !236
  %55 = fcmp olt float %52, %54, !dbg !236
  %56 = select i1 %55, float %52, float %54, !dbg !236
  %57 = call float @llvm.floor.f32(float %56), !dbg !236
  %.elt217 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 0, i32 1, !dbg !236
  %.unpack218 = load i32, i32* %.elt217, align 4, !dbg !236
  %.elt213 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 2, i32 1, !dbg !236
  %.unpack214 = load float, float* %.elt213, align 4, !dbg !236
  %58 = extractvalue %3 %50, 1, !dbg !237
  %59 = fmul float %58, %.unpack214, !dbg !237
  %60 = sitofp i32 %.unpack218 to float, !dbg !237
  %61 = fadd float %60, -2.000000e+00, !dbg !237
  %62 = fcmp olt float %59, %61, !dbg !237
  %63 = select i1 %62, float %59, float %61, !dbg !237
  %64 = call float @llvm.floor.f32(float %63), !dbg !237
  %65 = getelementptr inbounds %7, %7* %44, i64 0, i32 0, i32 0, !dbg !238
  %66 = load i32, i32* %65, align 4, !dbg !238
  %67 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 0, i32 1, !dbg !238
  %68 = load i32, i32* %67, align 4, !dbg !238
  %69 = load i32, i32* %slice_offset_2197728, align 4, !dbg !238
  %70 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 7, !dbg !238
  %71 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %72 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %73 = getelementptr inbounds [0 x i32], [0 x i32]* %72, i64 0, i64 2, !dbg !238
  %74 = load i32, i32* %73, align 4, !dbg !238
  %75 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 4, !dbg !238
  %76 = load float, float* %75, align 4, !dbg !238
  %77 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 5, !dbg !238
  %78 = load float, float* %77, align 4, !dbg !238
  %79 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %80 = getelementptr inbounds [0 x i32], [0 x i32]* %79, i64 0, i64 1, !dbg !238
  %81 = load i32, i32* %80, align 4, !dbg !238
  %82 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 2, !dbg !238
  %83 = load float, float* %82, align 4, !dbg !238
  %84 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 3, !dbg !238
  %85 = load float, float* %84, align 4, !dbg !238
  %86 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %87 = getelementptr inbounds [0 x i32], [0 x i32]* %86, i64 0, i64 0, !dbg !238
  %88 = load i32, i32* %87, align 4, !dbg !238
  %89 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 0, !dbg !238
  %90 = load float, float* %89, align 4, !dbg !238
  %91 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 1, !dbg !238
  %92 = load float, float* %91, align 4, !dbg !238
  %93 = fptosi float %57 to i32, !dbg !238
  %94 = fptosi float %64 to i32, !dbg !238
  %95 = mul nsw i32 %66, %94, !dbg !238
  %index = add nsw i32 %95, %93, !dbg !238
  %size = mul nsw i32 %66, %68, !dbg !238
  %96 = mul nsw i32 %69, %size, !dbg !238
  %97 = add nsw i32 %index, %96, !dbg !238
  %98 = sext i32 %97 to i64, !dbg !238
  %99 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %98, !dbg !238
  %100 = load float, float* %99, align 4, !dbg !238
  %101 = mul nsw i32 %88, %size, !dbg !238
  %i1 = add nsw i32 %97, %101, !dbg !238
  %102 = sext i32 %i1 to i64, !dbg !238
  %103 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %102, !dbg !238
  %104 = load float, float* %103, align 4, !dbg !238
  %105 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %106 = getelementptr inbounds [0 x i32], [0 x i32]* %105, i64 0, i64 0, !dbg !238
  %107 = load i32, i32* %106, align 4, !dbg !238
  %108 = load float, float* %89, align 4, !dbg !238
  %109 = load float, float* %91, align 4, !dbg !238
  %110 = mul nsw i32 %81, %size, !dbg !238
  %i194 = add nsw i32 %97, %110, !dbg !238
  %111 = sext i32 %i194 to i64, !dbg !238
  %112 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %111, !dbg !238
  %113 = load float, float* %112, align 4, !dbg !238
  %114 = mul nsw i32 %107, %size, !dbg !238
  %i195 = add nsw i32 %i194, %114, !dbg !238
  %115 = sext i32 %i195 to i64, !dbg !238
  %116 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %115, !dbg !238
  %117 = load float, float* %116, align 4, !dbg !238
  %118 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %119 = getelementptr inbounds [0 x i32], [0 x i32]* %118, i64 0, i64 1, !dbg !238
  %120 = load i32, i32* %119, align 4, !dbg !238
  %121 = load float, float* %82, align 4, !dbg !238
  %122 = load float, float* %84, align 4, !dbg !238
  %123 = getelementptr inbounds [0 x i32], [0 x i32]* %118, i64 0, i64 0, !dbg !238
  %124 = load i32, i32* %123, align 4, !dbg !238
  %125 = load float, float* %89, align 4, !dbg !238
  %126 = load float, float* %91, align 4, !dbg !238
  %127 = mul nsw i32 %74, %size, !dbg !238
  %i196 = add nsw i32 %97, %127, !dbg !238
  %128 = sext i32 %i196 to i64, !dbg !238
  %129 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %128, !dbg !238
  %130 = load float, float* %129, align 4, !dbg !238
  %131 = mul nsw i32 %124, %size, !dbg !238
  %i197 = add nsw i32 %i196, %131, !dbg !238
  %132 = sext i32 %i197 to i64, !dbg !238
  %133 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %132, !dbg !238
  %134 = load float, float* %133, align 4, !dbg !238
  %135 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %136 = getelementptr inbounds [0 x i32], [0 x i32]* %135, i64 0, i64 0, !dbg !238
  %137 = load i32, i32* %136, align 4, !dbg !238
  %138 = load float, float* %89, align 4, !dbg !238
  %139 = load float, float* %91, align 4, !dbg !238
  %140 = mul nsw i32 %120, %size, !dbg !238
  %i198 = add nsw i32 %i196, %140, !dbg !238
  %141 = sext i32 %i198 to i64, !dbg !238
  %142 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %141, !dbg !238
  %143 = load float, float* %142, align 4, !dbg !238
  %144 = mul nsw i32 %137, %size, !dbg !238
  %i199 = add nsw i32 %i198, %144, !dbg !238
  %145 = sext i32 %i199 to i64, !dbg !238
  %146 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %145, !dbg !238
  %147 = load float, float* %146, align 4, !dbg !238
  %148 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %149 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %150 = getelementptr inbounds [0 x i32], [0 x i32]* %149, i64 0, i64 2, !dbg !238
  %151 = load i32, i32* %150, align 4, !dbg !238
  %152 = load float, float* %75, align 4, !dbg !238
  %153 = load float, float* %77, align 4, !dbg !238
  %154 = getelementptr inbounds [0 x i32], [0 x i32]* %149, i64 0, i64 1, !dbg !238
  %155 = load i32, i32* %154, align 4, !dbg !238
  %156 = load float, float* %82, align 4, !dbg !238
  %157 = load float, float* %84, align 4, !dbg !238
  %158 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %159 = getelementptr inbounds [0 x i32], [0 x i32]* %158, i64 0, i64 0, !dbg !238
  %160 = load i32, i32* %159, align 4, !dbg !238
  %161 = load float, float* %89, align 4, !dbg !238
  %162 = load float, float* %91, align 4, !dbg !238
  %163 = getelementptr inbounds [0 x float], [0 x float]* %148, i64 0, i64 1, !dbg !238
  %164 = sext i32 %97 to i64, !dbg !238
  %165 = getelementptr inbounds float, float* %163, i64 %164, !dbg !238
  %166 = load float, float* %165, align 4, !dbg !238
  %167 = mul nsw i32 %160, %size, !dbg !238
  %i1100 = add nsw i32 %97, %167, !dbg !238
  %168 = sext i32 %i1100 to i64, !dbg !238
  %169 = getelementptr inbounds float, float* %163, i64 %168, !dbg !238
  %170 = load float, float* %169, align 4, !dbg !238
  %171 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %172 = getelementptr inbounds [0 x i32], [0 x i32]* %171, i64 0, i64 0, !dbg !238
  %173 = load i32, i32* %172, align 4, !dbg !238
  %174 = load float, float* %89, align 4, !dbg !238
  %175 = load float, float* %91, align 4, !dbg !238
  %176 = mul nsw i32 %155, %size, !dbg !238
  %i1101 = add nsw i32 %97, %176, !dbg !238
  %177 = sext i32 %i1101 to i64, !dbg !238
  %178 = getelementptr inbounds float, float* %163, i64 %177, !dbg !238
  %179 = load float, float* %178, align 4, !dbg !238
  %180 = mul nsw i32 %173, %size, !dbg !238
  %i1102 = add nsw i32 %i1101, %180, !dbg !238
  %181 = sext i32 %i1102 to i64, !dbg !238
  %182 = getelementptr inbounds float, float* %163, i64 %181, !dbg !238
  %183 = load float, float* %182, align 4, !dbg !238
  %184 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %185 = getelementptr inbounds [0 x i32], [0 x i32]* %184, i64 0, i64 1, !dbg !238
  %186 = load i32, i32* %185, align 4, !dbg !238
  %187 = load float, float* %82, align 4, !dbg !238
  %188 = load float, float* %84, align 4, !dbg !238
  %189 = getelementptr inbounds [0 x i32], [0 x i32]* %184, i64 0, i64 0, !dbg !238
  %190 = load i32, i32* %189, align 4, !dbg !238
  %191 = load float, float* %89, align 4, !dbg !238
  %192 = load float, float* %91, align 4, !dbg !238
  %193 = mul nsw i32 %151, %size, !dbg !238
  %i1103 = add nsw i32 %97, %193, !dbg !238
  %194 = sext i32 %i1103 to i64, !dbg !238
  %195 = getelementptr inbounds float, float* %163, i64 %194, !dbg !238
  %196 = load float, float* %195, align 4, !dbg !238
  %197 = mul nsw i32 %190, %size, !dbg !238
  %i1104 = add nsw i32 %i1103, %197, !dbg !238
  %198 = sext i32 %i1104 to i64, !dbg !238
  %199 = getelementptr inbounds float, float* %163, i64 %198, !dbg !238
  %200 = load float, float* %199, align 4, !dbg !238
  %201 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %202 = getelementptr inbounds [0 x i32], [0 x i32]* %201, i64 0, i64 0, !dbg !238
  %203 = load i32, i32* %202, align 4, !dbg !238
  %204 = load float, float* %89, align 4, !dbg !238
  %205 = load float, float* %91, align 4, !dbg !238
  %206 = mul nsw i32 %186, %size, !dbg !238
  %i1105 = add nsw i32 %i1103, %206, !dbg !238
  %207 = sext i32 %i1105 to i64, !dbg !238
  %208 = getelementptr inbounds float, float* %163, i64 %207, !dbg !238
  %209 = load float, float* %208, align 4, !dbg !238
  %210 = mul nsw i32 %203, %size, !dbg !238
  %i1106 = add nsw i32 %i1105, %210, !dbg !238
  %211 = sext i32 %i1106 to i64, !dbg !238
  %212 = getelementptr inbounds float, float* %163, i64 %211, !dbg !238
  %213 = load float, float* %212, align 4, !dbg !238
  %214 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %215 = load i32, i32* %65, align 4, !dbg !238
  %216 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %217 = getelementptr inbounds [0 x i32], [0 x i32]* %216, i64 0, i64 2, !dbg !238
  %218 = load i32, i32* %217, align 4, !dbg !238
  %219 = load float, float* %75, align 4, !dbg !238
  %220 = load float, float* %77, align 4, !dbg !238
  %221 = getelementptr inbounds [0 x i32], [0 x i32]* %216, i64 0, i64 1, !dbg !238
  %222 = load i32, i32* %221, align 4, !dbg !238
  %223 = load float, float* %82, align 4, !dbg !238
  %224 = load float, float* %84, align 4, !dbg !238
  %225 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %226 = getelementptr inbounds [0 x i32], [0 x i32]* %225, i64 0, i64 0, !dbg !238
  %227 = load i32, i32* %226, align 4, !dbg !238
  %228 = load float, float* %89, align 4, !dbg !238
  %229 = load float, float* %91, align 4, !dbg !238
  %230 = sext i32 %215 to i64, !dbg !238
  %231 = getelementptr inbounds [0 x float], [0 x float]* %214, i64 0, i64 %230, !dbg !238
  %232 = sext i32 %97 to i64, !dbg !238
  %233 = getelementptr inbounds float, float* %231, i64 %232, !dbg !238
  %234 = load float, float* %233, align 4, !dbg !238
  %235 = mul nsw i32 %227, %size, !dbg !238
  %i1107 = add nsw i32 %97, %235, !dbg !238
  %236 = sext i32 %i1107 to i64, !dbg !238
  %237 = getelementptr inbounds float, float* %231, i64 %236, !dbg !238
  %238 = load float, float* %237, align 4, !dbg !238
  %239 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %240 = getelementptr inbounds [0 x i32], [0 x i32]* %239, i64 0, i64 0, !dbg !238
  %241 = load i32, i32* %240, align 4, !dbg !238
  %242 = load float, float* %89, align 4, !dbg !238
  %243 = load float, float* %91, align 4, !dbg !238
  %244 = mul nsw i32 %222, %size, !dbg !238
  %i1108 = add nsw i32 %97, %244, !dbg !238
  %245 = sext i32 %i1108 to i64, !dbg !238
  %246 = getelementptr inbounds float, float* %231, i64 %245, !dbg !238
  %247 = load float, float* %246, align 4, !dbg !238
  %248 = mul nsw i32 %241, %size, !dbg !238
  %i1109 = add nsw i32 %i1108, %248, !dbg !238
  %249 = sext i32 %i1109 to i64, !dbg !238
  %250 = getelementptr inbounds float, float* %231, i64 %249, !dbg !238
  %251 = load float, float* %250, align 4, !dbg !238
  %252 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %253 = getelementptr inbounds [0 x i32], [0 x i32]* %252, i64 0, i64 1, !dbg !238
  %254 = load i32, i32* %253, align 4, !dbg !238
  %255 = load float, float* %82, align 4, !dbg !238
  %256 = load float, float* %84, align 4, !dbg !238
  %257 = getelementptr inbounds [0 x i32], [0 x i32]* %252, i64 0, i64 0, !dbg !238
  %258 = load i32, i32* %257, align 4, !dbg !238
  %259 = load float, float* %89, align 4, !dbg !238
  %260 = load float, float* %91, align 4, !dbg !238
  %261 = mul nsw i32 %218, %size, !dbg !238
  %i1110 = add nsw i32 %97, %261, !dbg !238
  %262 = sext i32 %i1110 to i64, !dbg !238
  %263 = getelementptr inbounds float, float* %231, i64 %262, !dbg !238
  %264 = load float, float* %263, align 4, !dbg !238
  %265 = mul nsw i32 %258, %size, !dbg !238
  %i1111 = add nsw i32 %i1110, %265, !dbg !238
  %266 = sext i32 %i1111 to i64, !dbg !238
  %267 = getelementptr inbounds float, float* %231, i64 %266, !dbg !238
  %268 = load float, float* %267, align 4, !dbg !238
  %269 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %270 = getelementptr inbounds [0 x i32], [0 x i32]* %269, i64 0, i64 0, !dbg !238
  %271 = load i32, i32* %270, align 4, !dbg !238
  %272 = load float, float* %89, align 4, !dbg !238
  %273 = load float, float* %91, align 4, !dbg !238
  %274 = mul nsw i32 %254, %size, !dbg !238
  %i1112 = add nsw i32 %i1110, %274, !dbg !238
  %275 = sext i32 %i1112 to i64, !dbg !238
  %276 = getelementptr inbounds float, float* %231, i64 %275, !dbg !238
  %277 = load float, float* %276, align 4, !dbg !238
  %278 = mul nsw i32 %271, %size, !dbg !238
  %i1113 = add nsw i32 %i1112, %278, !dbg !238
  %279 = sext i32 %i1113 to i64, !dbg !238
  %280 = getelementptr inbounds float, float* %231, i64 %279, !dbg !238
  %281 = load float, float* %280, align 4, !dbg !238
  %282 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %283 = load i32, i32* %65, align 4, !dbg !238
  %284 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %285 = getelementptr inbounds [0 x i32], [0 x i32]* %284, i64 0, i64 2, !dbg !238
  %286 = load i32, i32* %285, align 4, !dbg !238
  %287 = load float, float* %75, align 4, !dbg !238
  %288 = load float, float* %77, align 4, !dbg !238
  %289 = getelementptr inbounds [0 x i32], [0 x i32]* %284, i64 0, i64 1, !dbg !238
  %290 = load i32, i32* %289, align 4, !dbg !238
  %291 = load float, float* %82, align 4, !dbg !238
  %292 = load float, float* %84, align 4, !dbg !238
  %293 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %294 = getelementptr inbounds [0 x i32], [0 x i32]* %293, i64 0, i64 0, !dbg !238
  %295 = load i32, i32* %294, align 4, !dbg !238
  %296 = load float, float* %89, align 4, !dbg !238
  %297 = load float, float* %91, align 4, !dbg !238
  %298 = add nsw i32 %283, 1, !dbg !238
  %299 = sext i32 %298 to i64, !dbg !238
  %300 = getelementptr inbounds [0 x float], [0 x float]* %282, i64 0, i64 %299, !dbg !238
  %301 = sext i32 %97 to i64, !dbg !238
  %302 = getelementptr inbounds float, float* %300, i64 %301, !dbg !238
  %303 = load float, float* %302, align 4, !dbg !238
  %304 = mul nsw i32 %295, %size, !dbg !238
  %i1114 = add nsw i32 %97, %304, !dbg !238
  %305 = sext i32 %i1114 to i64, !dbg !238
  %306 = getelementptr inbounds float, float* %300, i64 %305, !dbg !238
  %307 = load float, float* %306, align 4, !dbg !238
  %308 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %309 = getelementptr inbounds [0 x i32], [0 x i32]* %308, i64 0, i64 0, !dbg !238
  %310 = load i32, i32* %309, align 4, !dbg !238
  %311 = load float, float* %89, align 4, !dbg !238
  %312 = load float, float* %91, align 4, !dbg !238
  %313 = mul nsw i32 %290, %size, !dbg !238
  %i1115 = add nsw i32 %97, %313, !dbg !238
  %314 = sext i32 %i1115 to i64, !dbg !238
  %315 = getelementptr inbounds float, float* %300, i64 %314, !dbg !238
  %316 = load float, float* %315, align 4, !dbg !238
  %317 = mul nsw i32 %310, %size, !dbg !238
  %i1116 = add nsw i32 %i1115, %317, !dbg !238
  %318 = sext i32 %i1116 to i64, !dbg !238
  %319 = getelementptr inbounds float, float* %300, i64 %318, !dbg !238
  %320 = load float, float* %319, align 4, !dbg !238
  %321 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %322 = getelementptr inbounds [0 x i32], [0 x i32]* %321, i64 0, i64 1, !dbg !238
  %323 = load i32, i32* %322, align 4, !dbg !238
  %324 = load float, float* %82, align 4, !dbg !238
  %325 = load float, float* %84, align 4, !dbg !238
  %326 = getelementptr inbounds [0 x i32], [0 x i32]* %321, i64 0, i64 0, !dbg !238
  %327 = load i32, i32* %326, align 4, !dbg !238
  %328 = load float, float* %89, align 4, !dbg !238
  %329 = load float, float* %91, align 4, !dbg !238
  %330 = mul nsw i32 %286, %size, !dbg !238
  %i1117 = add nsw i32 %97, %330, !dbg !238
  %331 = sext i32 %i1117 to i64, !dbg !238
  %332 = getelementptr inbounds float, float* %300, i64 %331, !dbg !238
  %333 = load float, float* %332, align 4, !dbg !238
  %334 = mul nsw i32 %327, %size, !dbg !238
  %i1118 = add nsw i32 %i1117, %334, !dbg !238
  %335 = sext i32 %i1118 to i64, !dbg !238
  %336 = getelementptr inbounds float, float* %300, i64 %335, !dbg !238
  %337 = load float, float* %336, align 4, !dbg !238
  %338 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %339 = getelementptr inbounds [0 x i32], [0 x i32]* %338, i64 0, i64 0, !dbg !238
  %340 = load i32, i32* %339, align 4, !dbg !238
  %341 = load float, float* %89, align 4, !dbg !238
  %342 = load float, float* %91, align 4, !dbg !238
  %343 = mul nsw i32 %323, %size, !dbg !238
  %i1119 = add nsw i32 %i1117, %343, !dbg !238
  %344 = sext i32 %i1119 to i64, !dbg !238
  %345 = getelementptr inbounds float, float* %300, i64 %344, !dbg !238
  %346 = load float, float* %345, align 4, !dbg !238
  %347 = mul nsw i32 %340, %size, !dbg !238
  %i1120 = add nsw i32 %i1119, %347, !dbg !238
  %348 = sext i32 %i1120 to i64, !dbg !238
  %349 = getelementptr inbounds float, float* %300, i64 %348, !dbg !238
  %350 = load float, float* %349, align 4, !dbg !238
  %351 = getelementptr inbounds %3, %3* %49, i64 0, i32 0, !dbg !238
  %352 = load float, float* %351, align 4, !dbg !238
  %353 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 2, i32 1, !dbg !238
  %354 = load float, float* %353, align 4, !dbg !238
  %355 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 0, !dbg !238
  %356 = fsub float %59, %64, !dbg !238
  %357 = fsub float 1.000000e+00, %356, !dbg !238
  %358 = fsub float %52, %57, !dbg !238
  %359 = fsub float 1.000000e+00, %358, !dbg !238
  %360 = fmul float %100, %90, !dbg !238
  %361 = fmul float %104, %92, !dbg !238
  %362 = fadd float %360, %361, !dbg !238
  %363 = fmul float %362, %83, !dbg !238
  %364 = fmul float %113, %108, !dbg !238
  %365 = fmul float %117, %109, !dbg !238
  %366 = fadd float %364, %365, !dbg !238
  %367 = fmul float %366, %85, !dbg !238
  %368 = fadd float %363, %367, !dbg !238
  %369 = fmul float %368, %76, !dbg !238
  %370 = fmul float %130, %125, !dbg !238
  %371 = fmul float %134, %126, !dbg !238
  %372 = fadd float %370, %371, !dbg !238
  %373 = fmul float %372, %121, !dbg !238
  %374 = fmul float %143, %138, !dbg !238
  %375 = fmul float %147, %139, !dbg !238
  %376 = fadd float %374, %375, !dbg !238
  %377 = fmul float %376, %122, !dbg !238
  %378 = fadd float %373, %377, !dbg !238
  %379 = fmul float %378, %78, !dbg !238
  %380 = fadd float %369, %379, !dbg !238
  %381 = fmul float %359, %380, !dbg !238
  %382 = fmul float %166, %161, !dbg !238
  %383 = fmul float %170, %162, !dbg !238
  %384 = fadd float %382, %383, !dbg !238
  %385 = fmul float %384, %156, !dbg !238
  %386 = fmul float %179, %174, !dbg !238
  %387 = fmul float %183, %175, !dbg !238
  %388 = fadd float %386, %387, !dbg !238
  %389 = fmul float %388, %157, !dbg !238
  %390 = fadd float %385, %389, !dbg !238
  %391 = fmul float %390, %152, !dbg !238
  %392 = fmul float %196, %191, !dbg !238
  %393 = fmul float %200, %192, !dbg !238
  %394 = fadd float %392, %393, !dbg !238
  %395 = fmul float %394, %187, !dbg !238
  %396 = fmul float %209, %204, !dbg !238
  %397 = fmul float %213, %205, !dbg !238
  %398 = fadd float %396, %397, !dbg !238
  %399 = fmul float %398, %188, !dbg !238
  %400 = fadd float %395, %399, !dbg !238
  %401 = fmul float %400, %153, !dbg !238
  %402 = fadd float %391, %401, !dbg !238
  %403 = fmul float %358, %402, !dbg !238
  %404 = fadd float %381, %403, !dbg !238
  %405 = fmul float %357, %404, !dbg !238
  %406 = fmul float %234, %228, !dbg !238
  %407 = fmul float %238, %229, !dbg !238
  %408 = fadd float %406, %407, !dbg !238
  %409 = fmul float %408, %223, !dbg !238
  %410 = fmul float %247, %242, !dbg !238
  %411 = fmul float %251, %243, !dbg !238
  %412 = fadd float %410, %411, !dbg !238
  %413 = fmul float %412, %224, !dbg !238
  %414 = fadd float %409, %413, !dbg !238
  %415 = fmul float %414, %219, !dbg !238
  %416 = fmul float %264, %259, !dbg !238
  %417 = fmul float %268, %260, !dbg !238
  %418 = fadd float %416, %417, !dbg !238
  %419 = fmul float %418, %255, !dbg !238
  %420 = fmul float %277, %272, !dbg !238
  %421 = fmul float %281, %273, !dbg !238
  %422 = fadd float %420, %421, !dbg !238
  %423 = fmul float %422, %256, !dbg !238
  %424 = fadd float %419, %423, !dbg !238
  %425 = fmul float %424, %220, !dbg !238
  %426 = fadd float %415, %425, !dbg !238
  %427 = fmul float %359, %426, !dbg !238
  %428 = fmul float %303, %296, !dbg !238
  %429 = fmul float %307, %297, !dbg !238
  %430 = fadd float %428, %429, !dbg !238
  %431 = fmul float %430, %291, !dbg !238
  %432 = fmul float %316, %311, !dbg !238
  %433 = fmul float %320, %312, !dbg !238
  %434 = fadd float %432, %433, !dbg !238
  %435 = fmul float %434, %292, !dbg !238
  %436 = fadd float %431, %435, !dbg !238
  %437 = fmul float %436, %287, !dbg !238
  %438 = fmul float %333, %328, !dbg !238
  %439 = fmul float %337, %329, !dbg !238
  %440 = fadd float %438, %439, !dbg !238
  %441 = fmul float %440, %324, !dbg !238
  %442 = fmul float %346, %341, !dbg !238
  %443 = fmul float %350, %342, !dbg !238
  %444 = fadd float %442, %443, !dbg !238
  %445 = fmul float %444, %325, !dbg !238
  %446 = fadd float %441, %445, !dbg !238
  %447 = fmul float %446, %288, !dbg !238
  %448 = fadd float %437, %447, !dbg !238
  %449 = fmul float %358, %448, !dbg !238
  %450 = fadd float %427, %449, !dbg !238
  %451 = fmul float %356, %450, !dbg !238
  %452 = fadd float %405, %451, !dbg !238
  %hprod = fmul float %352, %354, !dbg !238
  %453 = fmul float %452, %hprod, !dbg !238
  store float %453, float* %355, align 8, !dbg !238
  %param_weight_2197815.repack = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 0, !dbg !238
  store float 0.000000e+00, float* %param_weight_2197815.repack, align 4, !dbg !238
  %param_weight_2197815.repack219 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 1, !dbg !238
  store float 0.000000e+00, float* %param_weight_2197815.repack219, align 4, !dbg !238
  %param_weight_2197815.repack220 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 2, !dbg !238
  store float 0.000000e+00, float* %param_weight_2197815.repack220, align 4, !dbg !238
  %param_weight_2197815.repack221 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 3, !dbg !238
  store float 0.000000e+00, float* %param_weight_2197815.repack221, align 4, !dbg !238
  %param_weight_2197815.repack222 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 4, !dbg !238
  store float 0.000000e+00, float* %param_weight_2197815.repack222, align 4, !dbg !238
  %param_weight_2197815.repack223 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 5, !dbg !238
  store float 0.000000e+00, float* %param_weight_2197815.repack223, align 4, !dbg !238
  store i32 0, i32* %slice_offset_2197923, align 4, !dbg !238
  store i32 0, i32* %dim_2197793, align 4, !dbg !238
  br label %expr_true56, !dbg !235

expr_false22:                                     ; preds = %continue73
  %.elt224 = getelementptr inbounds %3, %3* %49, i64 0, i32 0, !dbg !236
  %.unpack225 = load float, float* %.elt224, align 4, !dbg !236
  %.elt228 = getelementptr inbounds %7, %7* %44, i64 0, i32 0, i32 0, !dbg !236
  %.unpack229 = load i32, i32* %.elt228, align 4, !dbg !236
  %454 = fmul float %51, %.unpack225, !dbg !236
  %455 = sitofp i32 %.unpack229 to float, !dbg !236
  %456 = fadd float %455, -2.000000e+00, !dbg !236
  %457 = fcmp olt float %454, %456, !dbg !236
  %458 = select i1 %457, float %454, float %456, !dbg !236
  %459 = call float @llvm.floor.f32(float %458), !dbg !236
  %.elt230 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 0, i32 1, !dbg !236
  %.unpack231 = load i32, i32* %.elt230, align 4, !dbg !236
  %.elt226 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 2, i32 1, !dbg !236
  %.unpack227 = load float, float* %.elt226, align 4, !dbg !236
  %460 = fmul float %58, %.unpack227, !dbg !237
  %461 = sitofp i32 %.unpack231 to float, !dbg !237
  %462 = fadd float %461, -2.000000e+00, !dbg !237
  %463 = fcmp olt float %460, %462, !dbg !237
  %464 = select i1 %463, float %460, float %462, !dbg !237
  %465 = call float @llvm.floor.f32(float %464), !dbg !237
  %466 = load i32, i32* %65, align 4, !dbg !238
  %467 = load i32, i32* %67, align 4, !dbg !238
  %468 = load i32, i32* %slice_offset_2197923, align 4, !dbg !238
  %469 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %470 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %471 = getelementptr inbounds [0 x i32], [0 x i32]* %470, i64 0, i64 2, !dbg !238
  %472 = load i32, i32* %471, align 4, !dbg !238
  %473 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 4, !dbg !238
  %474 = load float, float* %473, align 4, !dbg !238
  %475 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 5, !dbg !238
  %476 = load float, float* %475, align 4, !dbg !238
  %477 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %478 = getelementptr inbounds [0 x i32], [0 x i32]* %477, i64 0, i64 1, !dbg !238
  %479 = load i32, i32* %478, align 4, !dbg !238
  %480 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 2, !dbg !238
  %481 = load float, float* %480, align 4, !dbg !238
  %482 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 3, !dbg !238
  %483 = load float, float* %482, align 4, !dbg !238
  %484 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %485 = getelementptr inbounds [0 x i32], [0 x i32]* %484, i64 0, i64 0, !dbg !238
  %486 = load i32, i32* %485, align 4, !dbg !238
  %487 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 0, !dbg !238
  %488 = load float, float* %487, align 4, !dbg !238
  %489 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 1, !dbg !238
  %490 = load float, float* %489, align 4, !dbg !238
  %491 = fptosi float %459 to i32, !dbg !238
  %492 = fptosi float %465 to i32, !dbg !238
  %493 = mul nsw i32 %466, %492, !dbg !238
  %index121 = add nsw i32 %493, %491, !dbg !238
  %size122 = mul nsw i32 %466, %467, !dbg !238
  %494 = mul nsw i32 %468, %size122, !dbg !238
  %495 = add nsw i32 %index121, %494, !dbg !238
  %496 = sext i32 %495 to i64, !dbg !238
  %497 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %496, !dbg !238
  %498 = load float, float* %497, align 4, !dbg !238
  %499 = mul nsw i32 %486, %size122, !dbg !238
  %i1123 = add nsw i32 %495, %499, !dbg !238
  %500 = sext i32 %i1123 to i64, !dbg !238
  %501 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %500, !dbg !238
  %502 = load float, float* %501, align 4, !dbg !238
  %503 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %504 = getelementptr inbounds [0 x i32], [0 x i32]* %503, i64 0, i64 0, !dbg !238
  %505 = load i32, i32* %504, align 4, !dbg !238
  %506 = load float, float* %487, align 4, !dbg !238
  %507 = load float, float* %489, align 4, !dbg !238
  %508 = mul nsw i32 %479, %size122, !dbg !238
  %i1124 = add nsw i32 %495, %508, !dbg !238
  %509 = sext i32 %i1124 to i64, !dbg !238
  %510 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %509, !dbg !238
  %511 = load float, float* %510, align 4, !dbg !238
  %512 = mul nsw i32 %505, %size122, !dbg !238
  %i1125 = add nsw i32 %i1124, %512, !dbg !238
  %513 = sext i32 %i1125 to i64, !dbg !238
  %514 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %513, !dbg !238
  %515 = load float, float* %514, align 4, !dbg !238
  %516 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %517 = getelementptr inbounds [0 x i32], [0 x i32]* %516, i64 0, i64 1, !dbg !238
  %518 = load i32, i32* %517, align 4, !dbg !238
  %519 = load float, float* %480, align 4, !dbg !238
  %520 = load float, float* %482, align 4, !dbg !238
  %521 = getelementptr inbounds [0 x i32], [0 x i32]* %516, i64 0, i64 0, !dbg !238
  %522 = load i32, i32* %521, align 4, !dbg !238
  %523 = load float, float* %487, align 4, !dbg !238
  %524 = load float, float* %489, align 4, !dbg !238
  %525 = mul nsw i32 %472, %size122, !dbg !238
  %i1126 = add nsw i32 %495, %525, !dbg !238
  %526 = sext i32 %i1126 to i64, !dbg !238
  %527 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %526, !dbg !238
  %528 = load float, float* %527, align 4, !dbg !238
  %529 = mul nsw i32 %522, %size122, !dbg !238
  %i1127 = add nsw i32 %i1126, %529, !dbg !238
  %530 = sext i32 %i1127 to i64, !dbg !238
  %531 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %530, !dbg !238
  %532 = load float, float* %531, align 4, !dbg !238
  %533 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %534 = getelementptr inbounds [0 x i32], [0 x i32]* %533, i64 0, i64 0, !dbg !238
  %535 = load i32, i32* %534, align 4, !dbg !238
  %536 = load float, float* %487, align 4, !dbg !238
  %537 = load float, float* %489, align 4, !dbg !238
  %538 = mul nsw i32 %518, %size122, !dbg !238
  %i1128 = add nsw i32 %i1126, %538, !dbg !238
  %539 = sext i32 %i1128 to i64, !dbg !238
  %540 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %539, !dbg !238
  %541 = load float, float* %540, align 4, !dbg !238
  %542 = mul nsw i32 %535, %size122, !dbg !238
  %i1129 = add nsw i32 %i1128, %542, !dbg !238
  %543 = sext i32 %i1129 to i64, !dbg !238
  %544 = getelementptr inbounds [0 x float], [0 x float]* %469, i64 0, i64 %543, !dbg !238
  %545 = load float, float* %544, align 4, !dbg !238
  %546 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %547 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %548 = getelementptr inbounds [0 x i32], [0 x i32]* %547, i64 0, i64 2, !dbg !238
  %549 = load i32, i32* %548, align 4, !dbg !238
  %550 = load float, float* %473, align 4, !dbg !238
  %551 = load float, float* %475, align 4, !dbg !238
  %552 = getelementptr inbounds [0 x i32], [0 x i32]* %547, i64 0, i64 1, !dbg !238
  %553 = load i32, i32* %552, align 4, !dbg !238
  %554 = load float, float* %480, align 4, !dbg !238
  %555 = load float, float* %482, align 4, !dbg !238
  %556 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %557 = getelementptr inbounds [0 x i32], [0 x i32]* %556, i64 0, i64 0, !dbg !238
  %558 = load i32, i32* %557, align 4, !dbg !238
  %559 = load float, float* %487, align 4, !dbg !238
  %560 = load float, float* %489, align 4, !dbg !238
  %561 = getelementptr inbounds [0 x float], [0 x float]* %546, i64 0, i64 1, !dbg !238
  %562 = sext i32 %495 to i64, !dbg !238
  %563 = getelementptr inbounds float, float* %561, i64 %562, !dbg !238
  %564 = load float, float* %563, align 4, !dbg !238
  %565 = mul nsw i32 %558, %size122, !dbg !238
  %i1130 = add nsw i32 %495, %565, !dbg !238
  %566 = sext i32 %i1130 to i64, !dbg !238
  %567 = getelementptr inbounds float, float* %561, i64 %566, !dbg !238
  %568 = load float, float* %567, align 4, !dbg !238
  %569 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %570 = getelementptr inbounds [0 x i32], [0 x i32]* %569, i64 0, i64 0, !dbg !238
  %571 = load i32, i32* %570, align 4, !dbg !238
  %572 = load float, float* %487, align 4, !dbg !238
  %573 = load float, float* %489, align 4, !dbg !238
  %574 = mul nsw i32 %553, %size122, !dbg !238
  %i1131 = add nsw i32 %495, %574, !dbg !238
  %575 = sext i32 %i1131 to i64, !dbg !238
  %576 = getelementptr inbounds float, float* %561, i64 %575, !dbg !238
  %577 = load float, float* %576, align 4, !dbg !238
  %578 = mul nsw i32 %571, %size122, !dbg !238
  %i1132 = add nsw i32 %i1131, %578, !dbg !238
  %579 = sext i32 %i1132 to i64, !dbg !238
  %580 = getelementptr inbounds float, float* %561, i64 %579, !dbg !238
  %581 = load float, float* %580, align 4, !dbg !238
  %582 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %583 = getelementptr inbounds [0 x i32], [0 x i32]* %582, i64 0, i64 1, !dbg !238
  %584 = load i32, i32* %583, align 4, !dbg !238
  %585 = load float, float* %480, align 4, !dbg !238
  %586 = load float, float* %482, align 4, !dbg !238
  %587 = getelementptr inbounds [0 x i32], [0 x i32]* %582, i64 0, i64 0, !dbg !238
  %588 = load i32, i32* %587, align 4, !dbg !238
  %589 = load float, float* %487, align 4, !dbg !238
  %590 = load float, float* %489, align 4, !dbg !238
  %591 = mul nsw i32 %549, %size122, !dbg !238
  %i1133 = add nsw i32 %495, %591, !dbg !238
  %592 = sext i32 %i1133 to i64, !dbg !238
  %593 = getelementptr inbounds float, float* %561, i64 %592, !dbg !238
  %594 = load float, float* %593, align 4, !dbg !238
  %595 = mul nsw i32 %588, %size122, !dbg !238
  %i1134 = add nsw i32 %i1133, %595, !dbg !238
  %596 = sext i32 %i1134 to i64, !dbg !238
  %597 = getelementptr inbounds float, float* %561, i64 %596, !dbg !238
  %598 = load float, float* %597, align 4, !dbg !238
  %599 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %600 = getelementptr inbounds [0 x i32], [0 x i32]* %599, i64 0, i64 0, !dbg !238
  %601 = load i32, i32* %600, align 4, !dbg !238
  %602 = load float, float* %487, align 4, !dbg !238
  %603 = load float, float* %489, align 4, !dbg !238
  %604 = mul nsw i32 %584, %size122, !dbg !238
  %i1135 = add nsw i32 %i1133, %604, !dbg !238
  %605 = sext i32 %i1135 to i64, !dbg !238
  %606 = getelementptr inbounds float, float* %561, i64 %605, !dbg !238
  %607 = load float, float* %606, align 4, !dbg !238
  %608 = mul nsw i32 %601, %size122, !dbg !238
  %i1136 = add nsw i32 %i1135, %608, !dbg !238
  %609 = sext i32 %i1136 to i64, !dbg !238
  %610 = getelementptr inbounds float, float* %561, i64 %609, !dbg !238
  %611 = load float, float* %610, align 4, !dbg !238
  %612 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %613 = load i32, i32* %65, align 4, !dbg !238
  %614 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %615 = getelementptr inbounds [0 x i32], [0 x i32]* %614, i64 0, i64 2, !dbg !238
  %616 = load i32, i32* %615, align 4, !dbg !238
  %617 = load float, float* %473, align 4, !dbg !238
  %618 = load float, float* %475, align 4, !dbg !238
  %619 = getelementptr inbounds [0 x i32], [0 x i32]* %614, i64 0, i64 1, !dbg !238
  %620 = load i32, i32* %619, align 4, !dbg !238
  %621 = load float, float* %480, align 4, !dbg !238
  %622 = load float, float* %482, align 4, !dbg !238
  %623 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %624 = getelementptr inbounds [0 x i32], [0 x i32]* %623, i64 0, i64 0, !dbg !238
  %625 = load i32, i32* %624, align 4, !dbg !238
  %626 = load float, float* %487, align 4, !dbg !238
  %627 = load float, float* %489, align 4, !dbg !238
  %628 = sext i32 %613 to i64, !dbg !238
  %629 = getelementptr inbounds [0 x float], [0 x float]* %612, i64 0, i64 %628, !dbg !238
  %630 = sext i32 %495 to i64, !dbg !238
  %631 = getelementptr inbounds float, float* %629, i64 %630, !dbg !238
  %632 = load float, float* %631, align 4, !dbg !238
  %633 = mul nsw i32 %625, %size122, !dbg !238
  %i1137 = add nsw i32 %495, %633, !dbg !238
  %634 = sext i32 %i1137 to i64, !dbg !238
  %635 = getelementptr inbounds float, float* %629, i64 %634, !dbg !238
  %636 = load float, float* %635, align 4, !dbg !238
  %637 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %638 = getelementptr inbounds [0 x i32], [0 x i32]* %637, i64 0, i64 0, !dbg !238
  %639 = load i32, i32* %638, align 4, !dbg !238
  %640 = load float, float* %487, align 4, !dbg !238
  %641 = load float, float* %489, align 4, !dbg !238
  %642 = mul nsw i32 %620, %size122, !dbg !238
  %i1138 = add nsw i32 %495, %642, !dbg !238
  %643 = sext i32 %i1138 to i64, !dbg !238
  %644 = getelementptr inbounds float, float* %629, i64 %643, !dbg !238
  %645 = load float, float* %644, align 4, !dbg !238
  %646 = mul nsw i32 %639, %size122, !dbg !238
  %i1139 = add nsw i32 %i1138, %646, !dbg !238
  %647 = sext i32 %i1139 to i64, !dbg !238
  %648 = getelementptr inbounds float, float* %629, i64 %647, !dbg !238
  %649 = load float, float* %648, align 4, !dbg !238
  %650 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %651 = getelementptr inbounds [0 x i32], [0 x i32]* %650, i64 0, i64 1, !dbg !238
  %652 = load i32, i32* %651, align 4, !dbg !238
  %653 = load float, float* %480, align 4, !dbg !238
  %654 = load float, float* %482, align 4, !dbg !238
  %655 = getelementptr inbounds [0 x i32], [0 x i32]* %650, i64 0, i64 0, !dbg !238
  %656 = load i32, i32* %655, align 4, !dbg !238
  %657 = load float, float* %487, align 4, !dbg !238
  %658 = load float, float* %489, align 4, !dbg !238
  %659 = mul nsw i32 %616, %size122, !dbg !238
  %i1140 = add nsw i32 %495, %659, !dbg !238
  %660 = sext i32 %i1140 to i64, !dbg !238
  %661 = getelementptr inbounds float, float* %629, i64 %660, !dbg !238
  %662 = load float, float* %661, align 4, !dbg !238
  %663 = mul nsw i32 %656, %size122, !dbg !238
  %i1141 = add nsw i32 %i1140, %663, !dbg !238
  %664 = sext i32 %i1141 to i64, !dbg !238
  %665 = getelementptr inbounds float, float* %629, i64 %664, !dbg !238
  %666 = load float, float* %665, align 4, !dbg !238
  %667 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %668 = getelementptr inbounds [0 x i32], [0 x i32]* %667, i64 0, i64 0, !dbg !238
  %669 = load i32, i32* %668, align 4, !dbg !238
  %670 = load float, float* %487, align 4, !dbg !238
  %671 = load float, float* %489, align 4, !dbg !238
  %672 = mul nsw i32 %652, %size122, !dbg !238
  %i1142 = add nsw i32 %i1140, %672, !dbg !238
  %673 = sext i32 %i1142 to i64, !dbg !238
  %674 = getelementptr inbounds float, float* %629, i64 %673, !dbg !238
  %675 = load float, float* %674, align 4, !dbg !238
  %676 = mul nsw i32 %669, %size122, !dbg !238
  %i1143 = add nsw i32 %i1142, %676, !dbg !238
  %677 = sext i32 %i1143 to i64, !dbg !238
  %678 = getelementptr inbounds float, float* %629, i64 %677, !dbg !238
  %679 = load float, float* %678, align 4, !dbg !238
  %680 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %681 = load i32, i32* %65, align 4, !dbg !238
  %682 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %683 = getelementptr inbounds [0 x i32], [0 x i32]* %682, i64 0, i64 2, !dbg !238
  %684 = load i32, i32* %683, align 4, !dbg !238
  %685 = load float, float* %473, align 4, !dbg !238
  %686 = load float, float* %475, align 4, !dbg !238
  %687 = getelementptr inbounds [0 x i32], [0 x i32]* %682, i64 0, i64 1, !dbg !238
  %688 = load i32, i32* %687, align 4, !dbg !238
  %689 = load float, float* %480, align 4, !dbg !238
  %690 = load float, float* %482, align 4, !dbg !238
  %691 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %692 = getelementptr inbounds [0 x i32], [0 x i32]* %691, i64 0, i64 0, !dbg !238
  %693 = load i32, i32* %692, align 4, !dbg !238
  %694 = load float, float* %487, align 4, !dbg !238
  %695 = load float, float* %489, align 4, !dbg !238
  %696 = add nsw i32 %681, 1, !dbg !238
  %697 = sext i32 %696 to i64, !dbg !238
  %698 = getelementptr inbounds [0 x float], [0 x float]* %680, i64 0, i64 %697, !dbg !238
  %699 = sext i32 %495 to i64, !dbg !238
  %700 = getelementptr inbounds float, float* %698, i64 %699, !dbg !238
  %701 = load float, float* %700, align 4, !dbg !238
  %702 = mul nsw i32 %693, %size122, !dbg !238
  %i1144 = add nsw i32 %495, %702, !dbg !238
  %703 = sext i32 %i1144 to i64, !dbg !238
  %704 = getelementptr inbounds float, float* %698, i64 %703, !dbg !238
  %705 = load float, float* %704, align 4, !dbg !238
  %706 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %707 = getelementptr inbounds [0 x i32], [0 x i32]* %706, i64 0, i64 0, !dbg !238
  %708 = load i32, i32* %707, align 4, !dbg !238
  %709 = load float, float* %487, align 4, !dbg !238
  %710 = load float, float* %489, align 4, !dbg !238
  %711 = mul nsw i32 %688, %size122, !dbg !238
  %i1145 = add nsw i32 %495, %711, !dbg !238
  %712 = sext i32 %i1145 to i64, !dbg !238
  %713 = getelementptr inbounds float, float* %698, i64 %712, !dbg !238
  %714 = load float, float* %713, align 4, !dbg !238
  %715 = mul nsw i32 %708, %size122, !dbg !238
  %i1146 = add nsw i32 %i1145, %715, !dbg !238
  %716 = sext i32 %i1146 to i64, !dbg !238
  %717 = getelementptr inbounds float, float* %698, i64 %716, !dbg !238
  %718 = load float, float* %717, align 4, !dbg !238
  %719 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %720 = getelementptr inbounds [0 x i32], [0 x i32]* %719, i64 0, i64 1, !dbg !238
  %721 = load i32, i32* %720, align 4, !dbg !238
  %722 = load float, float* %480, align 4, !dbg !238
  %723 = load float, float* %482, align 4, !dbg !238
  %724 = getelementptr inbounds [0 x i32], [0 x i32]* %719, i64 0, i64 0, !dbg !238
  %725 = load i32, i32* %724, align 4, !dbg !238
  %726 = load float, float* %487, align 4, !dbg !238
  %727 = load float, float* %489, align 4, !dbg !238
  %728 = mul nsw i32 %684, %size122, !dbg !238
  %i1147 = add nsw i32 %495, %728, !dbg !238
  %729 = sext i32 %i1147 to i64, !dbg !238
  %730 = getelementptr inbounds float, float* %698, i64 %729, !dbg !238
  %731 = load float, float* %730, align 4, !dbg !238
  %732 = mul nsw i32 %725, %size122, !dbg !238
  %i1148 = add nsw i32 %i1147, %732, !dbg !238
  %733 = sext i32 %i1148 to i64, !dbg !238
  %734 = getelementptr inbounds float, float* %698, i64 %733, !dbg !238
  %735 = load float, float* %734, align 4, !dbg !238
  %736 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %737 = getelementptr inbounds [0 x i32], [0 x i32]* %736, i64 0, i64 0, !dbg !238
  %738 = load i32, i32* %737, align 4, !dbg !238
  %739 = load float, float* %487, align 4, !dbg !238
  %740 = load float, float* %489, align 4, !dbg !238
  %741 = mul nsw i32 %721, %size122, !dbg !238
  %i1149 = add nsw i32 %i1147, %741, !dbg !238
  %742 = sext i32 %i1149 to i64, !dbg !238
  %743 = getelementptr inbounds float, float* %698, i64 %742, !dbg !238
  %744 = load float, float* %743, align 4, !dbg !238
  %745 = mul nsw i32 %738, %size122, !dbg !238
  %i1150 = add nsw i32 %i1149, %745, !dbg !238
  %746 = sext i32 %i1150 to i64, !dbg !238
  %747 = getelementptr inbounds float, float* %698, i64 %746, !dbg !238
  %748 = load float, float* %747, align 4, !dbg !238
  %749 = load float, float* %351, align 4, !dbg !238
  %750 = load float, float* %353, align 4, !dbg !238
  %751 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 1, !dbg !238
  %752 = fsub float %460, %465, !dbg !238
  %753 = fsub float 1.000000e+00, %752, !dbg !238
  %754 = fsub float %454, %459, !dbg !238
  %755 = fsub float 1.000000e+00, %754, !dbg !238
  %756 = fmul float %498, %488, !dbg !238
  %757 = fmul float %502, %490, !dbg !238
  %758 = fadd float %756, %757, !dbg !238
  %759 = fmul float %758, %481, !dbg !238
  %760 = fmul float %511, %506, !dbg !238
  %761 = fmul float %515, %507, !dbg !238
  %762 = fadd float %760, %761, !dbg !238
  %763 = fmul float %762, %483, !dbg !238
  %764 = fadd float %759, %763, !dbg !238
  %765 = fmul float %764, %474, !dbg !238
  %766 = fmul float %528, %523, !dbg !238
  %767 = fmul float %532, %524, !dbg !238
  %768 = fadd float %766, %767, !dbg !238
  %769 = fmul float %768, %519, !dbg !238
  %770 = fmul float %541, %536, !dbg !238
  %771 = fmul float %545, %537, !dbg !238
  %772 = fadd float %770, %771, !dbg !238
  %773 = fmul float %772, %520, !dbg !238
  %774 = fadd float %769, %773, !dbg !238
  %775 = fmul float %774, %476, !dbg !238
  %776 = fadd float %765, %775, !dbg !238
  %777 = fmul float %755, %776, !dbg !238
  %778 = fmul float %564, %559, !dbg !238
  %779 = fmul float %568, %560, !dbg !238
  %780 = fadd float %778, %779, !dbg !238
  %781 = fmul float %780, %554, !dbg !238
  %782 = fmul float %577, %572, !dbg !238
  %783 = fmul float %581, %573, !dbg !238
  %784 = fadd float %782, %783, !dbg !238
  %785 = fmul float %784, %555, !dbg !238
  %786 = fadd float %781, %785, !dbg !238
  %787 = fmul float %786, %550, !dbg !238
  %788 = fmul float %594, %589, !dbg !238
  %789 = fmul float %598, %590, !dbg !238
  %790 = fadd float %788, %789, !dbg !238
  %791 = fmul float %790, %585, !dbg !238
  %792 = fmul float %607, %602, !dbg !238
  %793 = fmul float %611, %603, !dbg !238
  %794 = fadd float %792, %793, !dbg !238
  %795 = fmul float %794, %586, !dbg !238
  %796 = fadd float %791, %795, !dbg !238
  %797 = fmul float %796, %551, !dbg !238
  %798 = fadd float %787, %797, !dbg !238
  %799 = fmul float %754, %798, !dbg !238
  %800 = fadd float %777, %799, !dbg !238
  %801 = fmul float %753, %800, !dbg !238
  %802 = fmul float %632, %626, !dbg !238
  %803 = fmul float %636, %627, !dbg !238
  %804 = fadd float %802, %803, !dbg !238
  %805 = fmul float %804, %621, !dbg !238
  %806 = fmul float %645, %640, !dbg !238
  %807 = fmul float %649, %641, !dbg !238
  %808 = fadd float %806, %807, !dbg !238
  %809 = fmul float %808, %622, !dbg !238
  %810 = fadd float %805, %809, !dbg !238
  %811 = fmul float %810, %617, !dbg !238
  %812 = fmul float %662, %657, !dbg !238
  %813 = fmul float %666, %658, !dbg !238
  %814 = fadd float %812, %813, !dbg !238
  %815 = fmul float %814, %653, !dbg !238
  %816 = fmul float %675, %670, !dbg !238
  %817 = fmul float %679, %671, !dbg !238
  %818 = fadd float %816, %817, !dbg !238
  %819 = fmul float %818, %654, !dbg !238
  %820 = fadd float %815, %819, !dbg !238
  %821 = fmul float %820, %618, !dbg !238
  %822 = fadd float %811, %821, !dbg !238
  %823 = fmul float %755, %822, !dbg !238
  %824 = fmul float %701, %694, !dbg !238
  %825 = fmul float %705, %695, !dbg !238
  %826 = fadd float %824, %825, !dbg !238
  %827 = fmul float %826, %689, !dbg !238
  %828 = fmul float %714, %709, !dbg !238
  %829 = fmul float %718, %710, !dbg !238
  %830 = fadd float %828, %829, !dbg !238
  %831 = fmul float %830, %690, !dbg !238
  %832 = fadd float %827, %831, !dbg !238
  %833 = fmul float %832, %685, !dbg !238
  %834 = fmul float %731, %726, !dbg !238
  %835 = fmul float %735, %727, !dbg !238
  %836 = fadd float %834, %835, !dbg !238
  %837 = fmul float %836, %722, !dbg !238
  %838 = fmul float %744, %739, !dbg !238
  %839 = fmul float %748, %740, !dbg !238
  %840 = fadd float %838, %839, !dbg !238
  %841 = fmul float %840, %723, !dbg !238
  %842 = fadd float %837, %841, !dbg !238
  %843 = fmul float %842, %686, !dbg !238
  %844 = fadd float %833, %843, !dbg !238
  %845 = fmul float %754, %844, !dbg !238
  %846 = fadd float %823, %845, !dbg !238
  %847 = fmul float %752, %846, !dbg !238
  %848 = fadd float %801, %847, !dbg !238
  %hprod151 = fmul float %749, %750, !dbg !238
  %849 = fmul float %848, %hprod151, !dbg !238
  store float %849, float* %751, align 4, !dbg !238
  %param_weight_2198005.repack = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 0, !dbg !238
  store float 0.000000e+00, float* %param_weight_2198005.repack, align 4, !dbg !238
  %param_weight_2198005.repack232 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 1, !dbg !238
  store float 0.000000e+00, float* %param_weight_2198005.repack232, align 4, !dbg !238
  %param_weight_2198005.repack233 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 2, !dbg !238
  store float 0.000000e+00, float* %param_weight_2198005.repack233, align 4, !dbg !238
  %param_weight_2198005.repack234 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 3, !dbg !238
  store float 0.000000e+00, float* %param_weight_2198005.repack234, align 4, !dbg !238
  %param_weight_2198005.repack235 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 4, !dbg !238
  store float 0.000000e+00, float* %param_weight_2198005.repack235, align 4, !dbg !238
  %param_weight_2198005.repack236 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 5, !dbg !238
  store float 0.000000e+00, float* %param_weight_2198005.repack236, align 4, !dbg !238
  store i32 0, i32* %slice_offset_2198113, align 4, !dbg !238
  store i32 0, i32* %dim_2197983, align 4, !dbg !238
  br label %expr_true41, !dbg !235

expr_false28:                                     ; preds = %continue
  %.elt237 = getelementptr inbounds %3, %3* %49, i64 0, i32 0, !dbg !236
  %.unpack238 = load float, float* %.elt237, align 4, !dbg !236
  %.elt241 = getelementptr inbounds %7, %7* %44, i64 0, i32 0, i32 0, !dbg !236
  %.unpack242 = load i32, i32* %.elt241, align 4, !dbg !236
  %850 = fmul float %51, %.unpack238, !dbg !236
  %851 = sitofp i32 %.unpack242 to float, !dbg !236
  %852 = fadd float %851, -2.000000e+00, !dbg !236
  %853 = fcmp olt float %850, %852, !dbg !236
  %854 = select i1 %853, float %850, float %852, !dbg !236
  %855 = call float @llvm.floor.f32(float %854), !dbg !236
  %.elt243 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 0, i32 1, !dbg !236
  %.unpack244 = load i32, i32* %.elt243, align 4, !dbg !236
  %.elt239 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 4, i32 2, i32 1, !dbg !236
  %.unpack240 = load float, float* %.elt239, align 4, !dbg !236
  %856 = fmul float %58, %.unpack240, !dbg !237
  %857 = sitofp i32 %.unpack244 to float, !dbg !237
  %858 = fadd float %857, -2.000000e+00, !dbg !237
  %859 = fcmp olt float %856, %858, !dbg !237
  %860 = select i1 %859, float %856, float %858, !dbg !237
  %861 = call float @llvm.floor.f32(float %860), !dbg !237
  %862 = load i32, i32* %65, align 4, !dbg !238
  %863 = load i32, i32* %67, align 4, !dbg !238
  %864 = load i32, i32* %slice_offset_2198113, align 4, !dbg !238
  %865 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %866 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %867 = getelementptr inbounds [0 x i32], [0 x i32]* %866, i64 0, i64 2, !dbg !238
  %868 = load i32, i32* %867, align 4, !dbg !238
  %869 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 4, !dbg !238
  %870 = load float, float* %869, align 4, !dbg !238
  %871 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 5, !dbg !238
  %872 = load float, float* %871, align 4, !dbg !238
  %873 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %874 = getelementptr inbounds [0 x i32], [0 x i32]* %873, i64 0, i64 1, !dbg !238
  %875 = load i32, i32* %874, align 4, !dbg !238
  %876 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 2, !dbg !238
  %877 = load float, float* %876, align 4, !dbg !238
  %878 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 3, !dbg !238
  %879 = load float, float* %878, align 4, !dbg !238
  %880 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %881 = getelementptr inbounds [0 x i32], [0 x i32]* %880, i64 0, i64 0, !dbg !238
  %882 = load i32, i32* %881, align 4, !dbg !238
  %883 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 0, !dbg !238
  %884 = load float, float* %883, align 4, !dbg !238
  %885 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 1, !dbg !238
  %886 = load float, float* %885, align 4, !dbg !238
  %887 = fptosi float %855 to i32, !dbg !238
  %888 = fptosi float %861 to i32, !dbg !238
  %889 = mul nsw i32 %862, %888, !dbg !238
  %index152 = add nsw i32 %889, %887, !dbg !238
  %size153 = mul nsw i32 %862, %863, !dbg !238
  %890 = mul nsw i32 %864, %size153, !dbg !238
  %891 = add nsw i32 %index152, %890, !dbg !238
  %892 = sext i32 %891 to i64, !dbg !238
  %893 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %892, !dbg !238
  %894 = load float, float* %893, align 4, !dbg !238
  %895 = mul nsw i32 %882, %size153, !dbg !238
  %i1154 = add nsw i32 %891, %895, !dbg !238
  %896 = sext i32 %i1154 to i64, !dbg !238
  %897 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %896, !dbg !238
  %898 = load float, float* %897, align 4, !dbg !238
  %899 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %900 = getelementptr inbounds [0 x i32], [0 x i32]* %899, i64 0, i64 0, !dbg !238
  %901 = load i32, i32* %900, align 4, !dbg !238
  %902 = load float, float* %883, align 4, !dbg !238
  %903 = load float, float* %885, align 4, !dbg !238
  %904 = mul nsw i32 %875, %size153, !dbg !238
  %i1155 = add nsw i32 %891, %904, !dbg !238
  %905 = sext i32 %i1155 to i64, !dbg !238
  %906 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %905, !dbg !238
  %907 = load float, float* %906, align 4, !dbg !238
  %908 = mul nsw i32 %901, %size153, !dbg !238
  %i1156 = add nsw i32 %i1155, %908, !dbg !238
  %909 = sext i32 %i1156 to i64, !dbg !238
  %910 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %909, !dbg !238
  %911 = load float, float* %910, align 4, !dbg !238
  %912 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %913 = getelementptr inbounds [0 x i32], [0 x i32]* %912, i64 0, i64 1, !dbg !238
  %914 = load i32, i32* %913, align 4, !dbg !238
  %915 = load float, float* %876, align 4, !dbg !238
  %916 = load float, float* %878, align 4, !dbg !238
  %917 = getelementptr inbounds [0 x i32], [0 x i32]* %912, i64 0, i64 0, !dbg !238
  %918 = load i32, i32* %917, align 4, !dbg !238
  %919 = load float, float* %883, align 4, !dbg !238
  %920 = load float, float* %885, align 4, !dbg !238
  %921 = mul nsw i32 %868, %size153, !dbg !238
  %i1157 = add nsw i32 %891, %921, !dbg !238
  %922 = sext i32 %i1157 to i64, !dbg !238
  %923 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %922, !dbg !238
  %924 = load float, float* %923, align 4, !dbg !238
  %925 = mul nsw i32 %918, %size153, !dbg !238
  %i1158 = add nsw i32 %i1157, %925, !dbg !238
  %926 = sext i32 %i1158 to i64, !dbg !238
  %927 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %926, !dbg !238
  %928 = load float, float* %927, align 4, !dbg !238
  %929 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %930 = getelementptr inbounds [0 x i32], [0 x i32]* %929, i64 0, i64 0, !dbg !238
  %931 = load i32, i32* %930, align 4, !dbg !238
  %932 = load float, float* %883, align 4, !dbg !238
  %933 = load float, float* %885, align 4, !dbg !238
  %934 = mul nsw i32 %914, %size153, !dbg !238
  %i1159 = add nsw i32 %i1157, %934, !dbg !238
  %935 = sext i32 %i1159 to i64, !dbg !238
  %936 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %935, !dbg !238
  %937 = load float, float* %936, align 4, !dbg !238
  %938 = mul nsw i32 %931, %size153, !dbg !238
  %i1160 = add nsw i32 %i1159, %938, !dbg !238
  %939 = sext i32 %i1160 to i64, !dbg !238
  %940 = getelementptr inbounds [0 x float], [0 x float]* %865, i64 0, i64 %939, !dbg !238
  %941 = load float, float* %940, align 4, !dbg !238
  %942 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %943 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %944 = getelementptr inbounds [0 x i32], [0 x i32]* %943, i64 0, i64 2, !dbg !238
  %945 = load i32, i32* %944, align 4, !dbg !238
  %946 = load float, float* %869, align 4, !dbg !238
  %947 = load float, float* %871, align 4, !dbg !238
  %948 = getelementptr inbounds [0 x i32], [0 x i32]* %943, i64 0, i64 1, !dbg !238
  %949 = load i32, i32* %948, align 4, !dbg !238
  %950 = load float, float* %876, align 4, !dbg !238
  %951 = load float, float* %878, align 4, !dbg !238
  %952 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %953 = getelementptr inbounds [0 x i32], [0 x i32]* %952, i64 0, i64 0, !dbg !238
  %954 = load i32, i32* %953, align 4, !dbg !238
  %955 = load float, float* %883, align 4, !dbg !238
  %956 = load float, float* %885, align 4, !dbg !238
  %957 = getelementptr inbounds [0 x float], [0 x float]* %942, i64 0, i64 1, !dbg !238
  %958 = sext i32 %891 to i64, !dbg !238
  %959 = getelementptr inbounds float, float* %957, i64 %958, !dbg !238
  %960 = load float, float* %959, align 4, !dbg !238
  %961 = mul nsw i32 %954, %size153, !dbg !238
  %i1161 = add nsw i32 %891, %961, !dbg !238
  %962 = sext i32 %i1161 to i64, !dbg !238
  %963 = getelementptr inbounds float, float* %957, i64 %962, !dbg !238
  %964 = load float, float* %963, align 4, !dbg !238
  %965 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %966 = getelementptr inbounds [0 x i32], [0 x i32]* %965, i64 0, i64 0, !dbg !238
  %967 = load i32, i32* %966, align 4, !dbg !238
  %968 = load float, float* %883, align 4, !dbg !238
  %969 = load float, float* %885, align 4, !dbg !238
  %970 = mul nsw i32 %949, %size153, !dbg !238
  %i1162 = add nsw i32 %891, %970, !dbg !238
  %971 = sext i32 %i1162 to i64, !dbg !238
  %972 = getelementptr inbounds float, float* %957, i64 %971, !dbg !238
  %973 = load float, float* %972, align 4, !dbg !238
  %974 = mul nsw i32 %967, %size153, !dbg !238
  %i1163 = add nsw i32 %i1162, %974, !dbg !238
  %975 = sext i32 %i1163 to i64, !dbg !238
  %976 = getelementptr inbounds float, float* %957, i64 %975, !dbg !238
  %977 = load float, float* %976, align 4, !dbg !238
  %978 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %979 = getelementptr inbounds [0 x i32], [0 x i32]* %978, i64 0, i64 1, !dbg !238
  %980 = load i32, i32* %979, align 4, !dbg !238
  %981 = load float, float* %876, align 4, !dbg !238
  %982 = load float, float* %878, align 4, !dbg !238
  %983 = getelementptr inbounds [0 x i32], [0 x i32]* %978, i64 0, i64 0, !dbg !238
  %984 = load i32, i32* %983, align 4, !dbg !238
  %985 = load float, float* %883, align 4, !dbg !238
  %986 = load float, float* %885, align 4, !dbg !238
  %987 = mul nsw i32 %945, %size153, !dbg !238
  %i1164 = add nsw i32 %891, %987, !dbg !238
  %988 = sext i32 %i1164 to i64, !dbg !238
  %989 = getelementptr inbounds float, float* %957, i64 %988, !dbg !238
  %990 = load float, float* %989, align 4, !dbg !238
  %991 = mul nsw i32 %984, %size153, !dbg !238
  %i1165 = add nsw i32 %i1164, %991, !dbg !238
  %992 = sext i32 %i1165 to i64, !dbg !238
  %993 = getelementptr inbounds float, float* %957, i64 %992, !dbg !238
  %994 = load float, float* %993, align 4, !dbg !238
  %995 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %996 = getelementptr inbounds [0 x i32], [0 x i32]* %995, i64 0, i64 0, !dbg !238
  %997 = load i32, i32* %996, align 4, !dbg !238
  %998 = load float, float* %883, align 4, !dbg !238
  %999 = load float, float* %885, align 4, !dbg !238
  %1000 = mul nsw i32 %980, %size153, !dbg !238
  %i1166 = add nsw i32 %i1164, %1000, !dbg !238
  %1001 = sext i32 %i1166 to i64, !dbg !238
  %1002 = getelementptr inbounds float, float* %957, i64 %1001, !dbg !238
  %1003 = load float, float* %1002, align 4, !dbg !238
  %1004 = mul nsw i32 %997, %size153, !dbg !238
  %i1167 = add nsw i32 %i1166, %1004, !dbg !238
  %1005 = sext i32 %i1167 to i64, !dbg !238
  %1006 = getelementptr inbounds float, float* %957, i64 %1005, !dbg !238
  %1007 = load float, float* %1006, align 4, !dbg !238
  %1008 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %1009 = load i32, i32* %65, align 4, !dbg !238
  %1010 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1011 = getelementptr inbounds [0 x i32], [0 x i32]* %1010, i64 0, i64 2, !dbg !238
  %1012 = load i32, i32* %1011, align 4, !dbg !238
  %1013 = load float, float* %869, align 4, !dbg !238
  %1014 = load float, float* %871, align 4, !dbg !238
  %1015 = getelementptr inbounds [0 x i32], [0 x i32]* %1010, i64 0, i64 1, !dbg !238
  %1016 = load i32, i32* %1015, align 4, !dbg !238
  %1017 = load float, float* %876, align 4, !dbg !238
  %1018 = load float, float* %878, align 4, !dbg !238
  %1019 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1020 = getelementptr inbounds [0 x i32], [0 x i32]* %1019, i64 0, i64 0, !dbg !238
  %1021 = load i32, i32* %1020, align 4, !dbg !238
  %1022 = load float, float* %883, align 4, !dbg !238
  %1023 = load float, float* %885, align 4, !dbg !238
  %1024 = sext i32 %1009 to i64, !dbg !238
  %1025 = getelementptr inbounds [0 x float], [0 x float]* %1008, i64 0, i64 %1024, !dbg !238
  %1026 = sext i32 %891 to i64, !dbg !238
  %1027 = getelementptr inbounds float, float* %1025, i64 %1026, !dbg !238
  %1028 = load float, float* %1027, align 4, !dbg !238
  %1029 = mul nsw i32 %1021, %size153, !dbg !238
  %i1168 = add nsw i32 %891, %1029, !dbg !238
  %1030 = sext i32 %i1168 to i64, !dbg !238
  %1031 = getelementptr inbounds float, float* %1025, i64 %1030, !dbg !238
  %1032 = load float, float* %1031, align 4, !dbg !238
  %1033 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1034 = getelementptr inbounds [0 x i32], [0 x i32]* %1033, i64 0, i64 0, !dbg !238
  %1035 = load i32, i32* %1034, align 4, !dbg !238
  %1036 = load float, float* %883, align 4, !dbg !238
  %1037 = load float, float* %885, align 4, !dbg !238
  %1038 = mul nsw i32 %1016, %size153, !dbg !238
  %i1169 = add nsw i32 %891, %1038, !dbg !238
  %1039 = sext i32 %i1169 to i64, !dbg !238
  %1040 = getelementptr inbounds float, float* %1025, i64 %1039, !dbg !238
  %1041 = load float, float* %1040, align 4, !dbg !238
  %1042 = mul nsw i32 %1035, %size153, !dbg !238
  %i1170 = add nsw i32 %i1169, %1042, !dbg !238
  %1043 = sext i32 %i1170 to i64, !dbg !238
  %1044 = getelementptr inbounds float, float* %1025, i64 %1043, !dbg !238
  %1045 = load float, float* %1044, align 4, !dbg !238
  %1046 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1047 = getelementptr inbounds [0 x i32], [0 x i32]* %1046, i64 0, i64 1, !dbg !238
  %1048 = load i32, i32* %1047, align 4, !dbg !238
  %1049 = load float, float* %876, align 4, !dbg !238
  %1050 = load float, float* %878, align 4, !dbg !238
  %1051 = getelementptr inbounds [0 x i32], [0 x i32]* %1046, i64 0, i64 0, !dbg !238
  %1052 = load i32, i32* %1051, align 4, !dbg !238
  %1053 = load float, float* %883, align 4, !dbg !238
  %1054 = load float, float* %885, align 4, !dbg !238
  %1055 = mul nsw i32 %1012, %size153, !dbg !238
  %i1171 = add nsw i32 %891, %1055, !dbg !238
  %1056 = sext i32 %i1171 to i64, !dbg !238
  %1057 = getelementptr inbounds float, float* %1025, i64 %1056, !dbg !238
  %1058 = load float, float* %1057, align 4, !dbg !238
  %1059 = mul nsw i32 %1052, %size153, !dbg !238
  %i1172 = add nsw i32 %i1171, %1059, !dbg !238
  %1060 = sext i32 %i1172 to i64, !dbg !238
  %1061 = getelementptr inbounds float, float* %1025, i64 %1060, !dbg !238
  %1062 = load float, float* %1061, align 4, !dbg !238
  %1063 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1064 = getelementptr inbounds [0 x i32], [0 x i32]* %1063, i64 0, i64 0, !dbg !238
  %1065 = load i32, i32* %1064, align 4, !dbg !238
  %1066 = load float, float* %883, align 4, !dbg !238
  %1067 = load float, float* %885, align 4, !dbg !238
  %1068 = mul nsw i32 %1048, %size153, !dbg !238
  %i1173 = add nsw i32 %i1171, %1068, !dbg !238
  %1069 = sext i32 %i1173 to i64, !dbg !238
  %1070 = getelementptr inbounds float, float* %1025, i64 %1069, !dbg !238
  %1071 = load float, float* %1070, align 4, !dbg !238
  %1072 = mul nsw i32 %1065, %size153, !dbg !238
  %i1174 = add nsw i32 %i1173, %1072, !dbg !238
  %1073 = sext i32 %i1174 to i64, !dbg !238
  %1074 = getelementptr inbounds float, float* %1025, i64 %1073, !dbg !238
  %1075 = load float, float* %1074, align 4, !dbg !238
  %1076 = load [0 x float]*, [0 x float]** %70, align 8, !dbg !238
  %1077 = load i32, i32* %65, align 4, !dbg !238
  %1078 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1079 = getelementptr inbounds [0 x i32], [0 x i32]* %1078, i64 0, i64 2, !dbg !238
  %1080 = load i32, i32* %1079, align 4, !dbg !238
  %1081 = load float, float* %869, align 4, !dbg !238
  %1082 = load float, float* %871, align 4, !dbg !238
  %1083 = getelementptr inbounds [0 x i32], [0 x i32]* %1078, i64 0, i64 1, !dbg !238
  %1084 = load i32, i32* %1083, align 4, !dbg !238
  %1085 = load float, float* %876, align 4, !dbg !238
  %1086 = load float, float* %878, align 4, !dbg !238
  %1087 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1088 = getelementptr inbounds [0 x i32], [0 x i32]* %1087, i64 0, i64 0, !dbg !238
  %1089 = load i32, i32* %1088, align 4, !dbg !238
  %1090 = load float, float* %883, align 4, !dbg !238
  %1091 = load float, float* %885, align 4, !dbg !238
  %1092 = add nsw i32 %1077, 1, !dbg !238
  %1093 = sext i32 %1092 to i64, !dbg !238
  %1094 = getelementptr inbounds [0 x float], [0 x float]* %1076, i64 0, i64 %1093, !dbg !238
  %1095 = sext i32 %891 to i64, !dbg !238
  %1096 = getelementptr inbounds float, float* %1094, i64 %1095, !dbg !238
  %1097 = load float, float* %1096, align 4, !dbg !238
  %1098 = mul nsw i32 %1089, %size153, !dbg !238
  %i1175 = add nsw i32 %891, %1098, !dbg !238
  %1099 = sext i32 %i1175 to i64, !dbg !238
  %1100 = getelementptr inbounds float, float* %1094, i64 %1099, !dbg !238
  %1101 = load float, float* %1100, align 4, !dbg !238
  %1102 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1103 = getelementptr inbounds [0 x i32], [0 x i32]* %1102, i64 0, i64 0, !dbg !238
  %1104 = load i32, i32* %1103, align 4, !dbg !238
  %1105 = load float, float* %883, align 4, !dbg !238
  %1106 = load float, float* %885, align 4, !dbg !238
  %1107 = mul nsw i32 %1084, %size153, !dbg !238
  %i1176 = add nsw i32 %891, %1107, !dbg !238
  %1108 = sext i32 %i1176 to i64, !dbg !238
  %1109 = getelementptr inbounds float, float* %1094, i64 %1108, !dbg !238
  %1110 = load float, float* %1109, align 4, !dbg !238
  %1111 = mul nsw i32 %1104, %size153, !dbg !238
  %i1177 = add nsw i32 %i1176, %1111, !dbg !238
  %1112 = sext i32 %i1177 to i64, !dbg !238
  %1113 = getelementptr inbounds float, float* %1094, i64 %1112, !dbg !238
  %1114 = load float, float* %1113, align 4, !dbg !238
  %1115 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1116 = getelementptr inbounds [0 x i32], [0 x i32]* %1115, i64 0, i64 1, !dbg !238
  %1117 = load i32, i32* %1116, align 4, !dbg !238
  %1118 = load float, float* %876, align 4, !dbg !238
  %1119 = load float, float* %878, align 4, !dbg !238
  %1120 = getelementptr inbounds [0 x i32], [0 x i32]* %1115, i64 0, i64 0, !dbg !238
  %1121 = load i32, i32* %1120, align 4, !dbg !238
  %1122 = load float, float* %883, align 4, !dbg !238
  %1123 = load float, float* %885, align 4, !dbg !238
  %1124 = mul nsw i32 %1080, %size153, !dbg !238
  %i1178 = add nsw i32 %891, %1124, !dbg !238
  %1125 = sext i32 %i1178 to i64, !dbg !238
  %1126 = getelementptr inbounds float, float* %1094, i64 %1125, !dbg !238
  %1127 = load float, float* %1126, align 4, !dbg !238
  %1128 = mul nsw i32 %1121, %size153, !dbg !238
  %i1179 = add nsw i32 %i1178, %1128, !dbg !238
  %1129 = sext i32 %i1179 to i64, !dbg !238
  %1130 = getelementptr inbounds float, float* %1094, i64 %1129, !dbg !238
  %1131 = load float, float* %1130, align 4, !dbg !238
  %1132 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !238
  %1133 = getelementptr inbounds [0 x i32], [0 x i32]* %1132, i64 0, i64 0, !dbg !238
  %1134 = load i32, i32* %1133, align 4, !dbg !238
  %1135 = load float, float* %883, align 4, !dbg !238
  %1136 = load float, float* %885, align 4, !dbg !238
  %1137 = mul nsw i32 %1117, %size153, !dbg !238
  %i1180 = add nsw i32 %i1178, %1137, !dbg !238
  %1138 = sext i32 %i1180 to i64, !dbg !238
  %1139 = getelementptr inbounds float, float* %1094, i64 %1138, !dbg !238
  %1140 = load float, float* %1139, align 4, !dbg !238
  %1141 = mul nsw i32 %1134, %size153, !dbg !238
  %i1181 = add nsw i32 %i1180, %1141, !dbg !238
  %1142 = sext i32 %i1181 to i64, !dbg !238
  %1143 = getelementptr inbounds float, float* %1094, i64 %1142, !dbg !238
  %1144 = load float, float* %1143, align 4, !dbg !238
  %1145 = load float, float* %351, align 4, !dbg !238
  %1146 = load float, float* %353, align 4, !dbg !238
  %1147 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 2, !dbg !238
  %1148 = fsub float %856, %861, !dbg !238
  %1149 = fsub float 1.000000e+00, %1148, !dbg !238
  %1150 = fsub float %850, %855, !dbg !238
  %1151 = fsub float 1.000000e+00, %1150, !dbg !238
  %1152 = fmul float %894, %884, !dbg !238
  %1153 = fmul float %898, %886, !dbg !238
  %1154 = fadd float %1152, %1153, !dbg !238
  %1155 = fmul float %1154, %877, !dbg !238
  %1156 = fmul float %907, %902, !dbg !238
  %1157 = fmul float %911, %903, !dbg !238
  %1158 = fadd float %1156, %1157, !dbg !238
  %1159 = fmul float %1158, %879, !dbg !238
  %1160 = fadd float %1155, %1159, !dbg !238
  %1161 = fmul float %1160, %870, !dbg !238
  %1162 = fmul float %924, %919, !dbg !238
  %1163 = fmul float %928, %920, !dbg !238
  %1164 = fadd float %1162, %1163, !dbg !238
  %1165 = fmul float %1164, %915, !dbg !238
  %1166 = fmul float %937, %932, !dbg !238
  %1167 = fmul float %941, %933, !dbg !238
  %1168 = fadd float %1166, %1167, !dbg !238
  %1169 = fmul float %1168, %916, !dbg !238
  %1170 = fadd float %1165, %1169, !dbg !238
  %1171 = fmul float %1170, %872, !dbg !238
  %1172 = fadd float %1161, %1171, !dbg !238
  %1173 = fmul float %1151, %1172, !dbg !238
  %1174 = fmul float %960, %955, !dbg !238
  %1175 = fmul float %964, %956, !dbg !238
  %1176 = fadd float %1174, %1175, !dbg !238
  %1177 = fmul float %1176, %950, !dbg !238
  %1178 = fmul float %973, %968, !dbg !238
  %1179 = fmul float %977, %969, !dbg !238
  %1180 = fadd float %1178, %1179, !dbg !238
  %1181 = fmul float %1180, %951, !dbg !238
  %1182 = fadd float %1177, %1181, !dbg !238
  %1183 = fmul float %1182, %946, !dbg !238
  %1184 = fmul float %990, %985, !dbg !238
  %1185 = fmul float %994, %986, !dbg !238
  %1186 = fadd float %1184, %1185, !dbg !238
  %1187 = fmul float %1186, %981, !dbg !238
  %1188 = fmul float %1003, %998, !dbg !238
  %1189 = fmul float %1007, %999, !dbg !238
  %1190 = fadd float %1188, %1189, !dbg !238
  %1191 = fmul float %1190, %982, !dbg !238
  %1192 = fadd float %1187, %1191, !dbg !238
  %1193 = fmul float %1192, %947, !dbg !238
  %1194 = fadd float %1183, %1193, !dbg !238
  %1195 = fmul float %1150, %1194, !dbg !238
  %1196 = fadd float %1173, %1195, !dbg !238
  %1197 = fmul float %1149, %1196, !dbg !238
  %1198 = fmul float %1028, %1022, !dbg !238
  %1199 = fmul float %1032, %1023, !dbg !238
  %1200 = fadd float %1198, %1199, !dbg !238
  %1201 = fmul float %1200, %1017, !dbg !238
  %1202 = fmul float %1041, %1036, !dbg !238
  %1203 = fmul float %1045, %1037, !dbg !238
  %1204 = fadd float %1202, %1203, !dbg !238
  %1205 = fmul float %1204, %1018, !dbg !238
  %1206 = fadd float %1201, %1205, !dbg !238
  %1207 = fmul float %1206, %1013, !dbg !238
  %1208 = fmul float %1058, %1053, !dbg !238
  %1209 = fmul float %1062, %1054, !dbg !238
  %1210 = fadd float %1208, %1209, !dbg !238
  %1211 = fmul float %1210, %1049, !dbg !238
  %1212 = fmul float %1071, %1066, !dbg !238
  %1213 = fmul float %1075, %1067, !dbg !238
  %1214 = fadd float %1212, %1213, !dbg !238
  %1215 = fmul float %1214, %1050, !dbg !238
  %1216 = fadd float %1211, %1215, !dbg !238
  %1217 = fmul float %1216, %1014, !dbg !238
  %1218 = fadd float %1207, %1217, !dbg !238
  %1219 = fmul float %1151, %1218, !dbg !238
  %1220 = fmul float %1097, %1090, !dbg !238
  %1221 = fmul float %1101, %1091, !dbg !238
  %1222 = fadd float %1220, %1221, !dbg !238
  %1223 = fmul float %1222, %1085, !dbg !238
  %1224 = fmul float %1110, %1105, !dbg !238
  %1225 = fmul float %1114, %1106, !dbg !238
  %1226 = fadd float %1224, %1225, !dbg !238
  %1227 = fmul float %1226, %1086, !dbg !238
  %1228 = fadd float %1223, %1227, !dbg !238
  %1229 = fmul float %1228, %1081, !dbg !238
  %1230 = fmul float %1127, %1122, !dbg !238
  %1231 = fmul float %1131, %1123, !dbg !238
  %1232 = fadd float %1230, %1231, !dbg !238
  %1233 = fmul float %1232, %1118, !dbg !238
  %1234 = fmul float %1140, %1135, !dbg !238
  %1235 = fmul float %1144, %1136, !dbg !238
  %1236 = fadd float %1234, %1235, !dbg !238
  %1237 = fmul float %1236, %1119, !dbg !238
  %1238 = fadd float %1233, %1237, !dbg !238
  %1239 = fmul float %1238, %1082, !dbg !238
  %1240 = fadd float %1229, %1239, !dbg !238
  %1241 = fmul float %1150, %1240, !dbg !238
  %1242 = fadd float %1219, %1241, !dbg !238
  %1243 = fmul float %1148, %1242, !dbg !238
  %1244 = fadd float %1197, %1243, !dbg !238
  %hprod182 = fmul float %1145, %1146, !dbg !238
  %1245 = fmul float %1244, %hprod182, !dbg !238
  store float %1245, float* %1147, align 8, !dbg !238
  %.elt245 = getelementptr inbounds %3, %3* %u_wm_2196528, i64 0, i32 0, !dbg !238
  %.unpack246 = load float, float* %.elt245, align 8, !dbg !238
  %1246 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 0, i32 2, !dbg !238
  %.elt249 = getelementptr inbounds %3, %3* %1246, i64 0, i32 0, !dbg !238
  %.unpack250 = load float, float* %.elt249, align 4, !dbg !238
  %.elt253 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 0, i32 0, i32 0, !dbg !238
  %.unpack254 = load i32, i32* %.elt253, align 4, !dbg !238
  %1247 = fmul float %.unpack246, %.unpack250, !dbg !238
  %1248 = sitofp i32 %.unpack254 to float, !dbg !238
  %1249 = fadd float %1248, -2.000000e+00, !dbg !238
  %1250 = fcmp olt float %1247, %1249, !dbg !238
  %1251 = select i1 %1250, float %1247, float %1249, !dbg !238
  %1252 = call float @llvm.floor.f32(float %1251), !dbg !238
  %.elt255 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 0, i32 0, i32 1, !dbg !238
  %.unpack256 = load i32, i32* %.elt255, align 4, !dbg !238
  %.elt251 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 0, i32 2, i32 1, !dbg !238
  %.unpack252 = load float, float* %.elt251, align 4, !dbg !238
  %.elt247 = getelementptr inbounds %3, %3* %u_wm_2196528, i64 0, i32 1, !dbg !238
  %.unpack248 = load float, float* %.elt247, align 4, !dbg !238
  %1253 = fmul float %.unpack248, %.unpack252, !dbg !237
  %1254 = sitofp i32 %.unpack256 to float, !dbg !237
  %1255 = fadd float %1254, -2.000000e+00, !dbg !237
  %1256 = fcmp olt float %1253, %1255, !dbg !237
  %1257 = select i1 %1256, float %1253, float %1255, !dbg !237
  %1258 = call float @llvm.floor.f32(float %1257), !dbg !237
  %1259 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 0, i32 0, i32 0, !dbg !238
  %1260 = load i32, i32* %1259, align 4, !dbg !238
  %1261 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 0, i32 7, !dbg !238
  %1262 = load [0 x float]*, [0 x float]** %1261, align 8, !dbg !238
  %1263 = fptosi float %1252 to i32, !dbg !238
  %1264 = fptosi float %1258 to i32, !dbg !238
  %1265 = mul nsw i32 %1260, %1264, !dbg !238
  %index183 = add nsw i32 %1265, %1263, !dbg !238
  %1266 = sext i32 %index183 to i64, !dbg !238
  %1267 = getelementptr inbounds [0 x float], [0 x float]* %1262, i64 0, i64 %1266, !dbg !238
  %1268 = load float, float* %1267, align 4, !dbg !238
  %1269 = load [0 x float]*, [0 x float]** %1261, align 8, !dbg !238
  %1270 = getelementptr inbounds [0 x float], [0 x float]* %1269, i64 0, i64 1, !dbg !238
  %1271 = sext i32 %index183 to i64, !dbg !238
  %1272 = getelementptr inbounds float, float* %1270, i64 %1271, !dbg !238
  %1273 = load float, float* %1272, align 4, !dbg !238
  %1274 = load i32, i32* %1259, align 4, !dbg !238
  %1275 = sext i32 %1274 to i64, !dbg !238
  %1276 = getelementptr inbounds [0 x float], [0 x float]* %1269, i64 0, i64 %1275, !dbg !238
  %1277 = sext i32 %index183 to i64, !dbg !238
  %1278 = getelementptr inbounds float, float* %1276, i64 %1277, !dbg !238
  %1279 = load float, float* %1278, align 4, !dbg !238
  %1280 = load [0 x float]*, [0 x float]** %1261, align 8, !dbg !238
  %1281 = load i32, i32* %1259, align 4, !dbg !238
  %1282 = add nsw i32 %1281, 1, !dbg !238
  %1283 = sext i32 %1282 to i64, !dbg !238
  %1284 = getelementptr inbounds [0 x float], [0 x float]* %1280, i64 0, i64 %1283, !dbg !238
  %1285 = sext i32 %index183 to i64, !dbg !238
  %1286 = getelementptr inbounds float, float* %1284, i64 %1285, !dbg !238
  %1287 = load float, float* %1286, align 4, !dbg !238
  %1288 = getelementptr inbounds %3, %3* %1246, i64 0, i32 0, !dbg !238
  %1289 = load float, float* %1288, align 4, !dbg !238
  %1290 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 0, i32 2, i32 1, !dbg !238
  %1291 = load float, float* %1290, align 4, !dbg !238
  %1292 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 1, !dbg !238
  %1293 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 1, i32 2, !dbg !238
  %.elt257 = getelementptr inbounds %3, %3* %1293, i64 0, i32 0, !dbg !238
  %.unpack258 = load float, float* %.elt257, align 4, !dbg !238
  %.elt261 = getelementptr inbounds %7, %7* %1292, i64 0, i32 0, i32 0, !dbg !238
  %.unpack262 = load i32, i32* %.elt261, align 4, !dbg !238
  %1294 = fmul float %26, %.unpack258, !dbg !238
  %1295 = sitofp i32 %.unpack262 to float, !dbg !238
  %1296 = fadd float %1295, -2.000000e+00, !dbg !238
  %1297 = fcmp olt float %1294, %1296, !dbg !238
  %1298 = select i1 %1297, float %1294, float %1296, !dbg !238
  %1299 = call float @llvm.floor.f32(float %1298), !dbg !238
  %.elt263 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 1, i32 0, i32 1, !dbg !238
  %.unpack264 = load i32, i32* %.elt263, align 4, !dbg !238
  %.elt259 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 1, i32 2, i32 1, !dbg !238
  %.unpack260 = load float, float* %.elt259, align 4, !dbg !238
  %1300 = fadd float %15, 0x400921FB60000000, !dbg !237
  %1301 = fdiv float %1300, 0x401921FB60000000, !dbg !237
  %1302 = fmul float %1301, %.unpack260, !dbg !237
  %1303 = sitofp i32 %.unpack264 to float, !dbg !237
  %1304 = fadd float %1303, -2.000000e+00, !dbg !237
  %1305 = fcmp olt float %1302, %1304, !dbg !237
  %1306 = select i1 %1305, float %1302, float %1304, !dbg !237
  %1307 = call float @llvm.floor.f32(float %1306), !dbg !237
  %1308 = getelementptr inbounds %7, %7* %1292, i64 0, i32 0, i32 0, !dbg !238
  %1309 = load i32, i32* %1308, align 4, !dbg !238
  %1310 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 1, i32 7, !dbg !238
  %1311 = load [0 x float]*, [0 x float]** %1310, align 8, !dbg !238
  %1312 = fptosi float %1299 to i32, !dbg !238
  %1313 = fptosi float %1307 to i32, !dbg !238
  %1314 = mul nsw i32 %1309, %1313, !dbg !238
  %index184 = add nsw i32 %1314, %1312, !dbg !238
  %1315 = sext i32 %index184 to i64, !dbg !238
  %1316 = getelementptr inbounds [0 x float], [0 x float]* %1311, i64 0, i64 %1315, !dbg !238
  %1317 = load float, float* %1316, align 4, !dbg !238
  %1318 = load [0 x float]*, [0 x float]** %1310, align 8, !dbg !238
  %1319 = getelementptr inbounds [0 x float], [0 x float]* %1318, i64 0, i64 1, !dbg !238
  %1320 = sext i32 %index184 to i64, !dbg !238
  %1321 = getelementptr inbounds float, float* %1319, i64 %1320, !dbg !238
  %1322 = load float, float* %1321, align 4, !dbg !238
  %1323 = load i32, i32* %1308, align 4, !dbg !238
  %1324 = sext i32 %1323 to i64, !dbg !238
  %1325 = getelementptr inbounds [0 x float], [0 x float]* %1318, i64 0, i64 %1324, !dbg !238
  %1326 = sext i32 %index184 to i64, !dbg !238
  %1327 = getelementptr inbounds float, float* %1325, i64 %1326, !dbg !238
  %1328 = load float, float* %1327, align 4, !dbg !238
  %1329 = load [0 x float]*, [0 x float]** %1310, align 8, !dbg !238
  %1330 = load i32, i32* %1308, align 4, !dbg !238
  %1331 = add nsw i32 %1330, 1, !dbg !238
  %1332 = sext i32 %1331 to i64, !dbg !238
  %1333 = getelementptr inbounds [0 x float], [0 x float]* %1329, i64 0, i64 %1332, !dbg !238
  %1334 = sext i32 %index184 to i64, !dbg !238
  %1335 = getelementptr inbounds float, float* %1333, i64 %1334, !dbg !238
  %1336 = load float, float* %1335, align 4, !dbg !238
  %1337 = getelementptr inbounds %3, %3* %1293, i64 0, i32 0, !dbg !238
  %1338 = load float, float* %1337, align 4, !dbg !238
  %1339 = getelementptr inbounds %6, %6* %sampler_2196431, i64 0, i32 1, i32 2, i32 1, !dbg !238
  %1340 = load float, float* %1339, align 4, !dbg !238
  %.elt265 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 0, !dbg !238
  %.unpack266 = load float, float* %.elt265, align 8, !dbg !238
  %.elt267 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 1, !dbg !238
  %.unpack268 = load float, float* %.elt267, align 4, !dbg !238
  %.elt269 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 2, !dbg !238
  %.unpack270 = load float, float* %.elt269, align 8, !dbg !238
  %1341 = fsub float %1253, %1258, !dbg !238
  %1342 = fsub float 1.000000e+00, %1341, !dbg !238
  %1343 = fsub float %1247, %1252, !dbg !238
  %1344 = fsub float 1.000000e+00, %1343, !dbg !238
  %1345 = fmul float %1344, %1268, !dbg !238
  %1346 = fmul float %1343, %1273, !dbg !238
  %1347 = fadd float %1345, %1346, !dbg !238
  %1348 = fmul float %1342, %1347, !dbg !238
  %1349 = fmul float %1344, %1279, !dbg !238
  %1350 = fmul float %1343, %1287, !dbg !238
  %1351 = fadd float %1349, %1350, !dbg !238
  %1352 = fmul float %1341, %1351, !dbg !238
  %1353 = fadd float %1348, %1352, !dbg !238
  %hprod185 = fmul float %1289, %1291, !dbg !238
  %1354 = fmul float %1353, %hprod185, !dbg !238
  %1355 = fsub float %1302, %1307, !dbg !238
  %1356 = fsub float 1.000000e+00, %1355, !dbg !238
  %1357 = fsub float %1294, %1299, !dbg !238
  %1358 = fsub float 1.000000e+00, %1357, !dbg !238
  %1359 = fmul float %1358, %1317, !dbg !238
  %1360 = fmul float %1357, %1322, !dbg !238
  %1361 = fadd float %1359, %1360, !dbg !238
  %1362 = fmul float %1356, %1361, !dbg !238
  %1363 = fmul float %1358, %1328, !dbg !238
  %1364 = fmul float %1357, %1336, !dbg !238
  %1365 = fadd float %1363, %1364, !dbg !238
  %1366 = fmul float %1355, %1365, !dbg !238
  %1367 = fadd float %1362, %1366, !dbg !238
  %hprod186 = fmul float %1338, %1340, !dbg !238
  %1368 = fmul float %1367, %hprod186, !dbg !238
  %1369 = fmul float %1368, 4.000000e+00, !dbg !238
  %factor = fdiv float %1354, %1369, !dbg !238
  %1370 = fmul float %.unpack266, %factor, !dbg !238
  %1371 = fmul float %.unpack268, %factor, !dbg !238
  %1372 = fmul float %.unpack270, %factor, !dbg !238
  %fr_2198719.repack271 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 0, !dbg !238
  store float %1370, float* %fr_2198719.repack271, align 8, !dbg !238
  %fr_2198719.repack273 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 1, !dbg !238
  store float %1371, float* %fr_2198719.repack273, align 4, !dbg !238
  %fr_2198719.repack275 = getelementptr inbounds %2, %2* %fr_2198719, i64 0, i32 2, !dbg !238
  store float %1372, float* %fr_2198719.repack275, align 8, !dbg !238
  %1373 = insertvalue %5 undef, float %1370, 0, !dbg !238
  %1374 = insertvalue %5 %1373, float %1371, 1, !dbg !238
  %1375 = insertvalue %5 %1374, float %1372, 2, !dbg !238
  br label %evaluate_brdf_cont, !dbg !238

expr_true41:                                      ; preds = %expr_false22, %continue
  %1376 = load [0 x i32]*, [0 x i32]** %46, align 8, !dbg !236
  %1377 = load i32, i32* %dim_2197983, align 4, !dbg !236
  %1378 = sext i32 %1377 to i64, !dbg !236
  %1379 = getelementptr inbounds [0 x i32], [0 x i32]* %1376, i64 0, i64 %1378, !dbg !236
  %1380 = load i32, i32* %1379, align 4, !dbg !236
  %1381 = icmp eq i32 %1380, 1, !dbg !236
  br i1 %1381, label %expr_true55, label %expr_false42, !dbg !236

expr_false42:                                     ; preds = %expr_true41
  store float %15, float* %dim_param_2198023, align 4, !dbg !239
  %1382 = load i32, i32* %dim_2197983, align 4, !dbg !239
  %1383 = icmp eq i32 %1382, 1, !dbg !239
  br i1 %1383, label %expr_true47, label %expr_false43, !dbg !239

expr_false43:                                     ; preds = %expr_false42
  %1384 = load i32, i32* %dim_2197983, align 4, !dbg !240
  %1385 = icmp eq i32 %1384, 2, !dbg !240
  br i1 %1385, label %expr_true45, label %if_join48, !dbg !240

expr_true45:                                      ; preds = %expr_false43
  store float 2.000000e+00, float* %dim_param_2198023, align 4, !dbg !241
  br label %if_join48, !dbg !241

expr_true47:                                      ; preds = %expr_false42
  store float %14, float* %dim_param_2198023, align 4, !dbg !240
  br label %if_join48, !dbg !240

if_join48:                                        ; preds = %expr_true45, %expr_false43, %expr_true47
  %1386 = load i32, i32* %dim_2197983, align 4, !dbg !242
  %1387 = load float, float* %dim_param_2198023, align 4, !dbg !242
  %1388 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %44, i32 %1386, float %1387), !dbg !242
  %1389 = load [0 x float]*, [0 x float]** %47, align 8, !dbg !243
  %1390 = load i32, i32* %dim_2197983, align 4, !dbg !243
  %1391 = load i32, i32* %48, align 4, !dbg !243
  %1392 = mul nsw i32 %1390, %1391, !dbg !243
  %1393 = add nsw i32 %1392, %1388, !dbg !243
  %1394 = sext i32 %1393 to i64, !dbg !243
  %1395 = getelementptr inbounds [0 x float], [0 x float]* %1389, i64 0, i64 %1394, !dbg !243
  %1396 = load float, float* %1395, align 4, !dbg !243
  %1397 = load [0 x float]*, [0 x float]** %47, align 8, !dbg !243
  %1398 = load i32, i32* %dim_2197983, align 4, !dbg !243
  %1399 = load i32, i32* %48, align 4, !dbg !243
  %1400 = mul nsw i32 %1398, %1399, !dbg !243
  %1401 = add nsw i32 %1400, %1388, !dbg !243
  %1402 = add nsw i32 %1401, 1, !dbg !243
  %1403 = sext i32 %1402 to i64, !dbg !243
  %1404 = getelementptr inbounds [0 x float], [0 x float]* %1397, i64 0, i64 %1403, !dbg !243
  %1405 = load float, float* %1404, align 4, !dbg !243
  %1406 = load i32, i32* %dim_2197983, align 4, !dbg !243
  %1407 = load float, float* %dim_param_2198023, align 4, !dbg !243
  %1408 = fsub float %1407, %1396, !dbg !243
  %1409 = fsub float %1405, %1396, !dbg !243
  %1410 = fdiv float %1408, %1409, !dbg !243
  %1411 = fcmp olt float %1410, 0.000000e+00, !dbg !243
  %1412 = fcmp ogt float %1410, 1.000000e+00, !dbg !243
  %. = select i1 %1412, float 1.000000e+00, float %1410, !dbg !243
  %clampf_cont54 = select i1 %1411, float 0.000000e+00, float %., !dbg !243
  %1413 = shl nsw i32 %1406, 1, !dbg !244
  %1414 = or i32 %1413, 1, !dbg !244
  %1415 = sext i32 %1414 to i64, !dbg !244
  %1416 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 %1415, !dbg !244
  store float %clampf_cont54, float* %1416, align 4, !dbg !244
  %1417 = load i32, i32* %dim_2197983, align 4, !dbg !244
  %1418 = shl nsw i32 %1417, 1, !dbg !244
  %1419 = or i32 %1418, 1, !dbg !244
  %1420 = sext i32 %1419 to i64, !dbg !244
  %1421 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 %1420, !dbg !244
  %1422 = load float, float* %1421, align 4, !dbg !244
  %1423 = shl nsw i32 %1417, 1, !dbg !244
  %1424 = sext i32 %1423 to i64, !dbg !244
  %1425 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 %1424, !dbg !244
  %1426 = fsub float 1.000000e+00, %1422, !dbg !244
  store float %1426, float* %1425, align 4, !dbg !244
  %1427 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !244
  %1428 = load i32, i32* %dim_2197983, align 4, !dbg !244
  %1429 = sext i32 %1428 to i64, !dbg !244
  %1430 = getelementptr inbounds [0 x i32], [0 x i32]* %1427, i64 0, i64 %1429, !dbg !244
  %1431 = load i32, i32* %1430, align 4, !dbg !244
  %1432 = load i32, i32* %slice_offset_2198113, align 4, !dbg !244
  %1433 = mul nsw i32 %1431, %1388, !dbg !244
  %1434 = add nsw i32 %1432, %1433, !dbg !244
  store i32 %1434, i32* %slice_offset_2198113, align 4, !dbg !244
  %1435 = load i32, i32* %dim_2197983, align 4, !dbg !244
  br label %continue, !dbg !244

expr_true55:                                      ; preds = %expr_true41
  %1436 = load i32, i32* %dim_2197983, align 4, !dbg !239
  %1437 = shl nsw i32 %1436, 1, !dbg !239
  %1438 = sext i32 %1437 to i64, !dbg !239
  %1439 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 %1438, !dbg !239
  store float 1.000000e+00, float* %1439, align 4, !dbg !239
  %1440 = load i32, i32* %dim_2197983, align 4, !dbg !239
  %1441 = shl nsw i32 %1440, 1, !dbg !239
  %1442 = or i32 %1441, 1, !dbg !239
  %1443 = sext i32 %1442 to i64, !dbg !239
  %1444 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2198005, i64 0, i64 %1443, !dbg !239
  store float 0.000000e+00, float* %1444, align 4, !dbg !239
  %1445 = load i32, i32* %dim_2197983, align 4, !dbg !239
  br label %continue, !dbg !239

continue:                                         ; preds = %expr_true55, %if_join48
  %storemerge.in = phi i32 [ %1435, %if_join48 ], [ %1445, %expr_true55 ]
  %storemerge = add nsw i32 %storemerge.in, 1, !dbg !245
  store i32 %storemerge, i32* %dim_2197983, align 4, !dbg !245
  %1446 = icmp slt i32 %storemerge.in, 2, !dbg !235
  br i1 %1446, label %expr_true41, label %expr_false28, !dbg !235

expr_true56:                                      ; preds = %expr_false16, %continue73
  %1447 = load [0 x i32]*, [0 x i32]** %46, align 8, !dbg !236
  %1448 = load i32, i32* %dim_2197793, align 4, !dbg !236
  %1449 = sext i32 %1448 to i64, !dbg !236
  %1450 = getelementptr inbounds [0 x i32], [0 x i32]* %1447, i64 0, i64 %1449, !dbg !236
  %1451 = load i32, i32* %1450, align 4, !dbg !236
  %1452 = icmp eq i32 %1451, 1, !dbg !236
  br i1 %1452, label %expr_true72, label %expr_false57, !dbg !236

expr_false57:                                     ; preds = %expr_true56
  store float %15, float* %dim_param_2197833, align 4, !dbg !239
  %1453 = load i32, i32* %dim_2197793, align 4, !dbg !239
  %1454 = icmp eq i32 %1453, 1, !dbg !239
  br i1 %1454, label %expr_true62, label %expr_false58, !dbg !239

expr_false58:                                     ; preds = %expr_false57
  %1455 = load i32, i32* %dim_2197793, align 4, !dbg !240
  %1456 = icmp eq i32 %1455, 2, !dbg !240
  br i1 %1456, label %expr_true60, label %if_join63, !dbg !240

expr_true60:                                      ; preds = %expr_false58
  store float 1.000000e+00, float* %dim_param_2197833, align 4, !dbg !241
  br label %if_join63, !dbg !241

expr_true62:                                      ; preds = %expr_false57
  store float %14, float* %dim_param_2197833, align 4, !dbg !240
  br label %if_join63, !dbg !240

if_join63:                                        ; preds = %expr_true60, %expr_false58, %expr_true62
  %1457 = load i32, i32* %dim_2197793, align 4, !dbg !242
  %1458 = load float, float* %dim_param_2197833, align 4, !dbg !242
  %1459 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %44, i32 %1457, float %1458), !dbg !242
  %1460 = load [0 x float]*, [0 x float]** %47, align 8, !dbg !243
  %1461 = load i32, i32* %dim_2197793, align 4, !dbg !243
  %1462 = load i32, i32* %48, align 4, !dbg !243
  %1463 = mul nsw i32 %1461, %1462, !dbg !243
  %1464 = add nsw i32 %1463, %1459, !dbg !243
  %1465 = sext i32 %1464 to i64, !dbg !243
  %1466 = getelementptr inbounds [0 x float], [0 x float]* %1460, i64 0, i64 %1465, !dbg !243
  %1467 = load float, float* %1466, align 4, !dbg !243
  %1468 = load [0 x float]*, [0 x float]** %47, align 8, !dbg !243
  %1469 = load i32, i32* %dim_2197793, align 4, !dbg !243
  %1470 = load i32, i32* %48, align 4, !dbg !243
  %1471 = mul nsw i32 %1469, %1470, !dbg !243
  %1472 = add nsw i32 %1471, %1459, !dbg !243
  %1473 = add nsw i32 %1472, 1, !dbg !243
  %1474 = sext i32 %1473 to i64, !dbg !243
  %1475 = getelementptr inbounds [0 x float], [0 x float]* %1468, i64 0, i64 %1474, !dbg !243
  %1476 = load float, float* %1475, align 4, !dbg !243
  %1477 = load i32, i32* %dim_2197793, align 4, !dbg !243
  %1478 = load float, float* %dim_param_2197833, align 4, !dbg !243
  %1479 = fsub float %1478, %1467, !dbg !243
  %1480 = fsub float %1476, %1467, !dbg !243
  %1481 = fdiv float %1479, %1480, !dbg !243
  %1482 = fcmp olt float %1481, 0.000000e+00, !dbg !243
  %1483 = fcmp ogt float %1481, 1.000000e+00, !dbg !243
  %.279 = select i1 %1483, float 1.000000e+00, float %1481, !dbg !243
  %clampf_cont71 = select i1 %1482, float 0.000000e+00, float %.279, !dbg !243
  %1484 = shl nsw i32 %1477, 1, !dbg !244
  %1485 = or i32 %1484, 1, !dbg !244
  %1486 = sext i32 %1485 to i64, !dbg !244
  %1487 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 %1486, !dbg !244
  store float %clampf_cont71, float* %1487, align 4, !dbg !244
  %1488 = load i32, i32* %dim_2197793, align 4, !dbg !244
  %1489 = shl nsw i32 %1488, 1, !dbg !244
  %1490 = or i32 %1489, 1, !dbg !244
  %1491 = sext i32 %1490 to i64, !dbg !244
  %1492 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 %1491, !dbg !244
  %1493 = load float, float* %1492, align 4, !dbg !244
  %1494 = shl nsw i32 %1488, 1, !dbg !244
  %1495 = sext i32 %1494 to i64, !dbg !244
  %1496 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 %1495, !dbg !244
  %1497 = fsub float 1.000000e+00, %1493, !dbg !244
  store float %1497, float* %1496, align 4, !dbg !244
  %1498 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !244
  %1499 = load i32, i32* %dim_2197793, align 4, !dbg !244
  %1500 = sext i32 %1499 to i64, !dbg !244
  %1501 = getelementptr inbounds [0 x i32], [0 x i32]* %1498, i64 0, i64 %1500, !dbg !244
  %1502 = load i32, i32* %1501, align 4, !dbg !244
  %1503 = load i32, i32* %slice_offset_2197923, align 4, !dbg !244
  %1504 = mul nsw i32 %1502, %1459, !dbg !244
  %1505 = add nsw i32 %1503, %1504, !dbg !244
  store i32 %1505, i32* %slice_offset_2197923, align 4, !dbg !244
  %1506 = load i32, i32* %dim_2197793, align 4, !dbg !244
  br label %continue73, !dbg !244

expr_true72:                                      ; preds = %expr_true56
  %1507 = load i32, i32* %dim_2197793, align 4, !dbg !239
  %1508 = shl nsw i32 %1507, 1, !dbg !239
  %1509 = sext i32 %1508 to i64, !dbg !239
  %1510 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 %1509, !dbg !239
  store float 1.000000e+00, float* %1510, align 4, !dbg !239
  %1511 = load i32, i32* %dim_2197793, align 4, !dbg !239
  %1512 = shl nsw i32 %1511, 1, !dbg !239
  %1513 = or i32 %1512, 1, !dbg !239
  %1514 = sext i32 %1513 to i64, !dbg !239
  %1515 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197815, i64 0, i64 %1514, !dbg !239
  store float 0.000000e+00, float* %1515, align 4, !dbg !239
  %1516 = load i32, i32* %dim_2197793, align 4, !dbg !239
  br label %continue73, !dbg !239

continue73:                                       ; preds = %expr_true72, %if_join63
  %storemerge277.in = phi i32 [ %1506, %if_join63 ], [ %1516, %expr_true72 ]
  %storemerge277 = add nsw i32 %storemerge277.in, 1, !dbg !245
  store i32 %storemerge277, i32* %dim_2197793, align 4, !dbg !245
  %1517 = icmp slt i32 %storemerge277.in, 2, !dbg !235
  br i1 %1517, label %expr_true56, label %expr_false22, !dbg !235

expr_true74:                                      ; preds = %_cont13, %continue91
  %1518 = load [0 x i32]*, [0 x i32]** %46, align 8, !dbg !236
  %1519 = load i32, i32* %dim_2197593, align 4, !dbg !236
  %1520 = sext i32 %1519 to i64, !dbg !236
  %1521 = getelementptr inbounds [0 x i32], [0 x i32]* %1518, i64 0, i64 %1520, !dbg !236
  %1522 = load i32, i32* %1521, align 4, !dbg !236
  %1523 = icmp eq i32 %1522, 1, !dbg !236
  br i1 %1523, label %expr_true90, label %expr_false75, !dbg !236

expr_false75:                                     ; preds = %expr_true74
  store float %15, float* %dim_param_2197635, align 4, !dbg !239
  %1524 = load i32, i32* %dim_2197593, align 4, !dbg !239
  %1525 = icmp eq i32 %1524, 1, !dbg !239
  br i1 %1525, label %expr_true80, label %expr_false76, !dbg !239

expr_false76:                                     ; preds = %expr_false75
  %1526 = load i32, i32* %dim_2197593, align 4, !dbg !240
  %1527 = icmp eq i32 %1526, 2, !dbg !240
  br i1 %1527, label %expr_true78, label %if_join81, !dbg !240

expr_true78:                                      ; preds = %expr_false76
  store float 0.000000e+00, float* %dim_param_2197635, align 4, !dbg !241
  br label %if_join81, !dbg !241

expr_true80:                                      ; preds = %expr_false75
  store float %14, float* %dim_param_2197635, align 4, !dbg !240
  br label %if_join81, !dbg !240

if_join81:                                        ; preds = %expr_true78, %expr_false76, %expr_true80
  %1528 = load i32, i32* %dim_2197593, align 4, !dbg !242
  %1529 = load float, float* %dim_param_2197635, align 4, !dbg !242
  %1530 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %44, i32 %1528, float %1529), !dbg !242
  %1531 = load [0 x float]*, [0 x float]** %47, align 8, !dbg !243
  %1532 = load i32, i32* %dim_2197593, align 4, !dbg !243
  %1533 = load i32, i32* %48, align 4, !dbg !243
  %1534 = mul nsw i32 %1532, %1533, !dbg !243
  %1535 = add nsw i32 %1534, %1530, !dbg !243
  %1536 = sext i32 %1535 to i64, !dbg !243
  %1537 = getelementptr inbounds [0 x float], [0 x float]* %1531, i64 0, i64 %1536, !dbg !243
  %1538 = load float, float* %1537, align 4, !dbg !243
  %1539 = load [0 x float]*, [0 x float]** %47, align 8, !dbg !243
  %1540 = load i32, i32* %dim_2197593, align 4, !dbg !243
  %1541 = load i32, i32* %48, align 4, !dbg !243
  %1542 = mul nsw i32 %1540, %1541, !dbg !243
  %1543 = add nsw i32 %1542, %1530, !dbg !243
  %1544 = add nsw i32 %1543, 1, !dbg !243
  %1545 = sext i32 %1544 to i64, !dbg !243
  %1546 = getelementptr inbounds [0 x float], [0 x float]* %1539, i64 0, i64 %1545, !dbg !243
  %1547 = load float, float* %1546, align 4, !dbg !243
  %1548 = load i32, i32* %dim_2197593, align 4, !dbg !243
  %1549 = load float, float* %dim_param_2197635, align 4, !dbg !243
  %1550 = fsub float %1549, %1538, !dbg !243
  %1551 = fsub float %1547, %1538, !dbg !243
  %1552 = fdiv float %1550, %1551, !dbg !243
  %1553 = fcmp olt float %1552, 0.000000e+00, !dbg !243
  %1554 = fcmp ogt float %1552, 1.000000e+00, !dbg !243
  %.280 = select i1 %1554, float 1.000000e+00, float %1552, !dbg !243
  %clampf_cont89 = select i1 %1553, float 0.000000e+00, float %.280, !dbg !243
  %1555 = shl nsw i32 %1548, 1, !dbg !244
  %1556 = or i32 %1555, 1, !dbg !244
  %1557 = sext i32 %1556 to i64, !dbg !244
  %1558 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 %1557, !dbg !244
  store float %clampf_cont89, float* %1558, align 4, !dbg !244
  %1559 = load i32, i32* %dim_2197593, align 4, !dbg !244
  %1560 = shl nsw i32 %1559, 1, !dbg !244
  %1561 = or i32 %1560, 1, !dbg !244
  %1562 = sext i32 %1561 to i64, !dbg !244
  %1563 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 %1562, !dbg !244
  %1564 = load float, float* %1563, align 4, !dbg !244
  %1565 = shl nsw i32 %1559, 1, !dbg !244
  %1566 = sext i32 %1565 to i64, !dbg !244
  %1567 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 %1566, !dbg !244
  %1568 = fsub float 1.000000e+00, %1564, !dbg !244
  store float %1568, float* %1567, align 4, !dbg !244
  %1569 = load [0 x i32]*, [0 x i32]** %45, align 8, !dbg !244
  %1570 = load i32, i32* %dim_2197593, align 4, !dbg !244
  %1571 = sext i32 %1570 to i64, !dbg !244
  %1572 = getelementptr inbounds [0 x i32], [0 x i32]* %1569, i64 0, i64 %1571, !dbg !244
  %1573 = load i32, i32* %1572, align 4, !dbg !244
  %1574 = load i32, i32* %slice_offset_2197728, align 4, !dbg !244
  %1575 = mul nsw i32 %1573, %1530, !dbg !244
  %1576 = add nsw i32 %1574, %1575, !dbg !244
  store i32 %1576, i32* %slice_offset_2197728, align 4, !dbg !244
  %1577 = load i32, i32* %dim_2197593, align 4, !dbg !244
  br label %continue91, !dbg !244

expr_true90:                                      ; preds = %expr_true74
  %1578 = load i32, i32* %dim_2197593, align 4, !dbg !239
  %1579 = shl nsw i32 %1578, 1, !dbg !239
  %1580 = sext i32 %1579 to i64, !dbg !239
  %1581 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 %1580, !dbg !239
  store float 1.000000e+00, float* %1581, align 4, !dbg !239
  %1582 = load i32, i32* %dim_2197593, align 4, !dbg !239
  %1583 = shl nsw i32 %1582, 1, !dbg !239
  %1584 = or i32 %1583, 1, !dbg !239
  %1585 = sext i32 %1584 to i64, !dbg !239
  %1586 = getelementptr inbounds [6 x float], [6 x float]* %param_weight_2197617, i64 0, i64 %1585, !dbg !239
  store float 0.000000e+00, float* %1586, align 4, !dbg !239
  %1587 = load i32, i32* %dim_2197593, align 4, !dbg !239
  br label %continue91, !dbg !239

continue91:                                       ; preds = %expr_true90, %if_join81
  %storemerge278.in = phi i32 [ %1577, %if_join81 ], [ %1587, %expr_true90 ]
  %storemerge278 = add nsw i32 %storemerge278.in, 1, !dbg !245
  store i32 %storemerge278, i32* %dim_2197593, align 4, !dbg !245
  %1588 = icmp slt i32 %storemerge278.in, 2, !dbg !235
  br i1 %1588, label %expr_true74, label %expr_false16, !dbg !235

evaluate_brdf_cont:                               ; preds = %test_evaluate_brdf, %expr_false28
  %res = phi %5 [ %1375, %expr_false28 ], [ zeroinitializer, %test_evaluate_brdf ], !dbg !246
  %1589 = getelementptr inbounds %2, %2* %result_2196434, i64 0, i32 0, !dbg !246
  %1590 = extractvalue %5 %res, 0, !dbg !246
  store float %1590, float* %1589, align 4, !dbg !246
  %1591 = getelementptr inbounds %2, %2* %result_2196434, i64 0, i32 1, !dbg !246
  %1592 = extractvalue %5 %res, 1, !dbg !246
  store float %1592, float* %1591, align 4, !dbg !246
  %1593 = getelementptr inbounds %2, %2* %result_2196434, i64 0, i32 2, !dbg !246
  %1594 = extractvalue %5 %res, 2, !dbg !246
  store float %1594, float* %1593, align 4, !dbg !246
  ret void, !dbg !246
}

define internal fastcc float @elevation_2196481(%2 %v_2196483) unnamed_addr !dbg !247 {
elevation:
  %0 = extractvalue %2 %v_2196483, 0, !dbg !249
  %1 = extractvalue %2 %v_2196483, 1, !dbg !249
  %2 = extractvalue %2 %v_2196483, 2, !dbg !249
  %3 = fadd float %2, -1.000000e+00, !dbg !249
  %4 = fmul float %0, %0, !dbg !249
  %5 = fmul float %1, %1, !dbg !249
  %6 = fadd float %4, %5, !dbg !249
  %7 = fmul float %3, %3, !dbg !249
  %8 = fadd float %6, %7, !dbg !249
  %9 = call float @llvm.sqrt.f32(float %8), !dbg !249
  %10 = fmul float %9, 5.000000e-01, !dbg !250
  %11 = call float @asinf(float %10), !dbg !250
  %12 = fmul float %11, 2.000000e+00, !dbg !251
  ret float %12, !dbg !251
}

define internal fastcc %10 @invert_warp2D2_2196548(%7* %warp_2196550, %3 %sample_2196551, float %dim_param_2196552, float %theta_i_2196553) unnamed_addr !dbg !252 {
invert_warp2D2:
  %dim_param_2196600 = alloca float, align 4
  %sample_n_2196719 = alloca %3, align 8
  %dim_2196559 = alloca i32, align 4
  %slice_offset_2196693 = alloca i32, align 4
  %param_weight_2196582 = alloca [4 x float], align 4
  %param_weight_2196582.repack = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 0, !dbg !254
  store float 0.000000e+00, float* %param_weight_2196582.repack, align 4, !dbg !254
  %param_weight_2196582.repack35 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 1, !dbg !254
  store float 0.000000e+00, float* %param_weight_2196582.repack35, align 4, !dbg !254
  %param_weight_2196582.repack36 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 2, !dbg !254
  store float 0.000000e+00, float* %param_weight_2196582.repack36, align 4, !dbg !254
  %param_weight_2196582.repack37 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 3, !dbg !254
  store float 0.000000e+00, float* %param_weight_2196582.repack37, align 4, !dbg !254
  store i32 0, i32* %slice_offset_2196693, align 4, !dbg !254
  store i32 0, i32* %dim_2196559, align 4, !dbg !254
  %0 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 4, !dbg !254
  %1 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 3, !dbg !254
  %2 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 5, !dbg !254
  %3 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 6, !dbg !254
  br label %expr_true, !dbg !255

expr_false:                                       ; preds = %continue
  %4 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 2, !dbg !256
  %.elt = getelementptr inbounds %3, %3* %4, i64 0, i32 0, !dbg !256
  %.unpack = load float, float* %.elt, align 4, !dbg !256
  %.elt38 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 2, i32 1, !dbg !256
  %.unpack39 = load float, float* %.elt38, align 4, !dbg !256
  %5 = extractvalue %3 %sample_2196551, 0, !dbg !256
  %6 = fmul float %5, %.unpack, !dbg !256
  %7 = extractvalue %3 %sample_2196551, 1, !dbg !256
  %8 = fmul float %7, %.unpack39, !dbg !256
  %sample_n_2196719.repack = getelementptr inbounds %3, %3* %sample_n_2196719, i64 0, i32 0, !dbg !256
  store float %6, float* %sample_n_2196719.repack, align 8, !dbg !256
  %sample_n_2196719.repack41 = getelementptr inbounds %3, %3* %sample_n_2196719, i64 0, i32 1, !dbg !256
  store float %8, float* %sample_n_2196719.repack41, align 4, !dbg !256
  %.elt43 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 0, i32 0, !dbg !256
  %.unpack44 = load i32, i32* %.elt43, align 4, !dbg !256
  %.elt45 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 0, i32 1, !dbg !256
  %.unpack46 = load i32, i32* %.elt45, align 4, !dbg !256
  %9 = sitofp i32 %.unpack44 to float, !dbg !256
  %10 = fadd float %9, -2.000000e+00, !dbg !256
  %11 = fcmp olt float %6, %10, !dbg !256
  %12 = select i1 %11, float %6, float %10, !dbg !256
  %13 = fptosi float %12 to i32, !dbg !256
  %14 = sitofp i32 %13 to float, !dbg !256
  %15 = fsub float %6, %14, !dbg !256
  %16 = sitofp i32 %.unpack46 to float, !dbg !256
  %17 = fadd float %16, -2.000000e+00, !dbg !256
  %18 = fcmp olt float %8, %17, !dbg !256
  %19 = select i1 %18, float %8, float %17, !dbg !256
  %20 = fptosi float %19 to i32, !dbg !256
  %21 = sitofp i32 %20 to float, !dbg !256
  %22 = fsub float %8, %21, !dbg !256
  %sample_n_2196719.repack47 = getelementptr inbounds %3, %3* %sample_n_2196719, i64 0, i32 0, !dbg !256
  store float %15, float* %sample_n_2196719.repack47, align 8, !dbg !256
  %sample_n_2196719.repack49 = getelementptr inbounds %3, %3* %sample_n_2196719, i64 0, i32 1, !dbg !256
  store float %22, float* %sample_n_2196719.repack49, align 4, !dbg !256
  %23 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 0, i32 0, !dbg !256
  %24 = load i32, i32* %23, align 4, !dbg !256
  %25 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 0, i32 1, !dbg !256
  %26 = load i32, i32* %25, align 4, !dbg !256
  %27 = load i32, i32* %slice_offset_2196693, align 4, !dbg !256
  %28 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 7, !dbg !256
  %29 = load [0 x float]*, [0 x float]** %28, align 8, !dbg !256
  %30 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %31 = getelementptr inbounds [0 x i32], [0 x i32]* %30, i64 0, i64 1, !dbg !256
  %32 = load i32, i32* %31, align 4, !dbg !256
  %33 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 2, !dbg !256
  %34 = load float, float* %33, align 4, !dbg !256
  %35 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 3, !dbg !256
  %36 = load float, float* %35, align 4, !dbg !256
  %37 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %38 = getelementptr inbounds [0 x i32], [0 x i32]* %37, i64 0, i64 0, !dbg !256
  %39 = load i32, i32* %38, align 4, !dbg !256
  %40 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 0, !dbg !256
  %41 = load float, float* %40, align 4, !dbg !256
  %42 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 1, !dbg !256
  %43 = load float, float* %42, align 4, !dbg !256
  %44 = mul nsw i32 %24, %20, !dbg !256
  %offset = add nsw i32 %44, %13, !dbg !256
  %slice_size = mul nsw i32 %24, %26, !dbg !256
  %45 = mul nsw i32 %27, %slice_size, !dbg !256
  %46 = add nsw i32 %offset, %45, !dbg !256
  %47 = sext i32 %46 to i64, !dbg !256
  %48 = getelementptr inbounds [0 x float], [0 x float]* %29, i64 0, i64 %47, !dbg !256
  %49 = load float, float* %48, align 4, !dbg !256
  %50 = mul nsw i32 %39, %slice_size, !dbg !256
  %i1 = add nsw i32 %46, %50, !dbg !256
  %51 = sext i32 %i1 to i64, !dbg !256
  %52 = getelementptr inbounds [0 x float], [0 x float]* %29, i64 0, i64 %51, !dbg !256
  %53 = load float, float* %52, align 4, !dbg !256
  %54 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %55 = getelementptr inbounds [0 x i32], [0 x i32]* %54, i64 0, i64 0, !dbg !256
  %56 = load i32, i32* %55, align 4, !dbg !256
  %57 = load float, float* %40, align 4, !dbg !256
  %58 = load float, float* %42, align 4, !dbg !256
  %59 = mul nsw i32 %32, %slice_size, !dbg !256
  %i19 = add nsw i32 %46, %59, !dbg !256
  %60 = sext i32 %i19 to i64, !dbg !256
  %61 = getelementptr inbounds [0 x float], [0 x float]* %29, i64 0, i64 %60, !dbg !256
  %62 = load float, float* %61, align 4, !dbg !256
  %63 = mul nsw i32 %56, %slice_size, !dbg !256
  %i110 = add nsw i32 %i19, %63, !dbg !256
  %64 = sext i32 %i110 to i64, !dbg !256
  %65 = getelementptr inbounds [0 x float], [0 x float]* %29, i64 0, i64 %64, !dbg !256
  %66 = load float, float* %65, align 4, !dbg !256
  %67 = load [0 x float]*, [0 x float]** %28, align 8, !dbg !256
  %68 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %69 = getelementptr inbounds [0 x i32], [0 x i32]* %68, i64 0, i64 1, !dbg !256
  %70 = load i32, i32* %69, align 4, !dbg !256
  %71 = load float, float* %33, align 4, !dbg !256
  %72 = load float, float* %35, align 4, !dbg !256
  %73 = getelementptr inbounds [0 x i32], [0 x i32]* %68, i64 0, i64 0, !dbg !256
  %74 = load i32, i32* %73, align 4, !dbg !256
  %75 = load float, float* %40, align 4, !dbg !256
  %76 = load float, float* %42, align 4, !dbg !256
  %77 = getelementptr inbounds [0 x float], [0 x float]* %67, i64 0, i64 1, !dbg !256
  %78 = sext i32 %46 to i64, !dbg !256
  %79 = getelementptr inbounds float, float* %77, i64 %78, !dbg !256
  %80 = load float, float* %79, align 4, !dbg !256
  %81 = mul nsw i32 %74, %slice_size, !dbg !256
  %i111 = add nsw i32 %46, %81, !dbg !256
  %82 = sext i32 %i111 to i64, !dbg !256
  %83 = getelementptr inbounds float, float* %77, i64 %82, !dbg !256
  %84 = load float, float* %83, align 4, !dbg !256
  %85 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %86 = getelementptr inbounds [0 x i32], [0 x i32]* %85, i64 0, i64 0, !dbg !256
  %87 = load i32, i32* %86, align 4, !dbg !256
  %88 = load float, float* %40, align 4, !dbg !256
  %89 = load float, float* %42, align 4, !dbg !256
  %90 = mul nsw i32 %70, %slice_size, !dbg !256
  %i112 = add nsw i32 %46, %90, !dbg !256
  %91 = sext i32 %i112 to i64, !dbg !256
  %92 = getelementptr inbounds float, float* %77, i64 %91, !dbg !256
  %93 = load float, float* %92, align 4, !dbg !256
  %94 = mul nsw i32 %87, %slice_size, !dbg !256
  %i113 = add nsw i32 %i112, %94, !dbg !256
  %95 = sext i32 %i113 to i64, !dbg !256
  %96 = getelementptr inbounds float, float* %77, i64 %95, !dbg !256
  %97 = load float, float* %96, align 4, !dbg !256
  %98 = load [0 x float]*, [0 x float]** %28, align 8, !dbg !256
  %99 = load i32, i32* %23, align 4, !dbg !256
  %100 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %101 = getelementptr inbounds [0 x i32], [0 x i32]* %100, i64 0, i64 1, !dbg !256
  %102 = load i32, i32* %101, align 4, !dbg !256
  %103 = load float, float* %33, align 4, !dbg !256
  %104 = load float, float* %35, align 4, !dbg !256
  %105 = getelementptr inbounds [0 x i32], [0 x i32]* %100, i64 0, i64 0, !dbg !256
  %106 = load i32, i32* %105, align 4, !dbg !256
  %107 = load float, float* %40, align 4, !dbg !256
  %108 = load float, float* %42, align 4, !dbg !256
  %109 = sext i32 %99 to i64, !dbg !256
  %110 = getelementptr inbounds [0 x float], [0 x float]* %98, i64 0, i64 %109, !dbg !256
  %111 = sext i32 %46 to i64, !dbg !256
  %112 = getelementptr inbounds float, float* %110, i64 %111, !dbg !256
  %113 = load float, float* %112, align 4, !dbg !256
  %114 = mul nsw i32 %106, %slice_size, !dbg !256
  %i114 = add nsw i32 %46, %114, !dbg !256
  %115 = sext i32 %i114 to i64, !dbg !256
  %116 = getelementptr inbounds float, float* %110, i64 %115, !dbg !256
  %117 = load float, float* %116, align 4, !dbg !256
  %118 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %119 = getelementptr inbounds [0 x i32], [0 x i32]* %118, i64 0, i64 0, !dbg !256
  %120 = load i32, i32* %119, align 4, !dbg !256
  %121 = load float, float* %40, align 4, !dbg !256
  %122 = load float, float* %42, align 4, !dbg !256
  %123 = mul nsw i32 %102, %slice_size, !dbg !256
  %i115 = add nsw i32 %46, %123, !dbg !256
  %124 = sext i32 %i115 to i64, !dbg !256
  %125 = getelementptr inbounds float, float* %110, i64 %124, !dbg !256
  %126 = load float, float* %125, align 4, !dbg !256
  %127 = mul nsw i32 %120, %slice_size, !dbg !256
  %i116 = add nsw i32 %i115, %127, !dbg !256
  %128 = sext i32 %i116 to i64, !dbg !256
  %129 = getelementptr inbounds float, float* %110, i64 %128, !dbg !256
  %130 = load float, float* %129, align 4, !dbg !256
  %131 = load [0 x float]*, [0 x float]** %28, align 8, !dbg !256
  %132 = load i32, i32* %23, align 4, !dbg !256
  %133 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %134 = getelementptr inbounds [0 x i32], [0 x i32]* %133, i64 0, i64 1, !dbg !256
  %135 = load i32, i32* %134, align 4, !dbg !256
  %136 = load float, float* %33, align 4, !dbg !256
  %137 = load float, float* %35, align 4, !dbg !256
  %138 = getelementptr inbounds [0 x i32], [0 x i32]* %133, i64 0, i64 0, !dbg !256
  %139 = load i32, i32* %138, align 4, !dbg !256
  %140 = load float, float* %40, align 4, !dbg !256
  %141 = load float, float* %42, align 4, !dbg !256
  %142 = add nsw i32 %132, 1, !dbg !256
  %143 = sext i32 %142 to i64, !dbg !256
  %144 = getelementptr inbounds [0 x float], [0 x float]* %131, i64 0, i64 %143, !dbg !256
  %145 = sext i32 %46 to i64, !dbg !256
  %146 = getelementptr inbounds float, float* %144, i64 %145, !dbg !256
  %147 = load float, float* %146, align 4, !dbg !256
  %148 = mul nsw i32 %139, %slice_size, !dbg !256
  %i117 = add nsw i32 %46, %148, !dbg !256
  %149 = sext i32 %i117 to i64, !dbg !256
  %150 = getelementptr inbounds float, float* %144, i64 %149, !dbg !256
  %151 = load float, float* %150, align 4, !dbg !256
  %152 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %153 = getelementptr inbounds [0 x i32], [0 x i32]* %152, i64 0, i64 0, !dbg !256
  %154 = load i32, i32* %153, align 4, !dbg !256
  %155 = load float, float* %40, align 4, !dbg !256
  %156 = load float, float* %42, align 4, !dbg !256
  %157 = mul nsw i32 %135, %slice_size, !dbg !256
  %i118 = add nsw i32 %46, %157, !dbg !256
  %158 = sext i32 %i118 to i64, !dbg !256
  %159 = getelementptr inbounds float, float* %144, i64 %158, !dbg !256
  %160 = load float, float* %159, align 4, !dbg !256
  %161 = mul nsw i32 %154, %slice_size, !dbg !256
  %i119 = add nsw i32 %i118, %161, !dbg !256
  %162 = sext i32 %i119 to i64, !dbg !256
  %163 = getelementptr inbounds float, float* %144, i64 %162, !dbg !256
  %164 = load float, float* %163, align 4, !dbg !256
  %165 = getelementptr inbounds %3, %3* %sample_n_2196719, i64 0, i32 0, !dbg !256
  %166 = fsub float 1.000000e+00, %22, !dbg !256
  %167 = fmul float %49, %41, !dbg !256
  %168 = fmul float %53, %43, !dbg !256
  %169 = fadd float %167, %168, !dbg !256
  %170 = fmul float %169, %34, !dbg !256
  %171 = fmul float %62, %57, !dbg !256
  %172 = fmul float %66, %58, !dbg !256
  %173 = fadd float %171, %172, !dbg !256
  %174 = fmul float %173, %36, !dbg !256
  %175 = fadd float %170, %174, !dbg !256
  %176 = fmul float %166, %175, !dbg !256
  %177 = fmul float %113, %107, !dbg !256
  %178 = fmul float %117, %108, !dbg !256
  %179 = fadd float %177, %178, !dbg !256
  %180 = fmul float %179, %103, !dbg !256
  %181 = fmul float %126, %121, !dbg !256
  %182 = fmul float %130, %122, !dbg !256
  %183 = fadd float %181, %182, !dbg !256
  %184 = fmul float %183, %104, !dbg !256
  %185 = fadd float %180, %184, !dbg !256
  %186 = fmul float %22, %185, !dbg !256
  %187 = fadd float %176, %186, !dbg !256
  %188 = fmul float %15, 5.000000e-01, !dbg !256
  %189 = fmul float %80, %75, !dbg !256
  %190 = fmul float %84, %76, !dbg !256
  %191 = fadd float %189, %190, !dbg !256
  %192 = fmul float %191, %71, !dbg !256
  %193 = fmul float %93, %88, !dbg !256
  %194 = fmul float %97, %89, !dbg !256
  %195 = fadd float %193, %194, !dbg !256
  %196 = fmul float %195, %72, !dbg !256
  %197 = fadd float %192, %196, !dbg !256
  %198 = fmul float %166, %197, !dbg !256
  %199 = fmul float %147, %140, !dbg !256
  %200 = fmul float %151, %141, !dbg !256
  %201 = fadd float %199, %200, !dbg !256
  %202 = fmul float %201, %136, !dbg !256
  %203 = fmul float %160, %155, !dbg !256
  %204 = fmul float %164, %156, !dbg !256
  %205 = fadd float %203, %204, !dbg !256
  %206 = fmul float %205, %137, !dbg !256
  %207 = fadd float %202, %206, !dbg !256
  %208 = fmul float %22, %207, !dbg !256
  %209 = fadd float %198, %208, !dbg !256
  %210 = fsub float %209, %187, !dbg !256
  %211 = fmul float %188, %210, !dbg !256
  %212 = fadd float %187, %211, !dbg !256
  %213 = fmul float %15, %212, !dbg !256
  store float %213, float* %165, align 8, !dbg !256
  %214 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 9, !dbg !256
  %215 = load [0 x float]*, [0 x float]** %214, align 8, !dbg !256
  %216 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %217 = getelementptr inbounds [0 x i32], [0 x i32]* %216, i64 0, i64 1, !dbg !256
  %218 = load i32, i32* %217, align 4, !dbg !256
  %219 = load float, float* %33, align 4, !dbg !256
  %220 = load float, float* %35, align 4, !dbg !256
  %221 = getelementptr inbounds [0 x i32], [0 x i32]* %216, i64 0, i64 0, !dbg !256
  %222 = load i32, i32* %221, align 4, !dbg !256
  %223 = load float, float* %40, align 4, !dbg !256
  %224 = load float, float* %42, align 4, !dbg !256
  %225 = sext i32 %46 to i64, !dbg !256
  %226 = getelementptr inbounds [0 x float], [0 x float]* %215, i64 0, i64 %225, !dbg !256
  %227 = load float, float* %226, align 4, !dbg !256
  %228 = mul nsw i32 %222, %slice_size, !dbg !256
  %i120 = add nsw i32 %46, %228, !dbg !256
  %229 = sext i32 %i120 to i64, !dbg !256
  %230 = getelementptr inbounds [0 x float], [0 x float]* %215, i64 0, i64 %229, !dbg !256
  %231 = load float, float* %230, align 4, !dbg !256
  %232 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %233 = getelementptr inbounds [0 x i32], [0 x i32]* %232, i64 0, i64 0, !dbg !256
  %234 = load i32, i32* %233, align 4, !dbg !256
  %235 = load float, float* %40, align 4, !dbg !256
  %236 = load float, float* %42, align 4, !dbg !256
  %237 = mul nsw i32 %218, %slice_size, !dbg !256
  %i121 = add nsw i32 %46, %237, !dbg !256
  %238 = sext i32 %i121 to i64, !dbg !256
  %239 = getelementptr inbounds [0 x float], [0 x float]* %215, i64 0, i64 %238, !dbg !256
  %240 = load float, float* %239, align 4, !dbg !256
  %241 = mul nsw i32 %234, %slice_size, !dbg !256
  %i122 = add nsw i32 %i121, %241, !dbg !256
  %242 = sext i32 %i122 to i64, !dbg !256
  %243 = getelementptr inbounds [0 x float], [0 x float]* %215, i64 0, i64 %242, !dbg !256
  %244 = load float, float* %243, align 4, !dbg !256
  %245 = load [0 x float]*, [0 x float]** %214, align 8, !dbg !256
  %246 = load i32, i32* %23, align 4, !dbg !256
  %247 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %248 = getelementptr inbounds [0 x i32], [0 x i32]* %247, i64 0, i64 1, !dbg !256
  %249 = load i32, i32* %248, align 4, !dbg !256
  %250 = load float, float* %33, align 4, !dbg !256
  %251 = load float, float* %35, align 4, !dbg !256
  %252 = getelementptr inbounds [0 x i32], [0 x i32]* %247, i64 0, i64 0, !dbg !256
  %253 = load i32, i32* %252, align 4, !dbg !256
  %254 = load float, float* %40, align 4, !dbg !256
  %255 = load float, float* %42, align 4, !dbg !256
  %256 = sext i32 %246 to i64, !dbg !256
  %257 = getelementptr inbounds [0 x float], [0 x float]* %245, i64 0, i64 %256, !dbg !256
  %258 = sext i32 %46 to i64, !dbg !256
  %259 = getelementptr inbounds float, float* %257, i64 %258, !dbg !256
  %260 = load float, float* %259, align 4, !dbg !256
  %261 = mul nsw i32 %253, %slice_size, !dbg !256
  %i123 = add nsw i32 %46, %261, !dbg !256
  %262 = sext i32 %i123 to i64, !dbg !256
  %263 = getelementptr inbounds float, float* %257, i64 %262, !dbg !256
  %264 = load float, float* %263, align 4, !dbg !256
  %265 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %266 = getelementptr inbounds [0 x i32], [0 x i32]* %265, i64 0, i64 0, !dbg !256
  %267 = load i32, i32* %266, align 4, !dbg !256
  %268 = load float, float* %40, align 4, !dbg !256
  %269 = load float, float* %42, align 4, !dbg !256
  %270 = mul nsw i32 %249, %slice_size, !dbg !256
  %i124 = add nsw i32 %46, %270, !dbg !256
  %271 = sext i32 %i124 to i64, !dbg !256
  %272 = getelementptr inbounds float, float* %257, i64 %271, !dbg !256
  %273 = load float, float* %272, align 4, !dbg !256
  %274 = mul nsw i32 %267, %slice_size, !dbg !256
  %i125 = add nsw i32 %i124, %274, !dbg !256
  %275 = sext i32 %i125 to i64, !dbg !256
  %276 = getelementptr inbounds float, float* %257, i64 %275, !dbg !256
  %277 = load float, float* %276, align 4, !dbg !256
  %278 = fmul float %227, %223, !dbg !256
  %279 = fmul float %231, %224, !dbg !256
  %280 = fadd float %278, %279, !dbg !256
  %281 = fmul float %280, %219, !dbg !256
  %282 = fmul float %240, %235, !dbg !256
  %283 = fmul float %244, %236, !dbg !256
  %284 = fadd float %282, %283, !dbg !256
  %285 = fmul float %284, %220, !dbg !256
  %286 = fadd float %281, %285, !dbg !256
  %287 = fmul float %166, %286, !dbg !256
  %288 = fmul float %260, %254, !dbg !256
  %289 = fmul float %264, %255, !dbg !256
  %290 = fadd float %288, %289, !dbg !256
  %291 = fmul float %290, %250, !dbg !256
  %292 = fmul float %273, %268, !dbg !256
  %293 = fmul float %277, %269, !dbg !256
  %294 = fadd float %292, %293, !dbg !256
  %295 = fmul float %294, %251, !dbg !256
  %296 = fadd float %291, %295, !dbg !256
  %297 = fmul float %22, %296, !dbg !256
  %298 = fadd float %287, %297, !dbg !256
  %299 = fadd float %213, %298, !dbg !256
  store float %299, float* %165, align 8, !dbg !256
  %300 = load i32, i32* %23, align 4, !dbg !256
  %301 = load i32, i32* %slice_offset_2196693, align 4, !dbg !256
  %302 = mul nsw i32 %300, %20, !dbg !256
  %303 = mul nsw i32 %301, %slice_size, !dbg !256
  %304 = add nsw i32 %302, %303, !dbg !256
  %305 = load [0 x float]*, [0 x float]** %214, align 8, !dbg !256
  %306 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %307 = getelementptr inbounds [0 x i32], [0 x i32]* %306, i64 0, i64 1, !dbg !256
  %308 = load i32, i32* %307, align 4, !dbg !256
  %309 = load float, float* %33, align 4, !dbg !256
  %310 = load float, float* %35, align 4, !dbg !256
  %311 = getelementptr inbounds [0 x i32], [0 x i32]* %306, i64 0, i64 0, !dbg !256
  %312 = load i32, i32* %311, align 4, !dbg !256
  %313 = load float, float* %40, align 4, !dbg !256
  %314 = load float, float* %42, align 4, !dbg !256
  %315 = add nsw i32 %304, %300, !dbg !256
  %316 = add nsw i32 %315, -1, !dbg !256
  %317 = sext i32 %316 to i64, !dbg !256
  %318 = getelementptr inbounds [0 x float], [0 x float]* %305, i64 0, i64 %317, !dbg !256
  %319 = load float, float* %318, align 4, !dbg !256
  %320 = mul nsw i32 %312, %slice_size, !dbg !256
  %i126 = add nsw i32 %316, %320, !dbg !256
  %321 = sext i32 %i126 to i64, !dbg !256
  %322 = getelementptr inbounds [0 x float], [0 x float]* %305, i64 0, i64 %321, !dbg !256
  %323 = load float, float* %322, align 4, !dbg !256
  %324 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %325 = getelementptr inbounds [0 x i32], [0 x i32]* %324, i64 0, i64 0, !dbg !256
  %326 = load i32, i32* %325, align 4, !dbg !256
  %327 = load float, float* %40, align 4, !dbg !256
  %328 = load float, float* %42, align 4, !dbg !256
  %329 = mul nsw i32 %308, %slice_size, !dbg !256
  %i127 = add nsw i32 %316, %329, !dbg !256
  %330 = sext i32 %i127 to i64, !dbg !256
  %331 = getelementptr inbounds [0 x float], [0 x float]* %305, i64 0, i64 %330, !dbg !256
  %332 = load float, float* %331, align 4, !dbg !256
  %333 = mul nsw i32 %326, %slice_size, !dbg !256
  %i128 = add nsw i32 %i127, %333, !dbg !256
  %334 = sext i32 %i128 to i64, !dbg !256
  %335 = getelementptr inbounds [0 x float], [0 x float]* %305, i64 0, i64 %334, !dbg !256
  %336 = load float, float* %335, align 4, !dbg !256
  %337 = load [0 x float]*, [0 x float]** %214, align 8, !dbg !256
  %338 = load i32, i32* %23, align 4, !dbg !256
  %339 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %340 = getelementptr inbounds [0 x i32], [0 x i32]* %339, i64 0, i64 1, !dbg !256
  %341 = load i32, i32* %340, align 4, !dbg !256
  %342 = load float, float* %33, align 4, !dbg !256
  %343 = load float, float* %35, align 4, !dbg !256
  %344 = getelementptr inbounds [0 x i32], [0 x i32]* %339, i64 0, i64 0, !dbg !256
  %345 = load i32, i32* %344, align 4, !dbg !256
  %346 = load float, float* %40, align 4, !dbg !256
  %347 = load float, float* %42, align 4, !dbg !256
  %348 = shl nsw i32 %338, 1, !dbg !256
  %349 = add nsw i32 %348, -1, !dbg !256
  %350 = add nsw i32 %304, %349, !dbg !256
  %351 = sext i32 %350 to i64, !dbg !256
  %352 = getelementptr inbounds [0 x float], [0 x float]* %337, i64 0, i64 %351, !dbg !256
  %353 = load float, float* %352, align 4, !dbg !256
  %354 = mul nsw i32 %345, %slice_size, !dbg !256
  %i129 = add nsw i32 %350, %354, !dbg !256
  %355 = sext i32 %i129 to i64, !dbg !256
  %356 = getelementptr inbounds [0 x float], [0 x float]* %337, i64 0, i64 %355, !dbg !256
  %357 = load float, float* %356, align 4, !dbg !256
  %358 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %359 = getelementptr inbounds [0 x i32], [0 x i32]* %358, i64 0, i64 0, !dbg !256
  %360 = load i32, i32* %359, align 4, !dbg !256
  %361 = load float, float* %40, align 4, !dbg !256
  %362 = load float, float* %42, align 4, !dbg !256
  %363 = mul nsw i32 %341, %slice_size, !dbg !256
  %i130 = add nsw i32 %350, %363, !dbg !256
  %364 = sext i32 %i130 to i64, !dbg !256
  %365 = getelementptr inbounds [0 x float], [0 x float]* %337, i64 0, i64 %364, !dbg !256
  %366 = load float, float* %365, align 4, !dbg !256
  %367 = mul nsw i32 %360, %slice_size, !dbg !256
  %i131 = add nsw i32 %i130, %367, !dbg !256
  %368 = sext i32 %i131 to i64, !dbg !256
  %369 = getelementptr inbounds [0 x float], [0 x float]* %337, i64 0, i64 %368, !dbg !256
  %370 = load float, float* %369, align 4, !dbg !256
  %371 = getelementptr inbounds %3, %3* %sample_n_2196719, i64 0, i32 1, !dbg !256
  %372 = load float, float* %371, align 4, !dbg !256
  %373 = fsub float 1.000000e+00, %372, !dbg !256
  %374 = fmul float %319, %313, !dbg !256
  %375 = fmul float %323, %314, !dbg !256
  %376 = fadd float %374, %375, !dbg !256
  %377 = fmul float %376, %309, !dbg !256
  %378 = fmul float %332, %327, !dbg !256
  %379 = fmul float %336, %328, !dbg !256
  %380 = fadd float %378, %379, !dbg !256
  %381 = fmul float %380, %310, !dbg !256
  %382 = fadd float %377, %381, !dbg !256
  %383 = fmul float %373, %382, !dbg !256
  %384 = fmul float %353, %346, !dbg !256
  %385 = fmul float %357, %347, !dbg !256
  %386 = fadd float %384, %385, !dbg !256
  %387 = fmul float %386, %342, !dbg !256
  %388 = fmul float %366, %361, !dbg !256
  %389 = fmul float %370, %362, !dbg !256
  %390 = fadd float %388, %389, !dbg !256
  %391 = fmul float %390, %343, !dbg !256
  %392 = fadd float %387, %391, !dbg !256
  %393 = fmul float %372, %392, !dbg !256
  %394 = fadd float %383, %393, !dbg !256
  %395 = fdiv float %299, %394, !dbg !256
  store float %395, float* %165, align 8, !dbg !256
  %396 = load float, float* %371, align 4, !dbg !256
  %397 = fmul float %396, 5.000000e-01, !dbg !256
  %398 = fsub float %392, %382, !dbg !256
  %399 = fmul float %397, %398, !dbg !256
  %400 = fadd float %382, %399, !dbg !256
  %401 = fmul float %396, %400, !dbg !256
  store float %401, float* %371, align 4, !dbg !256
  %402 = load i32, i32* %slice_offset_2196693, align 4, !dbg !256
  %403 = load i32, i32* %25, align 4, !dbg !256
  %404 = mul nsw i32 %402, %403, !dbg !256
  %405 = add nsw i32 %404, %20, !dbg !256
  %406 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 8, !dbg !256
  %407 = load [0 x float]*, [0 x float]** %406, align 8, !dbg !256
  %408 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %409 = getelementptr inbounds [0 x i32], [0 x i32]* %408, i64 0, i64 1, !dbg !256
  %410 = load i32, i32* %409, align 4, !dbg !256
  %411 = load float, float* %33, align 4, !dbg !256
  %412 = load float, float* %35, align 4, !dbg !256
  %413 = getelementptr inbounds [0 x i32], [0 x i32]* %408, i64 0, i64 0, !dbg !256
  %414 = load i32, i32* %413, align 4, !dbg !256
  %415 = load float, float* %40, align 4, !dbg !256
  %416 = load float, float* %42, align 4, !dbg !256
  %417 = sext i32 %405 to i64, !dbg !256
  %418 = getelementptr inbounds [0 x float], [0 x float]* %407, i64 0, i64 %417, !dbg !256
  %419 = load float, float* %418, align 4, !dbg !256
  %420 = mul nsw i32 %414, %403, !dbg !256
  %i132 = add nsw i32 %405, %420, !dbg !256
  %421 = sext i32 %i132 to i64, !dbg !256
  %422 = getelementptr inbounds [0 x float], [0 x float]* %407, i64 0, i64 %421, !dbg !256
  %423 = load float, float* %422, align 4, !dbg !256
  %424 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !256
  %425 = getelementptr inbounds [0 x i32], [0 x i32]* %424, i64 0, i64 0, !dbg !256
  %426 = load i32, i32* %425, align 4, !dbg !256
  %427 = load float, float* %40, align 4, !dbg !256
  %428 = load float, float* %42, align 4, !dbg !256
  %429 = mul nsw i32 %410, %403, !dbg !256
  %i133 = add nsw i32 %405, %429, !dbg !256
  %430 = sext i32 %i133 to i64, !dbg !256
  %431 = getelementptr inbounds [0 x float], [0 x float]* %407, i64 0, i64 %430, !dbg !256
  %432 = load float, float* %431, align 4, !dbg !256
  %433 = mul nsw i32 %426, %403, !dbg !256
  %i134 = add nsw i32 %i133, %433, !dbg !256
  %434 = sext i32 %i134 to i64, !dbg !256
  %435 = getelementptr inbounds [0 x float], [0 x float]* %407, i64 0, i64 %434, !dbg !256
  %436 = load float, float* %435, align 4, !dbg !256
  %437 = fmul float %419, %415, !dbg !256
  %438 = fmul float %423, %416, !dbg !256
  %439 = fadd float %437, %438, !dbg !256
  %440 = fmul float %439, %411, !dbg !256
  %441 = fmul float %432, %427, !dbg !256
  %442 = fmul float %436, %428, !dbg !256
  %443 = fadd float %441, %442, !dbg !256
  %444 = fmul float %443, %412, !dbg !256
  %445 = fadd float %440, %444, !dbg !256
  %446 = fadd float %401, %445, !dbg !256
  store float %446, float* %371, align 4, !dbg !256
  %447 = getelementptr inbounds %3, %3* %4, i64 0, i32 0, !dbg !256
  %448 = load float, float* %447, align 4, !dbg !256
  %449 = getelementptr inbounds %7, %7* %warp_2196550, i64 0, i32 2, i32 1, !dbg !256
  %450 = load float, float* %449, align 4, !dbg !256
  %451 = insertvalue %3 undef, float %395, 0, !dbg !256
  %452 = insertvalue %3 %451, float %446, 1, !dbg !256
  %453 = insertvalue %10 undef, %3 %452, 0, !dbg !256
  %454 = fsub float 1.000000e+00, %15, !dbg !256
  %455 = fmul float %454, %187, !dbg !256
  %456 = fmul float %15, %209, !dbg !256
  %457 = fadd float %455, %456, !dbg !256
  %458 = fmul float %448, %450, !dbg !256
  %459 = fmul float %457, %458, !dbg !256
  %460 = insertvalue %10 %453, float %459, 1, !dbg !256
  ret %10 %460, !dbg !256

expr_true:                                        ; preds = %invert_warp2D2, %continue
  %461 = load [0 x i32]*, [0 x i32]** %1, align 8, !dbg !256
  %462 = load i32, i32* %dim_2196559, align 4, !dbg !256
  %463 = sext i32 %462 to i64, !dbg !256
  %464 = getelementptr inbounds [0 x i32], [0 x i32]* %461, i64 0, i64 %463, !dbg !256
  %465 = load i32, i32* %464, align 4, !dbg !256
  %466 = icmp eq i32 %465, 1, !dbg !256
  br i1 %466, label %expr_true8, label %expr_false1, !dbg !256

expr_false1:                                      ; preds = %expr_true
  store float %dim_param_2196552, float* %dim_param_2196600, align 4, !dbg !257
  %467 = load i32, i32* %dim_2196559, align 4, !dbg !257
  %468 = icmp eq i32 %467, 1, !dbg !257
  %spec.store.select = select i1 %468, float %theta_i_2196553, float %dim_param_2196552, !dbg !257
  store float %spec.store.select, float* %dim_param_2196600, align 4, !dbg !258
  %469 = call fastcc i32 @find_interval_eval_2183096(%7* %warp_2196550, i32 %467, float %spec.store.select), !dbg !259
  %470 = load [0 x float]*, [0 x float]** %2, align 8, !dbg !260
  %471 = load i32, i32* %dim_2196559, align 4, !dbg !260
  %472 = load i32, i32* %3, align 4, !dbg !260
  %473 = mul nsw i32 %471, %472, !dbg !260
  %474 = add nsw i32 %473, %469, !dbg !260
  %475 = sext i32 %474 to i64, !dbg !260
  %476 = getelementptr inbounds [0 x float], [0 x float]* %470, i64 0, i64 %475, !dbg !260
  %477 = load float, float* %476, align 4, !dbg !260
  %478 = load [0 x float]*, [0 x float]** %2, align 8, !dbg !260
  %479 = load i32, i32* %dim_2196559, align 4, !dbg !260
  %480 = load i32, i32* %3, align 4, !dbg !260
  %481 = mul nsw i32 %479, %480, !dbg !260
  %482 = add nsw i32 %481, %469, !dbg !260
  %483 = add nsw i32 %482, 1, !dbg !260
  %484 = sext i32 %483 to i64, !dbg !260
  %485 = getelementptr inbounds [0 x float], [0 x float]* %478, i64 0, i64 %484, !dbg !260
  %486 = load float, float* %485, align 4, !dbg !260
  %487 = load i32, i32* %dim_2196559, align 4, !dbg !260
  %488 = load float, float* %dim_param_2196600, align 4, !dbg !260
  %489 = fsub float %488, %477, !dbg !260
  %490 = fsub float %486, %477, !dbg !260
  %491 = fdiv float %489, %490, !dbg !260
  %492 = fcmp olt float %491, 0.000000e+00, !dbg !260
  %493 = fcmp ogt float %491, 1.000000e+00, !dbg !260
  %. = select i1 %493, float 1.000000e+00, float %491, !dbg !260
  %clampf = select i1 %492, float 0.000000e+00, float %., !dbg !260
  %494 = shl nsw i32 %487, 1, !dbg !261
  %495 = or i32 %494, 1, !dbg !261
  %496 = sext i32 %495 to i64, !dbg !261
  %497 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 %496, !dbg !261
  store float %clampf, float* %497, align 4, !dbg !261
  %498 = load i32, i32* %dim_2196559, align 4, !dbg !261
  %499 = shl nsw i32 %498, 1, !dbg !261
  %500 = or i32 %499, 1, !dbg !261
  %501 = sext i32 %500 to i64, !dbg !261
  %502 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 %501, !dbg !261
  %503 = load float, float* %502, align 4, !dbg !261
  %504 = shl nsw i32 %498, 1, !dbg !261
  %505 = sext i32 %504 to i64, !dbg !261
  %506 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 %505, !dbg !261
  %507 = fsub float 1.000000e+00, %503, !dbg !261
  store float %507, float* %506, align 4, !dbg !261
  %508 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !261
  %509 = load i32, i32* %dim_2196559, align 4, !dbg !261
  %510 = sext i32 %509 to i64, !dbg !261
  %511 = getelementptr inbounds [0 x i32], [0 x i32]* %508, i64 0, i64 %510, !dbg !261
  %512 = load i32, i32* %511, align 4, !dbg !261
  %513 = load i32, i32* %slice_offset_2196693, align 4, !dbg !261
  %514 = mul nsw i32 %512, %469, !dbg !261
  %515 = add nsw i32 %513, %514, !dbg !261
  store i32 %515, i32* %slice_offset_2196693, align 4, !dbg !261
  %516 = load i32, i32* %dim_2196559, align 4, !dbg !261
  br label %continue, !dbg !261

expr_true8:                                       ; preds = %expr_true
  %517 = load i32, i32* %dim_2196559, align 4, !dbg !257
  %518 = shl nsw i32 %517, 1, !dbg !257
  %519 = sext i32 %518 to i64, !dbg !257
  %520 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 %519, !dbg !257
  store float 1.000000e+00, float* %520, align 4, !dbg !257
  %521 = load i32, i32* %dim_2196559, align 4, !dbg !257
  %522 = shl nsw i32 %521, 1, !dbg !257
  %523 = or i32 %522, 1, !dbg !257
  %524 = sext i32 %523 to i64, !dbg !257
  %525 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2196582, i64 0, i64 %524, !dbg !257
  store float 0.000000e+00, float* %525, align 4, !dbg !257
  %526 = load i32, i32* %dim_2196559, align 4, !dbg !257
  br label %continue, !dbg !257

continue:                                         ; preds = %expr_true8, %expr_false1
  %storemerge.in = phi i32 [ %516, %expr_false1 ], [ %526, %expr_true8 ]
  %storemerge = add nsw i32 %storemerge.in, 1, !dbg !258
  store i32 %storemerge, i32* %dim_2196559, align 4, !dbg !258
  %527 = icmp slt i32 %storemerge.in, 1, !dbg !255
  br i1 %527, label %expr_true, label %expr_false, !dbg !255
}

define void @test_pdf_brdf(%6* %sampler_2200622, %2* %incoming_2200623, %2* %outgoing_2200624, float* %result_2200625) local_unnamed_addr !dbg !262 {
test_pdf_brdf:
  %dim_param_2200770 = alloca float, align 4
  %dim_2200728 = alloca i32, align 4
  %slice_offset_2200863 = alloca i32, align 4
  %param_weight_2200752 = alloca [4 x float], align 4
  %u_wm_2200696 = alloca %3, align 8
  %.elt = getelementptr inbounds %2, %2* %incoming_2200623, i64 0, i32 0, !dbg !264
  %.unpack = load float, float* %.elt, align 4, !dbg !264
  %.elt51 = getelementptr inbounds %2, %2* %incoming_2200623, i64 0, i32 1, !dbg !264
  %.unpack52 = load float, float* %.elt51, align 4, !dbg !264
  %.elt53 = getelementptr inbounds %2, %2* %incoming_2200623, i64 0, i32 2, !dbg !264
  %.unpack54 = load float, float* %.elt53, align 4, !dbg !264
  %0 = fcmp ugt float %.unpack54, 0.000000e+00, !dbg !264
  %.elt59 = getelementptr inbounds %2, %2* %outgoing_2200624, i64 0, i32 2, !dbg !264
  %.unpack60 = load float, float* %.elt59, align 4, !dbg !264
  %1 = fcmp ugt float %.unpack60, 0.000000e+00
  %or.cond = and i1 %0, %1, !dbg !264
  br i1 %or.cond, label %expr_false1, label %pdf_brdf_cont, !dbg !264

expr_false1:                                      ; preds = %test_pdf_brdf
  %.elt57 = getelementptr inbounds %2, %2* %outgoing_2200624, i64 0, i32 1, !dbg !264
  %.unpack58 = load float, float* %.elt57, align 4, !dbg !264
  %.elt55 = getelementptr inbounds %2, %2* %outgoing_2200624, i64 0, i32 0, !dbg !264
  %.unpack56 = load float, float* %.elt55, align 4, !dbg !264
  %2 = insertvalue %2 undef, float %.unpack, 0, !dbg !264
  %3 = insertvalue %2 %2, float %.unpack52, 1, !dbg !264
  %4 = insertvalue %2 %3, float %.unpack54, 2, !dbg !264
  %5 = fadd float %.unpack, %.unpack56, !dbg !265
  %6 = fmul float %5, %5, !dbg !265
  %7 = fadd float %.unpack52, %.unpack58, !dbg !265
  %8 = fmul float %7, %7, !dbg !265
  %9 = fadd float %6, %8, !dbg !265
  %10 = fadd float %.unpack54, %.unpack60, !dbg !265
  %11 = fmul float %10, %10, !dbg !265
  %12 = fadd float %9, %11, !dbg !265
  %13 = call float @llvm.sqrt.f32(float %12), !dbg !265
  %14 = call fastcc float @elevation_2196481(%2 %4), !dbg !266
  %15 = call float @atan2f(float %.unpack52, float %.unpack), !dbg !267
  %16 = fdiv float 1.000000e+00, %13, !dbg !268
  %17 = fmul float %5, %16, !dbg !268
  %18 = fmul float %17, %17, !dbg !268
  %19 = fmul float %7, %16, !dbg !268
  %20 = fmul float %19, %19, !dbg !268
  %21 = fadd float %18, %20, !dbg !268
  %22 = fmul float %10, %16, !dbg !268
  %23 = fadd float %22, -1.000000e+00, !dbg !268
  %24 = fmul float %23, %23, !dbg !268
  %25 = fadd float %21, %24, !dbg !268
  %26 = call float @llvm.sqrt.f32(float %25), !dbg !268
  %27 = fmul float %26, 5.000000e-01, !dbg !269
  %28 = call float @asinf(float %27), !dbg !269
  %29 = call float @atan2f(float %19, float %17), !dbg !270
  %30 = fmul float %28, 2.000000e+00, !dbg !271
  %31 = fmul float %30, 0x3FE45F3060000000, !dbg !271
  %32 = call float @llvm.sqrt.f32(float %31), !dbg !271
  %33 = fadd float %29, 0x400921FB60000000, !dbg !272
  %34 = fdiv float %33, 0x401921FB60000000, !dbg !272
  %u_wm_2200696.repack = getelementptr inbounds %3, %3* %u_wm_2200696, i64 0, i32 0, !dbg !272
  store float %32, float* %u_wm_2200696.repack, align 8, !dbg !272
  %u_wm_2200696.repack62 = getelementptr inbounds %3, %3* %u_wm_2200696, i64 0, i32 1, !dbg !272
  store float %34, float* %u_wm_2200696.repack62, align 4, !dbg !272
  %35 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 5, !dbg !272
  %36 = load i1, i1* %35, align 1, !dbg !272
  %37 = getelementptr inbounds %3, %3* %u_wm_2200696, i64 0, i32 1, !dbg !272
  br i1 %36, label %expr_true, label %_cont13, !dbg !272

expr_true:                                        ; preds = %expr_false1
  %38 = fsub float %29, %15, !dbg !273
  %39 = fadd float %38, 0x400921FB60000000, !dbg !273
  %40 = fdiv float %39, 0x401921FB60000000, !dbg !273
  store float %40, float* %37, align 4, !dbg !273
  br label %_cont13, !dbg !273

_cont13:                                          ; preds = %expr_true, %expr_false1
  %41 = load float, float* %37, align 4, !dbg !274
  %42 = call float @llvm.floor.f32(float %41), !dbg !274
  %43 = fsub float %41, %42, !dbg !275
  store float %43, float* %37, align 4, !dbg !275
  %.elt64 = getelementptr inbounds %3, %3* %u_wm_2200696, i64 0, i32 0, !dbg !275
  %.unpack65 = load float, float* %.elt64, align 8, !dbg !275
  %44 = insertvalue %3 undef, float %.unpack65, 0, !dbg !275
  %45 = insertvalue %3 %44, float %43, 1, !dbg !275
  %46 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 2, !dbg !275
  %47 = call fastcc %10 @invert_warp2D2_2196548(%7* nonnull %46, %3 %45, float %15, float %14), !dbg !275
  %param_weight_2200752.repack = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 0, !dbg !276
  store float 0.000000e+00, float* %param_weight_2200752.repack, align 4, !dbg !276
  %param_weight_2200752.repack68 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 1, !dbg !276
  store float 0.000000e+00, float* %param_weight_2200752.repack68, align 4, !dbg !276
  %param_weight_2200752.repack69 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 2, !dbg !276
  store float 0.000000e+00, float* %param_weight_2200752.repack69, align 4, !dbg !276
  %param_weight_2200752.repack70 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 3, !dbg !276
  store float 0.000000e+00, float* %param_weight_2200752.repack70, align 4, !dbg !276
  store i32 0, i32* %slice_offset_2200863, align 4, !dbg !276
  store i32 0, i32* %dim_2200728, align 4, !dbg !276
  %48 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, !dbg !276
  %49 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 4, !dbg !276
  %50 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 3, !dbg !276
  %51 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 5, !dbg !276
  %52 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 6, !dbg !276
  br label %expr_true26, !dbg !277

expr_false16:                                     ; preds = %continue
  %53 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 2, !dbg !278
  %.elt71 = getelementptr inbounds %3, %3* %53, i64 0, i32 0, !dbg !278
  %.unpack72 = load float, float* %.elt71, align 4, !dbg !278
  %.elt75 = getelementptr inbounds %7, %7* %48, i64 0, i32 0, i32 0, !dbg !278
  %.unpack76 = load i32, i32* %.elt75, align 4, !dbg !278
  %54 = extractvalue %10 %47, 0, !dbg !278
  %55 = extractvalue %3 %54, 0, !dbg !278
  %56 = fmul float %55, %.unpack72, !dbg !278
  %57 = sitofp i32 %.unpack76 to float, !dbg !278
  %58 = fadd float %57, -2.000000e+00, !dbg !278
  %59 = fcmp olt float %56, %58, !dbg !278
  %60 = select i1 %59, float %56, float %58, !dbg !278
  %61 = call float @llvm.floor.f32(float %60), !dbg !278
  %.elt77 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 0, i32 1, !dbg !278
  %.unpack78 = load i32, i32* %.elt77, align 4, !dbg !278
  %.elt73 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 2, i32 1, !dbg !278
  %.unpack74 = load float, float* %.elt73, align 4, !dbg !278
  %62 = extractvalue %3 %54, 1, !dbg !279
  %63 = fmul float %62, %.unpack74, !dbg !279
  %64 = sitofp i32 %.unpack78 to float, !dbg !279
  %65 = fadd float %64, -2.000000e+00, !dbg !279
  %66 = fcmp olt float %63, %65, !dbg !279
  %67 = select i1 %66, float %63, float %65, !dbg !279
  %68 = call float @llvm.floor.f32(float %67), !dbg !279
  %69 = getelementptr inbounds %7, %7* %48, i64 0, i32 0, i32 0, !dbg !280
  %70 = load i32, i32* %69, align 4, !dbg !280
  %71 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 0, i32 1, !dbg !280
  %72 = load i32, i32* %71, align 4, !dbg !280
  %73 = load i32, i32* %slice_offset_2200863, align 4, !dbg !280
  %74 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 7, !dbg !280
  %75 = load [0 x float]*, [0 x float]** %74, align 8, !dbg !280
  %76 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %77 = getelementptr inbounds [0 x i32], [0 x i32]* %76, i64 0, i64 1, !dbg !280
  %78 = load i32, i32* %77, align 4, !dbg !280
  %79 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 2, !dbg !280
  %80 = load float, float* %79, align 4, !dbg !280
  %81 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 3, !dbg !280
  %82 = load float, float* %81, align 4, !dbg !280
  %83 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %84 = getelementptr inbounds [0 x i32], [0 x i32]* %83, i64 0, i64 0, !dbg !280
  %85 = load i32, i32* %84, align 4, !dbg !280
  %86 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 0, !dbg !280
  %87 = load float, float* %86, align 4, !dbg !280
  %88 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 1, !dbg !280
  %89 = load float, float* %88, align 4, !dbg !280
  %90 = fptosi float %61 to i32, !dbg !280
  %91 = fptosi float %68 to i32, !dbg !280
  %92 = mul nsw i32 %70, %91, !dbg !280
  %index = add nsw i32 %92, %90, !dbg !280
  %size = mul nsw i32 %70, %72, !dbg !280
  %93 = mul nsw i32 %73, %size, !dbg !280
  %94 = add nsw i32 %index, %93, !dbg !280
  %95 = sext i32 %94 to i64, !dbg !280
  %96 = getelementptr inbounds [0 x float], [0 x float]* %75, i64 0, i64 %95, !dbg !280
  %97 = load float, float* %96, align 4, !dbg !280
  %98 = mul nsw i32 %85, %size, !dbg !280
  %i1 = add nsw i32 %94, %98, !dbg !280
  %99 = sext i32 %i1 to i64, !dbg !280
  %100 = getelementptr inbounds [0 x float], [0 x float]* %75, i64 0, i64 %99, !dbg !280
  %101 = load float, float* %100, align 4, !dbg !280
  %102 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %103 = getelementptr inbounds [0 x i32], [0 x i32]* %102, i64 0, i64 0, !dbg !280
  %104 = load i32, i32* %103, align 4, !dbg !280
  %105 = load float, float* %86, align 4, !dbg !280
  %106 = load float, float* %88, align 4, !dbg !280
  %107 = mul nsw i32 %78, %size, !dbg !280
  %i140 = add nsw i32 %94, %107, !dbg !280
  %108 = sext i32 %i140 to i64, !dbg !280
  %109 = getelementptr inbounds [0 x float], [0 x float]* %75, i64 0, i64 %108, !dbg !280
  %110 = load float, float* %109, align 4, !dbg !280
  %111 = mul nsw i32 %104, %size, !dbg !280
  %i141 = add nsw i32 %i140, %111, !dbg !280
  %112 = sext i32 %i141 to i64, !dbg !280
  %113 = getelementptr inbounds [0 x float], [0 x float]* %75, i64 0, i64 %112, !dbg !280
  %114 = load float, float* %113, align 4, !dbg !280
  %115 = load [0 x float]*, [0 x float]** %74, align 8, !dbg !280
  %116 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %117 = getelementptr inbounds [0 x i32], [0 x i32]* %116, i64 0, i64 1, !dbg !280
  %118 = load i32, i32* %117, align 4, !dbg !280
  %119 = load float, float* %79, align 4, !dbg !280
  %120 = load float, float* %81, align 4, !dbg !280
  %121 = getelementptr inbounds [0 x i32], [0 x i32]* %116, i64 0, i64 0, !dbg !280
  %122 = load i32, i32* %121, align 4, !dbg !280
  %123 = load float, float* %86, align 4, !dbg !280
  %124 = load float, float* %88, align 4, !dbg !280
  %125 = getelementptr inbounds [0 x float], [0 x float]* %115, i64 0, i64 1, !dbg !280
  %126 = sext i32 %94 to i64, !dbg !280
  %127 = getelementptr inbounds float, float* %125, i64 %126, !dbg !280
  %128 = load float, float* %127, align 4, !dbg !280
  %129 = mul nsw i32 %122, %size, !dbg !280
  %i142 = add nsw i32 %94, %129, !dbg !280
  %130 = sext i32 %i142 to i64, !dbg !280
  %131 = getelementptr inbounds float, float* %125, i64 %130, !dbg !280
  %132 = load float, float* %131, align 4, !dbg !280
  %133 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %134 = getelementptr inbounds [0 x i32], [0 x i32]* %133, i64 0, i64 0, !dbg !280
  %135 = load i32, i32* %134, align 4, !dbg !280
  %136 = load float, float* %86, align 4, !dbg !280
  %137 = load float, float* %88, align 4, !dbg !280
  %138 = mul nsw i32 %118, %size, !dbg !280
  %i143 = add nsw i32 %94, %138, !dbg !280
  %139 = sext i32 %i143 to i64, !dbg !280
  %140 = getelementptr inbounds float, float* %125, i64 %139, !dbg !280
  %141 = load float, float* %140, align 4, !dbg !280
  %142 = mul nsw i32 %135, %size, !dbg !280
  %i144 = add nsw i32 %i143, %142, !dbg !280
  %143 = sext i32 %i144 to i64, !dbg !280
  %144 = getelementptr inbounds float, float* %125, i64 %143, !dbg !280
  %145 = load float, float* %144, align 4, !dbg !280
  %146 = load [0 x float]*, [0 x float]** %74, align 8, !dbg !280
  %147 = load i32, i32* %69, align 4, !dbg !280
  %148 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %149 = getelementptr inbounds [0 x i32], [0 x i32]* %148, i64 0, i64 1, !dbg !280
  %150 = load i32, i32* %149, align 4, !dbg !280
  %151 = load float, float* %79, align 4, !dbg !280
  %152 = load float, float* %81, align 4, !dbg !280
  %153 = getelementptr inbounds [0 x i32], [0 x i32]* %148, i64 0, i64 0, !dbg !280
  %154 = load i32, i32* %153, align 4, !dbg !280
  %155 = load float, float* %86, align 4, !dbg !280
  %156 = load float, float* %88, align 4, !dbg !280
  %157 = sext i32 %147 to i64, !dbg !280
  %158 = getelementptr inbounds [0 x float], [0 x float]* %146, i64 0, i64 %157, !dbg !280
  %159 = sext i32 %94 to i64, !dbg !280
  %160 = getelementptr inbounds float, float* %158, i64 %159, !dbg !280
  %161 = load float, float* %160, align 4, !dbg !280
  %162 = mul nsw i32 %154, %size, !dbg !280
  %i145 = add nsw i32 %94, %162, !dbg !280
  %163 = sext i32 %i145 to i64, !dbg !280
  %164 = getelementptr inbounds float, float* %158, i64 %163, !dbg !280
  %165 = load float, float* %164, align 4, !dbg !280
  %166 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %167 = getelementptr inbounds [0 x i32], [0 x i32]* %166, i64 0, i64 0, !dbg !280
  %168 = load i32, i32* %167, align 4, !dbg !280
  %169 = load float, float* %86, align 4, !dbg !280
  %170 = load float, float* %88, align 4, !dbg !280
  %171 = mul nsw i32 %150, %size, !dbg !280
  %i146 = add nsw i32 %94, %171, !dbg !280
  %172 = sext i32 %i146 to i64, !dbg !280
  %173 = getelementptr inbounds float, float* %158, i64 %172, !dbg !280
  %174 = load float, float* %173, align 4, !dbg !280
  %175 = mul nsw i32 %168, %size, !dbg !280
  %i147 = add nsw i32 %i146, %175, !dbg !280
  %176 = sext i32 %i147 to i64, !dbg !280
  %177 = getelementptr inbounds float, float* %158, i64 %176, !dbg !280
  %178 = load float, float* %177, align 4, !dbg !280
  %179 = load [0 x float]*, [0 x float]** %74, align 8, !dbg !280
  %180 = load i32, i32* %69, align 4, !dbg !280
  %181 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %182 = getelementptr inbounds [0 x i32], [0 x i32]* %181, i64 0, i64 1, !dbg !280
  %183 = load i32, i32* %182, align 4, !dbg !280
  %184 = load float, float* %79, align 4, !dbg !280
  %185 = load float, float* %81, align 4, !dbg !280
  %186 = getelementptr inbounds [0 x i32], [0 x i32]* %181, i64 0, i64 0, !dbg !280
  %187 = load i32, i32* %186, align 4, !dbg !280
  %188 = load float, float* %86, align 4, !dbg !280
  %189 = load float, float* %88, align 4, !dbg !280
  %190 = add nsw i32 %180, 1, !dbg !280
  %191 = sext i32 %190 to i64, !dbg !280
  %192 = getelementptr inbounds [0 x float], [0 x float]* %179, i64 0, i64 %191, !dbg !280
  %193 = sext i32 %94 to i64, !dbg !280
  %194 = getelementptr inbounds float, float* %192, i64 %193, !dbg !280
  %195 = load float, float* %194, align 4, !dbg !280
  %196 = mul nsw i32 %187, %size, !dbg !280
  %i148 = add nsw i32 %94, %196, !dbg !280
  %197 = sext i32 %i148 to i64, !dbg !280
  %198 = getelementptr inbounds float, float* %192, i64 %197, !dbg !280
  %199 = load float, float* %198, align 4, !dbg !280
  %200 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !280
  %201 = getelementptr inbounds [0 x i32], [0 x i32]* %200, i64 0, i64 0, !dbg !280
  %202 = load i32, i32* %201, align 4, !dbg !280
  %203 = load float, float* %86, align 4, !dbg !280
  %204 = load float, float* %88, align 4, !dbg !280
  %205 = mul nsw i32 %183, %size, !dbg !280
  %i149 = add nsw i32 %94, %205, !dbg !280
  %206 = sext i32 %i149 to i64, !dbg !280
  %207 = getelementptr inbounds float, float* %192, i64 %206, !dbg !280
  %208 = load float, float* %207, align 4, !dbg !280
  %209 = mul nsw i32 %202, %size, !dbg !280
  %i150 = add nsw i32 %i149, %209, !dbg !280
  %210 = sext i32 %i150 to i64, !dbg !280
  %211 = getelementptr inbounds float, float* %192, i64 %210, !dbg !280
  %212 = load float, float* %211, align 4, !dbg !280
  %213 = getelementptr inbounds %3, %3* %53, i64 0, i32 0, !dbg !280
  %214 = load float, float* %213, align 4, !dbg !280
  %215 = getelementptr inbounds %6, %6* %sampler_2200622, i64 0, i32 3, i32 2, i32 1, !dbg !280
  %216 = load float, float* %215, align 4, !dbg !280
  %217 = call float @llvm.sqrt.f32(float %21), !dbg !280
  %218 = getelementptr inbounds %3, %3* %u_wm_2200696, i64 0, i32 0, !dbg !281
  %219 = load float, float* %218, align 8, !dbg !281
  %220 = fmul float %219, 0x4033BD3CE0000000, !dbg !281
  %221 = fmul float %220, %217, !dbg !281
  %222 = fcmp ogt float %221, 0x3EB0C6F7A0000000, !dbg !281
  %phi.bo = fmul float %221, 4.000000e+00, !dbg !281
  %maxf_cont25 = select i1 %222, float %phi.bo, float 0x3ED0C6F7A0000000, !dbg !281
  %223 = extractvalue %10 %47, 1, !dbg !282
  %224 = fsub float %63, %68, !dbg !282
  %225 = fsub float 1.000000e+00, %224, !dbg !282
  %226 = fsub float %56, %61, !dbg !282
  %227 = fsub float 1.000000e+00, %226, !dbg !282
  %228 = fmul float %97, %87, !dbg !282
  %229 = fmul float %101, %89, !dbg !282
  %230 = fadd float %228, %229, !dbg !282
  %231 = fmul float %230, %80, !dbg !282
  %232 = fmul float %110, %105, !dbg !282
  %233 = fmul float %114, %106, !dbg !282
  %234 = fadd float %232, %233, !dbg !282
  %235 = fmul float %234, %82, !dbg !282
  %236 = fadd float %231, %235, !dbg !282
  %237 = fmul float %227, %236, !dbg !282
  %238 = fmul float %128, %123, !dbg !282
  %239 = fmul float %132, %124, !dbg !282
  %240 = fadd float %238, %239, !dbg !282
  %241 = fmul float %240, %119, !dbg !282
  %242 = fmul float %141, %136, !dbg !282
  %243 = fmul float %145, %137, !dbg !282
  %244 = fadd float %242, %243, !dbg !282
  %245 = fmul float %244, %120, !dbg !282
  %246 = fadd float %241, %245, !dbg !282
  %247 = fmul float %226, %246, !dbg !282
  %248 = fadd float %237, %247, !dbg !282
  %249 = fmul float %225, %248, !dbg !282
  %250 = fmul float %161, %155, !dbg !282
  %251 = fmul float %165, %156, !dbg !282
  %252 = fadd float %250, %251, !dbg !282
  %253 = fmul float %252, %151, !dbg !282
  %254 = fmul float %174, %169, !dbg !282
  %255 = fmul float %178, %170, !dbg !282
  %256 = fadd float %254, %255, !dbg !282
  %257 = fmul float %256, %152, !dbg !282
  %258 = fadd float %253, %257, !dbg !282
  %259 = fmul float %227, %258, !dbg !282
  %260 = fmul float %195, %188, !dbg !282
  %261 = fmul float %199, %189, !dbg !282
  %262 = fadd float %260, %261, !dbg !282
  %263 = fmul float %262, %184, !dbg !282
  %264 = fmul float %208, %203, !dbg !282
  %265 = fmul float %212, %204, !dbg !282
  %266 = fadd float %264, %265, !dbg !282
  %267 = fmul float %266, %185, !dbg !282
  %268 = fadd float %263, %267, !dbg !282
  %269 = fmul float %226, %268, !dbg !282
  %270 = fadd float %259, %269, !dbg !282
  %271 = fmul float %224, %270, !dbg !282
  %272 = fadd float %249, %271, !dbg !282
  %hprod = fmul float %214, %216, !dbg !282
  %273 = fmul float %272, %hprod, !dbg !282
  %274 = fmul float %223, %273, !dbg !282
  %275 = fmul float %.unpack, %17, !dbg !282
  %276 = fmul float %.unpack52, %19, !dbg !282
  %277 = fadd float %275, %276, !dbg !282
  %278 = fmul float %.unpack54, %22, !dbg !282
  %279 = fadd float %277, %278, !dbg !282
  %jacobian = fmul float %maxf_cont25, %279, !dbg !282
  %280 = fdiv float %274, %jacobian, !dbg !282
  br label %pdf_brdf_cont, !dbg !282

expr_true26:                                      ; preds = %_cont13, %continue
  %281 = load [0 x i32]*, [0 x i32]** %50, align 8, !dbg !278
  %282 = load i32, i32* %dim_2200728, align 4, !dbg !278
  %283 = sext i32 %282 to i64, !dbg !278
  %284 = getelementptr inbounds [0 x i32], [0 x i32]* %281, i64 0, i64 %283, !dbg !278
  %285 = load i32, i32* %284, align 4, !dbg !278
  %286 = icmp eq i32 %285, 1, !dbg !278
  br i1 %286, label %expr_true37, label %expr_false27, !dbg !278

expr_false27:                                     ; preds = %expr_true26
  store float %15, float* %dim_param_2200770, align 4, !dbg !283
  %287 = load i32, i32* %dim_2200728, align 4, !dbg !283
  %288 = icmp eq i32 %287, 1, !dbg !283
  %spec.store.select = select i1 %288, float %14, float %15, !dbg !283
  store float %spec.store.select, float* %dim_param_2200770, align 4, !dbg !284
  %289 = call fastcc i32 @find_interval_eval_2183096(%7* nonnull %48, i32 %287, float %spec.store.select), !dbg !285
  %290 = load [0 x float]*, [0 x float]** %51, align 8, !dbg !286
  %291 = load i32, i32* %dim_2200728, align 4, !dbg !286
  %292 = load i32, i32* %52, align 4, !dbg !286
  %293 = mul nsw i32 %291, %292, !dbg !286
  %294 = add nsw i32 %293, %289, !dbg !286
  %295 = sext i32 %294 to i64, !dbg !286
  %296 = getelementptr inbounds [0 x float], [0 x float]* %290, i64 0, i64 %295, !dbg !286
  %297 = load float, float* %296, align 4, !dbg !286
  %298 = load [0 x float]*, [0 x float]** %51, align 8, !dbg !286
  %299 = load i32, i32* %dim_2200728, align 4, !dbg !286
  %300 = load i32, i32* %52, align 4, !dbg !286
  %301 = mul nsw i32 %299, %300, !dbg !286
  %302 = add nsw i32 %301, %289, !dbg !286
  %303 = add nsw i32 %302, 1, !dbg !286
  %304 = sext i32 %303 to i64, !dbg !286
  %305 = getelementptr inbounds [0 x float], [0 x float]* %298, i64 0, i64 %304, !dbg !286
  %306 = load float, float* %305, align 4, !dbg !286
  %307 = load i32, i32* %dim_2200728, align 4, !dbg !286
  %308 = load float, float* %dim_param_2200770, align 4, !dbg !286
  %309 = fsub float %308, %297, !dbg !286
  %310 = fsub float %306, %297, !dbg !286
  %311 = fdiv float %309, %310, !dbg !286
  %312 = fcmp olt float %311, 0.000000e+00, !dbg !286
  %313 = fcmp ogt float %311, 1.000000e+00, !dbg !286
  %. = select i1 %313, float 1.000000e+00, float %311, !dbg !286
  %clampf_cont36 = select i1 %312, float 0.000000e+00, float %., !dbg !286
  %314 = shl nsw i32 %307, 1, !dbg !287
  %315 = or i32 %314, 1, !dbg !287
  %316 = sext i32 %315 to i64, !dbg !287
  %317 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 %316, !dbg !287
  store float %clampf_cont36, float* %317, align 4, !dbg !287
  %318 = load i32, i32* %dim_2200728, align 4, !dbg !287
  %319 = shl nsw i32 %318, 1, !dbg !287
  %320 = or i32 %319, 1, !dbg !287
  %321 = sext i32 %320 to i64, !dbg !287
  %322 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 %321, !dbg !287
  %323 = load float, float* %322, align 4, !dbg !287
  %324 = shl nsw i32 %318, 1, !dbg !287
  %325 = sext i32 %324 to i64, !dbg !287
  %326 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 %325, !dbg !287
  %327 = fsub float 1.000000e+00, %323, !dbg !287
  store float %327, float* %326, align 4, !dbg !287
  %328 = load [0 x i32]*, [0 x i32]** %49, align 8, !dbg !287
  %329 = load i32, i32* %dim_2200728, align 4, !dbg !287
  %330 = sext i32 %329 to i64, !dbg !287
  %331 = getelementptr inbounds [0 x i32], [0 x i32]* %328, i64 0, i64 %330, !dbg !287
  %332 = load i32, i32* %331, align 4, !dbg !287
  %333 = load i32, i32* %slice_offset_2200863, align 4, !dbg !287
  %334 = mul nsw i32 %332, %289, !dbg !287
  %335 = add nsw i32 %333, %334, !dbg !287
  store i32 %335, i32* %slice_offset_2200863, align 4, !dbg !287
  %336 = load i32, i32* %dim_2200728, align 4, !dbg !287
  br label %continue, !dbg !287

expr_true37:                                      ; preds = %expr_true26
  %337 = load i32, i32* %dim_2200728, align 4, !dbg !283
  %338 = shl nsw i32 %337, 1, !dbg !283
  %339 = sext i32 %338 to i64, !dbg !283
  %340 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 %339, !dbg !283
  store float 1.000000e+00, float* %340, align 4, !dbg !283
  %341 = load i32, i32* %dim_2200728, align 4, !dbg !283
  %342 = shl nsw i32 %341, 1, !dbg !283
  %343 = or i32 %342, 1, !dbg !283
  %344 = sext i32 %343 to i64, !dbg !283
  %345 = getelementptr inbounds [4 x float], [4 x float]* %param_weight_2200752, i64 0, i64 %344, !dbg !283
  store float 0.000000e+00, float* %345, align 4, !dbg !283
  %346 = load i32, i32* %dim_2200728, align 4, !dbg !283
  br label %continue, !dbg !283

continue:                                         ; preds = %expr_true37, %expr_false27
  %storemerge.in = phi i32 [ %336, %expr_false27 ], [ %346, %expr_true37 ]
  %storemerge = add nsw i32 %storemerge.in, 1, !dbg !284
  store i32 %storemerge, i32* %dim_2200728, align 4, !dbg !284
  %347 = icmp slt i32 %storemerge.in, 1, !dbg !277
  br i1 %347, label %expr_true26, label %expr_false16, !dbg !277

pdf_brdf_cont:                                    ; preds = %test_pdf_brdf, %expr_false16
  %res = phi float [ %280, %expr_false16 ], [ 0.000000e+00, %test_pdf_brdf ], !dbg !288
  store float %res, float* %result_2200625, align 4, !dbg !288
  ret void, !dbg !288
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>) #1

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local <8 x float> @xfloorf_avx2(<8 x float> %x) local_unnamed_addr #2 {
entry:
  %0 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %x) #6
  %conv.i.i = sitofp <8 x i32> %0 to <8 x float>
  %sub.i.i27 = fsub contract <8 x float> %x, %conv.i.i
  %1 = fcmp olt <8 x float> %sub.i.i27, zeroinitializer
  %add.i.i = fadd contract <8 x float> %sub.i.i27, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2 = select <8 x i1> %1, <8 x float> %add.i.i, <8 x float> %sub.i.i27
  %3 = bitcast <8 x float> %x to <4 x i64>
  %and.i.i.i.i = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %and.i.i.i.i to <8 x float>
  %5 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %6 = fcmp oge <8 x float> %4, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %or.i.i2829 = or <8 x i1> %6, %5
  %sub.i.i = fsub contract <8 x float> %x, %2
  %7 = bitcast <8 x float> %sub.i.i to <4 x i64>
  %and.i.i10.i = and <4 x i64> %7, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %and.i.i.i = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %xor.i.i11.i = or <4 x i64> %and.i.i10.i, %and.i.i.i
  %8 = bitcast <4 x i64> %xor.i.i11.i to <8 x float>
  %9 = select <8 x i1> %or.i.i2829, <8 x float> %x, <8 x float> %8
  ret <8 x float> %9
}

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float>) #3

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local <8 x float> @xfminf_avx2(<8 x float> %x, <8 x float> %y) local_unnamed_addr #2 {
entry:
  %0 = fcmp uno <8 x float> %y, zeroinitializer
  %1 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %x, <8 x float> %y) #6
  %2 = select <8 x i1> %0, <8 x float> %x, <8 x float> %1
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.min.ps.256(<8 x float>, <8 x float>) #3

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local <8 x float> @xcosf_u1_avx2(<8 x float> %d) local_unnamed_addr #2 {
entry:
  %0 = bitcast <8 x float> %d to <4 x i64>
  %and.i.i.i = and <4 x i64> %0, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %1 = bitcast <4 x i64> %and.i.i.i to <8 x float>
  %2 = fcmp olt <8 x float> %1, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %3 = sext <8 x i1> %2 to <8 x i32>
  %extract.i = shufflevector <8 x i32> %3, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %extract1.i = shufflevector <8 x i32> %3, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %and.i17.i = and <4 x i32> %extract1.i, %extract.i
  %and.i.i282 = bitcast <4 x i32> %and.i17.i to <2 x i64>
  %4 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %and.i.i282, <2 x i64> <i64 -1, i64 -1>) #6
  %tobool = icmp eq i32 %4, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %5 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %d, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #6
  %6 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %5, i32 8) #6
  %7 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #6
  %8 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %7) #6
  %mul.i.i281 = fmul contract <8 x float> %7, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %add.i.i.i278 = fadd contract <8 x float> %mul.i.i281, %d
  %sub.i.i18.i = fsub contract <8 x float> %add.i.i.i278, %d
  %sub.i.i17.i = fsub contract <8 x float> %add.i.i.i278, %sub.i.i18.i
  %sub.i.i16.i = fsub contract <8 x float> %d, %sub.i.i17.i
  %sub.i.i.i280 = fsub contract <8 x float> %mul.i.i281, %sub.i.i18.i
  %add.i.i15.i = fadd contract <8 x float> %sub.i.i.i280, %sub.i.i16.i
  %mul.i.i277 = fmul contract <8 x float> %7, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %add.i.i.i268 = fadd contract <8 x float> %mul.i.i277, %add.i.i.i278
  %sub.i.i24.i270 = fsub contract <8 x float> %add.i.i.i268, %add.i.i.i278
  %sub.i.i23.i271 = fsub contract <8 x float> %add.i.i.i268, %sub.i.i24.i270
  %sub.i.i22.i272 = fsub contract <8 x float> %add.i.i.i278, %sub.i.i23.i271
  %sub.i.i.i273 = fsub contract <8 x float> %mul.i.i277, %sub.i.i24.i270
  %add.i.i21.i274 = fadd contract <8 x float> %sub.i.i.i273, %sub.i.i22.i272
  %add.i.i20.i276 = fadd contract <8 x float> %add.i.i15.i, %add.i.i21.i274
  %mul.i.i267 = fmul contract <8 x float> %7, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %add.i.i.i258 = fadd contract <8 x float> %mul.i.i267, %add.i.i.i268
  %sub.i.i24.i260 = fsub contract <8 x float> %add.i.i.i258, %add.i.i.i268
  %sub.i.i23.i261 = fsub contract <8 x float> %add.i.i.i258, %sub.i.i24.i260
  %sub.i.i22.i262 = fsub contract <8 x float> %add.i.i.i268, %sub.i.i23.i261
  %sub.i.i.i263 = fsub contract <8 x float> %mul.i.i267, %sub.i.i24.i260
  %add.i.i21.i264 = fadd contract <8 x float> %sub.i.i.i263, %sub.i.i22.i262
  %add.i.i20.i266 = fadd contract <8 x float> %add.i.i21.i264, %add.i.i20.i276
  br label %if.end

if.else:                                          ; preds = %entry
  %mul.i.i.i254 = fmul contract <8 x float> %d, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %fneg.i.i.i256 = fneg <8 x float> %mul.i.i.i254
  %9 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %d, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> %fneg.i.i.i256) #6
  %10 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %d, <8 x float> <float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000>, <8 x float> %9) #6
  %add.i.i.i249 = fadd contract <8 x float> %mul.i.i.i254, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %sub.i.i24.i = fsub contract <8 x float> %add.i.i.i249, %mul.i.i.i254
  %sub.i.i23.i = fsub contract <8 x float> %add.i.i.i249, %sub.i.i24.i
  %sub.i.i22.i251 = fsub contract <8 x float> %mul.i.i.i254, %sub.i.i23.i
  %sub.i.i.i252 = fsub contract <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %sub.i.i24.i
  %add.i.i21.i = fadd contract <8 x float> %sub.i.i.i252, %sub.i.i22.i251
  %add.i.i20.i = fadd contract <8 x float> %10, %add.i.i21.i
  %mul.i.i248 = fmul contract <8 x float> %add.i.i.i249, <float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %mul.i.i248, i32 8) #6
  %12 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> <float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04>, <8 x float> %add.i.i.i249) #6
  %add.i.i = fadd contract <8 x float> %add.i.i20.i, %12
  %13 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %add.i.i, i32 8) #6
  %14 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %13, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #6
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #6
  %mul.i.i247 = fmul contract <8 x float> %11, <float 1.310720e+05, float 1.310720e+05, float 1.310720e+05, float 1.310720e+05, float 1.310720e+05, float 1.310720e+05, float 1.310720e+05, float 1.310720e+05>
  %add.i.i.i242 = fadd contract <8 x float> %mul.i.i247, %14
  %sub.i.i.i244 = fsub contract <8 x float> %mul.i.i247, %add.i.i.i242
  %add.i.i8.i245 = fadd contract <8 x float> %14, %sub.i.i.i244
  %mul.i.i.i238 = fmul contract <8 x float> %add.i.i.i242, <float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000>
  %fneg.i.i.i240 = fneg <8 x float> %mul.i.i.i238
  %16 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i242, <8 x float> <float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000>, <8 x float> %fneg.i.i.i240) #6
  %17 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i245, <8 x float> <float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000, float 0xBFF921E000000000>, <8 x float> %16) #6
  %add.i.i.i235 = fadd contract <8 x float> %mul.i.i.i238, %d
  %sub.i.i22.i = fsub contract <8 x float> %add.i.i.i235, %d
  %sub.i.i21.i = fsub contract <8 x float> %add.i.i.i235, %sub.i.i22.i
  %sub.i.i20.i = fsub contract <8 x float> %d, %sub.i.i21.i
  %sub.i.i.i237 = fsub contract <8 x float> %mul.i.i.i238, %sub.i.i22.i
  %add.i.i19.i = fadd contract <8 x float> %sub.i.i.i237, %sub.i.i20.i
  %add.i.i18.i = fadd contract <8 x float> %17, %add.i.i19.i
  %add.i.i.i230 = fadd contract <8 x float> %add.i.i.i235, %add.i.i18.i
  %sub.i.i.i232 = fsub contract <8 x float> %add.i.i.i235, %add.i.i.i230
  %add.i.i8.i233 = fadd contract <8 x float> %add.i.i18.i, %sub.i.i.i232
  %mul.i.i.i226 = fmul contract <8 x float> %add.i.i.i242, <float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000>
  %fneg.i.i.i228 = fneg <8 x float> %mul.i.i.i226
  %18 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i242, <8 x float> <float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000>, <8 x float> %fneg.i.i.i228) #6
  %19 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i245, <8 x float> <float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000, float 0xBEFB544000000000>, <8 x float> %18) #6
  %add.i.i.i216 = fadd contract <8 x float> %mul.i.i.i226, %add.i.i.i230
  %sub.i.i28.i218 = fsub contract <8 x float> %add.i.i.i216, %add.i.i.i230
  %sub.i.i27.i219 = fsub contract <8 x float> %add.i.i.i216, %sub.i.i28.i218
  %sub.i.i26.i220 = fsub contract <8 x float> %add.i.i.i230, %sub.i.i27.i219
  %sub.i.i.i221 = fsub contract <8 x float> %mul.i.i.i226, %sub.i.i28.i218
  %add.i.i25.i222 = fadd contract <8 x float> %sub.i.i.i221, %sub.i.i26.i220
  %add.i.i24.i224 = fadd contract <8 x float> %19, %add.i.i8.i233
  %add.i.i23.i225 = fadd contract <8 x float> %add.i.i24.i224, %add.i.i25.i222
  %add.i.i.i211 = fadd contract <8 x float> %add.i.i.i216, %add.i.i23.i225
  %sub.i.i.i213 = fsub contract <8 x float> %add.i.i.i216, %add.i.i.i211
  %add.i.i8.i214 = fadd contract <8 x float> %add.i.i23.i225, %sub.i.i.i213
  %mul.i.i.i207 = fmul contract <8 x float> %add.i.i.i242, <float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000>
  %fneg.i.i.i209 = fneg <8 x float> %mul.i.i.i207
  %20 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i242, <8 x float> <float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000>, <8 x float> %fneg.i.i.i209) #6
  %21 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i245, <8 x float> <float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000, float 0xBDD0B46000000000>, <8 x float> %20) #6
  %add.i.i.i197 = fadd contract <8 x float> %mul.i.i.i207, %add.i.i.i211
  %sub.i.i28.i199 = fsub contract <8 x float> %add.i.i.i197, %add.i.i.i211
  %sub.i.i27.i200 = fsub contract <8 x float> %add.i.i.i197, %sub.i.i28.i199
  %sub.i.i26.i201 = fsub contract <8 x float> %add.i.i.i211, %sub.i.i27.i200
  %sub.i.i.i202 = fsub contract <8 x float> %mul.i.i.i207, %sub.i.i28.i199
  %add.i.i25.i203 = fadd contract <8 x float> %sub.i.i.i202, %sub.i.i26.i201
  %add.i.i24.i205 = fadd contract <8 x float> %21, %add.i.i8.i214
  %add.i.i23.i206 = fadd contract <8 x float> %add.i.i24.i205, %add.i.i25.i203
  %add.i.i.i192 = fadd contract <8 x float> %add.i.i.i197, %add.i.i23.i206
  %sub.i.i.i194 = fsub contract <8 x float> %add.i.i.i197, %add.i.i.i192
  %add.i.i8.i195 = fadd contract <8 x float> %add.i.i23.i206, %sub.i.i.i194
  %mul.i.i.i188 = fmul contract <8 x float> %add.i.i.i242, <float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000>
  %fneg.i.i.i190 = fneg <8 x float> %mul.i.i.i188
  %22 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i242, <8 x float> <float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000>, <8 x float> %fneg.i.i.i190) #6
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i245, <8 x float> <float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000, float 0xBC91A62000000000>, <8 x float> %22) #6
  %add.i.i.i178 = fadd contract <8 x float> %mul.i.i.i188, %add.i.i.i192
  %sub.i.i28.i180 = fsub contract <8 x float> %add.i.i.i178, %add.i.i.i192
  %sub.i.i27.i181 = fsub contract <8 x float> %add.i.i.i178, %sub.i.i28.i180
  %sub.i.i26.i182 = fsub contract <8 x float> %add.i.i.i192, %sub.i.i27.i181
  %sub.i.i.i183 = fsub contract <8 x float> %mul.i.i.i188, %sub.i.i28.i180
  %add.i.i25.i184 = fadd contract <8 x float> %sub.i.i.i183, %sub.i.i26.i182
  %add.i.i24.i186 = fadd contract <8 x float> %23, %add.i.i8.i195
  %add.i.i23.i187 = fadd contract <8 x float> %add.i.i24.i186, %add.i.i25.i184
  %add.i.i.i173 = fadd contract <8 x float> %add.i.i.i178, %add.i.i23.i187
  %sub.i.i.i175 = fsub contract <8 x float> %add.i.i.i178, %add.i.i.i173
  %add.i.i8.i176 = fadd contract <8 x float> %add.i.i23.i187, %sub.i.i.i175
  %mul.i.i.i169 = fmul contract <8 x float> %add.i.i.i242, <float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000>
  %fneg.i.i.i171 = fneg <8 x float> %mul.i.i.i169
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i242, <8 x float> <float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000>, <8 x float> %fneg.i.i.i171) #6
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i245, <8 x float> <float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000, float 0xBB78CC5180000000>, <8 x float> %24) #6
  %add.i.i.i165 = fadd contract <8 x float> %mul.i.i.i169, %add.i.i.i173
  %sub.i.i28.i = fsub contract <8 x float> %add.i.i.i165, %add.i.i.i173
  %sub.i.i27.i = fsub contract <8 x float> %add.i.i.i165, %sub.i.i28.i
  %sub.i.i26.i = fsub contract <8 x float> %add.i.i.i173, %sub.i.i27.i
  %sub.i.i.i167 = fsub contract <8 x float> %mul.i.i.i169, %sub.i.i28.i
  %add.i.i25.i = fadd contract <8 x float> %sub.i.i.i167, %sub.i.i26.i
  %add.i.i24.i = fadd contract <8 x float> %25, %add.i.i8.i176
  %add.i.i23.i = fadd contract <8 x float> %add.i.i24.i, %add.i.i25.i
  %add.i.i.i161 = fadd contract <8 x float> %add.i.i.i165, %add.i.i23.i
  %sub.i.i.i163 = fsub contract <8 x float> %add.i.i.i165, %add.i.i.i161
  %add.i.i8.i164 = fadd contract <8 x float> %add.i.i23.i, %sub.i.i.i163
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %s.sroa.0.0 = phi <8 x float> [ %add.i.i.i161, %if.else ], [ %add.i.i.i258, %if.then ]
  %s.sroa.33.0 = phi <8 x float> [ %add.i.i8.i164, %if.else ], [ %add.i.i20.i266, %if.then ]
  %q.0.in = phi <8 x i32> [ %15, %if.else ], [ %8, %if.then ]
  %mul.i.i.i157 = fmul contract <8 x float> %s.sroa.0.0, %s.sroa.0.0
  %add.i.i.i159 = fadd contract <8 x float> %s.sroa.0.0, %s.sroa.0.0
  %fneg.i.i.i160 = fneg <8 x float> %mul.i.i.i157
  %26 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %s.sroa.0.0, <8 x float> %s.sroa.0.0, <8 x float> %fneg.i.i.i160) #6
  %27 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i159, <8 x float> %s.sroa.33.0, <8 x float> %26) #6
  %28 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %mul.i.i.i157, <8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #6
  %29 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %28, <8 x float> %mul.i.i.i157, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #6
  %mul.i.i = fmul contract <8 x float> %mul.i.i.i157, %29
  %add.i.i.i155 = fadd contract <8 x float> %mul.i.i, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %sub.i.i.i156 = fsub contract <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %add.i.i.i155
  %add.i.i8.i = fadd contract <8 x float> %mul.i.i, %sub.i.i.i156
  %mul.i.i.i154 = fmul contract <8 x float> %mul.i.i.i157, %add.i.i.i155
  %fneg.i.i.i = fneg <8 x float> %mul.i.i.i154
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i155, <8 x float> %mul.i.i.i157, <8 x float> %fneg.i.i.i) #6
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i, <8 x float> %mul.i.i.i157, <8 x float> %30) #6
  %32 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i155, <8 x float> %27, <8 x float> %31) #6
  %add.i.i.i = fadd contract <8 x float> %mul.i.i.i154, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %sub.i.i.i = fsub contract <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %add.i.i.i
  %add.i.i.i.i = fadd contract <8 x float> %mul.i.i.i154, %sub.i.i.i
  %add.i.i2.i.i = fadd contract <8 x float> %add.i.i.i.i, %32
  %mul.i.i.i = fmul contract <8 x float> %s.sroa.0.0, %add.i.i2.i.i
  %33 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %s.sroa.33.0, <8 x float> %add.i.i.i, <8 x float> %mul.i.i.i) #6
  %34 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %s.sroa.0.0, <8 x float> %add.i.i.i, <8 x float> %33) #6
  %35 = and <8 x i32> %q.0.in, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %cmp.i.i = icmp eq <8 x i32> %35, zeroinitializer
  %sext.i.i = sext <8 x i1> %cmp.i.i to <8 x i32>
  %36 = bitcast <8 x i32> %sext.i.i to <4 x i64>
  %and.i.i152 = and <4 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %37 = bitcast <8 x float> %34 to <4 x i64>
  %xor.i.i = xor <4 x i64> %and.i.i152, %37
  %38 = fcmp oeq <8 x float> %1, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = bitcast <8 x i32> %39 to <4 x i64>
  %41 = fcmp ogt <8 x float> %1, <float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09>
  %42 = sext <8 x i1> %41 to <8 x i32>
  %43 = bitcast <8 x i32> %42 to <4 x i64>
  %.not = xor <4 x i64> %43, <i64 -1, i64 -1, i64 -1, i64 -1>
  %neg.i.i = or <4 x i64> %40, %.not
  %and.i.i = and <4 x i64> %xor.i.i, %neg.i.i
  %44 = bitcast <4 x i64> %and.i.i to <8 x float>
  ret <8 x float> %44
}

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestc(<2 x i64>, <2 x i64>) #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #0

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32 immarg) #3

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float>) #3

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local <8 x float> @xsinf_u1_avx2(<8 x float> %d) local_unnamed_addr #2 {
entry:
  %0 = bitcast <8 x float> %d to <4 x i64>
  %and.i.i.i = and <4 x i64> %0, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %1 = bitcast <4 x i64> %and.i.i.i to <8 x float>
  %2 = fcmp olt <8 x float> %1, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %3 = sext <8 x i1> %2 to <8 x i32>
  %extract.i = shufflevector <8 x i32> %3, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %extract1.i = shufflevector <8 x i32> %3, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %and.i17.i = and <4 x i32> %extract1.i, %extract.i
  %and.i.i254 = bitcast <4 x i32> %and.i17.i to <2 x i64>
  %4 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %and.i.i254, <2 x i64> <i64 -1, i64 -1>) #6
  %tobool = icmp eq i32 %4, 0
  %mul.i.i.i238 = fmul contract <8 x float> %d, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %5 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %mul.i.i.i238, i32 8) #6
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #6
  %7 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>, <8 x float> %d) #6
  %mul.i.i252 = fmul contract <8 x float> %5, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %add.i.i.i249 = fadd contract <8 x float> %7, %mul.i.i252
  %sub.i.i18.i = fsub contract <8 x float> %add.i.i.i249, %7
  %sub.i.i17.i = fsub contract <8 x float> %add.i.i.i249, %sub.i.i18.i
  %sub.i.i16.i = fsub contract <8 x float> %7, %sub.i.i17.i
  %sub.i.i.i251 = fsub contract <8 x float> %mul.i.i252, %sub.i.i18.i
  %add.i.i15.i = fadd contract <8 x float> %sub.i.i.i251, %sub.i.i16.i
  %mul.i.i248 = fmul contract <8 x float> %5, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %add.i.i.i242 = fadd contract <8 x float> %mul.i.i248, %add.i.i.i249
  %sub.i.i.i244 = fsub contract <8 x float> %add.i.i.i249, %add.i.i.i242
  %add.i.i.i.i245 = fadd contract <8 x float> %mul.i.i248, %sub.i.i.i244
  %add.i.i2.i.i246 = fadd contract <8 x float> %add.i.i.i.i245, %add.i.i15.i
  br label %if.end

if.else:                                          ; preds = %entry
  %fneg.i.i.i240 = fneg <8 x float> %mul.i.i.i238
  %8 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %d, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> %fneg.i.i.i240) #6
  %9 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %d, <8 x float> <float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000, float 0x3E4B939100000000>, <8 x float> %8) #6
  %mul.i.i237 = fmul contract <8 x float> %mul.i.i.i238, <float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000, float 0x3EF0000000000000>
  %10 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %mul.i.i237, i32 8) #6
  %11 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %10, <8 x float> <float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04, float -6.553600e+04>, <8 x float> %mul.i.i.i238) #6
  %add.i.i = fadd contract <8 x float> %9, %11
  %12 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %add.i.i, i32 8) #6
  %13 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %12) #6
  %mul.i.i236 = fmul contract <8 x float> %10, <float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04>
  %add.i.i.i231 = fadd contract <8 x float> %mul.i.i236, %12
  %sub.i.i.i233 = fsub contract <8 x float> %mul.i.i236, %add.i.i.i231
  %add.i.i8.i234 = fadd contract <8 x float> %12, %sub.i.i.i233
  %mul.i.i.i227 = fmul contract <8 x float> %add.i.i.i231, <float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000>
  %fneg.i.i.i229 = fneg <8 x float> %mul.i.i.i227
  %14 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i231, <8 x float> <float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000>, <8 x float> %fneg.i.i.i229) #6
  %15 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i234, <8 x float> <float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000, float 0xC00921E000000000>, <8 x float> %14) #6
  %add.i.i.i224 = fadd contract <8 x float> %mul.i.i.i227, %d
  %sub.i.i22.i = fsub contract <8 x float> %add.i.i.i224, %d
  %sub.i.i21.i = fsub contract <8 x float> %add.i.i.i224, %sub.i.i22.i
  %sub.i.i20.i = fsub contract <8 x float> %d, %sub.i.i21.i
  %sub.i.i.i226 = fsub contract <8 x float> %mul.i.i.i227, %sub.i.i22.i
  %add.i.i19.i = fadd contract <8 x float> %sub.i.i.i226, %sub.i.i20.i
  %add.i.i18.i = fadd contract <8 x float> %15, %add.i.i19.i
  %add.i.i.i219 = fadd contract <8 x float> %add.i.i.i224, %add.i.i18.i
  %sub.i.i.i221 = fsub contract <8 x float> %add.i.i.i224, %add.i.i.i219
  %add.i.i8.i222 = fadd contract <8 x float> %add.i.i18.i, %sub.i.i.i221
  %mul.i.i.i215 = fmul contract <8 x float> %add.i.i.i231, <float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000>
  %fneg.i.i.i217 = fneg <8 x float> %mul.i.i.i215
  %16 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i231, <8 x float> <float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000>, <8 x float> %fneg.i.i.i217) #6
  %17 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i234, <8 x float> <float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000, float 0xBF0B544000000000>, <8 x float> %16) #6
  %add.i.i.i205 = fadd contract <8 x float> %mul.i.i.i215, %add.i.i.i219
  %sub.i.i28.i207 = fsub contract <8 x float> %add.i.i.i205, %add.i.i.i219
  %sub.i.i27.i208 = fsub contract <8 x float> %add.i.i.i205, %sub.i.i28.i207
  %sub.i.i26.i209 = fsub contract <8 x float> %add.i.i.i219, %sub.i.i27.i208
  %sub.i.i.i210 = fsub contract <8 x float> %mul.i.i.i215, %sub.i.i28.i207
  %add.i.i25.i211 = fadd contract <8 x float> %sub.i.i.i210, %sub.i.i26.i209
  %add.i.i24.i213 = fadd contract <8 x float> %17, %add.i.i8.i222
  %add.i.i23.i214 = fadd contract <8 x float> %add.i.i24.i213, %add.i.i25.i211
  %add.i.i.i200 = fadd contract <8 x float> %add.i.i.i205, %add.i.i23.i214
  %sub.i.i.i202 = fsub contract <8 x float> %add.i.i.i205, %add.i.i.i200
  %add.i.i8.i203 = fadd contract <8 x float> %add.i.i23.i214, %sub.i.i.i202
  %mul.i.i.i196 = fmul contract <8 x float> %add.i.i.i231, <float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000>
  %fneg.i.i.i198 = fneg <8 x float> %mul.i.i.i196
  %18 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i231, <8 x float> <float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000>, <8 x float> %fneg.i.i.i198) #6
  %19 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i234, <8 x float> <float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000, float 0xBDE0B46000000000>, <8 x float> %18) #6
  %add.i.i.i186 = fadd contract <8 x float> %mul.i.i.i196, %add.i.i.i200
  %sub.i.i28.i188 = fsub contract <8 x float> %add.i.i.i186, %add.i.i.i200
  %sub.i.i27.i189 = fsub contract <8 x float> %add.i.i.i186, %sub.i.i28.i188
  %sub.i.i26.i190 = fsub contract <8 x float> %add.i.i.i200, %sub.i.i27.i189
  %sub.i.i.i191 = fsub contract <8 x float> %mul.i.i.i196, %sub.i.i28.i188
  %add.i.i25.i192 = fadd contract <8 x float> %sub.i.i.i191, %sub.i.i26.i190
  %add.i.i24.i194 = fadd contract <8 x float> %19, %add.i.i8.i203
  %add.i.i23.i195 = fadd contract <8 x float> %add.i.i24.i194, %add.i.i25.i192
  %add.i.i.i181 = fadd contract <8 x float> %add.i.i.i186, %add.i.i23.i195
  %sub.i.i.i183 = fsub contract <8 x float> %add.i.i.i186, %add.i.i.i181
  %add.i.i8.i184 = fadd contract <8 x float> %add.i.i23.i195, %sub.i.i.i183
  %mul.i.i.i177 = fmul contract <8 x float> %add.i.i.i231, <float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000>
  %fneg.i.i.i179 = fneg <8 x float> %mul.i.i.i177
  %20 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i231, <8 x float> <float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000>, <8 x float> %fneg.i.i.i179) #6
  %21 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i234, <8 x float> <float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000, float 0xBCA1A62000000000>, <8 x float> %20) #6
  %add.i.i.i167 = fadd contract <8 x float> %mul.i.i.i177, %add.i.i.i181
  %sub.i.i28.i169 = fsub contract <8 x float> %add.i.i.i167, %add.i.i.i181
  %sub.i.i27.i170 = fsub contract <8 x float> %add.i.i.i167, %sub.i.i28.i169
  %sub.i.i26.i171 = fsub contract <8 x float> %add.i.i.i181, %sub.i.i27.i170
  %sub.i.i.i172 = fsub contract <8 x float> %mul.i.i.i177, %sub.i.i28.i169
  %add.i.i25.i173 = fadd contract <8 x float> %sub.i.i.i172, %sub.i.i26.i171
  %add.i.i24.i175 = fadd contract <8 x float> %21, %add.i.i8.i184
  %add.i.i23.i176 = fadd contract <8 x float> %add.i.i24.i175, %add.i.i25.i173
  %add.i.i.i162 = fadd contract <8 x float> %add.i.i.i167, %add.i.i23.i176
  %sub.i.i.i164 = fsub contract <8 x float> %add.i.i.i167, %add.i.i.i162
  %add.i.i8.i165 = fadd contract <8 x float> %add.i.i23.i176, %sub.i.i.i164
  %mul.i.i.i158 = fmul contract <8 x float> %add.i.i.i231, <float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000>
  %fneg.i.i.i160 = fneg <8 x float> %mul.i.i.i158
  %22 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i231, <8 x float> <float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000>, <8 x float> %fneg.i.i.i160) #6
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i234, <8 x float> <float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000, float 0xBB88CC5180000000>, <8 x float> %22) #6
  %add.i.i.i154 = fadd contract <8 x float> %mul.i.i.i158, %add.i.i.i162
  %sub.i.i28.i = fsub contract <8 x float> %add.i.i.i154, %add.i.i.i162
  %sub.i.i27.i = fsub contract <8 x float> %add.i.i.i154, %sub.i.i28.i
  %sub.i.i26.i = fsub contract <8 x float> %add.i.i.i162, %sub.i.i27.i
  %sub.i.i.i156 = fsub contract <8 x float> %mul.i.i.i158, %sub.i.i28.i
  %add.i.i25.i = fadd contract <8 x float> %sub.i.i.i156, %sub.i.i26.i
  %add.i.i24.i = fadd contract <8 x float> %23, %add.i.i8.i165
  %add.i.i23.i = fadd contract <8 x float> %add.i.i24.i, %add.i.i25.i
  %add.i.i.i150 = fadd contract <8 x float> %add.i.i.i154, %add.i.i23.i
  %sub.i.i.i152 = fsub contract <8 x float> %add.i.i.i154, %add.i.i.i150
  %add.i.i8.i153 = fadd contract <8 x float> %add.i.i23.i, %sub.i.i.i152
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %s.sroa.0.0 = phi <8 x float> [ %add.i.i.i150, %if.else ], [ %add.i.i.i242, %if.then ]
  %s.sroa.31.0 = phi <8 x float> [ %add.i.i8.i153, %if.else ], [ %add.i.i2.i.i246, %if.then ]
  %q.0.in = phi <8 x i32> [ %13, %if.else ], [ %6, %if.then ]
  %mul.i.i.i146 = fmul contract <8 x float> %s.sroa.0.0, %s.sroa.0.0
  %add.i.i.i148 = fadd contract <8 x float> %s.sroa.0.0, %s.sroa.0.0
  %fneg.i.i.i149 = fneg <8 x float> %mul.i.i.i146
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %s.sroa.0.0, <8 x float> %s.sroa.0.0, <8 x float> %fneg.i.i.i149) #6
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i148, <8 x float> %s.sroa.31.0, <8 x float> %24) #6
  %26 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %mul.i.i.i146, <8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #6
  %27 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %26, <8 x float> %mul.i.i.i146, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #6
  %mul.i.i = fmul contract <8 x float> %mul.i.i.i146, %27
  %add.i.i.i144 = fadd contract <8 x float> %mul.i.i, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %sub.i.i.i145 = fsub contract <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %add.i.i.i144
  %add.i.i8.i = fadd contract <8 x float> %mul.i.i, %sub.i.i.i145
  %mul.i.i.i143 = fmul contract <8 x float> %mul.i.i.i146, %add.i.i.i144
  %fneg.i.i.i = fneg <8 x float> %mul.i.i.i143
  %28 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i144, <8 x float> %mul.i.i.i146, <8 x float> %fneg.i.i.i) #6
  %29 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i8.i, <8 x float> %mul.i.i.i146, <8 x float> %28) #6
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %add.i.i.i144, <8 x float> %25, <8 x float> %29) #6
  %add.i.i.i = fadd contract <8 x float> %mul.i.i.i143, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %sub.i.i.i = fsub contract <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %add.i.i.i
  %add.i.i.i.i = fadd contract <8 x float> %mul.i.i.i143, %sub.i.i.i
  %add.i.i2.i.i = fadd contract <8 x float> %add.i.i.i.i, %30
  %mul.i.i.i = fmul contract <8 x float> %s.sroa.0.0, %add.i.i2.i.i
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %s.sroa.31.0, <8 x float> %add.i.i.i, <8 x float> %mul.i.i.i) #6
  %32 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %s.sroa.0.0, <8 x float> %add.i.i.i, <8 x float> %31) #6
  %33 = shl <8 x i32> %q.0.in, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %sext.i.i = ashr exact <8 x i32> %33, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %34 = bitcast <8 x i32> %sext.i.i to <4 x i64>
  %and.i.i141 = and <4 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <8 x float> %32 to <4 x i64>
  %xor.i.i = xor <4 x i64> %and.i.i141, %35
  %36 = bitcast <4 x i64> %xor.i.i to <8 x float>
  %37 = fcmp oeq <8 x float> %1, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %38 = sext <8 x i1> %37 to <8 x i32>
  %39 = bitcast <8 x i32> %38 to <4 x i64>
  %40 = bitcast <8 x float> %d to <8 x i32>
  %cmp.i.i.i = icmp eq <8 x i32> %40, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %41 = fcmp ogt <8 x float> %1, <float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09, float 5.000000e+09>
  %or.i.i349350 = or <8 x i1> %41, %cmp.i.i.i
  %or.i.i349 = sext <8 x i1> %or.i.i349350 to <8 x i32>
  %or.i.i = bitcast <8 x i32> %or.i.i349 to <4 x i64>
  %neg.i.i = xor <4 x i64> %39, <i64 -1, i64 -1, i64 -1, i64 -1>
  %and.i.i = and <4 x i64> %or.i.i, %neg.i.i
  %42 = bitcast <4 x i64> %and.i.i to <8 x float>
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %42) #6
  ret <8 x float> %43
}

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float>, <8 x float>, <8 x float>) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v8f32.p0v8f32(<8 x float>, <8 x float>*, i32 immarg, <8 x i1>) #4

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v8i32.p0v8i32(<8 x i32>, <8 x i32>*, i32 immarg, <8 x i1>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float>, <8 x float>, i8 immarg) #3

; Function Attrs: nounwind readonly
declare <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float>, i8*, <8 x i32>, <8 x float>, i8 immarg) #5

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn "target-features"="+sse2,-tsxldtrk,+cx16,+sahf,-tbm,-avx512ifma,+sha,-gfni,-fma4,-vpclmulqdq,+prfchw,+bmi2,-cldemote,+fsgsbase,-ptwrite,-amx-tile,-uintr,+popcnt,-widekl,+aes,-avx512bitalg,-movdiri,+xsaves,-avx512er,-avxvnni,-avx512vnni,-amx-bf16,-avx512vpopcntdq,-pconfig,+clwb,-avx512f,+xsavec,+clzero,-pku,+mmx,-lwp,+rdpid,-xop,+rdseed,-waitpkg,-kl,-movdir64b,+sse4a,-avx512bw,+clflushopt,+xsave,-avx512vbmi2,+64bit,-avx512vl,-serialize,-hreset,-invpcid,-avx512cd,+avx,-vaes,-avx512bf16,+cx8,+fma,-rtm,+bmi,-enqcmd,+rdrnd,+mwaitx,+sse4.1,+sse4.2,+avx2,+fxsr,+wbnoinvd,+sse,+lzcnt,+pclmul,-prefetchwt1,+f16c,+ssse3,-sgx,-shstk,+cmov,-avx512vbmi,-amx-int8,+movbe,-avx512vp2intersect,+xsaveopt,-avx512dq,+adx,-avx512pf,+sse3," }
attributes #2 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+sse2,-tsxldtrk,+cx16,+sahf,-tbm,-avx512ifma,+sha,-gfni,-fma4,-vpclmulqdq,+prfchw,+bmi2,-cldemote,+fsgsbase,-ptwrite,-amx-tile,-uintr,+popcnt,-widekl,+aes,-avx512bitalg,-movdiri,+xsaves,-avx512er,-avxvnni,-avx512vnni,-amx-bf16,-avx512vpopcntdq,-pconfig,+clwb,-avx512f,+xsavec,+clzero,-pku,+mmx,-lwp,+rdpid,-xop,+rdseed,-waitpkg,-kl,-movdir64b,+sse4a,-avx512bw,+clflushopt,+xsave,-avx512vbmi2,+64bit,-avx512vl,-serialize,-hreset,-invpcid,-avx512cd,+avx,-vaes,-avx512bf16,+cx8,+fma,-rtm,+bmi,-enqcmd,+rdrnd,+mwaitx,+sse4.1,+sse4.2,+avx2,+fxsr,+wbnoinvd,+sse,+lzcnt,+pclmul,-prefetchwt1,+f16c,+ssse3,-sgx,-shstk,+cmov,-avx512vbmi,-amx-int8,+movbe,-avx512vp2intersect,+xsaveopt,-avx512dq,+adx,-avx512pf,+sse3," "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Impala", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "/home/niklas/repos/anydsl/rodent/build/tools/bench_shading/./bench_shading", directory: "")
!3 = !{}
!4 = distinct !DISubprogram(name: "cpu_sort_primary", linkageName: "cpu_sort_primary", scope: null, file: !5, line: 35, type: !6, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!5 = !DIFile(filename: "mapping_cpu.impala", directory: "R\FFd\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!6 = !DISubroutineType(types: !3)
!7 = !DILocation(line: 90, column: 1, scope: !4)
!8 = !DILocation(line: 91, column: 20, scope: !4)
!9 = !DILocation(line: 57, column: 9, scope: !4)
!10 = !DILocation(line: 57, column: 21, scope: !4)
!11 = !DILocation(line: 59, column: 27, scope: !4)
!12 = distinct !DISubprogram(name: "cpu_bench_shading", linkageName: "cpu_bench_shading", scope: null, file: !13, line: 22, type: !6, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!13 = !DIFile(filename: "bench_shading.impala", directory: "\BD\FD\99\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/tools/bench_shading")
!14 = !DILocation(line: 22, column: 1, scope: !12)
!15 = !DILocation(line: 90, column: 1, scope: !12)
!16 = !DILocation(line: 91, column: 20, scope: !12)
!17 = !DILocation(line: 89, column: 29, scope: !12)
!18 = !DILocation(line: 89, column: 63, scope: !12)
!19 = !DILocation(line: 82, column: 77, scope: !12)
!20 = !DILocation(line: 46, column: 90, scope: !12)
!21 = !DILocation(line: 48, column: 126, scope: !12)
!22 = !DILocation(line: 49, column: 34, scope: !12)
!23 = !DILocation(line: 67, column: 18, scope: !12)
!24 = !DILocation(line: 138, column: 36, scope: !12)
!25 = !DILocation(line: 68, column: 18, scope: !12)
!26 = !DILocation(line: 69, column: 18, scope: !12)
!27 = !DILocation(line: 70, column: 18, scope: !12)
!28 = !DILocation(line: 177, column: 57, scope: !12)
!29 = !DILocation(line: 90, column: 13, scope: !12)
!30 = !DILocation(line: 91, column: 13, scope: !12)
!31 = !DILocation(line: 39, column: 17, scope: !12)
!32 = !DILocation(line: 40, column: 17, scope: !12)
!33 = !DILocation(line: 117, column: 23, scope: !12)
!34 = !DILocation(line: 65, column: 27, scope: !12)
!35 = !DILocation(line: 65, column: 87, scope: !12)
!36 = !DILocation(line: 65, column: 88, scope: !12)
!37 = !DILocation(line: 68, column: 21, scope: !12)
!38 = !DILocation(line: 68, column: 43, scope: !12)
!39 = !DILocation(line: 70, column: 23, scope: !12)
!40 = !DILocation(line: 70, column: 48, scope: !12)
!41 = !DILocation(line: 91, column: 35, scope: !12)
!42 = !DILocation(line: 77, column: 13, scope: !12)
!43 = !DILocation(line: 78, column: 13, scope: !12)
!44 = !DILocation(line: 135, column: 18, scope: !12)
!45 = !DILocation(line: 110, column: 23, scope: !12)
!46 = !DILocation(line: 106, column: 23, scope: !12)
!47 = !DILocation(line: 187, column: 13, scope: !12)
!48 = !DILocation(line: 0, scope: !12)
!49 = !DILocation(line: 89, column: 29, scope: !50, inlinedAt: !52)
!50 = distinct !DISubprogram(name: "lambda_2193763", linkageName: "lambda_2193763", scope: null, file: !51, line: 67, type: !6, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!51 = !DIFile(filename: "cpu_common.impala", directory: "\84ti\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/core")
!52 = distinct !DILocation(line: 91, column: 20, scope: !12)
!53 = !DILocation(line: 89, column: 63, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 82, column: 77, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 46, column: 43, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 46, column: 90, scope: !50, inlinedAt: !52)
!57 = !DILocation(line: 48, column: 89, scope: !50, inlinedAt: !52)
!58 = !DILocation(line: 48, column: 126, scope: !50, inlinedAt: !52)
!59 = !DILocation(line: 49, column: 34, scope: !50, inlinedAt: !52)
!60 = !DILocation(line: 67, column: 18, scope: !50, inlinedAt: !52)
!61 = !DILocation(line: 68, column: 18, scope: !50, inlinedAt: !52)
!62 = !DILocation(line: 69, column: 18, scope: !50, inlinedAt: !52)
!63 = !DILocation(line: 70, column: 18, scope: !50, inlinedAt: !52)
!64 = !DILocation(line: 177, column: 57, scope: !50, inlinedAt: !52)
!65 = !DILocation(line: 90, column: 13, scope: !50, inlinedAt: !52)
!66 = !DILocation(line: 40, column: 17, scope: !50, inlinedAt: !52)
!67 = !DILocation(line: 117, column: 23, scope: !50, inlinedAt: !52)
!68 = !DILocation(line: 65, column: 27, scope: !50, inlinedAt: !52)
!69 = !DILocation(line: 65, column: 88, scope: !50, inlinedAt: !52)
!70 = !DILocation(line: 68, column: 43, scope: !50, inlinedAt: !52)
!71 = !DILocation(line: 70, column: 23, scope: !50, inlinedAt: !52)
!72 = !DILocation(line: 91, column: 35, scope: !50, inlinedAt: !52)
!73 = !DILocation(line: 70, column: 48, scope: !50, inlinedAt: !52)
!74 = !DILocation(line: 106, column: 23, scope: !50, inlinedAt: !52)
!75 = !DILocation(line: 187, column: 13, scope: !50, inlinedAt: !52)
!76 = !DILocation(line: 92, column: 9, scope: !12)
!77 = !DILocation(line: 89, column: 29, scope: !78, inlinedAt: !80)
!78 = distinct !DISubprogram(name: "lambda_2191936", linkageName: "lambda_2191936", scope: null, file: !79, line: 67, type: !6, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!79 = !DIFile(filename: "cpu_common.impala", directory: "\B9\BD\D8\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/core")
!80 = distinct !DILocation(line: 91, column: 20, scope: !12)
!81 = !DILocation(line: 89, column: 63, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 82, column: 77, scope: !78, inlinedAt: !80)
!83 = !DILocation(line: 46, column: 43, scope: !78, inlinedAt: !80)
!84 = !DILocation(line: 46, column: 90, scope: !78, inlinedAt: !80)
!85 = !DILocation(line: 48, column: 89, scope: !78, inlinedAt: !80)
!86 = !DILocation(line: 48, column: 126, scope: !78, inlinedAt: !80)
!87 = !DILocation(line: 49, column: 34, scope: !78, inlinedAt: !80)
!88 = !DILocation(line: 67, column: 18, scope: !78, inlinedAt: !80)
!89 = !DILocation(line: 68, column: 18, scope: !78, inlinedAt: !80)
!90 = !DILocation(line: 69, column: 18, scope: !78, inlinedAt: !80)
!91 = !DILocation(line: 70, column: 18, scope: !78, inlinedAt: !80)
!92 = !DILocation(line: 177, column: 57, scope: !78, inlinedAt: !80)
!93 = !DILocation(line: 90, column: 13, scope: !78, inlinedAt: !80)
!94 = !DILocation(line: 40, column: 17, scope: !78, inlinedAt: !80)
!95 = !DILocation(line: 117, column: 23, scope: !78, inlinedAt: !80)
!96 = !DILocation(line: 65, column: 27, scope: !78, inlinedAt: !80)
!97 = !DILocation(line: 65, column: 88, scope: !78, inlinedAt: !80)
!98 = !DILocation(line: 68, column: 43, scope: !78, inlinedAt: !80)
!99 = !DILocation(line: 70, column: 23, scope: !78, inlinedAt: !80)
!100 = !DILocation(line: 91, column: 35, scope: !78, inlinedAt: !80)
!101 = !DILocation(line: 70, column: 48, scope: !78, inlinedAt: !80)
!102 = !DILocation(line: 106, column: 23, scope: !78, inlinedAt: !80)
!103 = !DILocation(line: 187, column: 13, scope: !78, inlinedAt: !80)
!104 = !DILocation(line: 89, column: 29, scope: !105, inlinedAt: !107)
!105 = distinct !DISubprogram(name: "lambda_2190098", linkageName: "lambda_2190098", scope: null, file: !106, line: 67, type: !6, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!106 = !DIFile(filename: "cpu_common.impala", directory: "\\\E2\CE\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/core")
!107 = distinct !DILocation(line: 91, column: 20, scope: !12)
!108 = !DILocation(line: 89, column: 63, scope: !105, inlinedAt: !107)
!109 = !DILocation(line: 82, column: 77, scope: !105, inlinedAt: !107)
!110 = !DILocation(line: 46, column: 43, scope: !105, inlinedAt: !107)
!111 = !DILocation(line: 46, column: 90, scope: !105, inlinedAt: !107)
!112 = !DILocation(line: 48, column: 89, scope: !105, inlinedAt: !107)
!113 = !DILocation(line: 48, column: 126, scope: !105, inlinedAt: !107)
!114 = !DILocation(line: 49, column: 34, scope: !105, inlinedAt: !107)
!115 = !DILocation(line: 67, column: 18, scope: !105, inlinedAt: !107)
!116 = !DILocation(line: 68, column: 18, scope: !105, inlinedAt: !107)
!117 = !DILocation(line: 69, column: 18, scope: !105, inlinedAt: !107)
!118 = !DILocation(line: 70, column: 18, scope: !105, inlinedAt: !107)
!119 = !DILocation(line: 177, column: 57, scope: !105, inlinedAt: !107)
!120 = !DILocation(line: 90, column: 13, scope: !105, inlinedAt: !107)
!121 = !DILocation(line: 40, column: 17, scope: !105, inlinedAt: !107)
!122 = !DILocation(line: 117, column: 23, scope: !105, inlinedAt: !107)
!123 = !DILocation(line: 65, column: 27, scope: !105, inlinedAt: !107)
!124 = !DILocation(line: 65, column: 88, scope: !105, inlinedAt: !107)
!125 = !DILocation(line: 68, column: 43, scope: !105, inlinedAt: !107)
!126 = !DILocation(line: 70, column: 23, scope: !105, inlinedAt: !107)
!127 = !DILocation(line: 91, column: 35, scope: !105, inlinedAt: !107)
!128 = !DILocation(line: 70, column: 48, scope: !105, inlinedAt: !107)
!129 = !DILocation(line: 106, column: 23, scope: !105, inlinedAt: !107)
!130 = !DILocation(line: 187, column: 13, scope: !105, inlinedAt: !107)
!131 = !DILocation(line: 89, column: 29, scope: !132, inlinedAt: !134)
!132 = distinct !DISubprogram(name: "lambda_2188556", linkageName: "lambda_2188556", scope: null, file: !133, line: 67, type: !6, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!133 = !DIFile(filename: "cpu_common.impala", directory: "N\AD\AF\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/core")
!134 = distinct !DILocation(line: 91, column: 20, scope: !12)
!135 = !DILocation(line: 89, column: 63, scope: !132, inlinedAt: !134)
!136 = !DILocation(line: 82, column: 77, scope: !132, inlinedAt: !134)
!137 = !DILocation(line: 46, column: 43, scope: !132, inlinedAt: !134)
!138 = !DILocation(line: 46, column: 90, scope: !132, inlinedAt: !134)
!139 = !DILocation(line: 48, column: 89, scope: !132, inlinedAt: !134)
!140 = !DILocation(line: 48, column: 126, scope: !132, inlinedAt: !134)
!141 = !DILocation(line: 177, column: 57, scope: !132, inlinedAt: !134)
!142 = !DILocation(line: 90, column: 13, scope: !132, inlinedAt: !134)
!143 = !DILocation(line: 40, column: 17, scope: !132, inlinedAt: !134)
!144 = !DILocation(line: 117, column: 23, scope: !132, inlinedAt: !134)
!145 = !DILocation(line: 65, column: 27, scope: !132, inlinedAt: !134)
!146 = !DILocation(line: 65, column: 88, scope: !132, inlinedAt: !134)
!147 = !DILocation(line: 68, column: 43, scope: !132, inlinedAt: !134)
!148 = !DILocation(line: 70, column: 23, scope: !132, inlinedAt: !134)
!149 = !DILocation(line: 91, column: 35, scope: !132, inlinedAt: !134)
!150 = !DILocation(line: 70, column: 48, scope: !132, inlinedAt: !134)
!151 = !DILocation(line: 106, column: 23, scope: !132, inlinedAt: !134)
!152 = !DILocation(line: 187, column: 13, scope: !132, inlinedAt: !134)
!153 = distinct !DISubprogram(name: "test_sample_brdf", linkageName: "test_sample_brdf", scope: null, file: !154, line: 730, type: !6, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!154 = !DIFile(filename: "brdf_sampler.impala", directory: "\DD\84\C4\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!155 = !DILocation(line: 730, column: 1, scope: !153)
!156 = !DILocation(line: 650, column: 26, scope: !153)
!157 = !DILocation(line: 37, column: 30, scope: !153)
!158 = !DILocation(line: 37, column: 12, scope: !153)
!159 = !DILocation(line: 657, column: 17, scope: !153)
!160 = !DILocation(line: 659, column: 26, scope: !153)
!161 = !DILocation(line: 474, column: 5, scope: !153)
!162 = !DILocation(line: 474, column: 17, scope: !153)
!163 = !DILocation(line: 169, column: 5, scope: !153)
!164 = !DILocation(line: 169, column: 18, scope: !153)
!165 = !DILocation(line: 182, column: 5, scope: !153)
!166 = !DILocation(line: 503, column: 19, scope: !153)
!167 = !DILocation(line: 512, column: 24, scope: !153)
!168 = !DILocation(line: 513, column: 16, scope: !153)
!169 = !DILocation(line: 517, column: 28, scope: !153)
!170 = !DILocation(line: 0, scope: !153)
!171 = !DILocation(line: 519, column: 5, scope: !153)
!172 = !DILocation(line: 190, column: 5, scope: !153)
!173 = !DILocation(line: 190, column: 18, scope: !153)
!174 = !DILocation(line: 203, column: 5, scope: !153)
!175 = !DILocation(line: 525, column: 31, scope: !153)
!176 = !DILocation(line: 537, column: 16, scope: !153)
!177 = !DILocation(line: 538, column: 16, scope: !153)
!178 = !DILocation(line: 542, column: 28, scope: !153)
!179 = !DILocation(line: 544, column: 5, scope: !153)
!180 = !DILocation(line: 677, column: 25, scope: !153)
!181 = !DILocation(line: 679, column: 5, scope: !153)
!182 = !DILocation(line: 681, column: 21, scope: !153)
!183 = !DILocation(line: 682, column: 21, scope: !153)
!184 = !DILocation(line: 683, column: 23, scope: !153)
!185 = !DILocation(line: 684, column: 23, scope: !153)
!186 = !DILocation(line: 689, column: 20, scope: !153)
!187 = !DILocation(line: 323, column: 5, scope: !153)
!188 = !DILocation(line: 323, column: 17, scope: !153)
!189 = !DILocation(line: 138, column: 13, scope: !153)
!190 = !DILocation(line: 139, column: 13, scope: !153)
!191 = !DILocation(line: 704, column: 20, scope: !153)
!192 = !DILocation(line: 324, column: 37, scope: !153)
!193 = !DILocation(line: 332, column: 20, scope: !153)
!194 = !DILocation(line: 334, column: 27, scope: !153)
!195 = !DILocation(line: 336, column: 9, scope: !153)
!196 = !DILocation(line: 338, column: 27, scope: !153)
!197 = !DILocation(line: 343, column: 37, scope: !153)
!198 = !DILocation(line: 195, column: 12, scope: !153)
!199 = !DILocation(line: 195, column: 103, scope: !153)
!200 = !DILocation(line: 174, column: 12, scope: !153)
!201 = !DILocation(line: 174, column: 80, scope: !153)
!202 = !DILocation(line: 475, column: 37, scope: !153)
!203 = !DILocation(line: 485, column: 9, scope: !153)
!204 = !DILocation(line: 487, column: 27, scope: !153)
!205 = !DILocation(line: 492, column: 37, scope: !153)
!206 = !DILocation(line: 731, column: 15, scope: !153)
!207 = distinct !DISubprogram(name: "fetch_marginal_warp2D2_2183292", linkageName: "fetch_marginal_warp2D2_2183292", scope: null, file: !208, line: 206, type: !6, scopeLine: 206, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!208 = !DIFile(filename: "brdf_sampler.impala", directory: "\B4t\DE\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!209 = !DILocation(line: 206, column: 1, scope: !207)
!210 = distinct !DISubprogram(name: "fetch_conditional_warp2D2_2183659", linkageName: "fetch_conditional_warp2D2_2183659", scope: null, file: !211, line: 210, type: !6, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!211 = !DIFile(filename: "brdf_sampler.impala", directory: "9\EB\92\BBKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!212 = !DILocation(line: 210, column: 1, scope: !210)
!213 = distinct !DISubprogram(name: "find_interval_eval_2183096", linkageName: "find_interval_eval_2183096", scope: null, file: !214, line: 143, type: !6, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!214 = !DIFile(filename: "brdf_sampler.impala", directory: "\97|\DE\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!215 = !DILocation(line: 143, column: 1, scope: !213)
!216 = !DILocation(line: 148, column: 5, scope: !213)
!217 = !DILocation(line: 148, column: 18, scope: !213)
!218 = !DILocation(line: 99, column: 24, scope: !213)
!219 = !DILocation(line: 153, column: 82, scope: !213)
!220 = distinct !DISubprogram(name: "test_evaluate_brdf", linkageName: "test_evaluate_brdf", scope: null, file: !221, line: 716, type: !6, scopeLine: 716, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!221 = !DIFile(filename: "brdf_sampler.impala", directory: "\04\C4\F3\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!222 = !DILocation(line: 716, column: 1, scope: !220)
!223 = !DILocation(line: 554, column: 48, scope: !220)
!224 = !DILocation(line: 82, column: 77, scope: !220)
!225 = !DILocation(line: 564, column: 19, scope: !220)
!226 = !DILocation(line: 565, column: 17, scope: !220)
!227 = !DILocation(line: 566, column: 19, scope: !220)
!228 = !DILocation(line: 567, column: 17, scope: !220)
!229 = !DILocation(line: 570, column: 26, scope: !220)
!230 = !DILocation(line: 571, column: 30, scope: !220)
!231 = !DILocation(line: 572, column: 25, scope: !220)
!232 = !DILocation(line: 572, column: 67, scope: !220)
!233 = !DILocation(line: 574, column: 23, scope: !220)
!234 = !DILocation(line: 576, column: 22, scope: !220)
!235 = !DILocation(line: 323, column: 5, scope: !220)
!236 = !DILocation(line: 323, column: 17, scope: !220)
!237 = !DILocation(line: 138, column: 13, scope: !220)
!238 = !DILocation(line: 139, column: 13, scope: !220)
!239 = !DILocation(line: 324, column: 37, scope: !220)
!240 = !DILocation(line: 332, column: 20, scope: !220)
!241 = !DILocation(line: 334, column: 27, scope: !220)
!242 = !DILocation(line: 336, column: 9, scope: !220)
!243 = !DILocation(line: 338, column: 27, scope: !220)
!244 = !DILocation(line: 343, column: 37, scope: !220)
!245 = !DILocation(line: 0, scope: !220)
!246 = !DILocation(line: 717, column: 15, scope: !220)
!247 = distinct !DISubprogram(name: "elevation_2196481", linkageName: "elevation_2196481", scope: null, file: !248, line: 35, type: !6, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!248 = !DIFile(filename: "brdf_sampler.impala", directory: "\FD\D0A\BBKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!249 = !DILocation(line: 35, column: 1, scope: !247)
!250 = !DILocation(line: 37, column: 30, scope: !247)
!251 = !DILocation(line: 37, column: 12, scope: !247)
!252 = distinct !DISubprogram(name: "invert_warp2D2_2196548", linkageName: "invert_warp2D2_2196548", scope: null, file: !253, line: 381, type: !6, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!253 = !DIFile(filename: "brdf_sampler.impala", directory: "#\DBt\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!254 = !DILocation(line: 381, column: 1, scope: !252)
!255 = !DILocation(line: 387, column: 5, scope: !252)
!256 = !DILocation(line: 387, column: 17, scope: !252)
!257 = !DILocation(line: 388, column: 37, scope: !252)
!258 = !DILocation(line: 0, scope: !252)
!259 = !DILocation(line: 398, column: 9, scope: !252)
!260 = !DILocation(line: 400, column: 27, scope: !252)
!261 = !DILocation(line: 405, column: 37, scope: !252)
!262 = distinct !DISubprogram(name: "test_pdf_brdf", linkageName: "test_pdf_brdf", scope: null, file: !263, line: 724, type: !6, scopeLine: 724, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!263 = !DIFile(filename: "brdf_sampler.impala", directory: "-\02\BF\BAKV\00\00\10p\A7\DCNV\00\00os/anydsl/rodent/src/render")
!264 = !DILocation(line: 724, column: 1, scope: !262)
!265 = !DILocation(line: 596, column: 48, scope: !262)
!266 = !DILocation(line: 82, column: 77, scope: !262)
!267 = !DILocation(line: 605, column: 23, scope: !262)
!268 = !DILocation(line: 606, column: 21, scope: !262)
!269 = !DILocation(line: 37, column: 30, scope: !262)
!270 = !DILocation(line: 37, column: 12, scope: !262)
!271 = !DILocation(line: 608, column: 21, scope: !262)
!272 = !DILocation(line: 610, column: 34, scope: !262)
!273 = !DILocation(line: 611, column: 29, scope: !262)
!274 = !DILocation(line: 611, column: 71, scope: !262)
!275 = !DILocation(line: 613, column: 27, scope: !262)
!276 = !DILocation(line: 616, column: 26, scope: !262)
!277 = !DILocation(line: 270, column: 5, scope: !262)
!278 = !DILocation(line: 270, column: 17, scope: !262)
!279 = !DILocation(line: 138, column: 13, scope: !262)
!280 = !DILocation(line: 139, column: 13, scope: !262)
!281 = !DILocation(line: 623, column: 27, scope: !262)
!282 = !DILocation(line: 624, column: 24, scope: !262)
!283 = !DILocation(line: 271, column: 37, scope: !262)
!284 = !DILocation(line: 0, scope: !262)
!285 = !DILocation(line: 281, column: 9, scope: !262)
!286 = !DILocation(line: 283, column: 27, scope: !262)
!287 = !DILocation(line: 288, column: 37, scope: !262)
!288 = !DILocation(line: 725, column: 15, scope: !262)
