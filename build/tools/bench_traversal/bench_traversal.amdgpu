; ModuleID = '/home/niklas/repos/anydsl/rodent/build/tools/bench_traversal/./bench_traversal'
source_filename = "/home/niklas/repos/anydsl/rodent/build/tools/bench_traversal/./bench_traversal"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

%0 = type { i32, float, float, float }
%1 = type { [12 x float], [2 x i32], [2 x i32] }
%2 = type { [3 x float], float, [3 x float], float }
%3 = type { [3 x float], i32, [3 x float], i32, [3 x float], i32 }
%4 = type { float, %5, i32, i32 }
%5 = type { float, float }
%6 = type { %7, %7, %7, %7, float, float }
%7 = type { float, float, float }

define amdgpu_kernel void @lambda_9275163([0 x %0]* %_9321189, i32 %_9321190, [0 x %1]* %_9321191, [0 x %2]* %_9321192, [0 x %3]* %_9321193) local_unnamed_addr !dbg !4 !reqd_work_group_size !7 {
lambda_9275163:
  %mask_9321544 = alloca i1, align 1, addrspace(5)
  %prim_id_9321491 = alloca i32, align 4, addrspace(5)
  %val_9321715 = alloca { i32, float }, align 4, addrspace(5)
  %val_9321712 = alloca { i32, float }, align 4, addrspace(5)
  %mask_9321317 = alloca i32, align 4, addrspace(5)
  %nodes_9321676 = alloca [64 x i32], align 4, addrspace(5)
  %ptr_9321673 = alloca i32, align 4, addrspace(5)
  %node_9321267 = alloca i32, align 4, addrspace(5)
  %hit_9321287 = alloca %4, align 4, addrspace(5)
  %ray_9321319 = alloca %6, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !8
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !9
  %2 = call i32 @llvm.amdgcn.workitem.id.y(), !dbg !10
  %3 = shl nsw i32 %1, 6, !dbg !11
  %i = add nsw i32 %0, %3, !dbg !11
  %4 = add nsw i32 %i, %2, !dbg !11
  %.not = icmp slt i32 %4, %_9321190, !dbg !11
  br i1 %.not, label %expr_false, label %expr_true99, !dbg !11

expr_false:                                       ; preds = %lambda_9275163
  %5 = sext i32 %4 to i64, !dbg !12
  %6 = getelementptr inbounds [0 x %2], [0 x %2]* %_9321192, i64 0, i64 %5, !dbg !12
  %7 = bitcast %2* %6 to <4 x float>*, !dbg !12
  %8 = load <4 x float>, <4 x float>* %7, align 16, !dbg !12
  %9 = getelementptr inbounds [0 x %2], [0 x %2]* %_9321192, i64 0, i64 %5, i32 2, !dbg !12
  %10 = bitcast [3 x float]* %9 to <4 x float>*, !dbg !12
  %11 = load <4 x float>, <4 x float>* %10, align 16, !dbg !12
  %12 = extractelement <4 x float> %11, i32 0, !dbg !12
  %13 = fcmp ogt float %12, 0.000000e+00, !dbg !12
  %14 = fneg float %12, !dbg !12
  %15 = select i1 %13, float %12, float %14, !dbg !12
  %16 = fcmp olt float %15, 0x3E45798EE0000000, !dbg !12
  br i1 %16, label %expr_true, label %expr_false6, !dbg !12

expr_false6:                                      ; preds = %expr_false
  %17 = fdiv float 1.000000e+00, %12, !dbg !13
  br label %safe_rcp_cont, !dbg !13

expr_true:                                        ; preds = %expr_false
  %18 = bitcast float %12 to i32, !dbg !13
  %19 = and i32 %18, -2147483648, !dbg !13
  %20 = or i32 %19, 2139095039, !dbg !13
  %21 = bitcast i32 %20 to float, !dbg !13
  br label %safe_rcp_cont, !dbg !13

safe_rcp_cont:                                    ; preds = %expr_true, %expr_false6
  %safe_rcp_cont7 = phi float [ %17, %expr_false6 ], [ %21, %expr_true ], !dbg !14
  %22 = extractelement <4 x float> %11, i32 1, !dbg !14
  %23 = fcmp ogt float %22, 0.000000e+00, !dbg !14
  %24 = fneg float %22, !dbg !14
  %25 = select i1 %23, float %22, float %24, !dbg !14
  %26 = fcmp olt float %25, 0x3E45798EE0000000, !dbg !14
  br i1 %26, label %expr_true9, label %expr_false8, !dbg !14

expr_false8:                                      ; preds = %safe_rcp_cont
  %27 = fdiv float 1.000000e+00, %22, !dbg !13
  br label %safe_rcp_cont10, !dbg !13

expr_true9:                                       ; preds = %safe_rcp_cont
  %28 = bitcast float %22 to i32, !dbg !13
  %29 = and i32 %28, -2147483648, !dbg !13
  %30 = or i32 %29, 2139095039, !dbg !13
  %31 = bitcast i32 %30 to float, !dbg !13
  br label %safe_rcp_cont10, !dbg !13

safe_rcp_cont10:                                  ; preds = %expr_true9, %expr_false8
  %safe_rcp_cont11 = phi float [ %27, %expr_false8 ], [ %31, %expr_true9 ], !dbg !15
  %32 = extractelement <4 x float> %11, i32 2, !dbg !15
  %33 = fcmp ogt float %32, 0.000000e+00, !dbg !15
  %34 = fneg float %32, !dbg !15
  %35 = select i1 %33, float %32, float %34, !dbg !15
  %36 = fcmp olt float %35, 0x3E45798EE0000000, !dbg !15
  br i1 %36, label %expr_true13, label %expr_false12, !dbg !15

expr_false12:                                     ; preds = %safe_rcp_cont10
  %37 = fdiv float 1.000000e+00, %32, !dbg !13
  br label %safe_rcp_cont14, !dbg !13

expr_true13:                                      ; preds = %safe_rcp_cont10
  %38 = bitcast float %32 to i32, !dbg !13
  %39 = and i32 %38, -2147483648, !dbg !13
  %40 = or i32 %39, 2139095039, !dbg !13
  %41 = bitcast i32 %40 to float, !dbg !13
  br label %safe_rcp_cont14, !dbg !13

safe_rcp_cont14:                                  ; preds = %expr_true13, %expr_false12
  %safe_rcp_cont15 = phi float [ %37, %expr_false12 ], [ %41, %expr_true13 ], !dbg !16
  %42 = extractelement <4 x float> %8, i32 0, !dbg !16
  %43 = extractelement <4 x float> %8, i32 1, !dbg !16
  %44 = extractelement <4 x float> %8, i32 2, !dbg !16
  %45 = fneg float %42, !dbg !16
  %46 = fmul float %safe_rcp_cont7, %45, !dbg !16
  %47 = fneg float %43, !dbg !16
  %48 = fmul float %safe_rcp_cont11, %47, !dbg !16
  %49 = fneg float %44, !dbg !16
  %50 = fmul float %safe_rcp_cont15, %49, !dbg !16
  %51 = extractelement <4 x float> %8, i32 3, !dbg !16
  %52 = extractelement <4 x float> %11, i32 3, !dbg !16
  %ray_9321319.repack.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 0, i32 0, !dbg !16
  store float %42, float addrspace(5)* %ray_9321319.repack.repack, align 4, !dbg !16
  %ray_9321319.repack.repack110 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 0, i32 1, !dbg !16
  store float %43, float addrspace(5)* %ray_9321319.repack.repack110, align 4, !dbg !16
  %ray_9321319.repack.repack112 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 0, i32 2, !dbg !16
  store float %44, float addrspace(5)* %ray_9321319.repack.repack112, align 4, !dbg !16
  %ray_9321319.repack100.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 1, i32 0, !dbg !16
  store float %12, float addrspace(5)* %ray_9321319.repack100.repack, align 4, !dbg !16
  %ray_9321319.repack100.repack114 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 1, i32 1, !dbg !16
  store float %22, float addrspace(5)* %ray_9321319.repack100.repack114, align 4, !dbg !16
  %ray_9321319.repack100.repack116 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 1, i32 2, !dbg !16
  store float %32, float addrspace(5)* %ray_9321319.repack100.repack116, align 4, !dbg !16
  %ray_9321319.repack102.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 0, !dbg !16
  store float %safe_rcp_cont7, float addrspace(5)* %ray_9321319.repack102.repack, align 4, !dbg !16
  %ray_9321319.repack102.repack118 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 1, !dbg !16
  store float %safe_rcp_cont11, float addrspace(5)* %ray_9321319.repack102.repack118, align 4, !dbg !16
  %ray_9321319.repack102.repack120 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 2, !dbg !16
  store float %safe_rcp_cont15, float addrspace(5)* %ray_9321319.repack102.repack120, align 4, !dbg !16
  %ray_9321319.repack104.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 0, !dbg !16
  store float %46, float addrspace(5)* %ray_9321319.repack104.repack, align 4, !dbg !16
  %ray_9321319.repack104.repack122 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 1, !dbg !16
  store float %48, float addrspace(5)* %ray_9321319.repack104.repack122, align 4, !dbg !16
  %ray_9321319.repack104.repack124 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 2, !dbg !16
  store float %50, float addrspace(5)* %ray_9321319.repack104.repack124, align 4, !dbg !16
  %ray_9321319.repack106 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 4, !dbg !16
  store float %51, float addrspace(5)* %ray_9321319.repack106, align 4, !dbg !16
  %ray_9321319.repack108 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 5, !dbg !16
  store float %52, float addrspace(5)* %ray_9321319.repack108, align 4, !dbg !16
  %hit_9321287.repack = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 0, !dbg !16
  store float %52, float addrspace(5)* %hit_9321287.repack, align 4, !dbg !16
  %hit_9321287.repack128 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 2, !dbg !16
  store i32 -1, i32 addrspace(5)* %hit_9321287.repack128, align 4, !dbg !16
  %hit_9321287.repack130 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 3, !dbg !16
  store i32 -1, i32 addrspace(5)* %hit_9321287.repack130, align 4, !dbg !16
  store i32 0, i32 addrspace(5)* %node_9321267, align 4, !dbg !16
  store i32 0, i32 addrspace(5)* %ptr_9321673, align 4, !dbg !16
  %53 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9321676, i32 0, i32 0, !dbg !16
  store i32 0, i32 addrspace(5)* %53, align 4, !dbg !16
  store i32 1, i32 addrspace(5)* %node_9321267, align 4, !dbg !16
  %54 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 5, !dbg !16
  %.unpack136.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 0
  %.unpack136.elt153 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 1
  %.unpack136.elt155 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 2
  %.unpack138.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 0
  %.unpack138.elt158 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 1
  %.unpack138.elt160 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 2
  %.elt139 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 4
  %.elt141 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 5
  %val_9321712.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321712, i32 0, i32 0
  %val_9321712.repack269 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321712, i32 0, i32 1
  %.unpack166.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 0
  %.unpack166.elt183 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 1
  %.unpack166.elt185 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 2, i32 2
  %.unpack168.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 0
  %.unpack168.elt188 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 1
  %.unpack168.elt190 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 3, i32 2
  %.elt169 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 4
  %.elt171 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 5
  %val_9321715.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321715, i32 0, i32 0
  %val_9321715.repack266 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321715, i32 0, i32 1
  %.elt = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321712, i32 0, i32 0
  %.elt195 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321715, i32 0, i32 0
  %.elt197 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321715, i32 0, i32 1
  %.elt193 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9321712, i32 0, i32 1
  %.unpack211.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 0, i32 0
  %.unpack211.elt222 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 0, i32 1
  %.unpack211.elt224 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 0, i32 2
  %.unpack213.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 1, i32 0
  %.unpack213.elt227 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 1, i32 1
  %.unpack213.elt229 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 1, i32 2
  %.elt218 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 4
  %.elt220 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321319, i32 0, i32 5
  br label %expr_true16, !dbg !17

expr_true16:                                      ; preds = %safe_rcp_cont14, %expr_false75
  %55 = load i32, i32 addrspace(5)* %node_9321267, align 4, !dbg !18
  %56 = add nsw i32 %55, -1, !dbg !18
  %57 = sext i32 %56 to i64, !dbg !18
  %58 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321191, i64 0, i64 %57, !dbg !18
  %59 = bitcast %1* %58 to <4 x float>*, !dbg !18
  %60 = addrspacecast <4 x float>* %59 to <4 x float> addrspace(1)*, !dbg !18
  %61 = load <4 x float>, <4 x float> addrspace(1)* %60, align 16, !dbg !18
  %62 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321191, i64 0, i64 %57, i32 0, i64 4, !dbg !18
  %63 = bitcast float* %62 to <4 x float>*, !dbg !18
  %64 = addrspacecast <4 x float>* %63 to <4 x float> addrspace(1)*, !dbg !18
  %65 = load <4 x float>, <4 x float> addrspace(1)* %64, align 16, !dbg !18
  %66 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321191, i64 0, i64 %57, i32 0, i64 8, !dbg !18
  %67 = bitcast float* %66 to <4 x float>*, !dbg !18
  %68 = addrspacecast <4 x float>* %67 to <4 x float> addrspace(1)*, !dbg !18
  %69 = load <4 x float>, <4 x float> addrspace(1)* %68, align 16, !dbg !18
  %70 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321191, i64 0, i64 %57, i32 1, !dbg !18
  %71 = bitcast [2 x i32]* %70 to <4 x i32>*, !dbg !18
  %72 = addrspacecast <4 x i32>* %71 to <4 x i32> addrspace(1)*, !dbg !18
  %73 = load <4 x i32>, <4 x i32> addrspace(1)* %72, align 16, !dbg !18
  store i32 0, i32 addrspace(5)* %mask_9321317, align 4, !dbg !18
  %.unpack136.unpack = load float, float addrspace(5)* %.unpack136.elt, align 4, !dbg !18
  %.unpack136.unpack154 = load float, float addrspace(5)* %.unpack136.elt153, align 4, !dbg !18
  %.unpack136.unpack156 = load float, float addrspace(5)* %.unpack136.elt155, align 4, !dbg !18
  %.unpack138.unpack = load float, float addrspace(5)* %.unpack138.elt, align 4, !dbg !18
  %.unpack138.unpack159 = load float, float addrspace(5)* %.unpack138.elt158, align 4, !dbg !18
  %.unpack138.unpack161 = load float, float addrspace(5)* %.unpack138.elt160, align 4, !dbg !18
  %.unpack140 = load float, float addrspace(5)* %.elt139, align 4, !dbg !18
  %.unpack142 = load float, float addrspace(5)* %.elt141, align 4, !dbg !18
  %74 = extractelement <4 x float> %61, i32 0, !dbg !18
  %75 = fmul float %.unpack136.unpack, %74, !dbg !18
  %76 = fadd float %75, %.unpack138.unpack, !dbg !18
  %77 = extractelement <4 x float> %61, i32 1, !dbg !18
  %78 = fmul float %.unpack136.unpack, %77, !dbg !18
  %79 = fadd float %78, %.unpack138.unpack, !dbg !18
  %80 = call float @__ocml_fmin_f32(float %76, float %79), !dbg !18
  %81 = extractelement <4 x float> %61, i32 2, !dbg !19
  %82 = fmul float %.unpack136.unpack154, %81, !dbg !19
  %83 = fadd float %82, %.unpack138.unpack159, !dbg !19
  %84 = extractelement <4 x float> %61, i32 3, !dbg !19
  %85 = fmul float %.unpack136.unpack154, %84, !dbg !19
  %86 = fadd float %85, %.unpack138.unpack159, !dbg !19
  %87 = call float @__ocml_fmin_f32(float %83, float %86), !dbg !19
  %88 = extractelement <4 x float> %65, i32 0, !dbg !20
  %89 = fmul float %.unpack136.unpack156, %88, !dbg !20
  %90 = fadd float %89, %.unpack138.unpack161, !dbg !20
  %91 = extractelement <4 x float> %65, i32 1, !dbg !20
  %92 = fmul float %.unpack136.unpack156, %91, !dbg !20
  %93 = fadd float %92, %.unpack138.unpack161, !dbg !20
  %94 = call float @__ocml_fmin_f32(float %90, float %93), !dbg !20
  %95 = call float @__ocml_fmax_f32(float %94, float %.unpack140), !dbg !21
  %96 = call float @__ocml_fmax_f32(float %80, float %87), !dbg !22
  %97 = call float @__ocml_fmax_f32(float %96, float %95), !dbg !23
  %98 = call float @__ocml_fmax_f32(float %76, float %79), !dbg !24
  %99 = call float @__ocml_fmax_f32(float %83, float %86), !dbg !25
  %100 = call float @__ocml_fmax_f32(float %90, float %93), !dbg !26
  %101 = call float @__ocml_fmin_f32(float %100, float %.unpack142), !dbg !27
  %102 = call float @__ocml_fmin_f32(float %98, float %99), !dbg !28
  %103 = call float @__ocml_fmin_f32(float %102, float %101), !dbg !29
  %104 = fcmp ugt float %97, %103, !dbg !30
  br i1 %104, label %_cont41, label %expr_true40, !dbg !30

expr_true40:                                      ; preds = %expr_true16
  %105 = load i32, i32 addrspace(5)* %mask_9321317, align 4, !dbg !31
  %106 = or i32 %105, 1, !dbg !31
  store i32 %106, i32 addrspace(5)* %mask_9321317, align 4, !dbg !31
  %107 = extractelement <4 x i32> %73, i32 0, !dbg !31
  store i32 %107, i32 addrspace(5)* %val_9321712.repack, align 4, !dbg !31
  store float %97, float addrspace(5)* %val_9321712.repack269, align 4, !dbg !31
  br label %_cont41, !dbg !31

_cont41:                                          ; preds = %expr_true16, %expr_true40
  %.unpack166.unpack = load float, float addrspace(5)* %.unpack166.elt, align 4, !dbg !32
  %.unpack166.unpack184 = load float, float addrspace(5)* %.unpack166.elt183, align 4, !dbg !32
  %.unpack166.unpack186 = load float, float addrspace(5)* %.unpack166.elt185, align 4, !dbg !32
  %.unpack168.unpack = load float, float addrspace(5)* %.unpack168.elt, align 4, !dbg !32
  %.unpack168.unpack189 = load float, float addrspace(5)* %.unpack168.elt188, align 4, !dbg !32
  %.unpack168.unpack191 = load float, float addrspace(5)* %.unpack168.elt190, align 4, !dbg !32
  %.unpack170 = load float, float addrspace(5)* %.elt169, align 4, !dbg !32
  %.unpack172 = load float, float addrspace(5)* %.elt171, align 4, !dbg !32
  %108 = extractelement <4 x float> %65, i32 2, !dbg !32
  %109 = fmul float %.unpack166.unpack, %108, !dbg !32
  %110 = fadd float %109, %.unpack168.unpack, !dbg !32
  %111 = extractelement <4 x float> %65, i32 3, !dbg !32
  %112 = fmul float %.unpack166.unpack, %111, !dbg !32
  %113 = fadd float %112, %.unpack168.unpack, !dbg !32
  %114 = call float @__ocml_fmin_f32(float %110, float %113), !dbg !32
  %115 = extractelement <4 x float> %69, i32 0, !dbg !19
  %116 = fmul float %.unpack166.unpack184, %115, !dbg !19
  %117 = fadd float %116, %.unpack168.unpack189, !dbg !19
  %118 = extractelement <4 x float> %69, i32 1, !dbg !19
  %119 = fmul float %.unpack166.unpack184, %118, !dbg !19
  %120 = fadd float %119, %.unpack168.unpack189, !dbg !19
  %121 = call float @__ocml_fmin_f32(float %117, float %120), !dbg !19
  %122 = extractelement <4 x float> %69, i32 2, !dbg !20
  %123 = fmul float %.unpack166.unpack186, %122, !dbg !20
  %124 = fadd float %123, %.unpack168.unpack191, !dbg !20
  %125 = extractelement <4 x float> %69, i32 3, !dbg !20
  %126 = fmul float %.unpack166.unpack186, %125, !dbg !20
  %127 = fadd float %126, %.unpack168.unpack191, !dbg !20
  %128 = call float @__ocml_fmin_f32(float %124, float %127), !dbg !20
  %129 = call float @__ocml_fmax_f32(float %128, float %.unpack170), !dbg !21
  %130 = call float @__ocml_fmax_f32(float %114, float %121), !dbg !22
  %131 = call float @__ocml_fmax_f32(float %130, float %129), !dbg !23
  %132 = call float @__ocml_fmax_f32(float %110, float %113), !dbg !24
  %133 = call float @__ocml_fmax_f32(float %117, float %120), !dbg !25
  %134 = call float @__ocml_fmax_f32(float %124, float %127), !dbg !26
  %135 = call float @__ocml_fmin_f32(float %134, float %.unpack172), !dbg !27
  %136 = call float @__ocml_fmin_f32(float %132, float %133), !dbg !28
  %137 = call float @__ocml_fmin_f32(float %136, float %135), !dbg !29
  %138 = fcmp ugt float %131, %137, !dbg !30
  br i1 %138, label %_cont68, label %expr_true67, !dbg !30

expr_true67:                                      ; preds = %_cont41
  %139 = load i32, i32 addrspace(5)* %mask_9321317, align 4, !dbg !31
  %140 = or i32 %139, 2, !dbg !31
  store i32 %140, i32 addrspace(5)* %mask_9321317, align 4, !dbg !31
  %141 = extractelement <4 x i32> %73, i32 1, !dbg !31
  store i32 %141, i32 addrspace(5)* %val_9321715.repack, align 4, !dbg !31
  store float %131, float addrspace(5)* %val_9321715.repack266, align 4, !dbg !31
  br label %_cont68, !dbg !31

_cont68:                                          ; preds = %_cont41, %expr_true67
  %142 = load i32, i32 addrspace(5)* %mask_9321317, align 4, !dbg !32
  %143 = icmp eq i32 %142, 0, !dbg !32
  br i1 %143, label %expr_true72, label %expr_false69, !dbg !32

expr_false69:                                     ; preds = %_cont68
  %.unpack = load i32, i32 addrspace(5)* %.elt, align 4, !dbg !33
  %.unpack196 = load i32, i32 addrspace(5)* %.elt195, align 4, !dbg !33
  %144 = load i32, i32 addrspace(5)* %mask_9321317, align 4, !dbg !33
  %145 = icmp eq i32 %144, 3, !dbg !33
  br i1 %145, label %expr_true71, label %expr_false70, !dbg !33

expr_false70:                                     ; preds = %expr_false69
  %146 = load i32, i32 addrspace(5)* %mask_9321317, align 4, !dbg !34
  %147 = icmp eq i32 %146, 1, !dbg !34
  %148 = select i1 %147, i32 %.unpack, i32 %.unpack196, !dbg !34
  store i32 %148, i32 addrspace(5)* %node_9321267, align 4, !dbg !34
  br label %if_join73, !dbg !34

expr_true71:                                      ; preds = %expr_false69
  %.unpack198 = load float, float addrspace(5)* %.elt197, align 4, !dbg !33
  %.unpack194 = load float, float addrspace(5)* %.elt193, align 4, !dbg !33
  %149 = fcmp olt float %.unpack194, %.unpack198, !dbg !34
  %150 = select i1 %149, i32 %.unpack, i32 %.unpack196, !dbg !34
  store i32 %150, i32 addrspace(5)* %node_9321267, align 4, !dbg !34
  %151 = load i32, i32 addrspace(5)* %ptr_9321673, align 4, !dbg !34
  %152 = add nsw i32 %151, 1, !dbg !34
  store i32 %152, i32 addrspace(5)* %ptr_9321673, align 4, !dbg !34
  %153 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9321676, i32 0, i32 %152, !dbg !34
  %154 = select i1 %149, i32 %.unpack196, i32 %.unpack, !dbg !34
  store i32 %154, i32 addrspace(5)* %153, align 4, !dbg !34
  br label %if_join73, !dbg !34

expr_true72:                                      ; preds = %_cont68
  %155 = load i32, i32 addrspace(5)* %ptr_9321673, align 4, !dbg !33
  %156 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9321676, i32 0, i32 %155, !dbg !33
  %157 = load i32, i32 addrspace(5)* %156, align 4, !dbg !33
  store i32 %157, i32 addrspace(5)* %node_9321267, align 4, !dbg !33
  %158 = add nsw i32 %155, -1, !dbg !33
  store i32 %158, i32 addrspace(5)* %ptr_9321673, align 4, !dbg !33
  br label %if_join73, !dbg !33

if_join73:                                        ; preds = %expr_false70, %expr_true71, %expr_true72
  %159 = load i32, i32 addrspace(5)* %node_9321267, align 4, !dbg !35
  %160 = icmp slt i32 %159, 0, !dbg !35
  br i1 %160, label %expr_true76, label %expr_false75, !dbg !35

expr_false75:                                     ; preds = %expr_true96, %if_join73
  %161 = load i32, i32 addrspace(5)* %node_9321267, align 4, !dbg !17
  %162 = icmp eq i32 %161, 0, !dbg !17
  br i1 %162, label %expr_false97, label %expr_true16, !dbg !17

expr_true76:                                      ; preds = %if_join73, %expr_true96
  %163 = load i32, i32 addrspace(5)* %node_9321267, align 4, !dbg !36
  %164 = load i32, i32 addrspace(5)* %ptr_9321673, align 4, !dbg !36
  %165 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9321676, i32 0, i32 %164, !dbg !36
  %166 = load i32, i32 addrspace(5)* %165, align 4, !dbg !36
  store i32 %166, i32 addrspace(5)* %node_9321267, align 4, !dbg !36
  %167 = add nsw i32 %164, -1, !dbg !36
  store i32 %167, i32 addrspace(5)* %ptr_9321673, align 4, !dbg !36
  %prim_id = xor i32 %163, -1, !dbg !36
  store i32 %prim_id, i32 addrspace(5)* %prim_id_9321491, align 4, !dbg !36
  br label %while_head77, !dbg !36

while_head77:                                     ; preds = %_cont94, %expr_true76
  %168 = load i32, i32 addrspace(5)* %prim_id_9321491, align 4, !dbg !37
  %169 = add nsw i32 %168, 1, !dbg !37
  store i32 %169, i32 addrspace(5)* %prim_id_9321491, align 4, !dbg !37
  %170 = sext i32 %168 to i64, !dbg !37
  %171 = getelementptr inbounds [0 x %3], [0 x %3]* %_9321193, i64 0, i64 %170, !dbg !37
  %172 = bitcast %3* %171 to <4 x float>*, !dbg !37
  %173 = addrspacecast <4 x float>* %172 to <4 x float> addrspace(1)*, !dbg !37
  %174 = load <4 x float>, <4 x float> addrspace(1)* %173, align 16, !dbg !37
  %175 = getelementptr inbounds [0 x %3], [0 x %3]* %_9321193, i64 0, i64 %170, i32 2, !dbg !37
  %176 = bitcast [3 x float]* %175 to <4 x float>*, !dbg !37
  %177 = addrspacecast <4 x float>* %176 to <4 x float> addrspace(1)*, !dbg !37
  %178 = load <4 x float>, <4 x float> addrspace(1)* %177, align 16, !dbg !37
  %179 = getelementptr inbounds [0 x %3], [0 x %3]* %_9321193, i64 0, i64 %170, i32 4, !dbg !37
  %180 = bitcast [3 x float]* %179 to <4 x float>*, !dbg !37
  %181 = addrspacecast <4 x float>* %180 to <4 x float> addrspace(1)*, !dbg !37
  %182 = load <4 x float>, <4 x float> addrspace(1)* %181, align 16, !dbg !37
  %.unpack211.unpack = load float, float addrspace(5)* %.unpack211.elt, align 4, !dbg !37
  %.unpack211.unpack223 = load float, float addrspace(5)* %.unpack211.elt222, align 4, !dbg !37
  %.unpack211.unpack225 = load float, float addrspace(5)* %.unpack211.elt224, align 4, !dbg !37
  %.unpack213.unpack = load float, float addrspace(5)* %.unpack213.elt, align 4, !dbg !37
  %.unpack213.unpack228 = load float, float addrspace(5)* %.unpack213.elt227, align 4, !dbg !37
  %.unpack213.unpack230 = load float, float addrspace(5)* %.unpack213.elt229, align 4, !dbg !37
  %.unpack219 = load float, float addrspace(5)* %.elt218, align 4, !dbg !37
  %.unpack221 = load float, float addrspace(5)* %.elt220, align 4, !dbg !37
  %183 = extractelement <4 x float> %178, i32 1, !dbg !37
  %184 = extractelement <4 x float> %182, i32 2, !dbg !37
  %185 = fmul float %183, %184, !dbg !37
  %186 = extractelement <4 x float> %178, i32 2, !dbg !37
  %187 = extractelement <4 x float> %182, i32 1, !dbg !37
  %188 = fmul float %186, %187, !dbg !37
  %189 = fsub float %185, %188, !dbg !37
  %190 = fmul float %189, %.unpack213.unpack, !dbg !37
  %191 = extractelement <4 x float> %182, i32 0, !dbg !37
  %192 = fmul float %186, %191, !dbg !37
  %193 = extractelement <4 x float> %178, i32 0, !dbg !37
  %194 = fmul float %193, %184, !dbg !37
  %195 = fsub float %192, %194, !dbg !37
  %196 = fmul float %195, %.unpack213.unpack228, !dbg !37
  %197 = fadd float %190, %196, !dbg !37
  %198 = fmul float %193, %187, !dbg !37
  %199 = fmul float %183, %191, !dbg !37
  %200 = fsub float %198, %199, !dbg !37
  %201 = fmul float %200, %.unpack213.unpack230, !dbg !37
  %202 = fadd float %197, %201, !dbg !37
  %203 = call float @__ocml_fabs_f32(float %202), !dbg !37
  %204 = extractelement <4 x float> %174, i32 2, !dbg !38
  %205 = fsub float %204, %.unpack211.unpack225, !dbg !38
  %206 = fmul float %.unpack213.unpack228, %205, !dbg !38
  %207 = extractelement <4 x float> %174, i32 1, !dbg !38
  %208 = fsub float %207, %.unpack211.unpack223, !dbg !38
  %209 = fmul float %.unpack213.unpack230, %208, !dbg !38
  %210 = fsub float %206, %209, !dbg !38
  %211 = fmul float %210, %191, !dbg !38
  %212 = extractelement <4 x float> %174, i32 0, !dbg !38
  %213 = fsub float %212, %.unpack211.unpack, !dbg !38
  %214 = fmul float %.unpack213.unpack230, %213, !dbg !38
  %215 = fmul float %.unpack213.unpack, %205, !dbg !38
  %216 = fsub float %214, %215, !dbg !38
  %217 = fmul float %216, %187, !dbg !38
  %218 = fadd float %211, %217, !dbg !38
  %219 = fmul float %.unpack213.unpack, %208, !dbg !38
  %220 = fmul float %.unpack213.unpack228, %213, !dbg !38
  %221 = fsub float %219, %220, !dbg !38
  %222 = fmul float %221, %184, !dbg !38
  %223 = fadd float %218, %222, !dbg !38
  %224 = bitcast float %223 to i32, !dbg !38
  %225 = bitcast float %202 to i32, !dbg !38
  %226 = and i32 %225, -2147483648, !dbg !38
  %227 = xor i32 %226, %224, !dbg !38
  %228 = bitcast i32 %227 to float, !dbg !38
  %mask = fcmp oge float %228, 0.000000e+00, !dbg !38
  store i1 %mask, i1 addrspace(5)* %mask_9321544, align 1, !dbg !38
  %229 = fmul float %210, %193, !dbg !38
  %230 = fmul float %216, %183, !dbg !38
  %231 = fadd float %229, %230, !dbg !38
  %232 = fmul float %221, %186, !dbg !38
  %233 = fadd float %231, %232, !dbg !38
  %234 = bitcast float %233 to i32, !dbg !38
  %235 = xor i32 %226, %234, !dbg !38
  %236 = bitcast i32 %235 to float, !dbg !38
  %237 = fcmp oge float %236, 0.000000e+00, !dbg !38
  %238 = and i1 %mask, %237, !dbg !38
  %239 = fadd float %228, %236, !dbg !38
  %240 = fcmp ole float %239, %203, !dbg !38
  %241 = and i1 %238, %240, !dbg !38
  store i1 %241, i1 addrspace(5)* %mask_9321544, align 1, !dbg !38
  %242 = xor i1 %241, true, !dbg !38
  %243 = call i1 @llvm.expect.i1(i1 %242, i1 true), !dbg !39
  %bc = bitcast <4 x float> %182 to <4 x i32>, !dbg !40
  %244 = extractelement <4 x i32> %bc, i32 3, !dbg !40
  br i1 %243, label %_cont94, label %expr_false82, !dbg !40

expr_false82:                                     ; preds = %while_head77
  %245 = load i1, i1 addrspace(5)* %mask_9321544, align 1, !dbg !41
  %246 = fcmp une float %203, 0.000000e+00, !dbg !41
  %247 = and i1 %245, %246, !dbg !41
  store i1 %247, i1 addrspace(5)* %mask_9321544, align 1, !dbg !41
  %248 = fmul float %203, %.unpack219, !dbg !41
  %249 = fmul float %213, %189, !dbg !41
  %250 = fmul float %208, %195, !dbg !41
  %251 = fadd float %249, %250, !dbg !41
  %252 = fmul float %205, %200, !dbg !41
  %253 = fadd float %251, %252, !dbg !41
  %254 = bitcast float %253 to i32, !dbg !41
  %255 = xor i32 %226, %254, !dbg !41
  %256 = bitcast i32 %255 to float, !dbg !41
  %257 = fcmp ole float %248, %256, !dbg !41
  %258 = and i1 %247, %257, !dbg !41
  %259 = fmul float %203, %.unpack221, !dbg !41
  %260 = fcmp oge float %259, %256, !dbg !41
  %261 = and i1 %258, %260, !dbg !41
  store i1 %261, i1 addrspace(5)* %mask_9321544, align 1, !dbg !41
  %262 = xor i1 %261, true, !dbg !41
  %263 = call i1 @llvm.expect.i1(i1 %262, i1 true), !dbg !42
  br i1 %263, label %_cont94, label %expr_false87, !dbg !43

expr_false87:                                     ; preds = %expr_false82
  %264 = load i1, i1 addrspace(5)* %mask_9321544, align 1, !dbg !44
  br i1 %264, label %expr_true89, label %_cont94, !dbg !44

expr_true89:                                      ; preds = %expr_false87
  %265 = and i32 %244, 2147483647, !dbg !45
  %inv_det = fdiv float 1.000000e+00, %203, !dbg !45
  %266 = fmul float %inv_det, %256, !dbg !45
  %267 = fmul float %inv_det, %228, !dbg !45
  %268 = fmul float %inv_det, %236, !dbg !45
  %bc242 = bitcast <4 x float> %178 to <4 x i32>, !dbg !45
  %269 = extractelement <4 x i32> %bc242, i32 3, !dbg !45
  %hit_9321287.repack243 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 0, !dbg !45
  store float %266, float addrspace(5)* %hit_9321287.repack243, align 4, !dbg !45
  %hit_9321287.repack245.repack = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 1, i32 0, !dbg !45
  store float %267, float addrspace(5)* %hit_9321287.repack245.repack, align 4, !dbg !45
  %hit_9321287.repack245.repack252 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 1, i32 1, !dbg !45
  store float %268, float addrspace(5)* %hit_9321287.repack245.repack252, align 4, !dbg !45
  %hit_9321287.repack247 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 2, !dbg !45
  store i32 %265, i32 addrspace(5)* %hit_9321287.repack247, align 4, !dbg !45
  %hit_9321287.repack249 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 3, !dbg !45
  store i32 %269, i32 addrspace(5)* %hit_9321287.repack249, align 4, !dbg !45
  store float %266, float addrspace(5)* %54, align 4, !dbg !45
  br label %gpu_traverse_single_helper_cont, !dbg !46

_cont94:                                          ; preds = %while_head77, %expr_false82, %expr_false87
  %270 = icmp slt i32 %244, 0, !dbg !32
  br i1 %270, label %expr_true96, label %while_head77, !dbg !32

expr_true96:                                      ; preds = %_cont94
  %271 = load i32, i32 addrspace(5)* %node_9321267, align 4, !dbg !35
  %272 = icmp slt i32 %271, 0, !dbg !35
  br i1 %272, label %expr_true76, label %expr_false75, !dbg !35

expr_false97:                                     ; preds = %expr_false75
  %.elt199 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 0, !dbg !18
  %.unpack200 = load float, float addrspace(5)* %.elt199, align 4, !dbg !18
  %.unpack202.elt = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 1, i32 0, !dbg !18
  %.unpack202.unpack = load float, float addrspace(5)* %.unpack202.elt, align 4, !dbg !18
  %.unpack202.elt207 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 1, i32 1, !dbg !18
  %.unpack202.unpack208 = load float, float addrspace(5)* %.unpack202.elt207, align 4, !dbg !18
  %.elt203 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321287, i32 0, i32 2, !dbg !18
  %.unpack204 = load i32, i32 addrspace(5)* %.elt203, align 4, !dbg !18
  br label %gpu_traverse_single_helper_cont, !dbg !18

gpu_traverse_single_helper_cont:                  ; preds = %expr_false97, %expr_true89
  %.pn260 = phi float [ %266, %expr_true89 ], [ %.unpack200, %expr_false97 ]
  %.pn264 = phi float [ %267, %expr_true89 ], [ %.unpack202.unpack, %expr_false97 ]
  %.pn262 = phi float [ %268, %expr_true89 ], [ %.unpack202.unpack208, %expr_false97 ]
  %.pn256 = phi i32 [ %265, %expr_true89 ], [ %.unpack204, %expr_false97 ]
  %273 = sext i32 %4 to i64, !dbg !47
  %274 = getelementptr inbounds [0 x %0], [0 x %0]* %_9321189, i64 0, i64 %273, !dbg !47
  %275 = bitcast %0* %274 to <4 x float>*, !dbg !47
  %276 = insertelement <4 x i32> undef, i32 %.pn256, i32 0, !dbg !47
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !47
  %278 = insertelement <4 x float> %277, float %.pn260, i32 1, !dbg !47
  %279 = insertelement <4 x float> %278, float %.pn264, i32 2, !dbg !47
  %280 = insertelement <4 x float> %279, float %.pn262, i32 3, !dbg !47
  store <4 x float> %280, <4 x float>* %275, align 16, !dbg !47
  ret void, !dbg !47

expr_true99:                                      ; preds = %lambda_9275163
  ret void, !dbg !12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #0

declare float @__ocml_fmin_f32(float, float) local_unnamed_addr

declare float @__ocml_fmax_f32(float, float) local_unnamed_addr

declare float @__ocml_fabs_f32(float) local_unnamed_addr

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #1

define amdgpu_kernel void @lambda_9262316([0 x %3]* %_9321818, [0 x %2]* %_9321819, [0 x %0]* %_9321820, i32 %_9321821, [0 x %1]* %_9321822) local_unnamed_addr !dbg !48 !reqd_work_group_size !7 {
lambda_9262316:
  %mask_9322129 = alloca i1, align 1, addrspace(5)
  %prim_id_9322080 = alloca i32, align 4, addrspace(5)
  %val_9322287 = alloca { i32, float }, align 4, addrspace(5)
  %val_9322284 = alloca { i32, float }, align 4, addrspace(5)
  %mask_9321918 = alloca i32, align 4, addrspace(5)
  %nodes_9322249 = alloca [64 x i32], align 4, addrspace(5)
  %ptr_9322246 = alloca i32, align 4, addrspace(5)
  %node_9321878 = alloca i32, align 4, addrspace(5)
  %hit_9321884 = alloca %4, align 4, addrspace(5)
  %ray_9321920 = alloca %6, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !50
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !51
  %2 = call i32 @llvm.amdgcn.workitem.id.y(), !dbg !52
  %3 = shl nsw i32 %1, 6, !dbg !53
  %i = add nsw i32 %0, %3, !dbg !53
  %4 = add nsw i32 %i, %2, !dbg !53
  %.not = icmp slt i32 %4, %_9321821, !dbg !53
  br i1 %.not, label %expr_false, label %expr_true96, !dbg !53

expr_false:                                       ; preds = %lambda_9262316
  %5 = sext i32 %4 to i64, !dbg !54
  %6 = getelementptr inbounds [0 x %2], [0 x %2]* %_9321819, i64 0, i64 %5, !dbg !54
  %7 = bitcast %2* %6 to <4 x float>*, !dbg !54
  %8 = load <4 x float>, <4 x float>* %7, align 16, !dbg !54
  %9 = getelementptr inbounds [0 x %2], [0 x %2]* %_9321819, i64 0, i64 %5, i32 2, !dbg !54
  %10 = bitcast [3 x float]* %9 to <4 x float>*, !dbg !54
  %11 = load <4 x float>, <4 x float>* %10, align 16, !dbg !54
  %12 = extractelement <4 x float> %11, i32 0, !dbg !54
  %13 = fcmp ogt float %12, 0.000000e+00, !dbg !54
  %14 = fneg float %12, !dbg !54
  %15 = select i1 %13, float %12, float %14, !dbg !54
  %16 = fcmp olt float %15, 0x3E45798EE0000000, !dbg !54
  br i1 %16, label %expr_true, label %expr_false6, !dbg !54

expr_false6:                                      ; preds = %expr_false
  %17 = fdiv float 1.000000e+00, %12, !dbg !55
  br label %safe_rcp_cont, !dbg !55

expr_true:                                        ; preds = %expr_false
  %18 = bitcast float %12 to i32, !dbg !55
  %19 = and i32 %18, -2147483648, !dbg !55
  %20 = or i32 %19, 2139095039, !dbg !55
  %21 = bitcast i32 %20 to float, !dbg !55
  br label %safe_rcp_cont, !dbg !55

safe_rcp_cont:                                    ; preds = %expr_true, %expr_false6
  %safe_rcp_cont7 = phi float [ %17, %expr_false6 ], [ %21, %expr_true ], !dbg !56
  %22 = extractelement <4 x float> %11, i32 1, !dbg !56
  %23 = fcmp ogt float %22, 0.000000e+00, !dbg !56
  %24 = fneg float %22, !dbg !56
  %25 = select i1 %23, float %22, float %24, !dbg !56
  %26 = fcmp olt float %25, 0x3E45798EE0000000, !dbg !56
  br i1 %26, label %expr_true9, label %expr_false8, !dbg !56

expr_false8:                                      ; preds = %safe_rcp_cont
  %27 = fdiv float 1.000000e+00, %22, !dbg !55
  br label %safe_rcp_cont10, !dbg !55

expr_true9:                                       ; preds = %safe_rcp_cont
  %28 = bitcast float %22 to i32, !dbg !55
  %29 = and i32 %28, -2147483648, !dbg !55
  %30 = or i32 %29, 2139095039, !dbg !55
  %31 = bitcast i32 %30 to float, !dbg !55
  br label %safe_rcp_cont10, !dbg !55

safe_rcp_cont10:                                  ; preds = %expr_true9, %expr_false8
  %safe_rcp_cont11 = phi float [ %27, %expr_false8 ], [ %31, %expr_true9 ], !dbg !57
  %32 = extractelement <4 x float> %11, i32 2, !dbg !57
  %33 = fcmp ogt float %32, 0.000000e+00, !dbg !57
  %34 = fneg float %32, !dbg !57
  %35 = select i1 %33, float %32, float %34, !dbg !57
  %36 = fcmp olt float %35, 0x3E45798EE0000000, !dbg !57
  br i1 %36, label %expr_true13, label %expr_false12, !dbg !57

expr_false12:                                     ; preds = %safe_rcp_cont10
  %37 = fdiv float 1.000000e+00, %32, !dbg !55
  br label %safe_rcp_cont14, !dbg !55

expr_true13:                                      ; preds = %safe_rcp_cont10
  %38 = bitcast float %32 to i32, !dbg !55
  %39 = and i32 %38, -2147483648, !dbg !55
  %40 = or i32 %39, 2139095039, !dbg !55
  %41 = bitcast i32 %40 to float, !dbg !55
  br label %safe_rcp_cont14, !dbg !55

safe_rcp_cont14:                                  ; preds = %expr_true13, %expr_false12
  %safe_rcp_cont15 = phi float [ %37, %expr_false12 ], [ %41, %expr_true13 ], !dbg !58
  %42 = extractelement <4 x float> %8, i32 0, !dbg !58
  %43 = extractelement <4 x float> %8, i32 1, !dbg !58
  %44 = extractelement <4 x float> %8, i32 2, !dbg !58
  %45 = fneg float %42, !dbg !58
  %46 = fmul float %safe_rcp_cont7, %45, !dbg !58
  %47 = fneg float %43, !dbg !58
  %48 = fmul float %safe_rcp_cont11, %47, !dbg !58
  %49 = fneg float %44, !dbg !58
  %50 = fmul float %safe_rcp_cont15, %49, !dbg !58
  %51 = extractelement <4 x float> %8, i32 3, !dbg !58
  %52 = extractelement <4 x float> %11, i32 3, !dbg !58
  %ray_9321920.repack.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 0, i32 0, !dbg !58
  store float %42, float addrspace(5)* %ray_9321920.repack.repack, align 4, !dbg !58
  %ray_9321920.repack.repack107 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 0, i32 1, !dbg !58
  store float %43, float addrspace(5)* %ray_9321920.repack.repack107, align 4, !dbg !58
  %ray_9321920.repack.repack109 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 0, i32 2, !dbg !58
  store float %44, float addrspace(5)* %ray_9321920.repack.repack109, align 4, !dbg !58
  %ray_9321920.repack97.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 1, i32 0, !dbg !58
  store float %12, float addrspace(5)* %ray_9321920.repack97.repack, align 4, !dbg !58
  %ray_9321920.repack97.repack111 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 1, i32 1, !dbg !58
  store float %22, float addrspace(5)* %ray_9321920.repack97.repack111, align 4, !dbg !58
  %ray_9321920.repack97.repack113 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 1, i32 2, !dbg !58
  store float %32, float addrspace(5)* %ray_9321920.repack97.repack113, align 4, !dbg !58
  %ray_9321920.repack99.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 0, !dbg !58
  store float %safe_rcp_cont7, float addrspace(5)* %ray_9321920.repack99.repack, align 4, !dbg !58
  %ray_9321920.repack99.repack115 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 1, !dbg !58
  store float %safe_rcp_cont11, float addrspace(5)* %ray_9321920.repack99.repack115, align 4, !dbg !58
  %ray_9321920.repack99.repack117 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 2, !dbg !58
  store float %safe_rcp_cont15, float addrspace(5)* %ray_9321920.repack99.repack117, align 4, !dbg !58
  %ray_9321920.repack101.repack = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 0, !dbg !58
  store float %46, float addrspace(5)* %ray_9321920.repack101.repack, align 4, !dbg !58
  %ray_9321920.repack101.repack119 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 1, !dbg !58
  store float %48, float addrspace(5)* %ray_9321920.repack101.repack119, align 4, !dbg !58
  %ray_9321920.repack101.repack121 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 2, !dbg !58
  store float %50, float addrspace(5)* %ray_9321920.repack101.repack121, align 4, !dbg !58
  %ray_9321920.repack103 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 4, !dbg !58
  store float %51, float addrspace(5)* %ray_9321920.repack103, align 4, !dbg !58
  %ray_9321920.repack105 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 5, !dbg !58
  store float %52, float addrspace(5)* %ray_9321920.repack105, align 4, !dbg !58
  %hit_9321884.repack = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 0, !dbg !58
  store float %52, float addrspace(5)* %hit_9321884.repack, align 4, !dbg !58
  %hit_9321884.repack125 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 2, !dbg !58
  store i32 -1, i32 addrspace(5)* %hit_9321884.repack125, align 4, !dbg !58
  %hit_9321884.repack127 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 3, !dbg !58
  store i32 -1, i32 addrspace(5)* %hit_9321884.repack127, align 4, !dbg !58
  store i32 0, i32 addrspace(5)* %node_9321878, align 4, !dbg !58
  store i32 0, i32 addrspace(5)* %ptr_9322246, align 4, !dbg !58
  %53 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9322249, i32 0, i32 0, !dbg !58
  store i32 0, i32 addrspace(5)* %53, align 4, !dbg !58
  store i32 1, i32 addrspace(5)* %node_9321878, align 4, !dbg !58
  %54 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 5, !dbg !58
  %.unpack133.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 0
  %.unpack133.elt150 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 1
  %.unpack133.elt152 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 2
  %.unpack135.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 0
  %.unpack135.elt155 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 1
  %.unpack135.elt157 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 2
  %.elt136 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 4
  %.elt138 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 5
  %val_9322284.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322284, i32 0, i32 0
  %val_9322284.repack255 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322284, i32 0, i32 1
  %.unpack163.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 0
  %.unpack163.elt180 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 1
  %.unpack163.elt182 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 2, i32 2
  %.unpack165.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 0
  %.unpack165.elt185 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 1
  %.unpack165.elt187 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 3, i32 2
  %.elt166 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 4
  %.elt168 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 5
  %val_9322287.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322287, i32 0, i32 0
  %val_9322287.repack252 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322287, i32 0, i32 1
  %.elt = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322284, i32 0, i32 0
  %.elt192 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322287, i32 0, i32 0
  %.elt194 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322287, i32 0, i32 1
  %.elt190 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_9322284, i32 0, i32 1
  %.unpack208.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 0, i32 0
  %.unpack208.elt219 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 0, i32 1
  %.unpack208.elt221 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 0, i32 2
  %.unpack210.elt = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 1, i32 0
  %.unpack210.elt224 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 1, i32 1
  %.unpack210.elt226 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 1, i32 2
  %.elt215 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 4
  %.elt217 = getelementptr inbounds %6, %6 addrspace(5)* %ray_9321920, i32 0, i32 5
  %hit_9321884.repack240 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 0
  %hit_9321884.repack242.repack = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 1, i32 0
  %hit_9321884.repack242.repack249 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 1, i32 1
  %hit_9321884.repack244 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 2
  %hit_9321884.repack246 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 3
  br label %expr_true16, !dbg !59

expr_true16:                                      ; preds = %safe_rcp_cont14, %expr_false75
  %55 = load i32, i32 addrspace(5)* %node_9321878, align 4, !dbg !60
  %56 = add nsw i32 %55, -1, !dbg !60
  %57 = sext i32 %56 to i64, !dbg !60
  %58 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321822, i64 0, i64 %57, !dbg !60
  %59 = bitcast %1* %58 to <4 x float>*, !dbg !60
  %60 = addrspacecast <4 x float>* %59 to <4 x float> addrspace(1)*, !dbg !60
  %61 = load <4 x float>, <4 x float> addrspace(1)* %60, align 16, !dbg !60
  %62 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321822, i64 0, i64 %57, i32 0, i64 4, !dbg !60
  %63 = bitcast float* %62 to <4 x float>*, !dbg !60
  %64 = addrspacecast <4 x float>* %63 to <4 x float> addrspace(1)*, !dbg !60
  %65 = load <4 x float>, <4 x float> addrspace(1)* %64, align 16, !dbg !60
  %66 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321822, i64 0, i64 %57, i32 0, i64 8, !dbg !60
  %67 = bitcast float* %66 to <4 x float>*, !dbg !60
  %68 = addrspacecast <4 x float>* %67 to <4 x float> addrspace(1)*, !dbg !60
  %69 = load <4 x float>, <4 x float> addrspace(1)* %68, align 16, !dbg !60
  %70 = getelementptr inbounds [0 x %1], [0 x %1]* %_9321822, i64 0, i64 %57, i32 1, !dbg !60
  %71 = bitcast [2 x i32]* %70 to <4 x i32>*, !dbg !60
  %72 = addrspacecast <4 x i32>* %71 to <4 x i32> addrspace(1)*, !dbg !60
  %73 = load <4 x i32>, <4 x i32> addrspace(1)* %72, align 16, !dbg !60
  store i32 0, i32 addrspace(5)* %mask_9321918, align 4, !dbg !60
  %.unpack133.unpack = load float, float addrspace(5)* %.unpack133.elt, align 4, !dbg !60
  %.unpack133.unpack151 = load float, float addrspace(5)* %.unpack133.elt150, align 4, !dbg !60
  %.unpack133.unpack153 = load float, float addrspace(5)* %.unpack133.elt152, align 4, !dbg !60
  %.unpack135.unpack = load float, float addrspace(5)* %.unpack135.elt, align 4, !dbg !60
  %.unpack135.unpack156 = load float, float addrspace(5)* %.unpack135.elt155, align 4, !dbg !60
  %.unpack135.unpack158 = load float, float addrspace(5)* %.unpack135.elt157, align 4, !dbg !60
  %.unpack137 = load float, float addrspace(5)* %.elt136, align 4, !dbg !60
  %.unpack139 = load float, float addrspace(5)* %.elt138, align 4, !dbg !60
  %74 = extractelement <4 x float> %61, i32 0, !dbg !60
  %75 = fmul float %.unpack133.unpack, %74, !dbg !60
  %76 = fadd float %75, %.unpack135.unpack, !dbg !60
  %77 = extractelement <4 x float> %61, i32 1, !dbg !60
  %78 = fmul float %.unpack133.unpack, %77, !dbg !60
  %79 = fadd float %78, %.unpack135.unpack, !dbg !60
  %80 = call float @__ocml_fmin_f32(float %76, float %79), !dbg !60
  %81 = extractelement <4 x float> %61, i32 2, !dbg !61
  %82 = fmul float %.unpack133.unpack151, %81, !dbg !61
  %83 = fadd float %82, %.unpack135.unpack156, !dbg !61
  %84 = extractelement <4 x float> %61, i32 3, !dbg !61
  %85 = fmul float %.unpack133.unpack151, %84, !dbg !61
  %86 = fadd float %85, %.unpack135.unpack156, !dbg !61
  %87 = call float @__ocml_fmin_f32(float %83, float %86), !dbg !61
  %88 = extractelement <4 x float> %65, i32 0, !dbg !62
  %89 = fmul float %.unpack133.unpack153, %88, !dbg !62
  %90 = fadd float %89, %.unpack135.unpack158, !dbg !62
  %91 = extractelement <4 x float> %65, i32 1, !dbg !62
  %92 = fmul float %.unpack133.unpack153, %91, !dbg !62
  %93 = fadd float %92, %.unpack135.unpack158, !dbg !62
  %94 = call float @__ocml_fmin_f32(float %90, float %93), !dbg !62
  %95 = call float @__ocml_fmax_f32(float %94, float %.unpack137), !dbg !63
  %96 = call float @__ocml_fmax_f32(float %80, float %87), !dbg !64
  %97 = call float @__ocml_fmax_f32(float %96, float %95), !dbg !65
  %98 = call float @__ocml_fmax_f32(float %76, float %79), !dbg !66
  %99 = call float @__ocml_fmax_f32(float %83, float %86), !dbg !67
  %100 = call float @__ocml_fmax_f32(float %90, float %93), !dbg !68
  %101 = call float @__ocml_fmin_f32(float %100, float %.unpack139), !dbg !69
  %102 = call float @__ocml_fmin_f32(float %98, float %99), !dbg !70
  %103 = call float @__ocml_fmin_f32(float %102, float %101), !dbg !71
  %104 = fcmp ugt float %97, %103, !dbg !72
  br i1 %104, label %_cont41, label %expr_true40, !dbg !72

expr_true40:                                      ; preds = %expr_true16
  %105 = load i32, i32 addrspace(5)* %mask_9321918, align 4, !dbg !73
  %106 = or i32 %105, 1, !dbg !73
  store i32 %106, i32 addrspace(5)* %mask_9321918, align 4, !dbg !73
  %107 = extractelement <4 x i32> %73, i32 0, !dbg !73
  store i32 %107, i32 addrspace(5)* %val_9322284.repack, align 4, !dbg !73
  store float %97, float addrspace(5)* %val_9322284.repack255, align 4, !dbg !73
  br label %_cont41, !dbg !73

_cont41:                                          ; preds = %expr_true16, %expr_true40
  %.unpack163.unpack = load float, float addrspace(5)* %.unpack163.elt, align 4, !dbg !74
  %.unpack163.unpack181 = load float, float addrspace(5)* %.unpack163.elt180, align 4, !dbg !74
  %.unpack163.unpack183 = load float, float addrspace(5)* %.unpack163.elt182, align 4, !dbg !74
  %.unpack165.unpack = load float, float addrspace(5)* %.unpack165.elt, align 4, !dbg !74
  %.unpack165.unpack186 = load float, float addrspace(5)* %.unpack165.elt185, align 4, !dbg !74
  %.unpack165.unpack188 = load float, float addrspace(5)* %.unpack165.elt187, align 4, !dbg !74
  %.unpack167 = load float, float addrspace(5)* %.elt166, align 4, !dbg !74
  %.unpack169 = load float, float addrspace(5)* %.elt168, align 4, !dbg !74
  %108 = extractelement <4 x float> %65, i32 2, !dbg !74
  %109 = fmul float %.unpack163.unpack, %108, !dbg !74
  %110 = fadd float %109, %.unpack165.unpack, !dbg !74
  %111 = extractelement <4 x float> %65, i32 3, !dbg !74
  %112 = fmul float %.unpack163.unpack, %111, !dbg !74
  %113 = fadd float %112, %.unpack165.unpack, !dbg !74
  %114 = call float @__ocml_fmin_f32(float %110, float %113), !dbg !74
  %115 = extractelement <4 x float> %69, i32 0, !dbg !61
  %116 = fmul float %.unpack163.unpack181, %115, !dbg !61
  %117 = fadd float %116, %.unpack165.unpack186, !dbg !61
  %118 = extractelement <4 x float> %69, i32 1, !dbg !61
  %119 = fmul float %.unpack163.unpack181, %118, !dbg !61
  %120 = fadd float %119, %.unpack165.unpack186, !dbg !61
  %121 = call float @__ocml_fmin_f32(float %117, float %120), !dbg !61
  %122 = extractelement <4 x float> %69, i32 2, !dbg !62
  %123 = fmul float %.unpack163.unpack183, %122, !dbg !62
  %124 = fadd float %123, %.unpack165.unpack188, !dbg !62
  %125 = extractelement <4 x float> %69, i32 3, !dbg !62
  %126 = fmul float %.unpack163.unpack183, %125, !dbg !62
  %127 = fadd float %126, %.unpack165.unpack188, !dbg !62
  %128 = call float @__ocml_fmin_f32(float %124, float %127), !dbg !62
  %129 = call float @__ocml_fmax_f32(float %128, float %.unpack167), !dbg !63
  %130 = call float @__ocml_fmax_f32(float %114, float %121), !dbg !64
  %131 = call float @__ocml_fmax_f32(float %130, float %129), !dbg !65
  %132 = call float @__ocml_fmax_f32(float %110, float %113), !dbg !66
  %133 = call float @__ocml_fmax_f32(float %117, float %120), !dbg !67
  %134 = call float @__ocml_fmax_f32(float %124, float %127), !dbg !68
  %135 = call float @__ocml_fmin_f32(float %134, float %.unpack169), !dbg !69
  %136 = call float @__ocml_fmin_f32(float %132, float %133), !dbg !70
  %137 = call float @__ocml_fmin_f32(float %136, float %135), !dbg !71
  %138 = fcmp ugt float %131, %137, !dbg !72
  br i1 %138, label %_cont68, label %expr_true67, !dbg !72

expr_true67:                                      ; preds = %_cont41
  %139 = load i32, i32 addrspace(5)* %mask_9321918, align 4, !dbg !73
  %140 = or i32 %139, 2, !dbg !73
  store i32 %140, i32 addrspace(5)* %mask_9321918, align 4, !dbg !73
  %141 = extractelement <4 x i32> %73, i32 1, !dbg !73
  store i32 %141, i32 addrspace(5)* %val_9322287.repack, align 4, !dbg !73
  store float %131, float addrspace(5)* %val_9322287.repack252, align 4, !dbg !73
  br label %_cont68, !dbg !73

_cont68:                                          ; preds = %_cont41, %expr_true67
  %142 = load i32, i32 addrspace(5)* %mask_9321918, align 4, !dbg !74
  %143 = icmp eq i32 %142, 0, !dbg !74
  br i1 %143, label %expr_true72, label %expr_false69, !dbg !74

expr_false69:                                     ; preds = %_cont68
  %.unpack = load i32, i32 addrspace(5)* %.elt, align 4, !dbg !75
  %.unpack193 = load i32, i32 addrspace(5)* %.elt192, align 4, !dbg !75
  %144 = load i32, i32 addrspace(5)* %mask_9321918, align 4, !dbg !75
  %145 = icmp eq i32 %144, 3, !dbg !75
  br i1 %145, label %expr_true71, label %expr_false70, !dbg !75

expr_false70:                                     ; preds = %expr_false69
  %146 = load i32, i32 addrspace(5)* %mask_9321918, align 4, !dbg !76
  %147 = icmp eq i32 %146, 1, !dbg !76
  %148 = select i1 %147, i32 %.unpack, i32 %.unpack193, !dbg !76
  store i32 %148, i32 addrspace(5)* %node_9321878, align 4, !dbg !76
  br label %if_join73, !dbg !76

expr_true71:                                      ; preds = %expr_false69
  %.unpack195 = load float, float addrspace(5)* %.elt194, align 4, !dbg !75
  %.unpack191 = load float, float addrspace(5)* %.elt190, align 4, !dbg !75
  %149 = fcmp olt float %.unpack191, %.unpack195, !dbg !76
  %150 = select i1 %149, i32 %.unpack, i32 %.unpack193, !dbg !76
  store i32 %150, i32 addrspace(5)* %node_9321878, align 4, !dbg !76
  %151 = load i32, i32 addrspace(5)* %ptr_9322246, align 4, !dbg !76
  %152 = add nsw i32 %151, 1, !dbg !76
  store i32 %152, i32 addrspace(5)* %ptr_9322246, align 4, !dbg !76
  %153 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9322249, i32 0, i32 %152, !dbg !76
  %154 = select i1 %149, i32 %.unpack193, i32 %.unpack, !dbg !76
  store i32 %154, i32 addrspace(5)* %153, align 4, !dbg !76
  br label %if_join73, !dbg !76

expr_true72:                                      ; preds = %_cont68
  %155 = load i32, i32 addrspace(5)* %ptr_9322246, align 4, !dbg !75
  %156 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9322249, i32 0, i32 %155, !dbg !75
  %157 = load i32, i32 addrspace(5)* %156, align 4, !dbg !75
  store i32 %157, i32 addrspace(5)* %node_9321878, align 4, !dbg !75
  %158 = add nsw i32 %155, -1, !dbg !75
  store i32 %158, i32 addrspace(5)* %ptr_9322246, align 4, !dbg !75
  br label %if_join73, !dbg !75

if_join73:                                        ; preds = %expr_false70, %expr_true71, %expr_true72
  %159 = load i32, i32 addrspace(5)* %node_9321878, align 4, !dbg !77
  %160 = icmp slt i32 %159, 0, !dbg !77
  br i1 %160, label %expr_true76, label %expr_false75, !dbg !77

expr_false75:                                     ; preds = %expr_true94, %if_join73
  %161 = load i32, i32 addrspace(5)* %node_9321878, align 4, !dbg !59
  %162 = icmp eq i32 %161, 0, !dbg !59
  br i1 %162, label %expr_false95, label %expr_true16, !dbg !59

expr_true76:                                      ; preds = %if_join73, %expr_true94
  %163 = load i32, i32 addrspace(5)* %node_9321878, align 4, !dbg !78
  %164 = load i32, i32 addrspace(5)* %ptr_9322246, align 4, !dbg !78
  %165 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_9322249, i32 0, i32 %164, !dbg !78
  %166 = load i32, i32 addrspace(5)* %165, align 4, !dbg !78
  store i32 %166, i32 addrspace(5)* %node_9321878, align 4, !dbg !78
  %167 = add nsw i32 %164, -1, !dbg !78
  store i32 %167, i32 addrspace(5)* %ptr_9322246, align 4, !dbg !78
  %prim_id = xor i32 %163, -1, !dbg !78
  store i32 %prim_id, i32 addrspace(5)* %prim_id_9322080, align 4, !dbg !78
  br label %while_head77, !dbg !78

while_head77:                                     ; preds = %_cont92, %expr_true76
  %168 = load i32, i32 addrspace(5)* %prim_id_9322080, align 4, !dbg !79
  %169 = add nsw i32 %168, 1, !dbg !79
  store i32 %169, i32 addrspace(5)* %prim_id_9322080, align 4, !dbg !79
  %170 = sext i32 %168 to i64, !dbg !79
  %171 = getelementptr inbounds [0 x %3], [0 x %3]* %_9321818, i64 0, i64 %170, !dbg !79
  %172 = bitcast %3* %171 to <4 x float>*, !dbg !79
  %173 = addrspacecast <4 x float>* %172 to <4 x float> addrspace(1)*, !dbg !79
  %174 = load <4 x float>, <4 x float> addrspace(1)* %173, align 16, !dbg !79
  %175 = getelementptr inbounds [0 x %3], [0 x %3]* %_9321818, i64 0, i64 %170, i32 2, !dbg !79
  %176 = bitcast [3 x float]* %175 to <4 x float>*, !dbg !79
  %177 = addrspacecast <4 x float>* %176 to <4 x float> addrspace(1)*, !dbg !79
  %178 = load <4 x float>, <4 x float> addrspace(1)* %177, align 16, !dbg !79
  %179 = getelementptr inbounds [0 x %3], [0 x %3]* %_9321818, i64 0, i64 %170, i32 4, !dbg !79
  %180 = bitcast [3 x float]* %179 to <4 x float>*, !dbg !79
  %181 = addrspacecast <4 x float>* %180 to <4 x float> addrspace(1)*, !dbg !79
  %182 = load <4 x float>, <4 x float> addrspace(1)* %181, align 16, !dbg !79
  %.unpack208.unpack = load float, float addrspace(5)* %.unpack208.elt, align 4, !dbg !79
  %.unpack208.unpack220 = load float, float addrspace(5)* %.unpack208.elt219, align 4, !dbg !79
  %.unpack208.unpack222 = load float, float addrspace(5)* %.unpack208.elt221, align 4, !dbg !79
  %.unpack210.unpack = load float, float addrspace(5)* %.unpack210.elt, align 4, !dbg !79
  %.unpack210.unpack225 = load float, float addrspace(5)* %.unpack210.elt224, align 4, !dbg !79
  %.unpack210.unpack227 = load float, float addrspace(5)* %.unpack210.elt226, align 4, !dbg !79
  %.unpack216 = load float, float addrspace(5)* %.elt215, align 4, !dbg !79
  %.unpack218 = load float, float addrspace(5)* %.elt217, align 4, !dbg !79
  %183 = extractelement <4 x float> %178, i32 1, !dbg !79
  %184 = extractelement <4 x float> %182, i32 2, !dbg !79
  %185 = fmul float %183, %184, !dbg !79
  %186 = extractelement <4 x float> %178, i32 2, !dbg !79
  %187 = extractelement <4 x float> %182, i32 1, !dbg !79
  %188 = fmul float %186, %187, !dbg !79
  %189 = fsub float %185, %188, !dbg !79
  %190 = fmul float %189, %.unpack210.unpack, !dbg !79
  %191 = extractelement <4 x float> %182, i32 0, !dbg !79
  %192 = fmul float %186, %191, !dbg !79
  %193 = extractelement <4 x float> %178, i32 0, !dbg !79
  %194 = fmul float %193, %184, !dbg !79
  %195 = fsub float %192, %194, !dbg !79
  %196 = fmul float %195, %.unpack210.unpack225, !dbg !79
  %197 = fadd float %190, %196, !dbg !79
  %198 = fmul float %193, %187, !dbg !79
  %199 = fmul float %183, %191, !dbg !79
  %200 = fsub float %198, %199, !dbg !79
  %201 = fmul float %200, %.unpack210.unpack227, !dbg !79
  %202 = fadd float %197, %201, !dbg !79
  %203 = call float @__ocml_fabs_f32(float %202), !dbg !79
  %204 = extractelement <4 x float> %174, i32 2, !dbg !80
  %205 = fsub float %204, %.unpack208.unpack222, !dbg !80
  %206 = fmul float %.unpack210.unpack225, %205, !dbg !80
  %207 = extractelement <4 x float> %174, i32 1, !dbg !80
  %208 = fsub float %207, %.unpack208.unpack220, !dbg !80
  %209 = fmul float %.unpack210.unpack227, %208, !dbg !80
  %210 = fsub float %206, %209, !dbg !80
  %211 = fmul float %210, %191, !dbg !80
  %212 = extractelement <4 x float> %174, i32 0, !dbg !80
  %213 = fsub float %212, %.unpack208.unpack, !dbg !80
  %214 = fmul float %.unpack210.unpack227, %213, !dbg !80
  %215 = fmul float %.unpack210.unpack, %205, !dbg !80
  %216 = fsub float %214, %215, !dbg !80
  %217 = fmul float %216, %187, !dbg !80
  %218 = fadd float %211, %217, !dbg !80
  %219 = fmul float %.unpack210.unpack, %208, !dbg !80
  %220 = fmul float %.unpack210.unpack225, %213, !dbg !80
  %221 = fsub float %219, %220, !dbg !80
  %222 = fmul float %221, %184, !dbg !80
  %223 = fadd float %218, %222, !dbg !80
  %224 = bitcast float %223 to i32, !dbg !80
  %225 = bitcast float %202 to i32, !dbg !80
  %226 = and i32 %225, -2147483648, !dbg !80
  %227 = xor i32 %226, %224, !dbg !80
  %228 = bitcast i32 %227 to float, !dbg !80
  %mask = fcmp oge float %228, 0.000000e+00, !dbg !80
  store i1 %mask, i1 addrspace(5)* %mask_9322129, align 1, !dbg !80
  %229 = fmul float %210, %193, !dbg !80
  %230 = fmul float %216, %183, !dbg !80
  %231 = fadd float %229, %230, !dbg !80
  %232 = fmul float %221, %186, !dbg !80
  %233 = fadd float %231, %232, !dbg !80
  %234 = bitcast float %233 to i32, !dbg !80
  %235 = xor i32 %226, %234, !dbg !80
  %236 = bitcast i32 %235 to float, !dbg !80
  %237 = fcmp oge float %236, 0.000000e+00, !dbg !80
  %238 = and i1 %mask, %237, !dbg !80
  %239 = fadd float %228, %236, !dbg !80
  %240 = fcmp ole float %239, %203, !dbg !80
  %241 = and i1 %238, %240, !dbg !80
  store i1 %241, i1 addrspace(5)* %mask_9322129, align 1, !dbg !80
  %242 = xor i1 %241, true, !dbg !80
  %243 = call i1 @llvm.expect.i1(i1 %242, i1 true), !dbg !81
  %bc = bitcast <4 x float> %182 to <4 x i32>, !dbg !82
  %244 = extractelement <4 x i32> %bc, i32 3, !dbg !82
  br i1 %243, label %_cont92, label %expr_false82, !dbg !82

expr_false82:                                     ; preds = %while_head77
  %245 = load i1, i1 addrspace(5)* %mask_9322129, align 1, !dbg !83
  %246 = fcmp une float %203, 0.000000e+00, !dbg !83
  %247 = and i1 %245, %246, !dbg !83
  store i1 %247, i1 addrspace(5)* %mask_9322129, align 1, !dbg !83
  %248 = fmul float %203, %.unpack216, !dbg !83
  %249 = fmul float %213, %189, !dbg !83
  %250 = fmul float %208, %195, !dbg !83
  %251 = fadd float %249, %250, !dbg !83
  %252 = fmul float %205, %200, !dbg !83
  %253 = fadd float %251, %252, !dbg !83
  %254 = bitcast float %253 to i32, !dbg !83
  %255 = xor i32 %226, %254, !dbg !83
  %256 = bitcast i32 %255 to float, !dbg !83
  %257 = fcmp ole float %248, %256, !dbg !83
  %258 = and i1 %247, %257, !dbg !83
  %259 = fmul float %203, %.unpack218, !dbg !83
  %260 = fcmp oge float %259, %256, !dbg !83
  %261 = and i1 %258, %260, !dbg !83
  store i1 %261, i1 addrspace(5)* %mask_9322129, align 1, !dbg !83
  %262 = xor i1 %261, true, !dbg !83
  %263 = call i1 @llvm.expect.i1(i1 %262, i1 true), !dbg !84
  br i1 %263, label %_cont92, label %expr_false87, !dbg !85

expr_false87:                                     ; preds = %expr_false82
  %264 = load i1, i1 addrspace(5)* %mask_9322129, align 1, !dbg !86
  br i1 %264, label %expr_true89, label %_cont92, !dbg !86

expr_true89:                                      ; preds = %expr_false87
  %inv_det = fdiv float 1.000000e+00, %203, !dbg !87
  %265 = fmul float %inv_det, %256, !dbg !87
  %266 = fmul float %inv_det, %228, !dbg !87
  %267 = fmul float %inv_det, %236, !dbg !87
  %268 = and i32 %244, 2147483647, !dbg !87
  %bc239 = bitcast <4 x float> %178 to <4 x i32>, !dbg !87
  %269 = extractelement <4 x i32> %bc239, i32 3, !dbg !87
  store float %265, float addrspace(5)* %hit_9321884.repack240, align 4, !dbg !87
  store float %266, float addrspace(5)* %hit_9321884.repack242.repack, align 4, !dbg !87
  store float %267, float addrspace(5)* %hit_9321884.repack242.repack249, align 4, !dbg !87
  store i32 %268, i32 addrspace(5)* %hit_9321884.repack244, align 4, !dbg !87
  store i32 %269, i32 addrspace(5)* %hit_9321884.repack246, align 4, !dbg !87
  store float %265, float addrspace(5)* %54, align 4, !dbg !87
  br label %_cont92, !dbg !87

_cont92:                                          ; preds = %while_head77, %expr_false82, %expr_false87, %expr_true89
  %270 = icmp slt i32 %244, 0, !dbg !74
  br i1 %270, label %expr_true94, label %while_head77, !dbg !74

expr_true94:                                      ; preds = %_cont92
  %271 = load i32, i32 addrspace(5)* %node_9321878, align 4, !dbg !77
  %272 = icmp slt i32 %271, 0, !dbg !77
  br i1 %272, label %expr_true76, label %expr_false75, !dbg !77

expr_false95:                                     ; preds = %expr_false75
  %.elt196 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 0, !dbg !60
  %.unpack197 = load float, float addrspace(5)* %.elt196, align 4, !dbg !60
  %.unpack199.elt = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 1, i32 0, !dbg !60
  %.unpack199.unpack = load float, float addrspace(5)* %.unpack199.elt, align 4, !dbg !60
  %.unpack199.elt204 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 1, i32 1, !dbg !60
  %.unpack199.unpack205 = load float, float addrspace(5)* %.unpack199.elt204, align 4, !dbg !60
  %.elt200 = getelementptr inbounds %4, %4 addrspace(5)* %hit_9321884, i32 0, i32 2, !dbg !60
  %.unpack201 = load i32, i32 addrspace(5)* %.elt200, align 4, !dbg !60
  %273 = sext i32 %4 to i64, !dbg !60
  %274 = getelementptr inbounds [0 x %0], [0 x %0]* %_9321820, i64 0, i64 %273, !dbg !60
  %275 = bitcast %0* %274 to <4 x float>*, !dbg !60
  %276 = insertelement <4 x i32> undef, i32 %.unpack201, i32 0, !dbg !60
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !60
  %278 = insertelement <4 x float> %277, float %.unpack197, i32 1, !dbg !60
  %279 = insertelement <4 x float> %278, float %.unpack199.unpack, i32 2, !dbg !60
  %280 = insertelement <4 x float> %279, float %.unpack199.unpack205, i32 3, !dbg !60
  store <4 x float> %280, <4 x float>* %275, align 16, !dbg !60
  ret void, !dbg !60

expr_true96:                                      ; preds = %lambda_9262316
  ret void, !dbg !54
}

attributes #0 = { nounwind readnone speculatable willreturn }
attributes #1 = { nofree nosync nounwind readnone willreturn }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Impala", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "/home/niklas/repos/anydsl/rodent/build/tools/bench_traversal/./bench_traversal", directory: "")
!3 = !{}
!4 = distinct !DISubprogram(name: "lambda_9275163", linkageName: "lambda_9275163", scope: null, file: !5, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!5 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "\B2\DF\A6a\E4U\00\00\10\107<\E1U\00\00os/anydsl/runtime/platforms/impala")
!6 = !DISubroutineType(types: !3)
!7 = !{i32 64, i32 1, i32 1}
!8 = !DILocation(line: 354, column: 38, scope: !4)
!9 = !DILocation(line: 198, column: 23, scope: !4)
!10 = !DILocation(line: 198, column: 42, scope: !4)
!11 = !DILocation(line: 198, column: 73, scope: !4)
!12 = !DILocation(line: 199, column: 31, scope: !4)
!13 = !DILocation(line: 84, column: 40, scope: !4)
!14 = !DILocation(line: 89, column: 29, scope: !4)
!15 = !DILocation(line: 89, column: 46, scope: !4)
!16 = !DILocation(line: 89, column: 63, scope: !4)
!17 = !DILocation(line: 106, column: 5, scope: !4)
!18 = !DILocation(line: 106, column: 27, scope: !4)
!19 = !DILocation(line: 203, column: 31, scope: !4)
!20 = !DILocation(line: 203, column: 58, scope: !4)
!21 = !DILocation(line: 73, column: 39, scope: !4)
!22 = !DILocation(line: 203, column: 85, scope: !4)
!23 = !DILocation(line: 72, column: 39, scope: !4)
!24 = !DILocation(line: 203, column: 14, scope: !4)
!25 = !DILocation(line: 204, column: 31, scope: !4)
!26 = !DILocation(line: 204, column: 58, scope: !4)
!27 = !DILocation(line: 74, column: 39, scope: !4)
!28 = !DILocation(line: 204, column: 85, scope: !4)
!29 = !DILocation(line: 71, column: 39, scope: !4)
!30 = !DILocation(line: 204, column: 14, scope: !4)
!31 = !DILocation(line: 114, column: 23, scope: !4)
!32 = !DILocation(line: 92, column: 9, scope: !4)
!33 = !DILocation(line: 122, column: 24, scope: !4)
!34 = !DILocation(line: 127, column: 28, scope: !4)
!35 = !DILocation(line: 156, column: 9, scope: !4)
!36 = !DILocation(line: 156, column: 34, scope: !4)
!37 = !DILocation(line: 159, column: 13, scope: !4)
!38 = !DILocation(line: 168, column: 19, scope: !4)
!39 = !DILocation(line: 177, column: 15, scope: !4)
!40 = !DILocation(line: 177, column: 8, scope: !4)
!41 = !DILocation(line: 177, column: 28, scope: !4)
!42 = !DILocation(line: 184, column: 15, scope: !4)
!43 = !DILocation(line: 184, column: 8, scope: !4)
!44 = !DILocation(line: 184, column: 28, scope: !4)
!45 = !DILocation(line: 186, column: 11, scope: !4)
!46 = !DILocation(line: 169, column: 50, scope: !4)
!47 = !DILocation(line: 201, column: 20, scope: !4)
!48 = distinct !DISubprogram(name: "lambda_9262316", linkageName: "lambda_9262316", scope: null, file: !49, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!49 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "\B2Z{a\E4U\00\00\10\107<\E1U\00\00os/anydsl/runtime/platforms/impala")
!50 = !DILocation(line: 354, column: 38, scope: !48)
!51 = !DILocation(line: 198, column: 23, scope: !48)
!52 = !DILocation(line: 198, column: 42, scope: !48)
!53 = !DILocation(line: 198, column: 73, scope: !48)
!54 = !DILocation(line: 199, column: 31, scope: !48)
!55 = !DILocation(line: 84, column: 40, scope: !48)
!56 = !DILocation(line: 89, column: 29, scope: !48)
!57 = !DILocation(line: 89, column: 46, scope: !48)
!58 = !DILocation(line: 89, column: 63, scope: !48)
!59 = !DILocation(line: 106, column: 5, scope: !48)
!60 = !DILocation(line: 106, column: 27, scope: !48)
!61 = !DILocation(line: 203, column: 31, scope: !48)
!62 = !DILocation(line: 203, column: 58, scope: !48)
!63 = !DILocation(line: 73, column: 39, scope: !48)
!64 = !DILocation(line: 203, column: 85, scope: !48)
!65 = !DILocation(line: 72, column: 39, scope: !48)
!66 = !DILocation(line: 203, column: 14, scope: !48)
!67 = !DILocation(line: 204, column: 31, scope: !48)
!68 = !DILocation(line: 204, column: 58, scope: !48)
!69 = !DILocation(line: 74, column: 39, scope: !48)
!70 = !DILocation(line: 204, column: 85, scope: !48)
!71 = !DILocation(line: 71, column: 39, scope: !48)
!72 = !DILocation(line: 204, column: 14, scope: !48)
!73 = !DILocation(line: 114, column: 23, scope: !48)
!74 = !DILocation(line: 92, column: 9, scope: !48)
!75 = !DILocation(line: 122, column: 24, scope: !48)
!76 = !DILocation(line: 127, column: 28, scope: !48)
!77 = !DILocation(line: 156, column: 9, scope: !48)
!78 = !DILocation(line: 156, column: 34, scope: !48)
!79 = !DILocation(line: 159, column: 13, scope: !48)
!80 = !DILocation(line: 168, column: 19, scope: !48)
!81 = !DILocation(line: 177, column: 15, scope: !48)
!82 = !DILocation(line: 177, column: 8, scope: !48)
!83 = !DILocation(line: 177, column: 28, scope: !48)
!84 = !DILocation(line: 184, column: 15, scope: !48)
!85 = !DILocation(line: 184, column: 8, scope: !48)
!86 = !DILocation(line: 184, column: 28, scope: !48)
!87 = !DILocation(line: 186, column: 11, scope: !48)
