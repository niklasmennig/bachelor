; ModuleID = '/home/niklas/repos/anydsl/rodent/build/src/./rodent'
source_filename = "/home/niklas/repos/anydsl/rodent/build/src/./rodent"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

%0 = type { %1, [0 x i32]*, [0 x i32]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x i32]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x i32]*, i32, i32 }
%1 = type { [0 x i32]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]*, [0 x float]* }
%2 = type { %1, [0 x i32]*, [0 x float]*, [0 x float]*, [0 x float]*, i32, i32 }
%3 = type { %4, %5, %5, [0 x i32]*, [0 x i32]*, [0 x float]*, i32, [0 x float]*, [0 x float]*, [0 x float]*, [0 x i32]* }
%4 = type { i32, i32 }
%5 = type { float, float }
%6 = type { float, float, float }
%7 = type { %3, %3, %3, %3, %3, i1, i1 }
%8 = type { i32, %9, float, i32 }
%9 = type { float, float, float }
%10 = type { %5, float }
%11 = type { %6, %6, float }
%12 = type { [12 x float], [2 x i32], [2 x i32] }
%13 = type { [3 x float], i32, [3 x float], i32, [3 x float], i32 }
%14 = type { float, %5, i32, i32 }
%15 = type { %6, %6, %6, %6, float, float }
%16 = type { %9, float, float }

define amdgpu_kernel void @lambda_4083528([0 x i32]* %_4451604, %0 %_4451605, %0 %_4451606) local_unnamed_addr !dbg !4 !reqd_work_group_size !7 {
lambda_4083528:
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !8
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !9
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !10
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !9
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !9
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !9
  %6 = extractvalue %0 %_4451606, 12, !dbg !11
  %7 = zext i16 %5 to i32, !dbg !11
  %8 = mul nsw i32 %1, %7, !dbg !11
  %9 = add nsw i32 %0, %8, !dbg !11
  %.not = icmp sgt i32 %6, %9, !dbg !11
  br i1 %.not, label %expr_false, label %expr_true, !dbg !11

expr_false:                                       ; preds = %lambda_4083528
  %10 = extractvalue %0 %_4451606, 1, !dbg !12
  %11 = sext i32 %9 to i64, !dbg !12
  %12 = getelementptr inbounds [0 x i32], [0 x i32]* %10, i64 0, i64 %11, !dbg !12
  %13 = load i32, i32* %12, align 4, !dbg !12
  %14 = sext i32 %13 to i64, !dbg !12
  %15 = getelementptr inbounds [0 x i32], [0 x i32]* %_4451604, i64 0, i64 %14, !dbg !12
  %16 = addrspacecast i32* %15 to i32 addrspace(1)*, !dbg !12
  %17 = atomicrmw add i32 addrspace(1)* %16, i32 1 syncscope("agent") monotonic, !dbg !12
  %18 = extractvalue %0 %_4451606, 0, !dbg !13
  %19 = extractvalue %1 %18, 0, !dbg !13
  %20 = sext i32 %9 to i64, !dbg !13
  %21 = getelementptr inbounds [0 x i32], [0 x i32]* %19, i64 0, i64 %20, !dbg !13
  %22 = load i32, i32* %21, align 4, !dbg !13
  %23 = extractvalue %0 %_4451605, 0, !dbg !13
  %24 = extractvalue %1 %23, 0, !dbg !13
  %25 = sext i32 %17 to i64, !dbg !13
  %26 = getelementptr inbounds [0 x i32], [0 x i32]* %24, i64 0, i64 %25, !dbg !13
  store i32 %22, i32* %26, align 4, !dbg !13
  %27 = extractvalue %1 %18, 1, !dbg !13
  %28 = sext i32 %9 to i64, !dbg !13
  %29 = getelementptr inbounds [0 x float], [0 x float]* %27, i64 0, i64 %28, !dbg !13
  %30 = load float, float* %29, align 4, !dbg !13
  %31 = extractvalue %1 %23, 1, !dbg !13
  %32 = sext i32 %17 to i64, !dbg !13
  %33 = getelementptr inbounds [0 x float], [0 x float]* %31, i64 0, i64 %32, !dbg !13
  store float %30, float* %33, align 4, !dbg !13
  %34 = extractvalue %1 %18, 2, !dbg !13
  %35 = sext i32 %9 to i64, !dbg !13
  %36 = getelementptr inbounds [0 x float], [0 x float]* %34, i64 0, i64 %35, !dbg !13
  %37 = load float, float* %36, align 4, !dbg !13
  %38 = extractvalue %1 %23, 2, !dbg !13
  %39 = sext i32 %17 to i64, !dbg !13
  %40 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %39, !dbg !13
  store float %37, float* %40, align 4, !dbg !13
  %41 = extractvalue %1 %18, 3, !dbg !13
  %42 = sext i32 %9 to i64, !dbg !13
  %43 = getelementptr inbounds [0 x float], [0 x float]* %41, i64 0, i64 %42, !dbg !13
  %44 = load float, float* %43, align 4, !dbg !13
  %45 = extractvalue %1 %23, 3, !dbg !13
  %46 = sext i32 %17 to i64, !dbg !13
  %47 = getelementptr inbounds [0 x float], [0 x float]* %45, i64 0, i64 %46, !dbg !13
  store float %44, float* %47, align 4, !dbg !13
  %48 = extractvalue %1 %18, 4, !dbg !13
  %49 = sext i32 %9 to i64, !dbg !13
  %50 = getelementptr inbounds [0 x float], [0 x float]* %48, i64 0, i64 %49, !dbg !13
  %51 = load float, float* %50, align 4, !dbg !13
  %52 = extractvalue %1 %23, 4, !dbg !13
  %53 = sext i32 %17 to i64, !dbg !13
  %54 = getelementptr inbounds [0 x float], [0 x float]* %52, i64 0, i64 %53, !dbg !13
  store float %51, float* %54, align 4, !dbg !13
  %55 = extractvalue %1 %18, 5, !dbg !13
  %56 = sext i32 %9 to i64, !dbg !13
  %57 = getelementptr inbounds [0 x float], [0 x float]* %55, i64 0, i64 %56, !dbg !13
  %58 = load float, float* %57, align 4, !dbg !13
  %59 = extractvalue %1 %23, 5, !dbg !13
  %60 = sext i32 %17 to i64, !dbg !13
  %61 = getelementptr inbounds [0 x float], [0 x float]* %59, i64 0, i64 %60, !dbg !13
  store float %58, float* %61, align 4, !dbg !13
  %62 = extractvalue %1 %18, 6, !dbg !13
  %63 = sext i32 %9 to i64, !dbg !13
  %64 = getelementptr inbounds [0 x float], [0 x float]* %62, i64 0, i64 %63, !dbg !13
  %65 = load float, float* %64, align 4, !dbg !13
  %66 = extractvalue %1 %23, 6, !dbg !13
  %67 = sext i32 %17 to i64, !dbg !13
  %68 = getelementptr inbounds [0 x float], [0 x float]* %66, i64 0, i64 %67, !dbg !13
  store float %65, float* %68, align 4, !dbg !13
  %69 = extractvalue %1 %18, 7, !dbg !13
  %70 = sext i32 %9 to i64, !dbg !13
  %71 = getelementptr inbounds [0 x float], [0 x float]* %69, i64 0, i64 %70, !dbg !13
  %72 = load float, float* %71, align 4, !dbg !13
  %73 = extractvalue %1 %23, 7, !dbg !13
  %74 = sext i32 %17 to i64, !dbg !13
  %75 = getelementptr inbounds [0 x float], [0 x float]* %73, i64 0, i64 %74, !dbg !13
  store float %72, float* %75, align 4, !dbg !13
  %76 = extractvalue %1 %18, 8, !dbg !13
  %77 = sext i32 %9 to i64, !dbg !13
  %78 = getelementptr inbounds [0 x float], [0 x float]* %76, i64 0, i64 %77, !dbg !13
  %79 = load float, float* %78, align 4, !dbg !13
  %80 = extractvalue %1 %23, 8, !dbg !13
  %81 = sext i32 %17 to i64, !dbg !13
  %82 = getelementptr inbounds [0 x float], [0 x float]* %80, i64 0, i64 %81, !dbg !13
  store float %79, float* %82, align 4, !dbg !13
  %83 = load i32, i32* %12, align 4, !dbg !13
  %84 = extractvalue %0 %_4451605, 1, !dbg !13
  %85 = sext i32 %17 to i64, !dbg !13
  %86 = getelementptr inbounds [0 x i32], [0 x i32]* %84, i64 0, i64 %85, !dbg !13
  store i32 %83, i32* %86, align 4, !dbg !13
  %87 = extractvalue %0 %_4451606, 2, !dbg !13
  %88 = sext i32 %9 to i64, !dbg !13
  %89 = getelementptr inbounds [0 x i32], [0 x i32]* %87, i64 0, i64 %88, !dbg !13
  %90 = load i32, i32* %89, align 4, !dbg !13
  %91 = extractvalue %0 %_4451605, 2, !dbg !13
  %92 = sext i32 %17 to i64, !dbg !13
  %93 = getelementptr inbounds [0 x i32], [0 x i32]* %91, i64 0, i64 %92, !dbg !13
  store i32 %90, i32* %93, align 4, !dbg !13
  %94 = extractvalue %0 %_4451606, 3, !dbg !13
  %95 = sext i32 %9 to i64, !dbg !13
  %96 = getelementptr inbounds [0 x float], [0 x float]* %94, i64 0, i64 %95, !dbg !13
  %97 = load float, float* %96, align 4, !dbg !13
  %98 = extractvalue %0 %_4451605, 3, !dbg !13
  %99 = sext i32 %17 to i64, !dbg !13
  %100 = getelementptr inbounds [0 x float], [0 x float]* %98, i64 0, i64 %99, !dbg !13
  store float %97, float* %100, align 4, !dbg !13
  %101 = extractvalue %0 %_4451606, 4, !dbg !13
  %102 = sext i32 %9 to i64, !dbg !13
  %103 = getelementptr inbounds [0 x float], [0 x float]* %101, i64 0, i64 %102, !dbg !13
  %104 = load float, float* %103, align 4, !dbg !13
  %105 = extractvalue %0 %_4451605, 4, !dbg !13
  %106 = sext i32 %17 to i64, !dbg !13
  %107 = getelementptr inbounds [0 x float], [0 x float]* %105, i64 0, i64 %106, !dbg !13
  store float %104, float* %107, align 4, !dbg !13
  %108 = extractvalue %0 %_4451606, 5, !dbg !13
  %109 = sext i32 %9 to i64, !dbg !13
  %110 = getelementptr inbounds [0 x float], [0 x float]* %108, i64 0, i64 %109, !dbg !13
  %111 = load float, float* %110, align 4, !dbg !13
  %112 = extractvalue %0 %_4451605, 5, !dbg !13
  %113 = sext i32 %17 to i64, !dbg !13
  %114 = getelementptr inbounds [0 x float], [0 x float]* %112, i64 0, i64 %113, !dbg !13
  store float %111, float* %114, align 4, !dbg !13
  %115 = extractvalue %0 %_4451606, 6, !dbg !13
  %116 = sext i32 %9 to i64, !dbg !13
  %117 = getelementptr inbounds [0 x i32], [0 x i32]* %115, i64 0, i64 %116, !dbg !13
  %118 = load i32, i32* %117, align 4, !dbg !13
  %119 = extractvalue %0 %_4451605, 6, !dbg !13
  %120 = sext i32 %17 to i64, !dbg !13
  %121 = getelementptr inbounds [0 x i32], [0 x i32]* %119, i64 0, i64 %120, !dbg !13
  store i32 %118, i32* %121, align 4, !dbg !13
  %122 = extractvalue %0 %_4451606, 7, !dbg !13
  %123 = sext i32 %9 to i64, !dbg !13
  %124 = getelementptr inbounds [0 x float], [0 x float]* %122, i64 0, i64 %123, !dbg !13
  %125 = load float, float* %124, align 4, !dbg !13
  %126 = extractvalue %0 %_4451605, 7, !dbg !13
  %127 = sext i32 %17 to i64, !dbg !13
  %128 = getelementptr inbounds [0 x float], [0 x float]* %126, i64 0, i64 %127, !dbg !13
  store float %125, float* %128, align 4, !dbg !13
  %129 = extractvalue %0 %_4451606, 8, !dbg !13
  %130 = sext i32 %9 to i64, !dbg !13
  %131 = getelementptr inbounds [0 x float], [0 x float]* %129, i64 0, i64 %130, !dbg !13
  %132 = load float, float* %131, align 4, !dbg !13
  %133 = extractvalue %0 %_4451605, 8, !dbg !13
  %134 = sext i32 %17 to i64, !dbg !13
  %135 = getelementptr inbounds [0 x float], [0 x float]* %133, i64 0, i64 %134, !dbg !13
  store float %132, float* %135, align 4, !dbg !13
  %136 = extractvalue %0 %_4451606, 9, !dbg !13
  %137 = sext i32 %9 to i64, !dbg !13
  %138 = getelementptr inbounds [0 x float], [0 x float]* %136, i64 0, i64 %137, !dbg !13
  %139 = load float, float* %138, align 4, !dbg !13
  %140 = extractvalue %0 %_4451605, 9, !dbg !13
  %141 = sext i32 %17 to i64, !dbg !13
  %142 = getelementptr inbounds [0 x float], [0 x float]* %140, i64 0, i64 %141, !dbg !13
  store float %139, float* %142, align 4, !dbg !13
  %143 = extractvalue %0 %_4451606, 10, !dbg !13
  %144 = sext i32 %9 to i64, !dbg !13
  %145 = getelementptr inbounds [0 x float], [0 x float]* %143, i64 0, i64 %144, !dbg !13
  %146 = load float, float* %145, align 4, !dbg !13
  %147 = extractvalue %0 %_4451605, 10, !dbg !13
  %148 = sext i32 %17 to i64, !dbg !13
  %149 = getelementptr inbounds [0 x float], [0 x float]* %147, i64 0, i64 %148, !dbg !13
  store float %146, float* %149, align 4, !dbg !13
  %150 = extractvalue %0 %_4451606, 11, !dbg !13
  %151 = sext i32 %9 to i64, !dbg !13
  %152 = getelementptr inbounds [0 x i32], [0 x i32]* %150, i64 0, i64 %151, !dbg !13
  %153 = load i32, i32* %152, align 4, !dbg !13
  %154 = extractvalue %0 %_4451605, 11, !dbg !13
  %155 = sext i32 %17 to i64, !dbg !13
  %156 = getelementptr inbounds [0 x i32], [0 x i32]* %154, i64 0, i64 %155, !dbg !13
  store i32 %153, i32* %156, align 4, !dbg !13
  ret void, !dbg !13

expr_true:                                        ; preds = %lambda_4083528
  ret void, !dbg !12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #0

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #0

define amdgpu_kernel void @lambda_4087297(%3 %_4454561, [0 x <4 x float>] addrspace(1)* %_4454562, %3 %_4454563, [0 x <4 x float>] addrspace(1)* %_4454564, [0 x <4 x float>] addrspace(1)* %_4454565, %0 %_4454566, i32 %_4454567, i32 %_4454568, %2 %_4454569, [0 x <4 x float>] addrspace(1)* %_4454570, [0 x float] addrspace(1)* %_4454571, [0 x <4 x i32>] addrspace(1)* %_4454572, %3 %_4454573, %3 %_4454574, %3 %_4454575, [0 x <4 x float>] addrspace(1)* %_4454576) local_unnamed_addr !dbg !14 !reqd_work_group_size !7 {
lambda_4087297:
  %tangent_4455215 = alloca %6, align 4, addrspace(5)
  %dim_param_4455538 = alloca float, align 4, addrspace(5)
  %dim_param_4456752 = alloca float, align 4, addrspace(5)
  %dim_param_4457687 = alloca float, align 4, addrspace(5)
  %dim_param_4457894 = alloca float, align 4, addrspace(5)
  %dim_param_4458828 = alloca float, align 4, addrspace(5)
  %dim_4458788 = alloca i32, align 4, addrspace(5)
  %slice_offset_4458918 = alloca i32, align 4, addrspace(5)
  %param_weight_4458810 = alloca [6 x float], align 4, addrspace(5)
  %dim_4457854 = alloca i32, align 4, addrspace(5)
  %slice_offset_4457984 = alloca i32, align 4, addrspace(5)
  %param_weight_4457876 = alloca [6 x float], align 4, addrspace(5)
  %dim_4457645 = alloca i32, align 4, addrspace(5)
  %slice_offset_4457780 = alloca i32, align 4, addrspace(5)
  %param_weight_4457669 = alloca [6 x float], align 4, addrspace(5)
  %fr_4457822 = alloca %6, align 4, addrspace(5)
  %phi_m_4457585 = alloca float, align 4, addrspace(5)
  %first_4457146 = alloca i32, align 4, addrspace(5)
  %size_4457138 = alloca i32, align 4, addrspace(5)
  %first_4456878 = alloca i32, align 4, addrspace(5)
  %size_4456870 = alloca i32, align 4, addrspace(5)
  %offset_4456898 = alloca i32, align 4, addrspace(5)
  %dim_4456710 = alloca i32, align 4, addrspace(5)
  %slice_offset_4456845 = alloca i32, align 4, addrspace(5)
  %param_weight_4456734 = alloca [4 x float], align 4, addrspace(5)
  %n_sample_4456900 = alloca %5, align 4, addrspace(5)
  %first_4456285 = alloca i32, align 4, addrspace(5)
  %size_4456097 = alloca i32, align 4, addrspace(5)
  %first_4455836 = alloca i32, align 4, addrspace(5)
  %size_4455733 = alloca i32, align 4, addrspace(5)
  %offset_4455856 = alloca i32, align 4, addrspace(5)
  %dim_4455496 = alloca i32, align 4, addrspace(5)
  %slice_offset_4455708 = alloca i32, align 4, addrspace(5)
  %param_weight_4455520 = alloca [4 x float], align 4, addrspace(5)
  %n_sample_4455858 = alloca %5, align 4, addrspace(5)
  %sample_4457824 = alloca %5, align 4, addrspace(5)
  %_4455410 = alloca %7, align 8, addrspace(5)
  %tangent_4455174 = alloca %6, align 4, addrspace(5)
  %dim_param_4462259 = alloca float, align 4, addrspace(5)
  %dim_param_4462457 = alloca float, align 4, addrspace(5)
  %dim_param_4462647 = alloca float, align 4, addrspace(5)
  %dim_4462607 = alloca i32, align 4, addrspace(5)
  %slice_offset_4462737 = alloca i32, align 4, addrspace(5)
  %param_weight_4462629 = alloca [6 x float], align 4, addrspace(5)
  %dim_4462417 = alloca i32, align 4, addrspace(5)
  %slice_offset_4462547 = alloca i32, align 4, addrspace(5)
  %param_weight_4462439 = alloca [6 x float], align 4, addrspace(5)
  %dim_4462217 = alloca i32, align 4, addrspace(5)
  %slice_offset_4462352 = alloca i32, align 4, addrspace(5)
  %param_weight_4462241 = alloca [6 x float], align 4, addrspace(5)
  %fr_4463343 = alloca %6, align 4, addrspace(5)
  %u_wm_4461174 = alloca %5, align 4, addrspace(5)
  %_4461048 = alloca %7, align 8, addrspace(5)
  %tangent_4455071 = alloca %6, align 4, addrspace(5)
  %tangent_4455049 = alloca %6, align 4, addrspace(5)
  %dim_param_4465486 = alloca float, align 4, addrspace(5)
  %dim_4465444 = alloca i32, align 4, addrspace(5)
  %slice_offset_4465579 = alloca i32, align 4, addrspace(5)
  %param_weight_4465468 = alloca [4 x float], align 4, addrspace(5)
  %u_wm_4465411 = alloca %5, align 4, addrspace(5)
  %_4465290 = alloca %7, align 8, addrspace(5)
  %tangent_4455012 = alloca %6, align 4, addrspace(5)
  %tangent_4454981 = alloca %6, align 4, addrspace(5)
  %v_4454834 = alloca float, align 4, addrspace(5)
  %u_4454837 = alloca float, align 4, addrspace(5)
  %state_4454625 = alloca %8, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !16
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !17
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !18
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !17
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !17
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !17
  %6 = zext i16 %5 to i32, !dbg !19
  %7 = mul nsw i32 %1, %6, !dbg !19
  %8 = add nsw i32 %0, %7, !dbg !19
  %ray_id = add nsw i32 %8, %_4454568, !dbg !19
  %.not = icmp slt i32 %ray_id, %_4454567, !dbg !19
  br i1 %.not, label %expr_false, label %expr_true551, !dbg !19

expr_false:                                       ; preds = %lambda_4087297
  %9 = extractvalue %0 %_4454566, 6, !dbg !20
  %10 = sext i32 %ray_id to i64, !dbg !20
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %9, i64 0, i64 %10, !dbg !20
  %12 = load i32, i32* %11, align 4, !dbg !20
  %13 = extractvalue %0 %_4454566, 8, !dbg !20
  %14 = sext i32 %ray_id to i64, !dbg !20
  %15 = getelementptr inbounds [0 x float], [0 x float]* %13, i64 0, i64 %14, !dbg !20
  %16 = load float, float* %15, align 4, !dbg !20
  %17 = extractvalue %0 %_4454566, 9, !dbg !20
  %18 = sext i32 %ray_id to i64, !dbg !20
  %19 = getelementptr inbounds [0 x float], [0 x float]* %17, i64 0, i64 %18, !dbg !20
  %20 = load float, float* %19, align 4, !dbg !20
  %21 = extractvalue %0 %_4454566, 10, !dbg !20
  %22 = sext i32 %ray_id to i64, !dbg !20
  %23 = getelementptr inbounds [0 x float], [0 x float]* %21, i64 0, i64 %22, !dbg !20
  %24 = load float, float* %23, align 4, !dbg !20
  %25 = extractvalue %0 %_4454566, 7, !dbg !20
  %26 = sext i32 %ray_id to i64, !dbg !20
  %27 = getelementptr inbounds [0 x float], [0 x float]* %25, i64 0, i64 %26, !dbg !20
  %28 = load float, float* %27, align 4, !dbg !20
  %29 = extractvalue %0 %_4454566, 11, !dbg !20
  %30 = sext i32 %ray_id to i64, !dbg !20
  %31 = getelementptr inbounds [0 x i32], [0 x i32]* %29, i64 0, i64 %30, !dbg !20
  %32 = load i32, i32* %31, align 4, !dbg !20
  %state_4454625.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 0, !dbg !20
  store i32 %12, i32 addrspace(5)* %state_4454625.repack, align 4, !dbg !20
  %state_4454625.repack807.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 0, !dbg !20
  store float %16, float addrspace(5)* %state_4454625.repack807.repack, align 4, !dbg !20
  %state_4454625.repack807.repack813 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 1, !dbg !20
  store float %20, float addrspace(5)* %state_4454625.repack807.repack813, align 4, !dbg !20
  %state_4454625.repack807.repack815 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 2, !dbg !20
  store float %24, float addrspace(5)* %state_4454625.repack807.repack815, align 4, !dbg !20
  %state_4454625.repack809 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 2, !dbg !20
  store float %28, float addrspace(5)* %state_4454625.repack809, align 4, !dbg !20
  %state_4454625.repack811 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 3, !dbg !20
  store i32 %32, i32 addrspace(5)* %state_4454625.repack811, align 4, !dbg !20
  %33 = extractvalue %0 %_4454566, 0, !dbg !20
  %34 = extractvalue %1 %33, 1, !dbg !20
  %35 = sext i32 %ray_id to i64, !dbg !20
  %36 = getelementptr inbounds [0 x float], [0 x float]* %34, i64 0, i64 %35, !dbg !20
  %37 = load float, float* %36, align 4, !dbg !20
  %38 = extractvalue %1 %33, 2, !dbg !20
  %39 = sext i32 %ray_id to i64, !dbg !20
  %40 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %39, !dbg !20
  %41 = load float, float* %40, align 4, !dbg !20
  %42 = extractvalue %1 %33, 3, !dbg !20
  %43 = sext i32 %ray_id to i64, !dbg !20
  %44 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %43, !dbg !20
  %45 = load float, float* %44, align 4, !dbg !20
  %46 = extractvalue %1 %33, 4, !dbg !20
  %47 = sext i32 %ray_id to i64, !dbg !20
  %48 = getelementptr inbounds [0 x float], [0 x float]* %46, i64 0, i64 %47, !dbg !20
  %49 = load float, float* %48, align 4, !dbg !20
  %50 = fneg float %49, !dbg !20
  %51 = extractvalue %1 %33, 5, !dbg !20
  %52 = sext i32 %ray_id to i64, !dbg !20
  %53 = getelementptr inbounds [0 x float], [0 x float]* %51, i64 0, i64 %52, !dbg !20
  %54 = load float, float* %53, align 4, !dbg !20
  %55 = extractvalue %1 %33, 6, !dbg !20
  %56 = sext i32 %ray_id to i64, !dbg !20
  %57 = getelementptr inbounds [0 x float], [0 x float]* %55, i64 0, i64 %56, !dbg !20
  %58 = load float, float* %57, align 4, !dbg !20
  %59 = fneg float %54, !dbg !21
  %60 = fneg float %58, !dbg !22
  %61 = extractvalue %1 %33, 0, !dbg !23
  %62 = sext i32 %ray_id to i64, !dbg !23
  %63 = getelementptr inbounds [0 x i32], [0 x i32]* %61, i64 0, i64 %62, !dbg !23
  %64 = load i32, i32* %63, align 4, !dbg !23
  %65 = extractvalue %0 %_4454566, 2, !dbg !23
  %66 = sext i32 %ray_id to i64, !dbg !23
  %67 = getelementptr inbounds [0 x i32], [0 x i32]* %65, i64 0, i64 %66, !dbg !23
  %68 = load i32, i32* %67, align 4, !dbg !23
  %69 = extractvalue %0 %_4454566, 3, !dbg !23
  %70 = sext i32 %ray_id to i64, !dbg !23
  %71 = getelementptr inbounds [0 x float], [0 x float]* %69, i64 0, i64 %70, !dbg !23
  %72 = load float, float* %71, align 4, !dbg !23
  %73 = extractvalue %0 %_4454566, 4, !dbg !23
  %74 = sext i32 %ray_id to i64, !dbg !23
  %75 = getelementptr inbounds [0 x float], [0 x float]* %73, i64 0, i64 %74, !dbg !23
  %76 = load float, float* %75, align 4, !dbg !23
  %77 = extractvalue %0 %_4454566, 5, !dbg !23
  %78 = sext i32 %ray_id to i64, !dbg !23
  %79 = getelementptr inbounds [0 x float], [0 x float]* %77, i64 0, i64 %78, !dbg !23
  %80 = load float, float* %79, align 4, !dbg !23
  %81 = sext i32 %68 to i64, !dbg !23
  %82 = getelementptr inbounds [0 x <4 x i32>], [0 x <4 x i32>] addrspace(1)* %_4454572, i64 0, i64 %81, !dbg !23
  %83 = load <4 x i32>, <4 x i32> addrspace(1)* %82, align 16, !dbg !23
  %84 = sext i32 %68 to i64, !dbg !23
  %85 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454562, i64 0, i64 %84, !dbg !23
  %86 = load <4 x float>, <4 x float> addrspace(1)* %85, align 16, !dbg !23
  %87 = extractelement <4 x i32> %83, i32 0, !dbg !23
  %88 = sext i32 %87 to i64, !dbg !23
  %89 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454576, i64 0, i64 %88, !dbg !23
  %90 = load <4 x float>, <4 x float> addrspace(1)* %89, align 16, !dbg !23
  %91 = extractelement <4 x i32> %83, i32 1, !dbg !23
  %92 = sext i32 %91 to i64, !dbg !23
  %93 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454576, i64 0, i64 %92, !dbg !23
  %94 = load <4 x float>, <4 x float> addrspace(1)* %93, align 16, !dbg !23
  %95 = extractelement <4 x i32> %83, i32 2, !dbg !23
  %96 = sext i32 %95 to i64, !dbg !23
  %97 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454576, i64 0, i64 %96, !dbg !23
  %98 = load <4 x float>, <4 x float> addrspace(1)* %97, align 16, !dbg !23
  %99 = fsub float 1.000000e+00, %76, !dbg !23
  %100 = fsub float %99, %80, !dbg !23
  %101 = extractelement <4 x float> %90, i32 0, !dbg !23
  %102 = fmul float %100, %101, !dbg !23
  %103 = extractelement <4 x float> %94, i32 0, !dbg !23
  %104 = fmul float %76, %103, !dbg !23
  %105 = fadd float %102, %104, !dbg !23
  %106 = extractelement <4 x float> %98, i32 0, !dbg !23
  %107 = fmul float %80, %106, !dbg !23
  %108 = fadd float %105, %107, !dbg !23
  %109 = fmul float %108, %108, !dbg !23
  %110 = extractelement <4 x float> %90, i32 1, !dbg !23
  %111 = fmul float %100, %110, !dbg !23
  %112 = extractelement <4 x float> %94, i32 1, !dbg !23
  %113 = fmul float %76, %112, !dbg !23
  %114 = fadd float %111, %113, !dbg !23
  %115 = extractelement <4 x float> %98, i32 1, !dbg !23
  %116 = fmul float %80, %115, !dbg !23
  %117 = fadd float %114, %116, !dbg !23
  %118 = fmul float %117, %117, !dbg !23
  %119 = fadd float %109, %118, !dbg !23
  %120 = extractelement <4 x float> %90, i32 2, !dbg !23
  %121 = fmul float %100, %120, !dbg !23
  %122 = extractelement <4 x float> %94, i32 2, !dbg !23
  %123 = fmul float %76, %122, !dbg !23
  %124 = fadd float %121, %123, !dbg !23
  %125 = extractelement <4 x float> %98, i32 2, !dbg !23
  %126 = fmul float %80, %125, !dbg !23
  %127 = fadd float %124, %126, !dbg !23
  %128 = fmul float %127, %127, !dbg !23
  %129 = fadd float %119, %128, !dbg !23
  %130 = call float @__ocml_sqrt_f32(float %129), !dbg !23
  %131 = extractelement <4 x float> %86, i32 0, !dbg !24
  %132 = fmul float %49, %131, !dbg !24
  %133 = extractelement <4 x float> %86, i32 1, !dbg !24
  %134 = fmul float %54, %133, !dbg !24
  %135 = fadd float %132, %134, !dbg !24
  %136 = extractelement <4 x float> %86, i32 2, !dbg !24
  %137 = fmul float %58, %136, !dbg !24
  %138 = fadd float %135, %137, !dbg !24
  %is_entering = fcmp ugt float %138, 0.000000e+00, !dbg !24
  %139 = fneg float %131, !dbg !24
  %140 = fneg float %133, !dbg !24
  %141 = fneg float %136, !dbg !24
  %.pn821 = select i1 %is_entering, float %139, float %131, !dbg !24
  %.pn819 = select i1 %is_entering, float %140, float %133, !dbg !24
  %.pn817 = select i1 %is_entering, float %141, float %136, !dbg !24
  %142 = fdiv float 1.000000e+00, %130, !dbg !25
  %143 = fmul float %108, %142, !dbg !25
  %144 = fmul float %49, %143, !dbg !25
  %145 = fmul float %117, %142, !dbg !25
  %146 = fmul float %54, %145, !dbg !25
  %147 = fadd float %144, %146, !dbg !25
  %148 = fmul float %127, %142, !dbg !25
  %149 = fmul float %58, %148, !dbg !25
  %150 = fadd float %147, %149, !dbg !25
  %151 = fcmp ugt float %150, 0.000000e+00, !dbg !25
  %152 = fneg float %143, !dbg !25
  %153 = fneg float %145, !dbg !25
  %154 = fneg float %148, !dbg !25
  %.pn827 = select i1 %151, float %152, float %143, !dbg !25
  %.pn825 = select i1 %151, float %153, float %145, !dbg !25
  %.pn823 = select i1 %151, float %154, float %148, !dbg !25
  %155 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 0, !dbg !26
  %156 = load i32, i32 addrspace(5)* %155, align 4, !dbg !26
  %157 = icmp eq i32 %156, 0, !dbg !26
  %158 = select i1 %157, i32 1, i32 %156, !dbg !26
  %159 = shl i32 %158, 13, !dbg !26
  %160 = xor i32 %158, %159, !dbg !26
  %161 = lshr i32 %160, 17, !dbg !26
  %162 = xor i32 %160, %161, !dbg !26
  %163 = shl i32 %162, 5, !dbg !26
  %164 = xor i32 %162, %163, !dbg !26
  %165 = icmp eq i32 %164, 0, !dbg !26
  %166 = select i1 %165, i32 1, i32 %164, !dbg !26
  %167 = shl i32 %166, 13, !dbg !26
  %168 = xor i32 %166, %167, !dbg !26
  %169 = lshr i32 %168, 17, !dbg !26
  %170 = xor i32 %168, %169, !dbg !26
  %171 = shl i32 %170, 5, !dbg !26
  %172 = xor i32 %170, %171, !dbg !26
  %173 = and i32 %172, 8388607, !dbg !26
  %174 = or i32 %173, 1065353216, !dbg !26
  %175 = bitcast i32 %174 to float, !dbg !26
  %176 = fadd float %175, -1.000000e+00, !dbg !26
  %177 = icmp eq i32 %172, 0, !dbg !26
  %178 = select i1 %177, i32 1, i32 %172, !dbg !26
  %179 = shl i32 %178, 13, !dbg !26
  %180 = xor i32 %178, %179, !dbg !26
  %181 = lshr i32 %180, 17, !dbg !26
  %182 = xor i32 %180, %181, !dbg !26
  %183 = shl i32 %182, 5, !dbg !26
  %184 = xor i32 %182, %183, !dbg !26
  %185 = and i32 %184, 8388607, !dbg !26
  %186 = or i32 %185, 1065353216, !dbg !26
  %187 = bitcast i32 %186 to float, !dbg !26
  %188 = fadd float %187, -1.000000e+00, !dbg !26
  %189 = fadd float %176, %188, !dbg !26
  %190 = fcmp ogt float %189, 1.000000e+00, !dbg !26
  store i32 %164, i32 addrspace(5)* %155, align 4, !dbg !26
  %191 = and i32 %162, 1, !dbg !26
  %192 = mul nuw nsw i32 %191, 3, !dbg !26
  %193 = zext i32 %192 to i64, !dbg !26
  %194 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454564, i64 0, i64 %193, !dbg !26
  %195 = load <4 x float>, <4 x float> addrspace(1)* %194, align 16, !dbg !26
  %196 = add nuw nsw i32 %192, 1, !dbg !26
  %197 = zext i32 %196 to i64, !dbg !26
  %198 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454564, i64 0, i64 %197, !dbg !26
  %199 = load <4 x float>, <4 x float> addrspace(1)* %198, align 16, !dbg !26
  %200 = add nuw nsw i32 %192, 2, !dbg !26
  %201 = zext i32 %200 to i64, !dbg !26
  %202 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454564, i64 0, i64 %201, !dbg !26
  %203 = load <4 x float>, <4 x float> addrspace(1)* %202, align 16, !dbg !26
  %204 = zext i32 %191 to i64, !dbg !26
  %205 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454570, i64 0, i64 %204, !dbg !26
  %206 = load <4 x float>, <4 x float> addrspace(1)* %205, align 16, !dbg !26
  %207 = zext i32 %191 to i64, !dbg !26
  %208 = getelementptr inbounds [0 x float], [0 x float] addrspace(1)* %_4454571, i64 0, i64 %207, !dbg !26
  %209 = load float, float addrspace(1)* %208, align 4, !dbg !26
  %210 = zext i32 %191 to i64, !dbg !26
  %211 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4454565, i64 0, i64 %210, !dbg !26
  %212 = load <4 x float>, <4 x float> addrspace(1)* %211, align 16, !dbg !26
  store i32 %184, i32 addrspace(5)* %155, align 4, !dbg !26
  store float %176, float addrspace(5)* %u_4454837, align 4, !dbg !26
  store float %188, float addrspace(5)* %v_4454834, align 4, !dbg !26
  br i1 %190, label %expr_true20, label %if_join21, !dbg !26

expr_true20:                                      ; preds = %expr_false
  %213 = fsub float 1.000000e+00, %176, !dbg !27
  store float %213, float addrspace(5)* %u_4454837, align 4, !dbg !27
  %214 = fsub float 1.000000e+00, %188, !dbg !27
  store float %214, float addrspace(5)* %v_4454834, align 4, !dbg !27
  br label %if_join21, !dbg !27

if_join21:                                        ; preds = %expr_false, %expr_true20
  %215 = load float, float addrspace(5)* %v_4454834, align 4, !dbg !28
  %216 = load float, float addrspace(5)* %u_4454837, align 4, !dbg !28
  %217 = fmul float %49, %72, !dbg !28
  %218 = fadd float %37, %217, !dbg !28
  %219 = extractelement <4 x float> %195, i32 0, !dbg !28
  %220 = fsub float 1.000000e+00, %215, !dbg !28
  %221 = fsub float %220, %216, !dbg !28
  %222 = fmul float %219, %221, !dbg !28
  %223 = extractelement <4 x float> %199, i32 0, !dbg !28
  %224 = fmul float %223, %216, !dbg !28
  %225 = fadd float %222, %224, !dbg !28
  %226 = extractelement <4 x float> %203, i32 0, !dbg !28
  %227 = fmul float %226, %215, !dbg !28
  %228 = fadd float %225, %227, !dbg !28
  %229 = fsub float %218, %228, !dbg !28
  %230 = fmul float %229, %229, !dbg !28
  %231 = fmul float %54, %72, !dbg !28
  %232 = fadd float %41, %231, !dbg !28
  %233 = extractelement <4 x float> %195, i32 1, !dbg !28
  %234 = fmul float %233, %221, !dbg !28
  %235 = extractelement <4 x float> %199, i32 1, !dbg !28
  %236 = fmul float %235, %216, !dbg !28
  %237 = fadd float %234, %236, !dbg !28
  %238 = extractelement <4 x float> %203, i32 1, !dbg !28
  %239 = fmul float %238, %215, !dbg !28
  %240 = fadd float %237, %239, !dbg !28
  %241 = fsub float %232, %240, !dbg !28
  %242 = fmul float %241, %241, !dbg !28
  %243 = fadd float %230, %242, !dbg !28
  %244 = fmul float %58, %72, !dbg !28
  %245 = fadd float %45, %244, !dbg !28
  %246 = extractelement <4 x float> %195, i32 2, !dbg !28
  %247 = fmul float %246, %221, !dbg !28
  %248 = extractelement <4 x float> %199, i32 2, !dbg !28
  %249 = fmul float %248, %216, !dbg !28
  %250 = fadd float %247, %249, !dbg !28
  %251 = extractelement <4 x float> %203, i32 2, !dbg !28
  %252 = fmul float %251, %215, !dbg !28
  %253 = fadd float %250, %252, !dbg !28
  %254 = fsub float %245, %253, !dbg !28
  %255 = fmul float %254, %254, !dbg !28
  %256 = fadd float %243, %255, !dbg !28
  %257 = call float @__ocml_sqrt_f32(float %256), !dbg !28
  %258 = fcmp ogt float %209, 0.000000e+00, !dbg !29
  br i1 %258, label %expr_true25, label %_cont, !dbg !29

expr_true25:                                      ; preds = %if_join21
  %259 = extractelement <4 x float> %206, i32 0, !dbg !30
  %260 = fmul float %229, %259, !dbg !30
  %261 = extractelement <4 x float> %206, i32 1, !dbg !30
  %262 = fmul float %241, %261, !dbg !30
  %263 = fadd float %260, %262, !dbg !30
  %264 = extractelement <4 x float> %206, i32 2, !dbg !30
  %265 = fmul float %254, %264, !dbg !30
  %266 = fadd float %263, %265, !dbg !30
  %cos = fdiv float %266, %257, !dbg !30
  %267 = fmul float %cos, 0x3FD45F3060000000, !dbg !30
  %268 = fcmp ogt float %267, 0.000000e+00, !dbg !30
  %269 = fcmp ogt float %cos, 0.000000e+00
  %or.cond = and i1 %268, %269, !dbg !30
  br i1 %or.cond, label %expr_true29, label %_cont, !dbg !30

expr_true29:                                      ; preds = %expr_true25
  %270 = extractelement <4 x float> %212, i32 0, !dbg !31
  %271 = insertvalue %9 undef, float %270, 0, !dbg !31
  %272 = extractelement <4 x float> %212, i32 1, !dbg !31
  %273 = insertvalue %9 %271, float %272, 1, !dbg !31
  %274 = extractelement <4 x float> %212, i32 2, !dbg !31
  %275 = insertvalue %9 %273, float %274, 2, !dbg !31
  br label %_cont, !dbg !31

_cont:                                            ; preds = %if_join21, %expr_true25, %expr_true29
  %.pn835 = phi %9 [ %275, %expr_true29 ], [ zeroinitializer, %expr_true25 ], [ zeroinitializer, %if_join21 ]
  %.pn833 = phi float [ %209, %expr_true29 ], [ 1.000000e+00, %expr_true25 ], [ 1.000000e+00, %if_join21 ]
  %.pn829 = phi float [ %cos, %expr_true29 ], [ 0.000000e+00, %expr_true25 ], [ 0.000000e+00, %if_join21 ]
  %276 = fsub float %228, %218, !dbg !32
  %277 = fmul float %276, %.pn827, !dbg !32
  %278 = fsub float %240, %232, !dbg !32
  %279 = fmul float %278, %.pn825, !dbg !32
  %280 = fadd float %277, %279, !dbg !32
  %281 = fsub float %253, %245, !dbg !32
  %282 = fmul float %281, %.pn823, !dbg !32
  %283 = fadd float %280, %282, !dbg !32
  %284 = fcmp ogt float %283, 0.000000e+00, !dbg !32
  %285 = extractvalue %2 %_4454569, 0, !dbg !32
  %286 = extractvalue %1 %285, 0, !dbg !32
  %287 = sext i32 %ray_id to i64, !dbg !32
  %288 = getelementptr inbounds [0 x i32], [0 x i32]* %286, i64 0, i64 %287, !dbg !32
  %289 = fmul float %.pn825, %.pn825, !dbg !32
  %290 = fmul float %.pn823, %.pn823, !dbg !32
  %291 = fadd float %289, %290, !dbg !32
  %292 = fneg float %.pn825, !dbg !32
  %293 = fmul float %.pn827, %.pn827, !dbg !32
  %294 = fadd float %293, %290, !dbg !32
  %295 = fneg float %.pn823, !dbg !32
  %296 = fmul float %49, %49, !dbg !32
  %297 = fmul float %54, %54, !dbg !32
  %298 = fadd float %296, %297, !dbg !32
  %299 = fmul float %58, %58, !dbg !32
  %300 = fadd float %298, %299, !dbg !32
  %301 = insertvalue %7 undef, %3 %_4454563, 0, !dbg !32
  %302 = insertvalue %7 %301, %3 %_4454574, 1, !dbg !32
  %303 = insertvalue %7 %302, %3 %_4454573, 2, !dbg !32
  %304 = insertvalue %7 %303, %3 %_4454561, 3, !dbg !32
  %305 = insertvalue %7 %304, %3 %_4454575, 4, !dbg !32
  %306 = insertvalue %7 %305, i1 true, 5, !dbg !32
  %307 = insertvalue %7 %306, i1 true, 6, !dbg !32
  %308 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, !dbg !32
  %309 = fcmp ogt float %.pn829, 0.000000e+00
  %or.cond1215 = and i1 %284, %309, !dbg !32
  br i1 %or.cond1215, label %expr_true34, label %break, !dbg !32

expr_true34:                                      ; preds = %_cont
  %310 = fmul float %276, %276, !dbg !33
  %311 = fmul float %278, %278, !dbg !33
  %312 = fadd float %310, %311, !dbg !33
  %313 = fmul float %281, %281, !dbg !33
  %314 = fadd float %312, %313, !dbg !33
  %315 = call float @__ocml_sqrt_f32(float %314), !dbg !33
  %inv_d = fdiv float 1.000000e+00, %315, !dbg !34
  %316 = fmul float %276, %inv_d, !dbg !34
  %317 = fmul float %316, %316, !dbg !34
  %318 = fmul float %278, %inv_d, !dbg !34
  %319 = fmul float %318, %318, !dbg !34
  %320 = fadd float %317, %319, !dbg !34
  %321 = fmul float %281, %inv_d, !dbg !34
  %322 = fmul float %321, %321, !dbg !34
  %323 = fadd float %320, %322, !dbg !34
  %324 = call float @__ocml_sqrt_f32(float %323), !dbg !34
  %tangent_4454981.repack = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 0, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4454981.repack, align 4, !dbg !24
  %tangent_4454981.repack1038 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 1, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4454981.repack1038, align 4, !dbg !24
  %tangent_4454981.repack1039 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 2, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4454981.repack1039, align 4, !dbg !24
  %325 = call float @__ocml_fabs_f32(float %.pn827), !dbg !24
  %326 = call float @__ocml_fabs_f32(float %.pn825), !dbg !35
  %327 = fcmp olt float %326, %325, !dbg !36
  %328 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 0, !dbg !36
  %329 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 1, !dbg !36
  %330 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 2, !dbg !36
  br i1 %327, label %expr_true46, label %expr_false43, !dbg !36

expr_false43:                                     ; preds = %expr_true34
  %331 = call float @__ocml_sqrt_f32(float %291), !dbg !37
  %332 = fdiv float 1.000000e+00, %331, !dbg !38
  %333 = fmul float %332, 0.000000e+00, !dbg !38
  store float %333, float addrspace(5)* %328, align 4, !dbg !38
  %334 = fmul float %.pn823, %332, !dbg !38
  store float %334, float addrspace(5)* %329, align 4, !dbg !38
  %335 = fmul float %332, %292, !dbg !38
  br label %if_join49, !dbg !38

expr_true46:                                      ; preds = %expr_true34
  %336 = call float @__ocml_sqrt_f32(float %294), !dbg !37
  %337 = fdiv float 1.000000e+00, %336, !dbg !39
  %338 = fmul float %337, %295, !dbg !39
  store float %338, float addrspace(5)* %328, align 4, !dbg !39
  %339 = fmul float %337, 0.000000e+00, !dbg !39
  store float %339, float addrspace(5)* %329, align 4, !dbg !39
  %340 = fmul float %.pn827, %337, !dbg !39
  br label %if_join49, !dbg !39

if_join49:                                        ; preds = %expr_true46, %expr_false43
  %storemerge1040 = phi float [ %335, %expr_false43 ], [ %340, %expr_true46 ], !dbg !40
  store float %storemerge1040, float addrspace(5)* %330, align 4, !dbg !40
  %.elt1041 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 0, !dbg !41
  %.unpack1042 = load float, float addrspace(5)* %.elt1041, align 4, !dbg !41
  %.elt1043 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4454981, i32 0, i32 1, !dbg !41
  %.unpack1044 = load float, float addrspace(5)* %.elt1043, align 4, !dbg !41
  %341 = call float @__ocml_sqrt_f32(float %300), !dbg !41
  %tangent_4455012.repack = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 0, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455012.repack, align 4, !dbg !24
  %tangent_4455012.repack1053 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 1, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455012.repack1053, align 4, !dbg !24
  %tangent_4455012.repack1054 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 2, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455012.repack1054, align 4, !dbg !24
  %342 = call float @__ocml_fabs_f32(float %.pn827), !dbg !24
  %343 = call float @__ocml_fabs_f32(float %.pn825), !dbg !35
  %344 = fcmp olt float %343, %342, !dbg !36
  %345 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 0, !dbg !36
  %346 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 1, !dbg !36
  %347 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 2, !dbg !36
  br i1 %344, label %expr_true59, label %expr_false56, !dbg !36

expr_false56:                                     ; preds = %if_join49
  %348 = call float @__ocml_sqrt_f32(float %291), !dbg !37
  %349 = fdiv float 1.000000e+00, %348, !dbg !38
  %350 = fmul float %349, 0.000000e+00, !dbg !38
  store float %350, float addrspace(5)* %345, align 4, !dbg !38
  %351 = fmul float %.pn823, %349, !dbg !38
  store float %351, float addrspace(5)* %346, align 4, !dbg !38
  %352 = fmul float %349, %292, !dbg !38
  br label %if_join62, !dbg !38

expr_true59:                                      ; preds = %if_join49
  %353 = call float @__ocml_sqrt_f32(float %294), !dbg !37
  %354 = fdiv float 1.000000e+00, %353, !dbg !39
  %355 = fmul float %354, %295, !dbg !39
  store float %355, float addrspace(5)* %345, align 4, !dbg !39
  %356 = fmul float %354, 0.000000e+00, !dbg !39
  store float %356, float addrspace(5)* %346, align 4, !dbg !39
  %357 = fmul float %.pn827, %354, !dbg !39
  br label %if_join62, !dbg !39

if_join62:                                        ; preds = %expr_true59, %expr_false56
  %storemerge1055 = phi float [ %352, %expr_false56 ], [ %357, %expr_true59 ], !dbg !40
  store float %storemerge1055, float addrspace(5)* %347, align 4, !dbg !40
  %358 = fdiv float 1.000000e+00, %324, !dbg !41
  %359 = fmul float %316, %358, !dbg !41
  %360 = fmul float %.pn827, %359, !dbg !41
  %361 = fmul float %318, %358, !dbg !41
  %362 = fmul float %.pn825, %361, !dbg !41
  %363 = fadd float %360, %362, !dbg !41
  %364 = fmul float %321, %358, !dbg !41
  %365 = fmul float %.pn823, %364, !dbg !41
  %366 = fadd float %363, %365, !dbg !41
  %367 = fcmp ugt float %366, 0.000000e+00, !dbg !41
  %.elt1056 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 0, !dbg !41
  %.unpack1057 = load float, float addrspace(5)* %.elt1056, align 4, !dbg !41
  %.elt1058 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 1, !dbg !41
  %.unpack1059 = load float, float addrspace(5)* %.elt1058, align 4, !dbg !41
  %.elt1060 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455012, i32 0, i32 2, !dbg !41
  %.unpack1061 = load float, float addrspace(5)* %.elt1060, align 4, !dbg !41
  store %7 %307, %7 addrspace(5)* %_4465290, align 8, !dbg !41
  br i1 %367, label %expr_false63, label %_cont110, !dbg !41

expr_false63:                                     ; preds = %if_join62
  %368 = fdiv float 1.000000e+00, %341, !dbg !42
  %369 = fmul float %368, %50, !dbg !42
  %370 = fmul float %.pn827, %369, !dbg !42
  %371 = fmul float %368, %59, !dbg !42
  %372 = fmul float %.pn825, %371, !dbg !42
  %373 = fadd float %370, %372, !dbg !42
  %374 = fmul float %368, %60, !dbg !42
  %375 = fmul float %.pn823, %374, !dbg !42
  %376 = fadd float %373, %375, !dbg !42
  %377 = fcmp ugt float %376, 0.000000e+00, !dbg !42
  br i1 %377, label %expr_false64, label %_cont110, !dbg !42

expr_false64:                                     ; preds = %expr_false63
  %378 = fmul float %.unpack1042, %359, !dbg !43
  %379 = fmul float %.unpack1044, %361, !dbg !43
  %380 = fadd float %378, %379, !dbg !43
  %381 = fmul float %storemerge1040, %364, !dbg !43
  %382 = fadd float %380, %381, !dbg !43
  %383 = fmul float %.unpack1057, %369, !dbg !43
  %384 = fmul float %.unpack1059, %371, !dbg !43
  %385 = fadd float %383, %384, !dbg !43
  %386 = fmul float %.unpack1061, %374, !dbg !43
  %387 = fadd float %385, %386, !dbg !43
  %388 = fadd float %382, %387, !dbg !43
  %389 = fmul float %388, %388, !dbg !43
  %390 = fmul float %.pn825, %storemerge1040, !dbg !43
  %391 = fmul float %.pn823, %.unpack1044, !dbg !43
  %392 = fsub float %390, %391, !dbg !43
  %393 = fmul float %392, %359, !dbg !43
  %394 = fmul float %.pn823, %.unpack1042, !dbg !43
  %395 = fmul float %.pn827, %storemerge1040, !dbg !43
  %396 = fsub float %394, %395, !dbg !43
  %397 = fmul float %396, %361, !dbg !43
  %398 = fadd float %393, %397, !dbg !43
  %399 = fmul float %.pn827, %.unpack1044, !dbg !43
  %400 = fmul float %.pn825, %.unpack1042, !dbg !43
  %401 = fsub float %399, %400, !dbg !43
  %402 = fmul float %401, %364, !dbg !43
  %403 = fadd float %398, %402, !dbg !43
  %404 = fmul float %.pn825, %.unpack1061, !dbg !43
  %405 = fmul float %.pn823, %.unpack1059, !dbg !43
  %406 = fsub float %404, %405, !dbg !43
  %407 = fmul float %406, %369, !dbg !43
  %408 = fmul float %.pn823, %.unpack1057, !dbg !43
  %409 = fmul float %.pn827, %.unpack1061, !dbg !43
  %410 = fsub float %408, %409, !dbg !43
  %411 = fmul float %410, %371, !dbg !43
  %412 = fadd float %407, %411, !dbg !43
  %413 = fmul float %.pn827, %.unpack1059, !dbg !43
  %414 = fmul float %.pn825, %.unpack1057, !dbg !43
  %415 = fsub float %413, %414, !dbg !43
  %416 = fmul float %415, %374, !dbg !43
  %417 = fadd float %412, %416, !dbg !43
  %418 = fadd float %403, %417, !dbg !43
  %419 = fmul float %418, %418, !dbg !43
  %420 = fadd float %389, %419, !dbg !43
  %421 = fadd float %366, %376, !dbg !43
  %422 = fmul float %421, %421, !dbg !43
  %423 = fadd float %420, %422, !dbg !43
  %424 = call float @__ocml_sqrt_f32(float %423), !dbg !43
  %425 = fmul float %382, %382, !dbg !24
  %426 = fmul float %403, %403, !dbg !24
  %427 = fadd float %425, %426, !dbg !24
  %428 = fadd float %366, -1.000000e+00, !dbg !24
  %429 = fmul float %428, %428, !dbg !24
  %430 = fadd float %427, %429, !dbg !24
  %431 = call float @__ocml_sqrt_f32(float %430), !dbg !24
  %432 = fmul float %431, 5.000000e-01, !dbg !44
  %433 = call float @__ocml_asin_f32(float %432), !dbg !44
  %434 = call float @__ocml_atan2_f32(float %403, float %382), !dbg !45
  %435 = fdiv float 1.000000e+00, %424, !dbg !46
  %436 = fmul float %388, %435, !dbg !46
  %437 = fmul float %436, %436, !dbg !46
  %438 = fmul float %418, %435, !dbg !46
  %439 = fmul float %438, %438, !dbg !46
  %440 = fadd float %437, %439, !dbg !46
  %441 = fmul float %421, %435, !dbg !46
  %442 = fadd float %441, -1.000000e+00, !dbg !46
  %443 = fmul float %442, %442, !dbg !46
  %444 = fadd float %440, %443, !dbg !46
  %445 = call float @__ocml_sqrt_f32(float %444), !dbg !46
  %446 = fmul float %445, 5.000000e-01, !dbg !44
  %447 = call float @__ocml_asin_f32(float %446), !dbg !44
  %448 = call float @__ocml_atan2_f32(float %438, float %436), !dbg !45
  %449 = fmul float %447, 2.000000e+00, !dbg !47
  %450 = fmul float %449, 0x3FE45F3060000000, !dbg !47
  %451 = call float @__ocml_sqrt_f32(float %450), !dbg !47
  %452 = fadd float %448, 0x400921FB60000000, !dbg !48
  %453 = fdiv float %452, 0x401921FB60000000, !dbg !48
  %u_wm_4465411.repack = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4465411, i32 0, i32 0, !dbg !48
  store float %451, float addrspace(5)* %u_wm_4465411.repack, align 4, !dbg !48
  %u_wm_4465411.repack1069 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4465411, i32 0, i32 1, !dbg !48
  store float %453, float addrspace(5)* %u_wm_4465411.repack1069, align 4, !dbg !48
  %454 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 5, !dbg !48
  %455 = load i1, i1 addrspace(5)* %454, align 8, !dbg !48
  %456 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4465411, i32 0, i32 1, !dbg !48
  br i1 %455, label %expr_true81, label %if_join82, !dbg !48

expr_true81:                                      ; preds = %expr_false64
  %457 = fsub float %448, %434, !dbg !49
  %458 = fadd float %457, 0x400921FB60000000, !dbg !49
  %459 = fdiv float %458, 0x401921FB60000000, !dbg !49
  store float %459, float addrspace(5)* %456, align 4, !dbg !49
  br label %if_join82, !dbg !49

if_join82:                                        ; preds = %expr_false64, %expr_true81
  %460 = load float, float addrspace(5)* %456, align 4, !dbg !50
  %461 = call float @__ocml_floor_f32(float %460), !dbg !50
  %462 = fsub float %460, %461, !dbg !51
  store float %462, float addrspace(5)* %456, align 4, !dbg !51
  %.elt1071 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4465411, i32 0, i32 0, !dbg !51
  %.unpack1072 = load float, float addrspace(5)* %.elt1071, align 4, !dbg !51
  %463 = insertvalue %5 undef, float %.unpack1072, 0, !dbg !51
  %464 = insertvalue %5 %463, float %462, 1, !dbg !51
  %465 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 2, !dbg !51
  %466 = fmul float %433, 2.000000e+00, !dbg !51
  %467 = call fastcc %10 @invert_warp2D2_4461194(%3 addrspace(5)* %465, %5 %464, float %434, float %466), !dbg !51
  %param_weight_4465468.repack = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 0, !dbg !52
  store float 0.000000e+00, float addrspace(5)* %param_weight_4465468.repack, align 4, !dbg !52
  %param_weight_4465468.repack1075 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 1, !dbg !52
  store float 0.000000e+00, float addrspace(5)* %param_weight_4465468.repack1075, align 4, !dbg !52
  %param_weight_4465468.repack1076 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 2, !dbg !52
  store float 0.000000e+00, float addrspace(5)* %param_weight_4465468.repack1076, align 4, !dbg !52
  %param_weight_4465468.repack1077 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 3, !dbg !52
  store float 0.000000e+00, float addrspace(5)* %param_weight_4465468.repack1077, align 4, !dbg !52
  store i32 0, i32 addrspace(5)* %slice_offset_4465579, align 4, !dbg !52
  store i32 0, i32 addrspace(5)* %dim_4465444, align 4, !dbg !52
  %468 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, !dbg !52
  %469 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 4, !dbg !52
  %470 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 3, !dbg !52
  %471 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 5, !dbg !52
  %472 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 6, !dbg !52
  br label %expr_true96, !dbg !53

expr_false86:                                     ; preds = %continue
  %473 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 2, !dbg !54
  %.elt1078 = getelementptr inbounds %5, %5 addrspace(5)* %473, i32 0, i32 0, !dbg !54
  %.unpack1079 = load float, float addrspace(5)* %.elt1078, align 8, !dbg !54
  %.elt1080 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 2, i32 1, !dbg !54
  %.unpack1081 = load float, float addrspace(5)* %.elt1080, align 4, !dbg !54
  %.elt1082 = getelementptr inbounds %3, %3 addrspace(5)* %468, i32 0, i32 0, i32 0, !dbg !54
  %.unpack1083 = load i32, i32 addrspace(5)* %.elt1082, align 8, !dbg !54
  %.elt1084 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 0, i32 1, !dbg !54
  %.unpack1085 = load i32, i32 addrspace(5)* %.elt1084, align 4, !dbg !54
  %474 = extractvalue %10 %467, 0, !dbg !54
  %475 = extractvalue %5 %474, 0, !dbg !54
  %476 = fmul float %475, %.unpack1079, !dbg !54
  %477 = sitofp i32 %.unpack1083 to float, !dbg !54
  %478 = fadd float %477, -2.000000e+00, !dbg !54
  %479 = fcmp olt float %476, %478, !dbg !54
  %480 = select i1 %479, float %476, float %478, !dbg !54
  %481 = call float @__ocml_floor_f32(float %480), !dbg !54
  %482 = extractvalue %5 %474, 1, !dbg !55
  %483 = fmul float %482, %.unpack1081, !dbg !55
  %484 = sitofp i32 %.unpack1085 to float, !dbg !55
  %485 = fadd float %484, -2.000000e+00, !dbg !55
  %486 = fcmp olt float %483, %485, !dbg !55
  %487 = select i1 %486, float %483, float %485, !dbg !55
  %488 = call float @__ocml_floor_f32(float %487), !dbg !55
  %489 = getelementptr inbounds %3, %3 addrspace(5)* %468, i32 0, i32 0, i32 0, !dbg !56
  %490 = load i32, i32 addrspace(5)* %489, align 8, !dbg !56
  %491 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 0, i32 1, !dbg !56
  %492 = load i32, i32 addrspace(5)* %491, align 4, !dbg !56
  %493 = load i32, i32 addrspace(5)* %slice_offset_4465579, align 4, !dbg !56
  %494 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 7, !dbg !56
  %495 = load [0 x float]*, [0 x float]* addrspace(5)* %494, align 8, !dbg !56
  %496 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %497 = getelementptr inbounds [0 x i32], [0 x i32]* %496, i64 0, i64 1, !dbg !56
  %498 = load i32, i32* %497, align 4, !dbg !56
  %499 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 2, !dbg !56
  %500 = addrspacecast float addrspace(5)* %499 to float*, !dbg !56
  %501 = load float, float* %500, align 4, !dbg !56
  %502 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 3, !dbg !56
  %503 = addrspacecast float addrspace(5)* %502 to float*, !dbg !56
  %504 = load float, float* %503, align 4, !dbg !56
  %505 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %506 = getelementptr inbounds [0 x i32], [0 x i32]* %505, i64 0, i64 0, !dbg !56
  %507 = load i32, i32* %506, align 4, !dbg !56
  %508 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 0, !dbg !56
  %509 = addrspacecast float addrspace(5)* %508 to float*, !dbg !56
  %510 = load float, float* %509, align 4, !dbg !56
  %511 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 1, !dbg !56
  %512 = addrspacecast float addrspace(5)* %511 to float*, !dbg !56
  %513 = load float, float* %512, align 4, !dbg !56
  %514 = fptosi float %481 to i32, !dbg !56
  %515 = fptosi float %488 to i32, !dbg !56
  %516 = mul nsw i32 %490, %515, !dbg !56
  %index = add nsw i32 %516, %514, !dbg !56
  %size = mul nsw i32 %490, %492, !dbg !56
  %517 = mul nsw i32 %493, %size, !dbg !56
  %518 = add nsw i32 %index, %517, !dbg !56
  %519 = sext i32 %518 to i64, !dbg !56
  %520 = getelementptr inbounds [0 x float], [0 x float]* %495, i64 0, i64 %519, !dbg !56
  %521 = load float, float* %520, align 4, !dbg !56
  %522 = mul nsw i32 %507, %size, !dbg !56
  %i1 = add nsw i32 %518, %522, !dbg !56
  %523 = sext i32 %i1 to i64, !dbg !56
  %524 = getelementptr inbounds [0 x float], [0 x float]* %495, i64 0, i64 %523, !dbg !56
  %525 = load float, float* %524, align 4, !dbg !56
  %526 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %527 = getelementptr inbounds [0 x i32], [0 x i32]* %526, i64 0, i64 0, !dbg !56
  %528 = load i32, i32* %527, align 4, !dbg !56
  %529 = load float, float* %509, align 4, !dbg !56
  %530 = load float, float* %512, align 4, !dbg !56
  %531 = mul nsw i32 %498, %size, !dbg !56
  %i1552 = add nsw i32 %518, %531, !dbg !56
  %532 = sext i32 %i1552 to i64, !dbg !56
  %533 = getelementptr inbounds [0 x float], [0 x float]* %495, i64 0, i64 %532, !dbg !56
  %534 = load float, float* %533, align 4, !dbg !56
  %535 = mul nsw i32 %528, %size, !dbg !56
  %i1553 = add nsw i32 %i1552, %535, !dbg !56
  %536 = sext i32 %i1553 to i64, !dbg !56
  %537 = getelementptr inbounds [0 x float], [0 x float]* %495, i64 0, i64 %536, !dbg !56
  %538 = load float, float* %537, align 4, !dbg !56
  %539 = load [0 x float]*, [0 x float]* addrspace(5)* %494, align 8, !dbg !56
  %540 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %541 = getelementptr inbounds [0 x i32], [0 x i32]* %540, i64 0, i64 1, !dbg !56
  %542 = load i32, i32* %541, align 4, !dbg !56
  %543 = load float, float* %500, align 4, !dbg !56
  %544 = load float, float* %503, align 4, !dbg !56
  %545 = getelementptr inbounds [0 x i32], [0 x i32]* %540, i64 0, i64 0, !dbg !56
  %546 = load i32, i32* %545, align 4, !dbg !56
  %547 = load float, float* %509, align 4, !dbg !56
  %548 = load float, float* %512, align 4, !dbg !56
  %549 = getelementptr inbounds [0 x float], [0 x float]* %539, i64 0, i64 1, !dbg !56
  %550 = sext i32 %518 to i64, !dbg !56
  %551 = getelementptr inbounds float, float* %549, i64 %550, !dbg !56
  %552 = load float, float* %551, align 4, !dbg !56
  %553 = mul nsw i32 %546, %size, !dbg !56
  %i1554 = add nsw i32 %518, %553, !dbg !56
  %554 = sext i32 %i1554 to i64, !dbg !56
  %555 = getelementptr inbounds float, float* %549, i64 %554, !dbg !56
  %556 = load float, float* %555, align 4, !dbg !56
  %557 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %558 = getelementptr inbounds [0 x i32], [0 x i32]* %557, i64 0, i64 0, !dbg !56
  %559 = load i32, i32* %558, align 4, !dbg !56
  %560 = load float, float* %509, align 4, !dbg !56
  %561 = load float, float* %512, align 4, !dbg !56
  %562 = mul nsw i32 %542, %size, !dbg !56
  %i1555 = add nsw i32 %518, %562, !dbg !56
  %563 = sext i32 %i1555 to i64, !dbg !56
  %564 = getelementptr inbounds float, float* %549, i64 %563, !dbg !56
  %565 = load float, float* %564, align 4, !dbg !56
  %566 = mul nsw i32 %559, %size, !dbg !56
  %i1556 = add nsw i32 %i1555, %566, !dbg !56
  %567 = sext i32 %i1556 to i64, !dbg !56
  %568 = getelementptr inbounds float, float* %549, i64 %567, !dbg !56
  %569 = load float, float* %568, align 4, !dbg !56
  %570 = load [0 x float]*, [0 x float]* addrspace(5)* %494, align 8, !dbg !56
  %571 = load i32, i32 addrspace(5)* %489, align 8, !dbg !56
  %572 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %573 = getelementptr inbounds [0 x i32], [0 x i32]* %572, i64 0, i64 1, !dbg !56
  %574 = load i32, i32* %573, align 4, !dbg !56
  %575 = load float, float* %500, align 4, !dbg !56
  %576 = load float, float* %503, align 4, !dbg !56
  %577 = getelementptr inbounds [0 x i32], [0 x i32]* %572, i64 0, i64 0, !dbg !56
  %578 = load i32, i32* %577, align 4, !dbg !56
  %579 = load float, float* %509, align 4, !dbg !56
  %580 = load float, float* %512, align 4, !dbg !56
  %581 = sext i32 %571 to i64, !dbg !56
  %582 = getelementptr inbounds [0 x float], [0 x float]* %570, i64 0, i64 %581, !dbg !56
  %583 = sext i32 %518 to i64, !dbg !56
  %584 = getelementptr inbounds float, float* %582, i64 %583, !dbg !56
  %585 = load float, float* %584, align 4, !dbg !56
  %586 = mul nsw i32 %578, %size, !dbg !56
  %i1557 = add nsw i32 %518, %586, !dbg !56
  %587 = sext i32 %i1557 to i64, !dbg !56
  %588 = getelementptr inbounds float, float* %582, i64 %587, !dbg !56
  %589 = load float, float* %588, align 4, !dbg !56
  %590 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %591 = getelementptr inbounds [0 x i32], [0 x i32]* %590, i64 0, i64 0, !dbg !56
  %592 = load i32, i32* %591, align 4, !dbg !56
  %593 = load float, float* %509, align 4, !dbg !56
  %594 = load float, float* %512, align 4, !dbg !56
  %595 = mul nsw i32 %574, %size, !dbg !56
  %i1558 = add nsw i32 %518, %595, !dbg !56
  %596 = sext i32 %i1558 to i64, !dbg !56
  %597 = getelementptr inbounds float, float* %582, i64 %596, !dbg !56
  %598 = load float, float* %597, align 4, !dbg !56
  %599 = mul nsw i32 %592, %size, !dbg !56
  %i1559 = add nsw i32 %i1558, %599, !dbg !56
  %600 = sext i32 %i1559 to i64, !dbg !56
  %601 = getelementptr inbounds float, float* %582, i64 %600, !dbg !56
  %602 = load float, float* %601, align 4, !dbg !56
  %603 = load [0 x float]*, [0 x float]* addrspace(5)* %494, align 8, !dbg !56
  %604 = load i32, i32 addrspace(5)* %489, align 8, !dbg !56
  %605 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %606 = getelementptr inbounds [0 x i32], [0 x i32]* %605, i64 0, i64 1, !dbg !56
  %607 = load i32, i32* %606, align 4, !dbg !56
  %608 = load float, float* %500, align 4, !dbg !56
  %609 = load float, float* %503, align 4, !dbg !56
  %610 = getelementptr inbounds [0 x i32], [0 x i32]* %605, i64 0, i64 0, !dbg !56
  %611 = load i32, i32* %610, align 4, !dbg !56
  %612 = load float, float* %509, align 4, !dbg !56
  %613 = load float, float* %512, align 4, !dbg !56
  %614 = add nsw i32 %604, 1, !dbg !56
  %615 = sext i32 %614 to i64, !dbg !56
  %616 = getelementptr inbounds [0 x float], [0 x float]* %603, i64 0, i64 %615, !dbg !56
  %617 = sext i32 %518 to i64, !dbg !56
  %618 = getelementptr inbounds float, float* %616, i64 %617, !dbg !56
  %619 = load float, float* %618, align 4, !dbg !56
  %620 = mul nsw i32 %611, %size, !dbg !56
  %i1560 = add nsw i32 %518, %620, !dbg !56
  %621 = sext i32 %i1560 to i64, !dbg !56
  %622 = getelementptr inbounds float, float* %616, i64 %621, !dbg !56
  %623 = load float, float* %622, align 4, !dbg !56
  %624 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !56
  %625 = getelementptr inbounds [0 x i32], [0 x i32]* %624, i64 0, i64 0, !dbg !56
  %626 = load i32, i32* %625, align 4, !dbg !56
  %627 = load float, float* %509, align 4, !dbg !56
  %628 = load float, float* %512, align 4, !dbg !56
  %629 = mul nsw i32 %607, %size, !dbg !56
  %i1561 = add nsw i32 %518, %629, !dbg !56
  %630 = sext i32 %i1561 to i64, !dbg !56
  %631 = getelementptr inbounds float, float* %616, i64 %630, !dbg !56
  %632 = load float, float* %631, align 4, !dbg !56
  %633 = mul nsw i32 %626, %size, !dbg !56
  %i1562 = add nsw i32 %i1561, %633, !dbg !56
  %634 = sext i32 %i1562 to i64, !dbg !56
  %635 = getelementptr inbounds float, float* %616, i64 %634, !dbg !56
  %636 = load float, float* %635, align 4, !dbg !56
  %637 = getelementptr inbounds %5, %5 addrspace(5)* %473, i32 0, i32 0, !dbg !56
  %638 = load float, float addrspace(5)* %637, align 8, !dbg !56
  %639 = getelementptr inbounds %7, %7 addrspace(5)* %_4465290, i32 0, i32 3, i32 2, i32 1, !dbg !56
  %640 = load float, float addrspace(5)* %639, align 4, !dbg !56
  %641 = call float @__ocml_sqrt_f32(float %440), !dbg !56
  %642 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4465411, i32 0, i32 0, !dbg !57
  %643 = load float, float addrspace(5)* %642, align 4, !dbg !57
  %644 = fmul float %643, 0x4033BD3CE0000000, !dbg !57
  %645 = fmul float %644, %641, !dbg !57
  %646 = fcmp ogt float %645, 0x3EB0C6F7A0000000, !dbg !57
  %maxf_cont95 = select i1 %646, float %645, float 0x3EB0C6F7A0000000, !dbg !57
  %647 = extractvalue %10 %467, 1, !dbg !58
  %648 = fsub float %483, %488, !dbg !58
  %649 = fsub float 1.000000e+00, %648, !dbg !58
  %650 = fsub float %476, %481, !dbg !58
  %651 = fsub float 1.000000e+00, %650, !dbg !58
  %652 = fmul float %521, %510, !dbg !58
  %653 = fmul float %525, %513, !dbg !58
  %654 = fadd float %652, %653, !dbg !58
  %655 = fmul float %654, %501, !dbg !58
  %656 = fmul float %534, %529, !dbg !58
  %657 = fmul float %538, %530, !dbg !58
  %658 = fadd float %656, %657, !dbg !58
  %659 = fmul float %658, %504, !dbg !58
  %660 = fadd float %655, %659, !dbg !58
  %661 = fmul float %651, %660, !dbg !58
  %662 = fmul float %552, %547, !dbg !58
  %663 = fmul float %556, %548, !dbg !58
  %664 = fadd float %662, %663, !dbg !58
  %665 = fmul float %664, %543, !dbg !58
  %666 = fmul float %565, %560, !dbg !58
  %667 = fmul float %569, %561, !dbg !58
  %668 = fadd float %666, %667, !dbg !58
  %669 = fmul float %668, %544, !dbg !58
  %670 = fadd float %665, %669, !dbg !58
  %671 = fmul float %650, %670, !dbg !58
  %672 = fadd float %661, %671, !dbg !58
  %673 = fmul float %649, %672, !dbg !58
  %674 = fmul float %585, %579, !dbg !58
  %675 = fmul float %589, %580, !dbg !58
  %676 = fadd float %674, %675, !dbg !58
  %677 = fmul float %676, %575, !dbg !58
  %678 = fmul float %598, %593, !dbg !58
  %679 = fmul float %602, %594, !dbg !58
  %680 = fadd float %678, %679, !dbg !58
  %681 = fmul float %680, %576, !dbg !58
  %682 = fadd float %677, %681, !dbg !58
  %683 = fmul float %651, %682, !dbg !58
  %684 = fmul float %619, %612, !dbg !58
  %685 = fmul float %623, %613, !dbg !58
  %686 = fadd float %684, %685, !dbg !58
  %687 = fmul float %686, %608, !dbg !58
  %688 = fmul float %632, %627, !dbg !58
  %689 = fmul float %636, %628, !dbg !58
  %690 = fadd float %688, %689, !dbg !58
  %691 = fmul float %690, %609, !dbg !58
  %692 = fadd float %687, %691, !dbg !58
  %693 = fmul float %650, %692, !dbg !58
  %694 = fadd float %683, %693, !dbg !58
  %695 = fmul float %648, %694, !dbg !58
  %696 = fadd float %673, %695, !dbg !58
  %hprod = fmul float %638, %640, !dbg !58
  %697 = fmul float %696, %hprod, !dbg !58
  %698 = fmul float %647, %697, !dbg !58
  %699 = fmul float %maxf_cont95, 4.000000e+00, !dbg !58
  %700 = fmul float %382, %436, !dbg !58
  %701 = fmul float %403, %438, !dbg !58
  %702 = fadd float %700, %701, !dbg !58
  %703 = fmul float %366, %441, !dbg !58
  %704 = fadd float %702, %703, !dbg !58
  %jacobian = fmul float %699, %704, !dbg !58
  %705 = fdiv float %698, %jacobian, !dbg !58
  br label %_cont110, !dbg !58

expr_true96:                                      ; preds = %if_join82, %continue
  %706 = load [0 x i32]*, [0 x i32]* addrspace(5)* %470, align 8, !dbg !54
  %707 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !54
  %708 = sext i32 %707 to i64, !dbg !54
  %709 = getelementptr inbounds [0 x i32], [0 x i32]* %706, i64 0, i64 %708, !dbg !54
  %710 = load i32, i32* %709, align 4, !dbg !54
  %711 = icmp eq i32 %710, 1, !dbg !54
  br i1 %711, label %expr_true107, label %expr_false97, !dbg !54

expr_false97:                                     ; preds = %expr_true96
  store float %434, float addrspace(5)* %dim_param_4465486, align 4, !dbg !59
  %712 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !59
  %713 = icmp eq i32 %712, 1, !dbg !59
  %spec.store.select = select i1 %713, float %466, float %434, !dbg !59
  store float %spec.store.select, float addrspace(5)* %dim_param_4465486, align 4, !dbg !40
  %714 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %468, i32 %712, float %spec.store.select), !dbg !60
  %715 = load [0 x float]*, [0 x float]* addrspace(5)* %471, align 8, !dbg !61
  %716 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !61
  %717 = load i32, i32 addrspace(5)* %472, align 8, !dbg !61
  %718 = mul nsw i32 %716, %717, !dbg !61
  %719 = add nsw i32 %718, %714, !dbg !61
  %720 = sext i32 %719 to i64, !dbg !61
  %721 = getelementptr inbounds [0 x float], [0 x float]* %715, i64 0, i64 %720, !dbg !61
  %722 = load float, float* %721, align 4, !dbg !61
  %723 = load [0 x float]*, [0 x float]* addrspace(5)* %471, align 8, !dbg !61
  %724 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !61
  %725 = load i32, i32 addrspace(5)* %472, align 8, !dbg !61
  %726 = mul nsw i32 %724, %725, !dbg !61
  %727 = add nsw i32 %726, %714, !dbg !61
  %728 = add nsw i32 %727, 1, !dbg !61
  %729 = sext i32 %728 to i64, !dbg !61
  %730 = getelementptr inbounds [0 x float], [0 x float]* %723, i64 0, i64 %729, !dbg !61
  %731 = load float, float* %730, align 4, !dbg !61
  %732 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !61
  %733 = load float, float addrspace(5)* %dim_param_4465486, align 4, !dbg !61
  %734 = fsub float %733, %722, !dbg !61
  %735 = fsub float %731, %722, !dbg !61
  %736 = fdiv float %734, %735, !dbg !61
  %737 = fcmp olt float %736, 0.000000e+00, !dbg !61
  %738 = fcmp ogt float %736, 1.000000e+00, !dbg !61
  %. = select i1 %738, float 1.000000e+00, float %736, !dbg !61
  %clampf_cont106 = select i1 %737, float 0.000000e+00, float %., !dbg !61
  %739 = shl nsw i32 %732, 1, !dbg !62
  %740 = or i32 %739, 1, !dbg !62
  %741 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 %740, !dbg !62
  store float %clampf_cont106, float addrspace(5)* %741, align 4, !dbg !62
  %742 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !62
  %743 = shl nsw i32 %742, 1, !dbg !62
  %744 = or i32 %743, 1, !dbg !62
  %745 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 %744, !dbg !62
  %746 = load float, float addrspace(5)* %745, align 4, !dbg !62
  %747 = shl nsw i32 %742, 1, !dbg !62
  %748 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 %747, !dbg !62
  %749 = fsub float 1.000000e+00, %746, !dbg !62
  store float %749, float addrspace(5)* %748, align 4, !dbg !62
  %750 = load [0 x i32]*, [0 x i32]* addrspace(5)* %469, align 8, !dbg !62
  %751 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !62
  %752 = sext i32 %751 to i64, !dbg !62
  %753 = getelementptr inbounds [0 x i32], [0 x i32]* %750, i64 0, i64 %752, !dbg !62
  %754 = load i32, i32* %753, align 4, !dbg !62
  %755 = load i32, i32 addrspace(5)* %slice_offset_4465579, align 4, !dbg !62
  %756 = mul nsw i32 %754, %714, !dbg !62
  %757 = add nsw i32 %755, %756, !dbg !62
  store i32 %757, i32 addrspace(5)* %slice_offset_4465579, align 4, !dbg !62
  %758 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !62
  br label %continue, !dbg !62

expr_true107:                                     ; preds = %expr_true96
  %759 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !59
  %760 = shl nsw i32 %759, 1, !dbg !59
  %761 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 %760, !dbg !59
  store float 1.000000e+00, float addrspace(5)* %761, align 4, !dbg !59
  %762 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !59
  %763 = shl nsw i32 %762, 1, !dbg !59
  %764 = or i32 %763, 1, !dbg !59
  %765 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4465468, i32 0, i32 %764, !dbg !59
  store float 0.000000e+00, float addrspace(5)* %765, align 4, !dbg !59
  %766 = load i32, i32 addrspace(5)* %dim_4465444, align 4, !dbg !59
  br label %continue, !dbg !59

continue:                                         ; preds = %expr_true107, %expr_false97
  %storemerge1205.in = phi i32 [ %758, %expr_false97 ], [ %766, %expr_true107 ]
  %storemerge1205 = add nsw i32 %storemerge1205.in, 1, !dbg !40
  store i32 %storemerge1205, i32 addrspace(5)* %dim_4465444, align 4, !dbg !40
  %767 = icmp slt i32 %storemerge1205.in, 1, !dbg !53
  br i1 %767, label %expr_true96, label %expr_false86, !dbg !53

_cont110:                                         ; preds = %expr_false63, %if_join62, %expr_false86
  %_cont111 = phi float [ %705, %expr_false86 ], [ 0.000000e+00, %if_join62 ], [ 0.000000e+00, %expr_false63 ], !dbg !63
  %.elt1086 = getelementptr inbounds %9, %9 addrspace(5)* %308, i32 0, i32 0, !dbg !63
  %.unpack1087 = load float, float addrspace(5)* %.elt1086, align 4, !dbg !63
  %.elt1088 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 1, !dbg !63
  %.unpack1089 = load float, float addrspace(5)* %.elt1088, align 4, !dbg !63
  %.elt1090 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 2, !dbg !63
  %.unpack1091 = load float, float addrspace(5)* %.elt1090, align 4, !dbg !63
  %768 = call float @__ocml_sqrt_f32(float %323), !dbg !63
  %tangent_4455049.repack = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 0, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455049.repack, align 4, !dbg !24
  %tangent_4455049.repack1092 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 1, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455049.repack1092, align 4, !dbg !24
  %tangent_4455049.repack1093 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 2, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455049.repack1093, align 4, !dbg !24
  %769 = call float @__ocml_fabs_f32(float %.pn827), !dbg !24
  %770 = call float @__ocml_fabs_f32(float %.pn825), !dbg !35
  %771 = fcmp olt float %770, %769, !dbg !36
  %772 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 0, !dbg !36
  %773 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 1, !dbg !36
  %774 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 2, !dbg !36
  br i1 %771, label %expr_true121, label %expr_false118, !dbg !36

expr_false118:                                    ; preds = %_cont110
  %775 = call float @__ocml_sqrt_f32(float %291), !dbg !37
  %776 = fdiv float 1.000000e+00, %775, !dbg !38
  %777 = fmul float %776, 0.000000e+00, !dbg !38
  store float %777, float addrspace(5)* %772, align 4, !dbg !38
  %778 = fmul float %.pn823, %776, !dbg !38
  store float %778, float addrspace(5)* %773, align 4, !dbg !38
  %779 = fmul float %776, %292, !dbg !38
  br label %if_join124, !dbg !38

expr_true121:                                     ; preds = %_cont110
  %780 = call float @__ocml_sqrt_f32(float %294), !dbg !37
  %781 = fdiv float 1.000000e+00, %780, !dbg !39
  %782 = fmul float %781, %295, !dbg !39
  store float %782, float addrspace(5)* %772, align 4, !dbg !39
  %783 = fmul float %781, 0.000000e+00, !dbg !39
  store float %783, float addrspace(5)* %773, align 4, !dbg !39
  %784 = fmul float %.pn827, %781, !dbg !39
  br label %if_join124, !dbg !39

if_join124:                                       ; preds = %expr_true121, %expr_false118
  %storemerge1094 = phi float [ %779, %expr_false118 ], [ %784, %expr_true121 ], !dbg !40
  store float %storemerge1094, float addrspace(5)* %774, align 4, !dbg !40
  %.elt1095 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 0, !dbg !41
  %.unpack1096 = load float, float addrspace(5)* %.elt1095, align 4, !dbg !41
  %.elt1097 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455049, i32 0, i32 1, !dbg !41
  %.unpack1098 = load float, float addrspace(5)* %.elt1097, align 4, !dbg !41
  %785 = call float @__ocml_sqrt_f32(float %300), !dbg !41
  %tangent_4455071.repack = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 0, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455071.repack, align 4, !dbg !24
  %tangent_4455071.repack1107 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 1, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455071.repack1107, align 4, !dbg !24
  %tangent_4455071.repack1108 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 2, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455071.repack1108, align 4, !dbg !24
  %786 = call float @__ocml_fabs_f32(float %.pn827), !dbg !24
  %787 = call float @__ocml_fabs_f32(float %.pn825), !dbg !35
  %788 = fcmp olt float %787, %786, !dbg !36
  %789 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 0, !dbg !36
  %790 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 1, !dbg !36
  %791 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 2, !dbg !36
  br i1 %788, label %expr_true134, label %expr_false131, !dbg !36

expr_false131:                                    ; preds = %if_join124
  %792 = call float @__ocml_sqrt_f32(float %291), !dbg !37
  %793 = fdiv float 1.000000e+00, %792, !dbg !38
  %794 = fmul float %793, 0.000000e+00, !dbg !38
  store float %794, float addrspace(5)* %789, align 4, !dbg !38
  %795 = fmul float %.pn823, %793, !dbg !38
  store float %795, float addrspace(5)* %790, align 4, !dbg !38
  %796 = fmul float %793, %292, !dbg !38
  br label %if_join137, !dbg !38

expr_true134:                                     ; preds = %if_join124
  %797 = call float @__ocml_sqrt_f32(float %294), !dbg !37
  %798 = fdiv float 1.000000e+00, %797, !dbg !39
  %799 = fmul float %798, %295, !dbg !39
  store float %799, float addrspace(5)* %789, align 4, !dbg !39
  %800 = fmul float %798, 0.000000e+00, !dbg !39
  store float %800, float addrspace(5)* %790, align 4, !dbg !39
  %801 = fmul float %.pn827, %798, !dbg !39
  br label %if_join137, !dbg !39

if_join137:                                       ; preds = %expr_true134, %expr_false131
  %storemerge1109 = phi float [ %796, %expr_false131 ], [ %801, %expr_true134 ], !dbg !40
  store float %storemerge1109, float addrspace(5)* %791, align 4, !dbg !40
  %802 = fdiv float 1.000000e+00, %768, !dbg !41
  %803 = fmul float %316, %802, !dbg !41
  %804 = fmul float %.pn827, %803, !dbg !41
  %805 = fmul float %318, %802, !dbg !41
  %806 = fmul float %.pn825, %805, !dbg !41
  %807 = fadd float %804, %806, !dbg !41
  %808 = fmul float %321, %802, !dbg !41
  %809 = fmul float %.pn823, %808, !dbg !41
  %810 = fadd float %807, %809, !dbg !41
  %811 = fcmp ugt float %810, 0.000000e+00, !dbg !41
  %.elt1110 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 0, !dbg !41
  %.unpack1111 = load float, float addrspace(5)* %.elt1110, align 4, !dbg !41
  %.elt1112 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 1, !dbg !41
  %.unpack1113 = load float, float addrspace(5)* %.elt1112, align 4, !dbg !41
  %.elt1114 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455071, i32 0, i32 2, !dbg !41
  %.unpack1115 = load float, float addrspace(5)* %.elt1114, align 4, !dbg !41
  store %7 %307, %7 addrspace(5)* %_4461048, align 8, !dbg !41
  br i1 %811, label %expr_false138, label %evaluate_brdf_cont, !dbg !41

expr_false138:                                    ; preds = %if_join137
  %812 = fdiv float 1.000000e+00, %785, !dbg !64
  %813 = fmul float %812, %50, !dbg !64
  %814 = fmul float %.pn827, %813, !dbg !64
  %815 = fmul float %812, %59, !dbg !64
  %816 = fmul float %.pn825, %815, !dbg !64
  %817 = fadd float %814, %816, !dbg !64
  %818 = fmul float %812, %60, !dbg !64
  %819 = fmul float %.pn823, %818, !dbg !64
  %820 = fadd float %817, %819, !dbg !64
  %821 = fcmp ugt float %820, 0.000000e+00, !dbg !64
  br i1 %821, label %expr_false139, label %evaluate_brdf_cont, !dbg !64

expr_false139:                                    ; preds = %expr_false138
  %822 = fmul float %.unpack1096, %803, !dbg !65
  %823 = fmul float %.unpack1098, %805, !dbg !65
  %824 = fadd float %822, %823, !dbg !65
  %825 = fmul float %storemerge1094, %808, !dbg !65
  %826 = fadd float %824, %825, !dbg !65
  %827 = fmul float %.unpack1111, %813, !dbg !65
  %828 = fmul float %.unpack1113, %815, !dbg !65
  %829 = fadd float %827, %828, !dbg !65
  %830 = fmul float %.unpack1115, %818, !dbg !65
  %831 = fadd float %829, %830, !dbg !65
  %832 = fadd float %826, %831, !dbg !65
  %833 = fmul float %832, %832, !dbg !65
  %834 = fmul float %.pn825, %storemerge1094, !dbg !65
  %835 = fmul float %.pn823, %.unpack1098, !dbg !65
  %836 = fsub float %834, %835, !dbg !65
  %837 = fmul float %836, %803, !dbg !65
  %838 = fmul float %.pn823, %.unpack1096, !dbg !65
  %839 = fmul float %.pn827, %storemerge1094, !dbg !65
  %840 = fsub float %838, %839, !dbg !65
  %841 = fmul float %840, %805, !dbg !65
  %842 = fadd float %837, %841, !dbg !65
  %843 = fmul float %.pn827, %.unpack1098, !dbg !65
  %844 = fmul float %.pn825, %.unpack1096, !dbg !65
  %845 = fsub float %843, %844, !dbg !65
  %846 = fmul float %845, %808, !dbg !65
  %847 = fadd float %842, %846, !dbg !65
  %848 = fmul float %.pn825, %.unpack1115, !dbg !65
  %849 = fmul float %.pn823, %.unpack1113, !dbg !65
  %850 = fsub float %848, %849, !dbg !65
  %851 = fmul float %850, %813, !dbg !65
  %852 = fmul float %.pn823, %.unpack1111, !dbg !65
  %853 = fmul float %.pn827, %.unpack1115, !dbg !65
  %854 = fsub float %852, %853, !dbg !65
  %855 = fmul float %854, %815, !dbg !65
  %856 = fadd float %851, %855, !dbg !65
  %857 = fmul float %.pn827, %.unpack1113, !dbg !65
  %858 = fmul float %.pn825, %.unpack1111, !dbg !65
  %859 = fsub float %857, %858, !dbg !65
  %860 = fmul float %859, %818, !dbg !65
  %861 = fadd float %856, %860, !dbg !65
  %862 = fadd float %847, %861, !dbg !65
  %863 = fmul float %862, %862, !dbg !65
  %864 = fadd float %833, %863, !dbg !65
  %865 = fadd float %810, %820, !dbg !65
  %866 = fmul float %865, %865, !dbg !65
  %867 = fadd float %864, %866, !dbg !65
  %868 = call float @__ocml_sqrt_f32(float %867), !dbg !65
  %869 = fmul float %826, %826, !dbg !24
  %870 = fmul float %847, %847, !dbg !24
  %871 = fadd float %869, %870, !dbg !24
  %872 = fadd float %810, -1.000000e+00, !dbg !24
  %873 = fmul float %872, %872, !dbg !24
  %874 = fadd float %871, %873, !dbg !24
  %875 = call float @__ocml_sqrt_f32(float %874), !dbg !24
  %876 = fmul float %875, 5.000000e-01, !dbg !44
  %877 = call float @__ocml_asin_f32(float %876), !dbg !44
  %878 = call float @__ocml_atan2_f32(float %847, float %826), !dbg !45
  %879 = fdiv float 1.000000e+00, %868, !dbg !66
  %880 = fmul float %832, %879, !dbg !66
  %881 = fmul float %880, %880, !dbg !66
  %882 = fmul float %862, %879, !dbg !66
  %883 = fmul float %882, %882, !dbg !66
  %884 = fadd float %881, %883, !dbg !66
  %885 = fmul float %865, %879, !dbg !66
  %886 = fadd float %885, -1.000000e+00, !dbg !66
  %887 = fmul float %886, %886, !dbg !66
  %888 = fadd float %884, %887, !dbg !66
  %889 = call float @__ocml_sqrt_f32(float %888), !dbg !66
  %890 = fmul float %889, 5.000000e-01, !dbg !44
  %891 = call float @__ocml_asin_f32(float %890), !dbg !44
  %892 = call float @__ocml_atan2_f32(float %882, float %880), !dbg !45
  %893 = fmul float %877, 2.000000e+00, !dbg !67
  %894 = fmul float %893, 0x3FE45F3060000000, !dbg !67
  %895 = call float @__ocml_sqrt_f32(float %894), !dbg !67
  %896 = fmul float %891, 2.000000e+00, !dbg !68
  %897 = fmul float %896, 0x3FE45F3060000000, !dbg !68
  %898 = call float @__ocml_sqrt_f32(float %897), !dbg !68
  %899 = fadd float %892, 0x400921FB60000000, !dbg !69
  %900 = fdiv float %899, 0x401921FB60000000, !dbg !69
  %u_wm_4461174.repack = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4461174, i32 0, i32 0, !dbg !69
  store float %898, float addrspace(5)* %u_wm_4461174.repack, align 4, !dbg !69
  %u_wm_4461174.repack1123 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4461174, i32 0, i32 1, !dbg !69
  store float %900, float addrspace(5)* %u_wm_4461174.repack1123, align 4, !dbg !69
  %901 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 5, !dbg !69
  %902 = load i1, i1 addrspace(5)* %901, align 8, !dbg !69
  %903 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4461174, i32 0, i32 1, !dbg !69
  br i1 %902, label %expr_true159, label %if_join160, !dbg !69

expr_true159:                                     ; preds = %expr_false139
  %904 = fsub float %892, %878, !dbg !70
  %905 = fadd float %904, 0x400921FB60000000, !dbg !70
  %906 = fdiv float %905, 0x401921FB60000000, !dbg !70
  store float %906, float addrspace(5)* %903, align 4, !dbg !70
  br label %if_join160, !dbg !70

if_join160:                                       ; preds = %expr_false139, %expr_true159
  %907 = load float, float addrspace(5)* %903, align 4, !dbg !71
  %908 = call float @__ocml_floor_f32(float %907), !dbg !71
  %909 = fsub float %907, %908, !dbg !72
  store float %909, float addrspace(5)* %903, align 4, !dbg !72
  %.elt1125 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4461174, i32 0, i32 0, !dbg !72
  %.unpack1126 = load float, float addrspace(5)* %.elt1125, align 4, !dbg !72
  %910 = insertvalue %5 undef, float %.unpack1126, 0, !dbg !72
  %911 = insertvalue %5 %910, float %909, 1, !dbg !72
  %912 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 2, !dbg !72
  %913 = call fastcc %10 @invert_warp2D2_4461194(%3 addrspace(5)* %912, %5 %911, float %878, float %893), !dbg !72
  %fr_4463343.repack = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 0, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %fr_4463343.repack, align 4, !dbg !73
  %fr_4463343.repack1129 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 1, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %fr_4463343.repack1129, align 4, !dbg !73
  %fr_4463343.repack1130 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 2, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %fr_4463343.repack1130, align 4, !dbg !73
  %param_weight_4462241.repack = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 0, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462241.repack, align 4, !dbg !73
  %param_weight_4462241.repack1131 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 1, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462241.repack1131, align 4, !dbg !73
  %param_weight_4462241.repack1132 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 2, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462241.repack1132, align 4, !dbg !73
  %param_weight_4462241.repack1133 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 3, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462241.repack1133, align 4, !dbg !73
  %param_weight_4462241.repack1134 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 4, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462241.repack1134, align 4, !dbg !73
  %param_weight_4462241.repack1135 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 5, !dbg !73
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462241.repack1135, align 4, !dbg !73
  store i32 0, i32 addrspace(5)* %slice_offset_4462352, align 4, !dbg !73
  store i32 0, i32 addrspace(5)* %dim_4462217, align 4, !dbg !73
  %914 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, !dbg !73
  %915 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 4, !dbg !73
  %916 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 3, !dbg !73
  %917 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 5, !dbg !73
  %918 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 6, !dbg !73
  br label %expr_true227, !dbg !74

expr_false166:                                    ; preds = %continue244
  %919 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 2, !dbg !75
  %.elt1136 = getelementptr inbounds %5, %5 addrspace(5)* %919, i32 0, i32 0, !dbg !75
  %.unpack1137 = load float, float addrspace(5)* %.elt1136, align 8, !dbg !75
  %.elt1138 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 2, i32 1, !dbg !75
  %.unpack1139 = load float, float addrspace(5)* %.elt1138, align 4, !dbg !75
  %.elt1140 = getelementptr inbounds %3, %3 addrspace(5)* %914, i32 0, i32 0, i32 0, !dbg !75
  %.unpack1141 = load i32, i32 addrspace(5)* %.elt1140, align 8, !dbg !75
  %.elt1142 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 0, i32 1, !dbg !75
  %.unpack1143 = load i32, i32 addrspace(5)* %.elt1142, align 4, !dbg !75
  %920 = extractvalue %10 %913, 0, !dbg !75
  %921 = extractvalue %5 %920, 0, !dbg !75
  %922 = fmul float %921, %.unpack1137, !dbg !75
  %923 = sitofp i32 %.unpack1141 to float, !dbg !75
  %924 = fadd float %923, -2.000000e+00, !dbg !75
  %925 = fcmp olt float %922, %924, !dbg !75
  %926 = select i1 %925, float %922, float %924, !dbg !75
  %927 = call float @__ocml_floor_f32(float %926), !dbg !75
  %928 = extractvalue %5 %920, 1, !dbg !55
  %929 = fmul float %928, %.unpack1139, !dbg !55
  %930 = sitofp i32 %.unpack1143 to float, !dbg !55
  %931 = fadd float %930, -2.000000e+00, !dbg !55
  %932 = fcmp olt float %929, %931, !dbg !55
  %933 = select i1 %932, float %929, float %931, !dbg !55
  %934 = call float @__ocml_floor_f32(float %933), !dbg !55
  %935 = getelementptr inbounds %3, %3 addrspace(5)* %914, i32 0, i32 0, i32 0, !dbg !56
  %936 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %937 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 0, i32 1, !dbg !56
  %938 = load i32, i32 addrspace(5)* %937, align 4, !dbg !56
  %939 = load i32, i32 addrspace(5)* %slice_offset_4462352, align 4, !dbg !56
  %940 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 7, !dbg !56
  %941 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %942 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %943 = getelementptr inbounds [0 x i32], [0 x i32]* %942, i64 0, i64 2, !dbg !56
  %944 = load i32, i32* %943, align 4, !dbg !56
  %945 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 4, !dbg !56
  %946 = addrspacecast float addrspace(5)* %945 to float*, !dbg !56
  %947 = load float, float* %946, align 4, !dbg !56
  %948 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 5, !dbg !56
  %949 = addrspacecast float addrspace(5)* %948 to float*, !dbg !56
  %950 = load float, float* %949, align 4, !dbg !56
  %951 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %952 = getelementptr inbounds [0 x i32], [0 x i32]* %951, i64 0, i64 1, !dbg !56
  %953 = load i32, i32* %952, align 4, !dbg !56
  %954 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 2, !dbg !56
  %955 = addrspacecast float addrspace(5)* %954 to float*, !dbg !56
  %956 = load float, float* %955, align 4, !dbg !56
  %957 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 3, !dbg !56
  %958 = addrspacecast float addrspace(5)* %957 to float*, !dbg !56
  %959 = load float, float* %958, align 4, !dbg !56
  %960 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %961 = getelementptr inbounds [0 x i32], [0 x i32]* %960, i64 0, i64 0, !dbg !56
  %962 = load i32, i32* %961, align 4, !dbg !56
  %963 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 0, !dbg !56
  %964 = addrspacecast float addrspace(5)* %963 to float*, !dbg !56
  %965 = load float, float* %964, align 4, !dbg !56
  %966 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 1, !dbg !56
  %967 = addrspacecast float addrspace(5)* %966 to float*, !dbg !56
  %968 = load float, float* %967, align 4, !dbg !56
  %969 = fptosi float %927 to i32, !dbg !56
  %970 = fptosi float %934 to i32, !dbg !56
  %971 = mul nsw i32 %936, %970, !dbg !56
  %index563 = add nsw i32 %971, %969, !dbg !56
  %size564 = mul nsw i32 %936, %938, !dbg !56
  %972 = mul nsw i32 %939, %size564, !dbg !56
  %973 = add nsw i32 %index563, %972, !dbg !56
  %974 = sext i32 %973 to i64, !dbg !56
  %975 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %974, !dbg !56
  %976 = load float, float* %975, align 4, !dbg !56
  %977 = mul nsw i32 %962, %size564, !dbg !56
  %i1565 = add nsw i32 %973, %977, !dbg !56
  %978 = sext i32 %i1565 to i64, !dbg !56
  %979 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %978, !dbg !56
  %980 = load float, float* %979, align 4, !dbg !56
  %981 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %982 = getelementptr inbounds [0 x i32], [0 x i32]* %981, i64 0, i64 0, !dbg !56
  %983 = load i32, i32* %982, align 4, !dbg !56
  %984 = load float, float* %964, align 4, !dbg !56
  %985 = load float, float* %967, align 4, !dbg !56
  %986 = mul nsw i32 %953, %size564, !dbg !56
  %i1566 = add nsw i32 %973, %986, !dbg !56
  %987 = sext i32 %i1566 to i64, !dbg !56
  %988 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %987, !dbg !56
  %989 = load float, float* %988, align 4, !dbg !56
  %990 = mul nsw i32 %983, %size564, !dbg !56
  %i1567 = add nsw i32 %i1566, %990, !dbg !56
  %991 = sext i32 %i1567 to i64, !dbg !56
  %992 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %991, !dbg !56
  %993 = load float, float* %992, align 4, !dbg !56
  %994 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %995 = getelementptr inbounds [0 x i32], [0 x i32]* %994, i64 0, i64 1, !dbg !56
  %996 = load i32, i32* %995, align 4, !dbg !56
  %997 = load float, float* %955, align 4, !dbg !56
  %998 = load float, float* %958, align 4, !dbg !56
  %999 = getelementptr inbounds [0 x i32], [0 x i32]* %994, i64 0, i64 0, !dbg !56
  %1000 = load i32, i32* %999, align 4, !dbg !56
  %1001 = load float, float* %964, align 4, !dbg !56
  %1002 = load float, float* %967, align 4, !dbg !56
  %1003 = mul nsw i32 %944, %size564, !dbg !56
  %i1568 = add nsw i32 %973, %1003, !dbg !56
  %1004 = sext i32 %i1568 to i64, !dbg !56
  %1005 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %1004, !dbg !56
  %1006 = load float, float* %1005, align 4, !dbg !56
  %1007 = mul nsw i32 %1000, %size564, !dbg !56
  %i1569 = add nsw i32 %i1568, %1007, !dbg !56
  %1008 = sext i32 %i1569 to i64, !dbg !56
  %1009 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %1008, !dbg !56
  %1010 = load float, float* %1009, align 4, !dbg !56
  %1011 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1012 = getelementptr inbounds [0 x i32], [0 x i32]* %1011, i64 0, i64 0, !dbg !56
  %1013 = load i32, i32* %1012, align 4, !dbg !56
  %1014 = load float, float* %964, align 4, !dbg !56
  %1015 = load float, float* %967, align 4, !dbg !56
  %1016 = mul nsw i32 %996, %size564, !dbg !56
  %i1570 = add nsw i32 %i1568, %1016, !dbg !56
  %1017 = sext i32 %i1570 to i64, !dbg !56
  %1018 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %1017, !dbg !56
  %1019 = load float, float* %1018, align 4, !dbg !56
  %1020 = mul nsw i32 %1013, %size564, !dbg !56
  %i1571 = add nsw i32 %i1570, %1020, !dbg !56
  %1021 = sext i32 %i1571 to i64, !dbg !56
  %1022 = getelementptr inbounds [0 x float], [0 x float]* %941, i64 0, i64 %1021, !dbg !56
  %1023 = load float, float* %1022, align 4, !dbg !56
  %1024 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1025 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1026 = getelementptr inbounds [0 x i32], [0 x i32]* %1025, i64 0, i64 2, !dbg !56
  %1027 = load i32, i32* %1026, align 4, !dbg !56
  %1028 = load float, float* %946, align 4, !dbg !56
  %1029 = load float, float* %949, align 4, !dbg !56
  %1030 = getelementptr inbounds [0 x i32], [0 x i32]* %1025, i64 0, i64 1, !dbg !56
  %1031 = load i32, i32* %1030, align 4, !dbg !56
  %1032 = load float, float* %955, align 4, !dbg !56
  %1033 = load float, float* %958, align 4, !dbg !56
  %1034 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1035 = getelementptr inbounds [0 x i32], [0 x i32]* %1034, i64 0, i64 0, !dbg !56
  %1036 = load i32, i32* %1035, align 4, !dbg !56
  %1037 = load float, float* %964, align 4, !dbg !56
  %1038 = load float, float* %967, align 4, !dbg !56
  %1039 = getelementptr inbounds [0 x float], [0 x float]* %1024, i64 0, i64 1, !dbg !56
  %1040 = sext i32 %973 to i64, !dbg !56
  %1041 = getelementptr inbounds float, float* %1039, i64 %1040, !dbg !56
  %1042 = load float, float* %1041, align 4, !dbg !56
  %1043 = mul nsw i32 %1036, %size564, !dbg !56
  %i1572 = add nsw i32 %973, %1043, !dbg !56
  %1044 = sext i32 %i1572 to i64, !dbg !56
  %1045 = getelementptr inbounds float, float* %1039, i64 %1044, !dbg !56
  %1046 = load float, float* %1045, align 4, !dbg !56
  %1047 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1048 = getelementptr inbounds [0 x i32], [0 x i32]* %1047, i64 0, i64 0, !dbg !56
  %1049 = load i32, i32* %1048, align 4, !dbg !56
  %1050 = load float, float* %964, align 4, !dbg !56
  %1051 = load float, float* %967, align 4, !dbg !56
  %1052 = mul nsw i32 %1031, %size564, !dbg !56
  %i1573 = add nsw i32 %973, %1052, !dbg !56
  %1053 = sext i32 %i1573 to i64, !dbg !56
  %1054 = getelementptr inbounds float, float* %1039, i64 %1053, !dbg !56
  %1055 = load float, float* %1054, align 4, !dbg !56
  %1056 = mul nsw i32 %1049, %size564, !dbg !56
  %i1574 = add nsw i32 %i1573, %1056, !dbg !56
  %1057 = sext i32 %i1574 to i64, !dbg !56
  %1058 = getelementptr inbounds float, float* %1039, i64 %1057, !dbg !56
  %1059 = load float, float* %1058, align 4, !dbg !56
  %1060 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1061 = getelementptr inbounds [0 x i32], [0 x i32]* %1060, i64 0, i64 1, !dbg !56
  %1062 = load i32, i32* %1061, align 4, !dbg !56
  %1063 = load float, float* %955, align 4, !dbg !56
  %1064 = load float, float* %958, align 4, !dbg !56
  %1065 = getelementptr inbounds [0 x i32], [0 x i32]* %1060, i64 0, i64 0, !dbg !56
  %1066 = load i32, i32* %1065, align 4, !dbg !56
  %1067 = load float, float* %964, align 4, !dbg !56
  %1068 = load float, float* %967, align 4, !dbg !56
  %1069 = mul nsw i32 %1027, %size564, !dbg !56
  %i1575 = add nsw i32 %973, %1069, !dbg !56
  %1070 = sext i32 %i1575 to i64, !dbg !56
  %1071 = getelementptr inbounds float, float* %1039, i64 %1070, !dbg !56
  %1072 = load float, float* %1071, align 4, !dbg !56
  %1073 = mul nsw i32 %1066, %size564, !dbg !56
  %i1576 = add nsw i32 %i1575, %1073, !dbg !56
  %1074 = sext i32 %i1576 to i64, !dbg !56
  %1075 = getelementptr inbounds float, float* %1039, i64 %1074, !dbg !56
  %1076 = load float, float* %1075, align 4, !dbg !56
  %1077 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1078 = getelementptr inbounds [0 x i32], [0 x i32]* %1077, i64 0, i64 0, !dbg !56
  %1079 = load i32, i32* %1078, align 4, !dbg !56
  %1080 = load float, float* %964, align 4, !dbg !56
  %1081 = load float, float* %967, align 4, !dbg !56
  %1082 = mul nsw i32 %1062, %size564, !dbg !56
  %i1577 = add nsw i32 %i1575, %1082, !dbg !56
  %1083 = sext i32 %i1577 to i64, !dbg !56
  %1084 = getelementptr inbounds float, float* %1039, i64 %1083, !dbg !56
  %1085 = load float, float* %1084, align 4, !dbg !56
  %1086 = mul nsw i32 %1079, %size564, !dbg !56
  %i1578 = add nsw i32 %i1577, %1086, !dbg !56
  %1087 = sext i32 %i1578 to i64, !dbg !56
  %1088 = getelementptr inbounds float, float* %1039, i64 %1087, !dbg !56
  %1089 = load float, float* %1088, align 4, !dbg !56
  %1090 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1091 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1092 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1093 = getelementptr inbounds [0 x i32], [0 x i32]* %1092, i64 0, i64 2, !dbg !56
  %1094 = load i32, i32* %1093, align 4, !dbg !56
  %1095 = load float, float* %946, align 4, !dbg !56
  %1096 = load float, float* %949, align 4, !dbg !56
  %1097 = getelementptr inbounds [0 x i32], [0 x i32]* %1092, i64 0, i64 1, !dbg !56
  %1098 = load i32, i32* %1097, align 4, !dbg !56
  %1099 = load float, float* %955, align 4, !dbg !56
  %1100 = load float, float* %958, align 4, !dbg !56
  %1101 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1102 = getelementptr inbounds [0 x i32], [0 x i32]* %1101, i64 0, i64 0, !dbg !56
  %1103 = load i32, i32* %1102, align 4, !dbg !56
  %1104 = load float, float* %964, align 4, !dbg !56
  %1105 = load float, float* %967, align 4, !dbg !56
  %1106 = sext i32 %1091 to i64, !dbg !56
  %1107 = getelementptr inbounds [0 x float], [0 x float]* %1090, i64 0, i64 %1106, !dbg !56
  %1108 = sext i32 %973 to i64, !dbg !56
  %1109 = getelementptr inbounds float, float* %1107, i64 %1108, !dbg !56
  %1110 = load float, float* %1109, align 4, !dbg !56
  %1111 = mul nsw i32 %1103, %size564, !dbg !56
  %i1579 = add nsw i32 %973, %1111, !dbg !56
  %1112 = sext i32 %i1579 to i64, !dbg !56
  %1113 = getelementptr inbounds float, float* %1107, i64 %1112, !dbg !56
  %1114 = load float, float* %1113, align 4, !dbg !56
  %1115 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1116 = getelementptr inbounds [0 x i32], [0 x i32]* %1115, i64 0, i64 0, !dbg !56
  %1117 = load i32, i32* %1116, align 4, !dbg !56
  %1118 = load float, float* %964, align 4, !dbg !56
  %1119 = load float, float* %967, align 4, !dbg !56
  %1120 = mul nsw i32 %1098, %size564, !dbg !56
  %i1580 = add nsw i32 %973, %1120, !dbg !56
  %1121 = sext i32 %i1580 to i64, !dbg !56
  %1122 = getelementptr inbounds float, float* %1107, i64 %1121, !dbg !56
  %1123 = load float, float* %1122, align 4, !dbg !56
  %1124 = mul nsw i32 %1117, %size564, !dbg !56
  %i1581 = add nsw i32 %i1580, %1124, !dbg !56
  %1125 = sext i32 %i1581 to i64, !dbg !56
  %1126 = getelementptr inbounds float, float* %1107, i64 %1125, !dbg !56
  %1127 = load float, float* %1126, align 4, !dbg !56
  %1128 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1129 = getelementptr inbounds [0 x i32], [0 x i32]* %1128, i64 0, i64 1, !dbg !56
  %1130 = load i32, i32* %1129, align 4, !dbg !56
  %1131 = load float, float* %955, align 4, !dbg !56
  %1132 = load float, float* %958, align 4, !dbg !56
  %1133 = getelementptr inbounds [0 x i32], [0 x i32]* %1128, i64 0, i64 0, !dbg !56
  %1134 = load i32, i32* %1133, align 4, !dbg !56
  %1135 = load float, float* %964, align 4, !dbg !56
  %1136 = load float, float* %967, align 4, !dbg !56
  %1137 = mul nsw i32 %1094, %size564, !dbg !56
  %i1582 = add nsw i32 %973, %1137, !dbg !56
  %1138 = sext i32 %i1582 to i64, !dbg !56
  %1139 = getelementptr inbounds float, float* %1107, i64 %1138, !dbg !56
  %1140 = load float, float* %1139, align 4, !dbg !56
  %1141 = mul nsw i32 %1134, %size564, !dbg !56
  %i1583 = add nsw i32 %i1582, %1141, !dbg !56
  %1142 = sext i32 %i1583 to i64, !dbg !56
  %1143 = getelementptr inbounds float, float* %1107, i64 %1142, !dbg !56
  %1144 = load float, float* %1143, align 4, !dbg !56
  %1145 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1146 = getelementptr inbounds [0 x i32], [0 x i32]* %1145, i64 0, i64 0, !dbg !56
  %1147 = load i32, i32* %1146, align 4, !dbg !56
  %1148 = load float, float* %964, align 4, !dbg !56
  %1149 = load float, float* %967, align 4, !dbg !56
  %1150 = mul nsw i32 %1130, %size564, !dbg !56
  %i1584 = add nsw i32 %i1582, %1150, !dbg !56
  %1151 = sext i32 %i1584 to i64, !dbg !56
  %1152 = getelementptr inbounds float, float* %1107, i64 %1151, !dbg !56
  %1153 = load float, float* %1152, align 4, !dbg !56
  %1154 = mul nsw i32 %1147, %size564, !dbg !56
  %i1585 = add nsw i32 %i1584, %1154, !dbg !56
  %1155 = sext i32 %i1585 to i64, !dbg !56
  %1156 = getelementptr inbounds float, float* %1107, i64 %1155, !dbg !56
  %1157 = load float, float* %1156, align 4, !dbg !56
  %1158 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1159 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1160 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1161 = getelementptr inbounds [0 x i32], [0 x i32]* %1160, i64 0, i64 2, !dbg !56
  %1162 = load i32, i32* %1161, align 4, !dbg !56
  %1163 = load float, float* %946, align 4, !dbg !56
  %1164 = load float, float* %949, align 4, !dbg !56
  %1165 = getelementptr inbounds [0 x i32], [0 x i32]* %1160, i64 0, i64 1, !dbg !56
  %1166 = load i32, i32* %1165, align 4, !dbg !56
  %1167 = load float, float* %955, align 4, !dbg !56
  %1168 = load float, float* %958, align 4, !dbg !56
  %1169 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1170 = getelementptr inbounds [0 x i32], [0 x i32]* %1169, i64 0, i64 0, !dbg !56
  %1171 = load i32, i32* %1170, align 4, !dbg !56
  %1172 = load float, float* %964, align 4, !dbg !56
  %1173 = load float, float* %967, align 4, !dbg !56
  %1174 = add nsw i32 %1159, 1, !dbg !56
  %1175 = sext i32 %1174 to i64, !dbg !56
  %1176 = getelementptr inbounds [0 x float], [0 x float]* %1158, i64 0, i64 %1175, !dbg !56
  %1177 = sext i32 %973 to i64, !dbg !56
  %1178 = getelementptr inbounds float, float* %1176, i64 %1177, !dbg !56
  %1179 = load float, float* %1178, align 4, !dbg !56
  %1180 = mul nsw i32 %1171, %size564, !dbg !56
  %i1586 = add nsw i32 %973, %1180, !dbg !56
  %1181 = sext i32 %i1586 to i64, !dbg !56
  %1182 = getelementptr inbounds float, float* %1176, i64 %1181, !dbg !56
  %1183 = load float, float* %1182, align 4, !dbg !56
  %1184 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1185 = getelementptr inbounds [0 x i32], [0 x i32]* %1184, i64 0, i64 0, !dbg !56
  %1186 = load i32, i32* %1185, align 4, !dbg !56
  %1187 = load float, float* %964, align 4, !dbg !56
  %1188 = load float, float* %967, align 4, !dbg !56
  %1189 = mul nsw i32 %1166, %size564, !dbg !56
  %i1587 = add nsw i32 %973, %1189, !dbg !56
  %1190 = sext i32 %i1587 to i64, !dbg !56
  %1191 = getelementptr inbounds float, float* %1176, i64 %1190, !dbg !56
  %1192 = load float, float* %1191, align 4, !dbg !56
  %1193 = mul nsw i32 %1186, %size564, !dbg !56
  %i1588 = add nsw i32 %i1587, %1193, !dbg !56
  %1194 = sext i32 %i1588 to i64, !dbg !56
  %1195 = getelementptr inbounds float, float* %1176, i64 %1194, !dbg !56
  %1196 = load float, float* %1195, align 4, !dbg !56
  %1197 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1198 = getelementptr inbounds [0 x i32], [0 x i32]* %1197, i64 0, i64 1, !dbg !56
  %1199 = load i32, i32* %1198, align 4, !dbg !56
  %1200 = load float, float* %955, align 4, !dbg !56
  %1201 = load float, float* %958, align 4, !dbg !56
  %1202 = getelementptr inbounds [0 x i32], [0 x i32]* %1197, i64 0, i64 0, !dbg !56
  %1203 = load i32, i32* %1202, align 4, !dbg !56
  %1204 = load float, float* %964, align 4, !dbg !56
  %1205 = load float, float* %967, align 4, !dbg !56
  %1206 = mul nsw i32 %1162, %size564, !dbg !56
  %i1589 = add nsw i32 %973, %1206, !dbg !56
  %1207 = sext i32 %i1589 to i64, !dbg !56
  %1208 = getelementptr inbounds float, float* %1176, i64 %1207, !dbg !56
  %1209 = load float, float* %1208, align 4, !dbg !56
  %1210 = mul nsw i32 %1203, %size564, !dbg !56
  %i1590 = add nsw i32 %i1589, %1210, !dbg !56
  %1211 = sext i32 %i1590 to i64, !dbg !56
  %1212 = getelementptr inbounds float, float* %1176, i64 %1211, !dbg !56
  %1213 = load float, float* %1212, align 4, !dbg !56
  %1214 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1215 = getelementptr inbounds [0 x i32], [0 x i32]* %1214, i64 0, i64 0, !dbg !56
  %1216 = load i32, i32* %1215, align 4, !dbg !56
  %1217 = load float, float* %964, align 4, !dbg !56
  %1218 = load float, float* %967, align 4, !dbg !56
  %1219 = mul nsw i32 %1199, %size564, !dbg !56
  %i1591 = add nsw i32 %i1589, %1219, !dbg !56
  %1220 = sext i32 %i1591 to i64, !dbg !56
  %1221 = getelementptr inbounds float, float* %1176, i64 %1220, !dbg !56
  %1222 = load float, float* %1221, align 4, !dbg !56
  %1223 = mul nsw i32 %1216, %size564, !dbg !56
  %i1592 = add nsw i32 %i1591, %1223, !dbg !56
  %1224 = sext i32 %i1592 to i64, !dbg !56
  %1225 = getelementptr inbounds float, float* %1176, i64 %1224, !dbg !56
  %1226 = load float, float* %1225, align 4, !dbg !56
  %1227 = getelementptr inbounds %5, %5 addrspace(5)* %919, i32 0, i32 0, !dbg !56
  %1228 = load float, float addrspace(5)* %1227, align 8, !dbg !56
  %1229 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 2, i32 1, !dbg !56
  %1230 = load float, float addrspace(5)* %1229, align 4, !dbg !56
  %1231 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 0, !dbg !56
  %1232 = fsub float %929, %934, !dbg !56
  %1233 = fsub float 1.000000e+00, %1232, !dbg !56
  %1234 = fsub float %922, %927, !dbg !56
  %1235 = fsub float 1.000000e+00, %1234, !dbg !56
  %1236 = fmul float %976, %965, !dbg !56
  %1237 = fmul float %980, %968, !dbg !56
  %1238 = fadd float %1236, %1237, !dbg !56
  %1239 = fmul float %1238, %956, !dbg !56
  %1240 = fmul float %989, %984, !dbg !56
  %1241 = fmul float %993, %985, !dbg !56
  %1242 = fadd float %1240, %1241, !dbg !56
  %1243 = fmul float %1242, %959, !dbg !56
  %1244 = fadd float %1239, %1243, !dbg !56
  %1245 = fmul float %1244, %947, !dbg !56
  %1246 = fmul float %1006, %1001, !dbg !56
  %1247 = fmul float %1010, %1002, !dbg !56
  %1248 = fadd float %1246, %1247, !dbg !56
  %1249 = fmul float %1248, %997, !dbg !56
  %1250 = fmul float %1019, %1014, !dbg !56
  %1251 = fmul float %1023, %1015, !dbg !56
  %1252 = fadd float %1250, %1251, !dbg !56
  %1253 = fmul float %1252, %998, !dbg !56
  %1254 = fadd float %1249, %1253, !dbg !56
  %1255 = fmul float %1254, %950, !dbg !56
  %1256 = fadd float %1245, %1255, !dbg !56
  %1257 = fmul float %1235, %1256, !dbg !56
  %1258 = fmul float %1042, %1037, !dbg !56
  %1259 = fmul float %1046, %1038, !dbg !56
  %1260 = fadd float %1258, %1259, !dbg !56
  %1261 = fmul float %1260, %1032, !dbg !56
  %1262 = fmul float %1055, %1050, !dbg !56
  %1263 = fmul float %1059, %1051, !dbg !56
  %1264 = fadd float %1262, %1263, !dbg !56
  %1265 = fmul float %1264, %1033, !dbg !56
  %1266 = fadd float %1261, %1265, !dbg !56
  %1267 = fmul float %1266, %1028, !dbg !56
  %1268 = fmul float %1072, %1067, !dbg !56
  %1269 = fmul float %1076, %1068, !dbg !56
  %1270 = fadd float %1268, %1269, !dbg !56
  %1271 = fmul float %1270, %1063, !dbg !56
  %1272 = fmul float %1085, %1080, !dbg !56
  %1273 = fmul float %1089, %1081, !dbg !56
  %1274 = fadd float %1272, %1273, !dbg !56
  %1275 = fmul float %1274, %1064, !dbg !56
  %1276 = fadd float %1271, %1275, !dbg !56
  %1277 = fmul float %1276, %1029, !dbg !56
  %1278 = fadd float %1267, %1277, !dbg !56
  %1279 = fmul float %1234, %1278, !dbg !56
  %1280 = fadd float %1257, %1279, !dbg !56
  %1281 = fmul float %1233, %1280, !dbg !56
  %1282 = fmul float %1110, %1104, !dbg !56
  %1283 = fmul float %1114, %1105, !dbg !56
  %1284 = fadd float %1282, %1283, !dbg !56
  %1285 = fmul float %1284, %1099, !dbg !56
  %1286 = fmul float %1123, %1118, !dbg !56
  %1287 = fmul float %1127, %1119, !dbg !56
  %1288 = fadd float %1286, %1287, !dbg !56
  %1289 = fmul float %1288, %1100, !dbg !56
  %1290 = fadd float %1285, %1289, !dbg !56
  %1291 = fmul float %1290, %1095, !dbg !56
  %1292 = fmul float %1140, %1135, !dbg !56
  %1293 = fmul float %1144, %1136, !dbg !56
  %1294 = fadd float %1292, %1293, !dbg !56
  %1295 = fmul float %1294, %1131, !dbg !56
  %1296 = fmul float %1153, %1148, !dbg !56
  %1297 = fmul float %1157, %1149, !dbg !56
  %1298 = fadd float %1296, %1297, !dbg !56
  %1299 = fmul float %1298, %1132, !dbg !56
  %1300 = fadd float %1295, %1299, !dbg !56
  %1301 = fmul float %1300, %1096, !dbg !56
  %1302 = fadd float %1291, %1301, !dbg !56
  %1303 = fmul float %1235, %1302, !dbg !56
  %1304 = fmul float %1179, %1172, !dbg !56
  %1305 = fmul float %1183, %1173, !dbg !56
  %1306 = fadd float %1304, %1305, !dbg !56
  %1307 = fmul float %1306, %1167, !dbg !56
  %1308 = fmul float %1192, %1187, !dbg !56
  %1309 = fmul float %1196, %1188, !dbg !56
  %1310 = fadd float %1308, %1309, !dbg !56
  %1311 = fmul float %1310, %1168, !dbg !56
  %1312 = fadd float %1307, %1311, !dbg !56
  %1313 = fmul float %1312, %1163, !dbg !56
  %1314 = fmul float %1209, %1204, !dbg !56
  %1315 = fmul float %1213, %1205, !dbg !56
  %1316 = fadd float %1314, %1315, !dbg !56
  %1317 = fmul float %1316, %1200, !dbg !56
  %1318 = fmul float %1222, %1217, !dbg !56
  %1319 = fmul float %1226, %1218, !dbg !56
  %1320 = fadd float %1318, %1319, !dbg !56
  %1321 = fmul float %1320, %1201, !dbg !56
  %1322 = fadd float %1317, %1321, !dbg !56
  %1323 = fmul float %1322, %1164, !dbg !56
  %1324 = fadd float %1313, %1323, !dbg !56
  %1325 = fmul float %1234, %1324, !dbg !56
  %1326 = fadd float %1303, %1325, !dbg !56
  %1327 = fmul float %1232, %1326, !dbg !56
  %1328 = fadd float %1281, %1327, !dbg !56
  %hprod593 = fmul float %1228, %1230, !dbg !56
  %1329 = fmul float %1328, %hprod593, !dbg !56
  store float %1329, float addrspace(5)* %1231, align 4, !dbg !56
  %param_weight_4462439.repack = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 0, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462439.repack, align 4, !dbg !56
  %param_weight_4462439.repack1144 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 1, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462439.repack1144, align 4, !dbg !56
  %param_weight_4462439.repack1145 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 2, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462439.repack1145, align 4, !dbg !56
  %param_weight_4462439.repack1146 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 3, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462439.repack1146, align 4, !dbg !56
  %param_weight_4462439.repack1147 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 4, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462439.repack1147, align 4, !dbg !56
  %param_weight_4462439.repack1148 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 5, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462439.repack1148, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %slice_offset_4462547, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %dim_4462417, align 4, !dbg !56
  br label %expr_true209, !dbg !74

expr_false172:                                    ; preds = %continue226
  %.elt1149 = getelementptr inbounds %5, %5 addrspace(5)* %919, i32 0, i32 0, !dbg !75
  %.unpack1150 = load float, float addrspace(5)* %.elt1149, align 8, !dbg !75
  %.elt1151 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 2, i32 1, !dbg !75
  %.unpack1152 = load float, float addrspace(5)* %.elt1151, align 4, !dbg !75
  %.elt1153 = getelementptr inbounds %3, %3 addrspace(5)* %914, i32 0, i32 0, i32 0, !dbg !75
  %.unpack1154 = load i32, i32 addrspace(5)* %.elt1153, align 8, !dbg !75
  %.elt1155 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 0, i32 1, !dbg !75
  %.unpack1156 = load i32, i32 addrspace(5)* %.elt1155, align 4, !dbg !75
  %1330 = fmul float %921, %.unpack1150, !dbg !75
  %1331 = sitofp i32 %.unpack1154 to float, !dbg !75
  %1332 = fadd float %1331, -2.000000e+00, !dbg !75
  %1333 = fcmp olt float %1330, %1332, !dbg !75
  %1334 = select i1 %1333, float %1330, float %1332, !dbg !75
  %1335 = call float @__ocml_floor_f32(float %1334), !dbg !75
  %1336 = fmul float %928, %.unpack1152, !dbg !55
  %1337 = sitofp i32 %.unpack1156 to float, !dbg !55
  %1338 = fadd float %1337, -2.000000e+00, !dbg !55
  %1339 = fcmp olt float %1336, %1338, !dbg !55
  %1340 = select i1 %1339, float %1336, float %1338, !dbg !55
  %1341 = call float @__ocml_floor_f32(float %1340), !dbg !55
  %1342 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1343 = load i32, i32 addrspace(5)* %937, align 4, !dbg !56
  %1344 = load i32, i32 addrspace(5)* %slice_offset_4462547, align 4, !dbg !56
  %1345 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1346 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1347 = getelementptr inbounds [0 x i32], [0 x i32]* %1346, i64 0, i64 2, !dbg !56
  %1348 = load i32, i32* %1347, align 4, !dbg !56
  %1349 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 4, !dbg !56
  %1350 = addrspacecast float addrspace(5)* %1349 to float*, !dbg !56
  %1351 = load float, float* %1350, align 4, !dbg !56
  %1352 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 5, !dbg !56
  %1353 = addrspacecast float addrspace(5)* %1352 to float*, !dbg !56
  %1354 = load float, float* %1353, align 4, !dbg !56
  %1355 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1356 = getelementptr inbounds [0 x i32], [0 x i32]* %1355, i64 0, i64 1, !dbg !56
  %1357 = load i32, i32* %1356, align 4, !dbg !56
  %1358 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 2, !dbg !56
  %1359 = addrspacecast float addrspace(5)* %1358 to float*, !dbg !56
  %1360 = load float, float* %1359, align 4, !dbg !56
  %1361 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 3, !dbg !56
  %1362 = addrspacecast float addrspace(5)* %1361 to float*, !dbg !56
  %1363 = load float, float* %1362, align 4, !dbg !56
  %1364 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1365 = getelementptr inbounds [0 x i32], [0 x i32]* %1364, i64 0, i64 0, !dbg !56
  %1366 = load i32, i32* %1365, align 4, !dbg !56
  %1367 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 0, !dbg !56
  %1368 = addrspacecast float addrspace(5)* %1367 to float*, !dbg !56
  %1369 = load float, float* %1368, align 4, !dbg !56
  %1370 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 1, !dbg !56
  %1371 = addrspacecast float addrspace(5)* %1370 to float*, !dbg !56
  %1372 = load float, float* %1371, align 4, !dbg !56
  %1373 = fptosi float %1335 to i32, !dbg !56
  %1374 = fptosi float %1341 to i32, !dbg !56
  %1375 = mul nsw i32 %1342, %1374, !dbg !56
  %index594 = add nsw i32 %1375, %1373, !dbg !56
  %size595 = mul nsw i32 %1342, %1343, !dbg !56
  %1376 = mul nsw i32 %1344, %size595, !dbg !56
  %1377 = add nsw i32 %index594, %1376, !dbg !56
  %1378 = sext i32 %1377 to i64, !dbg !56
  %1379 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1378, !dbg !56
  %1380 = load float, float* %1379, align 4, !dbg !56
  %1381 = mul nsw i32 %1366, %size595, !dbg !56
  %i1596 = add nsw i32 %1377, %1381, !dbg !56
  %1382 = sext i32 %i1596 to i64, !dbg !56
  %1383 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1382, !dbg !56
  %1384 = load float, float* %1383, align 4, !dbg !56
  %1385 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1386 = getelementptr inbounds [0 x i32], [0 x i32]* %1385, i64 0, i64 0, !dbg !56
  %1387 = load i32, i32* %1386, align 4, !dbg !56
  %1388 = load float, float* %1368, align 4, !dbg !56
  %1389 = load float, float* %1371, align 4, !dbg !56
  %1390 = mul nsw i32 %1357, %size595, !dbg !56
  %i1597 = add nsw i32 %1377, %1390, !dbg !56
  %1391 = sext i32 %i1597 to i64, !dbg !56
  %1392 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1391, !dbg !56
  %1393 = load float, float* %1392, align 4, !dbg !56
  %1394 = mul nsw i32 %1387, %size595, !dbg !56
  %i1598 = add nsw i32 %i1597, %1394, !dbg !56
  %1395 = sext i32 %i1598 to i64, !dbg !56
  %1396 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1395, !dbg !56
  %1397 = load float, float* %1396, align 4, !dbg !56
  %1398 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1399 = getelementptr inbounds [0 x i32], [0 x i32]* %1398, i64 0, i64 1, !dbg !56
  %1400 = load i32, i32* %1399, align 4, !dbg !56
  %1401 = load float, float* %1359, align 4, !dbg !56
  %1402 = load float, float* %1362, align 4, !dbg !56
  %1403 = getelementptr inbounds [0 x i32], [0 x i32]* %1398, i64 0, i64 0, !dbg !56
  %1404 = load i32, i32* %1403, align 4, !dbg !56
  %1405 = load float, float* %1368, align 4, !dbg !56
  %1406 = load float, float* %1371, align 4, !dbg !56
  %1407 = mul nsw i32 %1348, %size595, !dbg !56
  %i1599 = add nsw i32 %1377, %1407, !dbg !56
  %1408 = sext i32 %i1599 to i64, !dbg !56
  %1409 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1408, !dbg !56
  %1410 = load float, float* %1409, align 4, !dbg !56
  %1411 = mul nsw i32 %1404, %size595, !dbg !56
  %i1600 = add nsw i32 %i1599, %1411, !dbg !56
  %1412 = sext i32 %i1600 to i64, !dbg !56
  %1413 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1412, !dbg !56
  %1414 = load float, float* %1413, align 4, !dbg !56
  %1415 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1416 = getelementptr inbounds [0 x i32], [0 x i32]* %1415, i64 0, i64 0, !dbg !56
  %1417 = load i32, i32* %1416, align 4, !dbg !56
  %1418 = load float, float* %1368, align 4, !dbg !56
  %1419 = load float, float* %1371, align 4, !dbg !56
  %1420 = mul nsw i32 %1400, %size595, !dbg !56
  %i1601 = add nsw i32 %i1599, %1420, !dbg !56
  %1421 = sext i32 %i1601 to i64, !dbg !56
  %1422 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1421, !dbg !56
  %1423 = load float, float* %1422, align 4, !dbg !56
  %1424 = mul nsw i32 %1417, %size595, !dbg !56
  %i1602 = add nsw i32 %i1601, %1424, !dbg !56
  %1425 = sext i32 %i1602 to i64, !dbg !56
  %1426 = getelementptr inbounds [0 x float], [0 x float]* %1345, i64 0, i64 %1425, !dbg !56
  %1427 = load float, float* %1426, align 4, !dbg !56
  %1428 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1429 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1430 = getelementptr inbounds [0 x i32], [0 x i32]* %1429, i64 0, i64 2, !dbg !56
  %1431 = load i32, i32* %1430, align 4, !dbg !56
  %1432 = load float, float* %1350, align 4, !dbg !56
  %1433 = load float, float* %1353, align 4, !dbg !56
  %1434 = getelementptr inbounds [0 x i32], [0 x i32]* %1429, i64 0, i64 1, !dbg !56
  %1435 = load i32, i32* %1434, align 4, !dbg !56
  %1436 = load float, float* %1359, align 4, !dbg !56
  %1437 = load float, float* %1362, align 4, !dbg !56
  %1438 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1439 = getelementptr inbounds [0 x i32], [0 x i32]* %1438, i64 0, i64 0, !dbg !56
  %1440 = load i32, i32* %1439, align 4, !dbg !56
  %1441 = load float, float* %1368, align 4, !dbg !56
  %1442 = load float, float* %1371, align 4, !dbg !56
  %1443 = getelementptr inbounds [0 x float], [0 x float]* %1428, i64 0, i64 1, !dbg !56
  %1444 = sext i32 %1377 to i64, !dbg !56
  %1445 = getelementptr inbounds float, float* %1443, i64 %1444, !dbg !56
  %1446 = load float, float* %1445, align 4, !dbg !56
  %1447 = mul nsw i32 %1440, %size595, !dbg !56
  %i1603 = add nsw i32 %1377, %1447, !dbg !56
  %1448 = sext i32 %i1603 to i64, !dbg !56
  %1449 = getelementptr inbounds float, float* %1443, i64 %1448, !dbg !56
  %1450 = load float, float* %1449, align 4, !dbg !56
  %1451 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1452 = getelementptr inbounds [0 x i32], [0 x i32]* %1451, i64 0, i64 0, !dbg !56
  %1453 = load i32, i32* %1452, align 4, !dbg !56
  %1454 = load float, float* %1368, align 4, !dbg !56
  %1455 = load float, float* %1371, align 4, !dbg !56
  %1456 = mul nsw i32 %1435, %size595, !dbg !56
  %i1604 = add nsw i32 %1377, %1456, !dbg !56
  %1457 = sext i32 %i1604 to i64, !dbg !56
  %1458 = getelementptr inbounds float, float* %1443, i64 %1457, !dbg !56
  %1459 = load float, float* %1458, align 4, !dbg !56
  %1460 = mul nsw i32 %1453, %size595, !dbg !56
  %i1605 = add nsw i32 %i1604, %1460, !dbg !56
  %1461 = sext i32 %i1605 to i64, !dbg !56
  %1462 = getelementptr inbounds float, float* %1443, i64 %1461, !dbg !56
  %1463 = load float, float* %1462, align 4, !dbg !56
  %1464 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1465 = getelementptr inbounds [0 x i32], [0 x i32]* %1464, i64 0, i64 1, !dbg !56
  %1466 = load i32, i32* %1465, align 4, !dbg !56
  %1467 = load float, float* %1359, align 4, !dbg !56
  %1468 = load float, float* %1362, align 4, !dbg !56
  %1469 = getelementptr inbounds [0 x i32], [0 x i32]* %1464, i64 0, i64 0, !dbg !56
  %1470 = load i32, i32* %1469, align 4, !dbg !56
  %1471 = load float, float* %1368, align 4, !dbg !56
  %1472 = load float, float* %1371, align 4, !dbg !56
  %1473 = mul nsw i32 %1431, %size595, !dbg !56
  %i1606 = add nsw i32 %1377, %1473, !dbg !56
  %1474 = sext i32 %i1606 to i64, !dbg !56
  %1475 = getelementptr inbounds float, float* %1443, i64 %1474, !dbg !56
  %1476 = load float, float* %1475, align 4, !dbg !56
  %1477 = mul nsw i32 %1470, %size595, !dbg !56
  %i1607 = add nsw i32 %i1606, %1477, !dbg !56
  %1478 = sext i32 %i1607 to i64, !dbg !56
  %1479 = getelementptr inbounds float, float* %1443, i64 %1478, !dbg !56
  %1480 = load float, float* %1479, align 4, !dbg !56
  %1481 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1482 = getelementptr inbounds [0 x i32], [0 x i32]* %1481, i64 0, i64 0, !dbg !56
  %1483 = load i32, i32* %1482, align 4, !dbg !56
  %1484 = load float, float* %1368, align 4, !dbg !56
  %1485 = load float, float* %1371, align 4, !dbg !56
  %1486 = mul nsw i32 %1466, %size595, !dbg !56
  %i1608 = add nsw i32 %i1606, %1486, !dbg !56
  %1487 = sext i32 %i1608 to i64, !dbg !56
  %1488 = getelementptr inbounds float, float* %1443, i64 %1487, !dbg !56
  %1489 = load float, float* %1488, align 4, !dbg !56
  %1490 = mul nsw i32 %1483, %size595, !dbg !56
  %i1609 = add nsw i32 %i1608, %1490, !dbg !56
  %1491 = sext i32 %i1609 to i64, !dbg !56
  %1492 = getelementptr inbounds float, float* %1443, i64 %1491, !dbg !56
  %1493 = load float, float* %1492, align 4, !dbg !56
  %1494 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1495 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1496 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1497 = getelementptr inbounds [0 x i32], [0 x i32]* %1496, i64 0, i64 2, !dbg !56
  %1498 = load i32, i32* %1497, align 4, !dbg !56
  %1499 = load float, float* %1350, align 4, !dbg !56
  %1500 = load float, float* %1353, align 4, !dbg !56
  %1501 = getelementptr inbounds [0 x i32], [0 x i32]* %1496, i64 0, i64 1, !dbg !56
  %1502 = load i32, i32* %1501, align 4, !dbg !56
  %1503 = load float, float* %1359, align 4, !dbg !56
  %1504 = load float, float* %1362, align 4, !dbg !56
  %1505 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1506 = getelementptr inbounds [0 x i32], [0 x i32]* %1505, i64 0, i64 0, !dbg !56
  %1507 = load i32, i32* %1506, align 4, !dbg !56
  %1508 = load float, float* %1368, align 4, !dbg !56
  %1509 = load float, float* %1371, align 4, !dbg !56
  %1510 = sext i32 %1495 to i64, !dbg !56
  %1511 = getelementptr inbounds [0 x float], [0 x float]* %1494, i64 0, i64 %1510, !dbg !56
  %1512 = sext i32 %1377 to i64, !dbg !56
  %1513 = getelementptr inbounds float, float* %1511, i64 %1512, !dbg !56
  %1514 = load float, float* %1513, align 4, !dbg !56
  %1515 = mul nsw i32 %1507, %size595, !dbg !56
  %i1610 = add nsw i32 %1377, %1515, !dbg !56
  %1516 = sext i32 %i1610 to i64, !dbg !56
  %1517 = getelementptr inbounds float, float* %1511, i64 %1516, !dbg !56
  %1518 = load float, float* %1517, align 4, !dbg !56
  %1519 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1520 = getelementptr inbounds [0 x i32], [0 x i32]* %1519, i64 0, i64 0, !dbg !56
  %1521 = load i32, i32* %1520, align 4, !dbg !56
  %1522 = load float, float* %1368, align 4, !dbg !56
  %1523 = load float, float* %1371, align 4, !dbg !56
  %1524 = mul nsw i32 %1502, %size595, !dbg !56
  %i1611 = add nsw i32 %1377, %1524, !dbg !56
  %1525 = sext i32 %i1611 to i64, !dbg !56
  %1526 = getelementptr inbounds float, float* %1511, i64 %1525, !dbg !56
  %1527 = load float, float* %1526, align 4, !dbg !56
  %1528 = mul nsw i32 %1521, %size595, !dbg !56
  %i1612 = add nsw i32 %i1611, %1528, !dbg !56
  %1529 = sext i32 %i1612 to i64, !dbg !56
  %1530 = getelementptr inbounds float, float* %1511, i64 %1529, !dbg !56
  %1531 = load float, float* %1530, align 4, !dbg !56
  %1532 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1533 = getelementptr inbounds [0 x i32], [0 x i32]* %1532, i64 0, i64 1, !dbg !56
  %1534 = load i32, i32* %1533, align 4, !dbg !56
  %1535 = load float, float* %1359, align 4, !dbg !56
  %1536 = load float, float* %1362, align 4, !dbg !56
  %1537 = getelementptr inbounds [0 x i32], [0 x i32]* %1532, i64 0, i64 0, !dbg !56
  %1538 = load i32, i32* %1537, align 4, !dbg !56
  %1539 = load float, float* %1368, align 4, !dbg !56
  %1540 = load float, float* %1371, align 4, !dbg !56
  %1541 = mul nsw i32 %1498, %size595, !dbg !56
  %i1613 = add nsw i32 %1377, %1541, !dbg !56
  %1542 = sext i32 %i1613 to i64, !dbg !56
  %1543 = getelementptr inbounds float, float* %1511, i64 %1542, !dbg !56
  %1544 = load float, float* %1543, align 4, !dbg !56
  %1545 = mul nsw i32 %1538, %size595, !dbg !56
  %i1614 = add nsw i32 %i1613, %1545, !dbg !56
  %1546 = sext i32 %i1614 to i64, !dbg !56
  %1547 = getelementptr inbounds float, float* %1511, i64 %1546, !dbg !56
  %1548 = load float, float* %1547, align 4, !dbg !56
  %1549 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1550 = getelementptr inbounds [0 x i32], [0 x i32]* %1549, i64 0, i64 0, !dbg !56
  %1551 = load i32, i32* %1550, align 4, !dbg !56
  %1552 = load float, float* %1368, align 4, !dbg !56
  %1553 = load float, float* %1371, align 4, !dbg !56
  %1554 = mul nsw i32 %1534, %size595, !dbg !56
  %i1615 = add nsw i32 %i1613, %1554, !dbg !56
  %1555 = sext i32 %i1615 to i64, !dbg !56
  %1556 = getelementptr inbounds float, float* %1511, i64 %1555, !dbg !56
  %1557 = load float, float* %1556, align 4, !dbg !56
  %1558 = mul nsw i32 %1551, %size595, !dbg !56
  %i1616 = add nsw i32 %i1615, %1558, !dbg !56
  %1559 = sext i32 %i1616 to i64, !dbg !56
  %1560 = getelementptr inbounds float, float* %1511, i64 %1559, !dbg !56
  %1561 = load float, float* %1560, align 4, !dbg !56
  %1562 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1563 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1564 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1565 = getelementptr inbounds [0 x i32], [0 x i32]* %1564, i64 0, i64 2, !dbg !56
  %1566 = load i32, i32* %1565, align 4, !dbg !56
  %1567 = load float, float* %1350, align 4, !dbg !56
  %1568 = load float, float* %1353, align 4, !dbg !56
  %1569 = getelementptr inbounds [0 x i32], [0 x i32]* %1564, i64 0, i64 1, !dbg !56
  %1570 = load i32, i32* %1569, align 4, !dbg !56
  %1571 = load float, float* %1359, align 4, !dbg !56
  %1572 = load float, float* %1362, align 4, !dbg !56
  %1573 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1574 = getelementptr inbounds [0 x i32], [0 x i32]* %1573, i64 0, i64 0, !dbg !56
  %1575 = load i32, i32* %1574, align 4, !dbg !56
  %1576 = load float, float* %1368, align 4, !dbg !56
  %1577 = load float, float* %1371, align 4, !dbg !56
  %1578 = add nsw i32 %1563, 1, !dbg !56
  %1579 = sext i32 %1578 to i64, !dbg !56
  %1580 = getelementptr inbounds [0 x float], [0 x float]* %1562, i64 0, i64 %1579, !dbg !56
  %1581 = sext i32 %1377 to i64, !dbg !56
  %1582 = getelementptr inbounds float, float* %1580, i64 %1581, !dbg !56
  %1583 = load float, float* %1582, align 4, !dbg !56
  %1584 = mul nsw i32 %1575, %size595, !dbg !56
  %i1617 = add nsw i32 %1377, %1584, !dbg !56
  %1585 = sext i32 %i1617 to i64, !dbg !56
  %1586 = getelementptr inbounds float, float* %1580, i64 %1585, !dbg !56
  %1587 = load float, float* %1586, align 4, !dbg !56
  %1588 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1589 = getelementptr inbounds [0 x i32], [0 x i32]* %1588, i64 0, i64 0, !dbg !56
  %1590 = load i32, i32* %1589, align 4, !dbg !56
  %1591 = load float, float* %1368, align 4, !dbg !56
  %1592 = load float, float* %1371, align 4, !dbg !56
  %1593 = mul nsw i32 %1570, %size595, !dbg !56
  %i1618 = add nsw i32 %1377, %1593, !dbg !56
  %1594 = sext i32 %i1618 to i64, !dbg !56
  %1595 = getelementptr inbounds float, float* %1580, i64 %1594, !dbg !56
  %1596 = load float, float* %1595, align 4, !dbg !56
  %1597 = mul nsw i32 %1590, %size595, !dbg !56
  %i1619 = add nsw i32 %i1618, %1597, !dbg !56
  %1598 = sext i32 %i1619 to i64, !dbg !56
  %1599 = getelementptr inbounds float, float* %1580, i64 %1598, !dbg !56
  %1600 = load float, float* %1599, align 4, !dbg !56
  %1601 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1602 = getelementptr inbounds [0 x i32], [0 x i32]* %1601, i64 0, i64 1, !dbg !56
  %1603 = load i32, i32* %1602, align 4, !dbg !56
  %1604 = load float, float* %1359, align 4, !dbg !56
  %1605 = load float, float* %1362, align 4, !dbg !56
  %1606 = getelementptr inbounds [0 x i32], [0 x i32]* %1601, i64 0, i64 0, !dbg !56
  %1607 = load i32, i32* %1606, align 4, !dbg !56
  %1608 = load float, float* %1368, align 4, !dbg !56
  %1609 = load float, float* %1371, align 4, !dbg !56
  %1610 = mul nsw i32 %1566, %size595, !dbg !56
  %i1620 = add nsw i32 %1377, %1610, !dbg !56
  %1611 = sext i32 %i1620 to i64, !dbg !56
  %1612 = getelementptr inbounds float, float* %1580, i64 %1611, !dbg !56
  %1613 = load float, float* %1612, align 4, !dbg !56
  %1614 = mul nsw i32 %1607, %size595, !dbg !56
  %i1621 = add nsw i32 %i1620, %1614, !dbg !56
  %1615 = sext i32 %i1621 to i64, !dbg !56
  %1616 = getelementptr inbounds float, float* %1580, i64 %1615, !dbg !56
  %1617 = load float, float* %1616, align 4, !dbg !56
  %1618 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1619 = getelementptr inbounds [0 x i32], [0 x i32]* %1618, i64 0, i64 0, !dbg !56
  %1620 = load i32, i32* %1619, align 4, !dbg !56
  %1621 = load float, float* %1368, align 4, !dbg !56
  %1622 = load float, float* %1371, align 4, !dbg !56
  %1623 = mul nsw i32 %1603, %size595, !dbg !56
  %i1622 = add nsw i32 %i1620, %1623, !dbg !56
  %1624 = sext i32 %i1622 to i64, !dbg !56
  %1625 = getelementptr inbounds float, float* %1580, i64 %1624, !dbg !56
  %1626 = load float, float* %1625, align 4, !dbg !56
  %1627 = mul nsw i32 %1620, %size595, !dbg !56
  %i1623 = add nsw i32 %i1622, %1627, !dbg !56
  %1628 = sext i32 %i1623 to i64, !dbg !56
  %1629 = getelementptr inbounds float, float* %1580, i64 %1628, !dbg !56
  %1630 = load float, float* %1629, align 4, !dbg !56
  %1631 = load float, float addrspace(5)* %1227, align 8, !dbg !56
  %1632 = load float, float addrspace(5)* %1229, align 4, !dbg !56
  %1633 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 1, !dbg !56
  %1634 = fsub float %1336, %1341, !dbg !56
  %1635 = fsub float 1.000000e+00, %1634, !dbg !56
  %1636 = fsub float %1330, %1335, !dbg !56
  %1637 = fsub float 1.000000e+00, %1636, !dbg !56
  %1638 = fmul float %1380, %1369, !dbg !56
  %1639 = fmul float %1384, %1372, !dbg !56
  %1640 = fadd float %1638, %1639, !dbg !56
  %1641 = fmul float %1640, %1360, !dbg !56
  %1642 = fmul float %1393, %1388, !dbg !56
  %1643 = fmul float %1397, %1389, !dbg !56
  %1644 = fadd float %1642, %1643, !dbg !56
  %1645 = fmul float %1644, %1363, !dbg !56
  %1646 = fadd float %1641, %1645, !dbg !56
  %1647 = fmul float %1646, %1351, !dbg !56
  %1648 = fmul float %1410, %1405, !dbg !56
  %1649 = fmul float %1414, %1406, !dbg !56
  %1650 = fadd float %1648, %1649, !dbg !56
  %1651 = fmul float %1650, %1401, !dbg !56
  %1652 = fmul float %1423, %1418, !dbg !56
  %1653 = fmul float %1427, %1419, !dbg !56
  %1654 = fadd float %1652, %1653, !dbg !56
  %1655 = fmul float %1654, %1402, !dbg !56
  %1656 = fadd float %1651, %1655, !dbg !56
  %1657 = fmul float %1656, %1354, !dbg !56
  %1658 = fadd float %1647, %1657, !dbg !56
  %1659 = fmul float %1637, %1658, !dbg !56
  %1660 = fmul float %1446, %1441, !dbg !56
  %1661 = fmul float %1450, %1442, !dbg !56
  %1662 = fadd float %1660, %1661, !dbg !56
  %1663 = fmul float %1662, %1436, !dbg !56
  %1664 = fmul float %1459, %1454, !dbg !56
  %1665 = fmul float %1463, %1455, !dbg !56
  %1666 = fadd float %1664, %1665, !dbg !56
  %1667 = fmul float %1666, %1437, !dbg !56
  %1668 = fadd float %1663, %1667, !dbg !56
  %1669 = fmul float %1668, %1432, !dbg !56
  %1670 = fmul float %1476, %1471, !dbg !56
  %1671 = fmul float %1480, %1472, !dbg !56
  %1672 = fadd float %1670, %1671, !dbg !56
  %1673 = fmul float %1672, %1467, !dbg !56
  %1674 = fmul float %1489, %1484, !dbg !56
  %1675 = fmul float %1493, %1485, !dbg !56
  %1676 = fadd float %1674, %1675, !dbg !56
  %1677 = fmul float %1676, %1468, !dbg !56
  %1678 = fadd float %1673, %1677, !dbg !56
  %1679 = fmul float %1678, %1433, !dbg !56
  %1680 = fadd float %1669, %1679, !dbg !56
  %1681 = fmul float %1636, %1680, !dbg !56
  %1682 = fadd float %1659, %1681, !dbg !56
  %1683 = fmul float %1635, %1682, !dbg !56
  %1684 = fmul float %1514, %1508, !dbg !56
  %1685 = fmul float %1518, %1509, !dbg !56
  %1686 = fadd float %1684, %1685, !dbg !56
  %1687 = fmul float %1686, %1503, !dbg !56
  %1688 = fmul float %1527, %1522, !dbg !56
  %1689 = fmul float %1531, %1523, !dbg !56
  %1690 = fadd float %1688, %1689, !dbg !56
  %1691 = fmul float %1690, %1504, !dbg !56
  %1692 = fadd float %1687, %1691, !dbg !56
  %1693 = fmul float %1692, %1499, !dbg !56
  %1694 = fmul float %1544, %1539, !dbg !56
  %1695 = fmul float %1548, %1540, !dbg !56
  %1696 = fadd float %1694, %1695, !dbg !56
  %1697 = fmul float %1696, %1535, !dbg !56
  %1698 = fmul float %1557, %1552, !dbg !56
  %1699 = fmul float %1561, %1553, !dbg !56
  %1700 = fadd float %1698, %1699, !dbg !56
  %1701 = fmul float %1700, %1536, !dbg !56
  %1702 = fadd float %1697, %1701, !dbg !56
  %1703 = fmul float %1702, %1500, !dbg !56
  %1704 = fadd float %1693, %1703, !dbg !56
  %1705 = fmul float %1637, %1704, !dbg !56
  %1706 = fmul float %1583, %1576, !dbg !56
  %1707 = fmul float %1587, %1577, !dbg !56
  %1708 = fadd float %1706, %1707, !dbg !56
  %1709 = fmul float %1708, %1571, !dbg !56
  %1710 = fmul float %1596, %1591, !dbg !56
  %1711 = fmul float %1600, %1592, !dbg !56
  %1712 = fadd float %1710, %1711, !dbg !56
  %1713 = fmul float %1712, %1572, !dbg !56
  %1714 = fadd float %1709, %1713, !dbg !56
  %1715 = fmul float %1714, %1567, !dbg !56
  %1716 = fmul float %1613, %1608, !dbg !56
  %1717 = fmul float %1617, %1609, !dbg !56
  %1718 = fadd float %1716, %1717, !dbg !56
  %1719 = fmul float %1718, %1604, !dbg !56
  %1720 = fmul float %1626, %1621, !dbg !56
  %1721 = fmul float %1630, %1622, !dbg !56
  %1722 = fadd float %1720, %1721, !dbg !56
  %1723 = fmul float %1722, %1605, !dbg !56
  %1724 = fadd float %1719, %1723, !dbg !56
  %1725 = fmul float %1724, %1568, !dbg !56
  %1726 = fadd float %1715, %1725, !dbg !56
  %1727 = fmul float %1636, %1726, !dbg !56
  %1728 = fadd float %1705, %1727, !dbg !56
  %1729 = fmul float %1634, %1728, !dbg !56
  %1730 = fadd float %1683, %1729, !dbg !56
  %hprod624 = fmul float %1631, %1632, !dbg !56
  %1731 = fmul float %1730, %hprod624, !dbg !56
  store float %1731, float addrspace(5)* %1633, align 4, !dbg !56
  %param_weight_4462629.repack = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 0, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462629.repack, align 4, !dbg !56
  %param_weight_4462629.repack1157 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 1, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462629.repack1157, align 4, !dbg !56
  %param_weight_4462629.repack1158 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 2, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462629.repack1158, align 4, !dbg !56
  %param_weight_4462629.repack1159 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 3, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462629.repack1159, align 4, !dbg !56
  %param_weight_4462629.repack1160 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 4, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462629.repack1160, align 4, !dbg !56
  %param_weight_4462629.repack1161 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 5, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4462629.repack1161, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %slice_offset_4462737, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %dim_4462607, align 4, !dbg !56
  br label %expr_true191, !dbg !74

expr_false178:                                    ; preds = %continue208
  %.elt1162 = getelementptr inbounds %5, %5 addrspace(5)* %919, i32 0, i32 0, !dbg !75
  %.unpack1163 = load float, float addrspace(5)* %.elt1162, align 8, !dbg !75
  %.elt1164 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 2, i32 1, !dbg !75
  %.unpack1165 = load float, float addrspace(5)* %.elt1164, align 4, !dbg !75
  %.elt1166 = getelementptr inbounds %3, %3 addrspace(5)* %914, i32 0, i32 0, i32 0, !dbg !75
  %.unpack1167 = load i32, i32 addrspace(5)* %.elt1166, align 8, !dbg !75
  %.elt1168 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 4, i32 0, i32 1, !dbg !75
  %.unpack1169 = load i32, i32 addrspace(5)* %.elt1168, align 4, !dbg !75
  %1732 = fmul float %921, %.unpack1163, !dbg !75
  %1733 = sitofp i32 %.unpack1167 to float, !dbg !75
  %1734 = fadd float %1733, -2.000000e+00, !dbg !75
  %1735 = fcmp olt float %1732, %1734, !dbg !75
  %1736 = select i1 %1735, float %1732, float %1734, !dbg !75
  %1737 = call float @__ocml_floor_f32(float %1736), !dbg !75
  %1738 = fmul float %928, %.unpack1165, !dbg !55
  %1739 = sitofp i32 %.unpack1169 to float, !dbg !55
  %1740 = fadd float %1739, -2.000000e+00, !dbg !55
  %1741 = fcmp olt float %1738, %1740, !dbg !55
  %1742 = select i1 %1741, float %1738, float %1740, !dbg !55
  %1743 = call float @__ocml_floor_f32(float %1742), !dbg !55
  %1744 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1745 = load i32, i32 addrspace(5)* %937, align 4, !dbg !56
  %1746 = load i32, i32 addrspace(5)* %slice_offset_4462737, align 4, !dbg !56
  %1747 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1748 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1749 = getelementptr inbounds [0 x i32], [0 x i32]* %1748, i64 0, i64 2, !dbg !56
  %1750 = load i32, i32* %1749, align 4, !dbg !56
  %1751 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 4, !dbg !56
  %1752 = addrspacecast float addrspace(5)* %1751 to float*, !dbg !56
  %1753 = load float, float* %1752, align 4, !dbg !56
  %1754 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 5, !dbg !56
  %1755 = addrspacecast float addrspace(5)* %1754 to float*, !dbg !56
  %1756 = load float, float* %1755, align 4, !dbg !56
  %1757 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1758 = getelementptr inbounds [0 x i32], [0 x i32]* %1757, i64 0, i64 1, !dbg !56
  %1759 = load i32, i32* %1758, align 4, !dbg !56
  %1760 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 2, !dbg !56
  %1761 = addrspacecast float addrspace(5)* %1760 to float*, !dbg !56
  %1762 = load float, float* %1761, align 4, !dbg !56
  %1763 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 3, !dbg !56
  %1764 = addrspacecast float addrspace(5)* %1763 to float*, !dbg !56
  %1765 = load float, float* %1764, align 4, !dbg !56
  %1766 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1767 = getelementptr inbounds [0 x i32], [0 x i32]* %1766, i64 0, i64 0, !dbg !56
  %1768 = load i32, i32* %1767, align 4, !dbg !56
  %1769 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 0, !dbg !56
  %1770 = addrspacecast float addrspace(5)* %1769 to float*, !dbg !56
  %1771 = load float, float* %1770, align 4, !dbg !56
  %1772 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 1, !dbg !56
  %1773 = addrspacecast float addrspace(5)* %1772 to float*, !dbg !56
  %1774 = load float, float* %1773, align 4, !dbg !56
  %1775 = fptosi float %1737 to i32, !dbg !56
  %1776 = fptosi float %1743 to i32, !dbg !56
  %1777 = mul nsw i32 %1744, %1776, !dbg !56
  %index625 = add nsw i32 %1777, %1775, !dbg !56
  %size626 = mul nsw i32 %1744, %1745, !dbg !56
  %1778 = mul nsw i32 %1746, %size626, !dbg !56
  %1779 = add nsw i32 %index625, %1778, !dbg !56
  %1780 = sext i32 %1779 to i64, !dbg !56
  %1781 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1780, !dbg !56
  %1782 = load float, float* %1781, align 4, !dbg !56
  %1783 = mul nsw i32 %1768, %size626, !dbg !56
  %i1627 = add nsw i32 %1779, %1783, !dbg !56
  %1784 = sext i32 %i1627 to i64, !dbg !56
  %1785 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1784, !dbg !56
  %1786 = load float, float* %1785, align 4, !dbg !56
  %1787 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1788 = getelementptr inbounds [0 x i32], [0 x i32]* %1787, i64 0, i64 0, !dbg !56
  %1789 = load i32, i32* %1788, align 4, !dbg !56
  %1790 = load float, float* %1770, align 4, !dbg !56
  %1791 = load float, float* %1773, align 4, !dbg !56
  %1792 = mul nsw i32 %1759, %size626, !dbg !56
  %i1628 = add nsw i32 %1779, %1792, !dbg !56
  %1793 = sext i32 %i1628 to i64, !dbg !56
  %1794 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1793, !dbg !56
  %1795 = load float, float* %1794, align 4, !dbg !56
  %1796 = mul nsw i32 %1789, %size626, !dbg !56
  %i1629 = add nsw i32 %i1628, %1796, !dbg !56
  %1797 = sext i32 %i1629 to i64, !dbg !56
  %1798 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1797, !dbg !56
  %1799 = load float, float* %1798, align 4, !dbg !56
  %1800 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1801 = getelementptr inbounds [0 x i32], [0 x i32]* %1800, i64 0, i64 1, !dbg !56
  %1802 = load i32, i32* %1801, align 4, !dbg !56
  %1803 = load float, float* %1761, align 4, !dbg !56
  %1804 = load float, float* %1764, align 4, !dbg !56
  %1805 = getelementptr inbounds [0 x i32], [0 x i32]* %1800, i64 0, i64 0, !dbg !56
  %1806 = load i32, i32* %1805, align 4, !dbg !56
  %1807 = load float, float* %1770, align 4, !dbg !56
  %1808 = load float, float* %1773, align 4, !dbg !56
  %1809 = mul nsw i32 %1750, %size626, !dbg !56
  %i1630 = add nsw i32 %1779, %1809, !dbg !56
  %1810 = sext i32 %i1630 to i64, !dbg !56
  %1811 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1810, !dbg !56
  %1812 = load float, float* %1811, align 4, !dbg !56
  %1813 = mul nsw i32 %1806, %size626, !dbg !56
  %i1631 = add nsw i32 %i1630, %1813, !dbg !56
  %1814 = sext i32 %i1631 to i64, !dbg !56
  %1815 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1814, !dbg !56
  %1816 = load float, float* %1815, align 4, !dbg !56
  %1817 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1818 = getelementptr inbounds [0 x i32], [0 x i32]* %1817, i64 0, i64 0, !dbg !56
  %1819 = load i32, i32* %1818, align 4, !dbg !56
  %1820 = load float, float* %1770, align 4, !dbg !56
  %1821 = load float, float* %1773, align 4, !dbg !56
  %1822 = mul nsw i32 %1802, %size626, !dbg !56
  %i1632 = add nsw i32 %i1630, %1822, !dbg !56
  %1823 = sext i32 %i1632 to i64, !dbg !56
  %1824 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1823, !dbg !56
  %1825 = load float, float* %1824, align 4, !dbg !56
  %1826 = mul nsw i32 %1819, %size626, !dbg !56
  %i1633 = add nsw i32 %i1632, %1826, !dbg !56
  %1827 = sext i32 %i1633 to i64, !dbg !56
  %1828 = getelementptr inbounds [0 x float], [0 x float]* %1747, i64 0, i64 %1827, !dbg !56
  %1829 = load float, float* %1828, align 4, !dbg !56
  %1830 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1831 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1832 = getelementptr inbounds [0 x i32], [0 x i32]* %1831, i64 0, i64 2, !dbg !56
  %1833 = load i32, i32* %1832, align 4, !dbg !56
  %1834 = load float, float* %1752, align 4, !dbg !56
  %1835 = load float, float* %1755, align 4, !dbg !56
  %1836 = getelementptr inbounds [0 x i32], [0 x i32]* %1831, i64 0, i64 1, !dbg !56
  %1837 = load i32, i32* %1836, align 4, !dbg !56
  %1838 = load float, float* %1761, align 4, !dbg !56
  %1839 = load float, float* %1764, align 4, !dbg !56
  %1840 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1841 = getelementptr inbounds [0 x i32], [0 x i32]* %1840, i64 0, i64 0, !dbg !56
  %1842 = load i32, i32* %1841, align 4, !dbg !56
  %1843 = load float, float* %1770, align 4, !dbg !56
  %1844 = load float, float* %1773, align 4, !dbg !56
  %1845 = getelementptr inbounds [0 x float], [0 x float]* %1830, i64 0, i64 1, !dbg !56
  %1846 = sext i32 %1779 to i64, !dbg !56
  %1847 = getelementptr inbounds float, float* %1845, i64 %1846, !dbg !56
  %1848 = load float, float* %1847, align 4, !dbg !56
  %1849 = mul nsw i32 %1842, %size626, !dbg !56
  %i1634 = add nsw i32 %1779, %1849, !dbg !56
  %1850 = sext i32 %i1634 to i64, !dbg !56
  %1851 = getelementptr inbounds float, float* %1845, i64 %1850, !dbg !56
  %1852 = load float, float* %1851, align 4, !dbg !56
  %1853 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1854 = getelementptr inbounds [0 x i32], [0 x i32]* %1853, i64 0, i64 0, !dbg !56
  %1855 = load i32, i32* %1854, align 4, !dbg !56
  %1856 = load float, float* %1770, align 4, !dbg !56
  %1857 = load float, float* %1773, align 4, !dbg !56
  %1858 = mul nsw i32 %1837, %size626, !dbg !56
  %i1635 = add nsw i32 %1779, %1858, !dbg !56
  %1859 = sext i32 %i1635 to i64, !dbg !56
  %1860 = getelementptr inbounds float, float* %1845, i64 %1859, !dbg !56
  %1861 = load float, float* %1860, align 4, !dbg !56
  %1862 = mul nsw i32 %1855, %size626, !dbg !56
  %i1636 = add nsw i32 %i1635, %1862, !dbg !56
  %1863 = sext i32 %i1636 to i64, !dbg !56
  %1864 = getelementptr inbounds float, float* %1845, i64 %1863, !dbg !56
  %1865 = load float, float* %1864, align 4, !dbg !56
  %1866 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1867 = getelementptr inbounds [0 x i32], [0 x i32]* %1866, i64 0, i64 1, !dbg !56
  %1868 = load i32, i32* %1867, align 4, !dbg !56
  %1869 = load float, float* %1761, align 4, !dbg !56
  %1870 = load float, float* %1764, align 4, !dbg !56
  %1871 = getelementptr inbounds [0 x i32], [0 x i32]* %1866, i64 0, i64 0, !dbg !56
  %1872 = load i32, i32* %1871, align 4, !dbg !56
  %1873 = load float, float* %1770, align 4, !dbg !56
  %1874 = load float, float* %1773, align 4, !dbg !56
  %1875 = mul nsw i32 %1833, %size626, !dbg !56
  %i1637 = add nsw i32 %1779, %1875, !dbg !56
  %1876 = sext i32 %i1637 to i64, !dbg !56
  %1877 = getelementptr inbounds float, float* %1845, i64 %1876, !dbg !56
  %1878 = load float, float* %1877, align 4, !dbg !56
  %1879 = mul nsw i32 %1872, %size626, !dbg !56
  %i1638 = add nsw i32 %i1637, %1879, !dbg !56
  %1880 = sext i32 %i1638 to i64, !dbg !56
  %1881 = getelementptr inbounds float, float* %1845, i64 %1880, !dbg !56
  %1882 = load float, float* %1881, align 4, !dbg !56
  %1883 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1884 = getelementptr inbounds [0 x i32], [0 x i32]* %1883, i64 0, i64 0, !dbg !56
  %1885 = load i32, i32* %1884, align 4, !dbg !56
  %1886 = load float, float* %1770, align 4, !dbg !56
  %1887 = load float, float* %1773, align 4, !dbg !56
  %1888 = mul nsw i32 %1868, %size626, !dbg !56
  %i1639 = add nsw i32 %i1637, %1888, !dbg !56
  %1889 = sext i32 %i1639 to i64, !dbg !56
  %1890 = getelementptr inbounds float, float* %1845, i64 %1889, !dbg !56
  %1891 = load float, float* %1890, align 4, !dbg !56
  %1892 = mul nsw i32 %1885, %size626, !dbg !56
  %i1640 = add nsw i32 %i1639, %1892, !dbg !56
  %1893 = sext i32 %i1640 to i64, !dbg !56
  %1894 = getelementptr inbounds float, float* %1845, i64 %1893, !dbg !56
  %1895 = load float, float* %1894, align 4, !dbg !56
  %1896 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1897 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1898 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1899 = getelementptr inbounds [0 x i32], [0 x i32]* %1898, i64 0, i64 2, !dbg !56
  %1900 = load i32, i32* %1899, align 4, !dbg !56
  %1901 = load float, float* %1752, align 4, !dbg !56
  %1902 = load float, float* %1755, align 4, !dbg !56
  %1903 = getelementptr inbounds [0 x i32], [0 x i32]* %1898, i64 0, i64 1, !dbg !56
  %1904 = load i32, i32* %1903, align 4, !dbg !56
  %1905 = load float, float* %1761, align 4, !dbg !56
  %1906 = load float, float* %1764, align 4, !dbg !56
  %1907 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1908 = getelementptr inbounds [0 x i32], [0 x i32]* %1907, i64 0, i64 0, !dbg !56
  %1909 = load i32, i32* %1908, align 4, !dbg !56
  %1910 = load float, float* %1770, align 4, !dbg !56
  %1911 = load float, float* %1773, align 4, !dbg !56
  %1912 = sext i32 %1897 to i64, !dbg !56
  %1913 = getelementptr inbounds [0 x float], [0 x float]* %1896, i64 0, i64 %1912, !dbg !56
  %1914 = sext i32 %1779 to i64, !dbg !56
  %1915 = getelementptr inbounds float, float* %1913, i64 %1914, !dbg !56
  %1916 = load float, float* %1915, align 4, !dbg !56
  %1917 = mul nsw i32 %1909, %size626, !dbg !56
  %i1641 = add nsw i32 %1779, %1917, !dbg !56
  %1918 = sext i32 %i1641 to i64, !dbg !56
  %1919 = getelementptr inbounds float, float* %1913, i64 %1918, !dbg !56
  %1920 = load float, float* %1919, align 4, !dbg !56
  %1921 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1922 = getelementptr inbounds [0 x i32], [0 x i32]* %1921, i64 0, i64 0, !dbg !56
  %1923 = load i32, i32* %1922, align 4, !dbg !56
  %1924 = load float, float* %1770, align 4, !dbg !56
  %1925 = load float, float* %1773, align 4, !dbg !56
  %1926 = mul nsw i32 %1904, %size626, !dbg !56
  %i1642 = add nsw i32 %1779, %1926, !dbg !56
  %1927 = sext i32 %i1642 to i64, !dbg !56
  %1928 = getelementptr inbounds float, float* %1913, i64 %1927, !dbg !56
  %1929 = load float, float* %1928, align 4, !dbg !56
  %1930 = mul nsw i32 %1923, %size626, !dbg !56
  %i1643 = add nsw i32 %i1642, %1930, !dbg !56
  %1931 = sext i32 %i1643 to i64, !dbg !56
  %1932 = getelementptr inbounds float, float* %1913, i64 %1931, !dbg !56
  %1933 = load float, float* %1932, align 4, !dbg !56
  %1934 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1935 = getelementptr inbounds [0 x i32], [0 x i32]* %1934, i64 0, i64 1, !dbg !56
  %1936 = load i32, i32* %1935, align 4, !dbg !56
  %1937 = load float, float* %1761, align 4, !dbg !56
  %1938 = load float, float* %1764, align 4, !dbg !56
  %1939 = getelementptr inbounds [0 x i32], [0 x i32]* %1934, i64 0, i64 0, !dbg !56
  %1940 = load i32, i32* %1939, align 4, !dbg !56
  %1941 = load float, float* %1770, align 4, !dbg !56
  %1942 = load float, float* %1773, align 4, !dbg !56
  %1943 = mul nsw i32 %1900, %size626, !dbg !56
  %i1644 = add nsw i32 %1779, %1943, !dbg !56
  %1944 = sext i32 %i1644 to i64, !dbg !56
  %1945 = getelementptr inbounds float, float* %1913, i64 %1944, !dbg !56
  %1946 = load float, float* %1945, align 4, !dbg !56
  %1947 = mul nsw i32 %1940, %size626, !dbg !56
  %i1645 = add nsw i32 %i1644, %1947, !dbg !56
  %1948 = sext i32 %i1645 to i64, !dbg !56
  %1949 = getelementptr inbounds float, float* %1913, i64 %1948, !dbg !56
  %1950 = load float, float* %1949, align 4, !dbg !56
  %1951 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1952 = getelementptr inbounds [0 x i32], [0 x i32]* %1951, i64 0, i64 0, !dbg !56
  %1953 = load i32, i32* %1952, align 4, !dbg !56
  %1954 = load float, float* %1770, align 4, !dbg !56
  %1955 = load float, float* %1773, align 4, !dbg !56
  %1956 = mul nsw i32 %1936, %size626, !dbg !56
  %i1646 = add nsw i32 %i1644, %1956, !dbg !56
  %1957 = sext i32 %i1646 to i64, !dbg !56
  %1958 = getelementptr inbounds float, float* %1913, i64 %1957, !dbg !56
  %1959 = load float, float* %1958, align 4, !dbg !56
  %1960 = mul nsw i32 %1953, %size626, !dbg !56
  %i1647 = add nsw i32 %i1646, %1960, !dbg !56
  %1961 = sext i32 %i1647 to i64, !dbg !56
  %1962 = getelementptr inbounds float, float* %1913, i64 %1961, !dbg !56
  %1963 = load float, float* %1962, align 4, !dbg !56
  %1964 = load [0 x float]*, [0 x float]* addrspace(5)* %940, align 8, !dbg !56
  %1965 = load i32, i32 addrspace(5)* %935, align 8, !dbg !56
  %1966 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1967 = getelementptr inbounds [0 x i32], [0 x i32]* %1966, i64 0, i64 2, !dbg !56
  %1968 = load i32, i32* %1967, align 4, !dbg !56
  %1969 = load float, float* %1752, align 4, !dbg !56
  %1970 = load float, float* %1755, align 4, !dbg !56
  %1971 = getelementptr inbounds [0 x i32], [0 x i32]* %1966, i64 0, i64 1, !dbg !56
  %1972 = load i32, i32* %1971, align 4, !dbg !56
  %1973 = load float, float* %1761, align 4, !dbg !56
  %1974 = load float, float* %1764, align 4, !dbg !56
  %1975 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1976 = getelementptr inbounds [0 x i32], [0 x i32]* %1975, i64 0, i64 0, !dbg !56
  %1977 = load i32, i32* %1976, align 4, !dbg !56
  %1978 = load float, float* %1770, align 4, !dbg !56
  %1979 = load float, float* %1773, align 4, !dbg !56
  %1980 = add nsw i32 %1965, 1, !dbg !56
  %1981 = sext i32 %1980 to i64, !dbg !56
  %1982 = getelementptr inbounds [0 x float], [0 x float]* %1964, i64 0, i64 %1981, !dbg !56
  %1983 = sext i32 %1779 to i64, !dbg !56
  %1984 = getelementptr inbounds float, float* %1982, i64 %1983, !dbg !56
  %1985 = load float, float* %1984, align 4, !dbg !56
  %1986 = mul nsw i32 %1977, %size626, !dbg !56
  %i1648 = add nsw i32 %1779, %1986, !dbg !56
  %1987 = sext i32 %i1648 to i64, !dbg !56
  %1988 = getelementptr inbounds float, float* %1982, i64 %1987, !dbg !56
  %1989 = load float, float* %1988, align 4, !dbg !56
  %1990 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %1991 = getelementptr inbounds [0 x i32], [0 x i32]* %1990, i64 0, i64 0, !dbg !56
  %1992 = load i32, i32* %1991, align 4, !dbg !56
  %1993 = load float, float* %1770, align 4, !dbg !56
  %1994 = load float, float* %1773, align 4, !dbg !56
  %1995 = mul nsw i32 %1972, %size626, !dbg !56
  %i1649 = add nsw i32 %1779, %1995, !dbg !56
  %1996 = sext i32 %i1649 to i64, !dbg !56
  %1997 = getelementptr inbounds float, float* %1982, i64 %1996, !dbg !56
  %1998 = load float, float* %1997, align 4, !dbg !56
  %1999 = mul nsw i32 %1992, %size626, !dbg !56
  %i1650 = add nsw i32 %i1649, %1999, !dbg !56
  %2000 = sext i32 %i1650 to i64, !dbg !56
  %2001 = getelementptr inbounds float, float* %1982, i64 %2000, !dbg !56
  %2002 = load float, float* %2001, align 4, !dbg !56
  %2003 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %2004 = getelementptr inbounds [0 x i32], [0 x i32]* %2003, i64 0, i64 1, !dbg !56
  %2005 = load i32, i32* %2004, align 4, !dbg !56
  %2006 = load float, float* %1761, align 4, !dbg !56
  %2007 = load float, float* %1764, align 4, !dbg !56
  %2008 = getelementptr inbounds [0 x i32], [0 x i32]* %2003, i64 0, i64 0, !dbg !56
  %2009 = load i32, i32* %2008, align 4, !dbg !56
  %2010 = load float, float* %1770, align 4, !dbg !56
  %2011 = load float, float* %1773, align 4, !dbg !56
  %2012 = mul nsw i32 %1968, %size626, !dbg !56
  %i1651 = add nsw i32 %1779, %2012, !dbg !56
  %2013 = sext i32 %i1651 to i64, !dbg !56
  %2014 = getelementptr inbounds float, float* %1982, i64 %2013, !dbg !56
  %2015 = load float, float* %2014, align 4, !dbg !56
  %2016 = mul nsw i32 %2009, %size626, !dbg !56
  %i1652 = add nsw i32 %i1651, %2016, !dbg !56
  %2017 = sext i32 %i1652 to i64, !dbg !56
  %2018 = getelementptr inbounds float, float* %1982, i64 %2017, !dbg !56
  %2019 = load float, float* %2018, align 4, !dbg !56
  %2020 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !56
  %2021 = getelementptr inbounds [0 x i32], [0 x i32]* %2020, i64 0, i64 0, !dbg !56
  %2022 = load i32, i32* %2021, align 4, !dbg !56
  %2023 = load float, float* %1770, align 4, !dbg !56
  %2024 = load float, float* %1773, align 4, !dbg !56
  %2025 = mul nsw i32 %2005, %size626, !dbg !56
  %i1653 = add nsw i32 %i1651, %2025, !dbg !56
  %2026 = sext i32 %i1653 to i64, !dbg !56
  %2027 = getelementptr inbounds float, float* %1982, i64 %2026, !dbg !56
  %2028 = load float, float* %2027, align 4, !dbg !56
  %2029 = mul nsw i32 %2022, %size626, !dbg !56
  %i1654 = add nsw i32 %i1653, %2029, !dbg !56
  %2030 = sext i32 %i1654 to i64, !dbg !56
  %2031 = getelementptr inbounds float, float* %1982, i64 %2030, !dbg !56
  %2032 = load float, float* %2031, align 4, !dbg !56
  %2033 = load float, float addrspace(5)* %1227, align 8, !dbg !56
  %2034 = load float, float addrspace(5)* %1229, align 4, !dbg !56
  %2035 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 2, !dbg !56
  %2036 = fsub float %1738, %1743, !dbg !56
  %2037 = fsub float 1.000000e+00, %2036, !dbg !56
  %2038 = fsub float %1732, %1737, !dbg !56
  %2039 = fsub float 1.000000e+00, %2038, !dbg !56
  %2040 = fmul float %1782, %1771, !dbg !56
  %2041 = fmul float %1786, %1774, !dbg !56
  %2042 = fadd float %2040, %2041, !dbg !56
  %2043 = fmul float %2042, %1762, !dbg !56
  %2044 = fmul float %1795, %1790, !dbg !56
  %2045 = fmul float %1799, %1791, !dbg !56
  %2046 = fadd float %2044, %2045, !dbg !56
  %2047 = fmul float %2046, %1765, !dbg !56
  %2048 = fadd float %2043, %2047, !dbg !56
  %2049 = fmul float %2048, %1753, !dbg !56
  %2050 = fmul float %1812, %1807, !dbg !56
  %2051 = fmul float %1816, %1808, !dbg !56
  %2052 = fadd float %2050, %2051, !dbg !56
  %2053 = fmul float %2052, %1803, !dbg !56
  %2054 = fmul float %1825, %1820, !dbg !56
  %2055 = fmul float %1829, %1821, !dbg !56
  %2056 = fadd float %2054, %2055, !dbg !56
  %2057 = fmul float %2056, %1804, !dbg !56
  %2058 = fadd float %2053, %2057, !dbg !56
  %2059 = fmul float %2058, %1756, !dbg !56
  %2060 = fadd float %2049, %2059, !dbg !56
  %2061 = fmul float %2039, %2060, !dbg !56
  %2062 = fmul float %1848, %1843, !dbg !56
  %2063 = fmul float %1852, %1844, !dbg !56
  %2064 = fadd float %2062, %2063, !dbg !56
  %2065 = fmul float %2064, %1838, !dbg !56
  %2066 = fmul float %1861, %1856, !dbg !56
  %2067 = fmul float %1865, %1857, !dbg !56
  %2068 = fadd float %2066, %2067, !dbg !56
  %2069 = fmul float %2068, %1839, !dbg !56
  %2070 = fadd float %2065, %2069, !dbg !56
  %2071 = fmul float %2070, %1834, !dbg !56
  %2072 = fmul float %1878, %1873, !dbg !56
  %2073 = fmul float %1882, %1874, !dbg !56
  %2074 = fadd float %2072, %2073, !dbg !56
  %2075 = fmul float %2074, %1869, !dbg !56
  %2076 = fmul float %1891, %1886, !dbg !56
  %2077 = fmul float %1895, %1887, !dbg !56
  %2078 = fadd float %2076, %2077, !dbg !56
  %2079 = fmul float %2078, %1870, !dbg !56
  %2080 = fadd float %2075, %2079, !dbg !56
  %2081 = fmul float %2080, %1835, !dbg !56
  %2082 = fadd float %2071, %2081, !dbg !56
  %2083 = fmul float %2038, %2082, !dbg !56
  %2084 = fadd float %2061, %2083, !dbg !56
  %2085 = fmul float %2037, %2084, !dbg !56
  %2086 = fmul float %1916, %1910, !dbg !56
  %2087 = fmul float %1920, %1911, !dbg !56
  %2088 = fadd float %2086, %2087, !dbg !56
  %2089 = fmul float %2088, %1905, !dbg !56
  %2090 = fmul float %1929, %1924, !dbg !56
  %2091 = fmul float %1933, %1925, !dbg !56
  %2092 = fadd float %2090, %2091, !dbg !56
  %2093 = fmul float %2092, %1906, !dbg !56
  %2094 = fadd float %2089, %2093, !dbg !56
  %2095 = fmul float %2094, %1901, !dbg !56
  %2096 = fmul float %1946, %1941, !dbg !56
  %2097 = fmul float %1950, %1942, !dbg !56
  %2098 = fadd float %2096, %2097, !dbg !56
  %2099 = fmul float %2098, %1937, !dbg !56
  %2100 = fmul float %1959, %1954, !dbg !56
  %2101 = fmul float %1963, %1955, !dbg !56
  %2102 = fadd float %2100, %2101, !dbg !56
  %2103 = fmul float %2102, %1938, !dbg !56
  %2104 = fadd float %2099, %2103, !dbg !56
  %2105 = fmul float %2104, %1902, !dbg !56
  %2106 = fadd float %2095, %2105, !dbg !56
  %2107 = fmul float %2039, %2106, !dbg !56
  %2108 = fmul float %1985, %1978, !dbg !56
  %2109 = fmul float %1989, %1979, !dbg !56
  %2110 = fadd float %2108, %2109, !dbg !56
  %2111 = fmul float %2110, %1973, !dbg !56
  %2112 = fmul float %1998, %1993, !dbg !56
  %2113 = fmul float %2002, %1994, !dbg !56
  %2114 = fadd float %2112, %2113, !dbg !56
  %2115 = fmul float %2114, %1974, !dbg !56
  %2116 = fadd float %2111, %2115, !dbg !56
  %2117 = fmul float %2116, %1969, !dbg !56
  %2118 = fmul float %2015, %2010, !dbg !56
  %2119 = fmul float %2019, %2011, !dbg !56
  %2120 = fadd float %2118, %2119, !dbg !56
  %2121 = fmul float %2120, %2006, !dbg !56
  %2122 = fmul float %2028, %2023, !dbg !56
  %2123 = fmul float %2032, %2024, !dbg !56
  %2124 = fadd float %2122, %2123, !dbg !56
  %2125 = fmul float %2124, %2007, !dbg !56
  %2126 = fadd float %2121, %2125, !dbg !56
  %2127 = fmul float %2126, %1970, !dbg !56
  %2128 = fadd float %2117, %2127, !dbg !56
  %2129 = fmul float %2038, %2128, !dbg !56
  %2130 = fadd float %2107, %2129, !dbg !56
  %2131 = fmul float %2036, %2130, !dbg !56
  %2132 = fadd float %2085, %2131, !dbg !56
  %hprod655 = fmul float %2033, %2034, !dbg !56
  %2133 = fmul float %2132, %hprod655, !dbg !56
  store float %2133, float addrspace(5)* %2035, align 4, !dbg !56
  %.elt1170 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4461174, i32 0, i32 0, !dbg !56
  %.unpack1171 = load float, float addrspace(5)* %.elt1170, align 4, !dbg !56
  %.elt1172 = getelementptr inbounds %5, %5 addrspace(5)* %u_wm_4461174, i32 0, i32 1, !dbg !56
  %.unpack1173 = load float, float addrspace(5)* %.elt1172, align 4, !dbg !56
  %2134 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 0, i32 2, !dbg !56
  %.elt1174 = getelementptr inbounds %5, %5 addrspace(5)* %2134, i32 0, i32 0, !dbg !56
  %.unpack1175 = load float, float addrspace(5)* %.elt1174, align 8, !dbg !56
  %.elt1176 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 0, i32 2, i32 1, !dbg !56
  %.unpack1177 = load float, float addrspace(5)* %.elt1176, align 4, !dbg !56
  %.elt1178 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 0, i32 0, i32 0, !dbg !56
  %.unpack1179 = load i32, i32 addrspace(5)* %.elt1178, align 8, !dbg !56
  %.elt1180 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 0, i32 0, i32 1, !dbg !56
  %.unpack1181 = load i32, i32 addrspace(5)* %.elt1180, align 4, !dbg !56
  %2135 = fmul float %.unpack1171, %.unpack1175, !dbg !56
  %2136 = sitofp i32 %.unpack1179 to float, !dbg !56
  %2137 = fadd float %2136, -2.000000e+00, !dbg !56
  %2138 = fcmp olt float %2135, %2137, !dbg !56
  %2139 = select i1 %2138, float %2135, float %2137, !dbg !56
  %2140 = call float @__ocml_floor_f32(float %2139), !dbg !56
  %2141 = fmul float %.unpack1173, %.unpack1177, !dbg !55
  %2142 = sitofp i32 %.unpack1181 to float, !dbg !55
  %2143 = fadd float %2142, -2.000000e+00, !dbg !55
  %2144 = fcmp olt float %2141, %2143, !dbg !55
  %2145 = select i1 %2144, float %2141, float %2143, !dbg !55
  %2146 = call float @__ocml_floor_f32(float %2145), !dbg !55
  %2147 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 0, i32 0, i32 0, !dbg !56
  %2148 = load i32, i32 addrspace(5)* %2147, align 8, !dbg !56
  %2149 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 0, i32 7, !dbg !56
  %2150 = load [0 x float]*, [0 x float]* addrspace(5)* %2149, align 8, !dbg !56
  %2151 = fptosi float %2140 to i32, !dbg !56
  %2152 = fptosi float %2146 to i32, !dbg !56
  %2153 = mul nsw i32 %2148, %2152, !dbg !56
  %index656 = add nsw i32 %2153, %2151, !dbg !56
  %2154 = sext i32 %index656 to i64, !dbg !56
  %2155 = getelementptr inbounds [0 x float], [0 x float]* %2150, i64 0, i64 %2154, !dbg !56
  %2156 = load float, float* %2155, align 4, !dbg !56
  %2157 = load [0 x float]*, [0 x float]* addrspace(5)* %2149, align 8, !dbg !56
  %2158 = getelementptr inbounds [0 x float], [0 x float]* %2157, i64 0, i64 1, !dbg !56
  %2159 = sext i32 %index656 to i64, !dbg !56
  %2160 = getelementptr inbounds float, float* %2158, i64 %2159, !dbg !56
  %2161 = load float, float* %2160, align 4, !dbg !56
  %2162 = load i32, i32 addrspace(5)* %2147, align 8, !dbg !56
  %2163 = sext i32 %2162 to i64, !dbg !56
  %2164 = getelementptr inbounds [0 x float], [0 x float]* %2157, i64 0, i64 %2163, !dbg !56
  %2165 = sext i32 %index656 to i64, !dbg !56
  %2166 = getelementptr inbounds float, float* %2164, i64 %2165, !dbg !56
  %2167 = load float, float* %2166, align 4, !dbg !56
  %2168 = load [0 x float]*, [0 x float]* addrspace(5)* %2149, align 8, !dbg !56
  %2169 = load i32, i32 addrspace(5)* %2147, align 8, !dbg !56
  %2170 = add nsw i32 %2169, 1, !dbg !56
  %2171 = sext i32 %2170 to i64, !dbg !56
  %2172 = getelementptr inbounds [0 x float], [0 x float]* %2168, i64 0, i64 %2171, !dbg !56
  %2173 = sext i32 %index656 to i64, !dbg !56
  %2174 = getelementptr inbounds float, float* %2172, i64 %2173, !dbg !56
  %2175 = load float, float* %2174, align 4, !dbg !56
  %2176 = getelementptr inbounds %5, %5 addrspace(5)* %2134, i32 0, i32 0, !dbg !56
  %2177 = load float, float addrspace(5)* %2176, align 8, !dbg !56
  %2178 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 0, i32 2, i32 1, !dbg !56
  %2179 = load float, float addrspace(5)* %2178, align 4, !dbg !56
  %2180 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 1, !dbg !56
  %2181 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 1, i32 2, !dbg !56
  %.elt1182 = getelementptr inbounds %5, %5 addrspace(5)* %2181, i32 0, i32 0, !dbg !56
  %.unpack1183 = load float, float addrspace(5)* %.elt1182, align 8, !dbg !56
  %.elt1184 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 1, i32 2, i32 1, !dbg !56
  %.unpack1185 = load float, float addrspace(5)* %.elt1184, align 4, !dbg !56
  %.elt1186 = getelementptr inbounds %3, %3 addrspace(5)* %2180, i32 0, i32 0, i32 0, !dbg !56
  %.unpack1187 = load i32, i32 addrspace(5)* %.elt1186, align 8, !dbg !56
  %.elt1188 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 1, i32 0, i32 1, !dbg !56
  %.unpack1189 = load i32, i32 addrspace(5)* %.elt1188, align 4, !dbg !56
  %2182 = fmul float %895, %.unpack1183, !dbg !56
  %2183 = sitofp i32 %.unpack1187 to float, !dbg !56
  %2184 = fadd float %2183, -2.000000e+00, !dbg !56
  %2185 = fcmp olt float %2182, %2184, !dbg !56
  %2186 = select i1 %2185, float %2182, float %2184, !dbg !56
  %2187 = call float @__ocml_floor_f32(float %2186), !dbg !56
  %2188 = fadd float %878, 0x400921FB60000000, !dbg !55
  %2189 = fdiv float %2188, 0x401921FB60000000, !dbg !55
  %2190 = fmul float %2189, %.unpack1185, !dbg !55
  %2191 = sitofp i32 %.unpack1189 to float, !dbg !55
  %2192 = fadd float %2191, -2.000000e+00, !dbg !55
  %2193 = fcmp olt float %2190, %2192, !dbg !55
  %2194 = select i1 %2193, float %2190, float %2192, !dbg !55
  %2195 = call float @__ocml_floor_f32(float %2194), !dbg !55
  %2196 = getelementptr inbounds %3, %3 addrspace(5)* %2180, i32 0, i32 0, i32 0, !dbg !56
  %2197 = load i32, i32 addrspace(5)* %2196, align 8, !dbg !56
  %2198 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 1, i32 7, !dbg !56
  %2199 = load [0 x float]*, [0 x float]* addrspace(5)* %2198, align 8, !dbg !56
  %2200 = fptosi float %2187 to i32, !dbg !56
  %2201 = fptosi float %2195 to i32, !dbg !56
  %2202 = mul nsw i32 %2197, %2201, !dbg !56
  %index657 = add nsw i32 %2202, %2200, !dbg !56
  %2203 = sext i32 %index657 to i64, !dbg !56
  %2204 = getelementptr inbounds [0 x float], [0 x float]* %2199, i64 0, i64 %2203, !dbg !56
  %2205 = load float, float* %2204, align 4, !dbg !56
  %2206 = load [0 x float]*, [0 x float]* addrspace(5)* %2198, align 8, !dbg !56
  %2207 = getelementptr inbounds [0 x float], [0 x float]* %2206, i64 0, i64 1, !dbg !56
  %2208 = sext i32 %index657 to i64, !dbg !56
  %2209 = getelementptr inbounds float, float* %2207, i64 %2208, !dbg !56
  %2210 = load float, float* %2209, align 4, !dbg !56
  %2211 = load i32, i32 addrspace(5)* %2196, align 8, !dbg !56
  %2212 = sext i32 %2211 to i64, !dbg !56
  %2213 = getelementptr inbounds [0 x float], [0 x float]* %2206, i64 0, i64 %2212, !dbg !56
  %2214 = sext i32 %index657 to i64, !dbg !56
  %2215 = getelementptr inbounds float, float* %2213, i64 %2214, !dbg !56
  %2216 = load float, float* %2215, align 4, !dbg !56
  %2217 = load [0 x float]*, [0 x float]* addrspace(5)* %2198, align 8, !dbg !56
  %2218 = load i32, i32 addrspace(5)* %2196, align 8, !dbg !56
  %2219 = add nsw i32 %2218, 1, !dbg !56
  %2220 = sext i32 %2219 to i64, !dbg !56
  %2221 = getelementptr inbounds [0 x float], [0 x float]* %2217, i64 0, i64 %2220, !dbg !56
  %2222 = sext i32 %index657 to i64, !dbg !56
  %2223 = getelementptr inbounds float, float* %2221, i64 %2222, !dbg !56
  %2224 = load float, float* %2223, align 4, !dbg !56
  %2225 = getelementptr inbounds %5, %5 addrspace(5)* %2181, i32 0, i32 0, !dbg !56
  %2226 = load float, float addrspace(5)* %2225, align 8, !dbg !56
  %2227 = getelementptr inbounds %7, %7 addrspace(5)* %_4461048, i32 0, i32 1, i32 2, i32 1, !dbg !56
  %2228 = load float, float addrspace(5)* %2227, align 4, !dbg !56
  %.elt1190 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 0, !dbg !56
  %.unpack1191 = load float, float addrspace(5)* %.elt1190, align 4, !dbg !56
  %.elt1192 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 1, !dbg !56
  %.unpack1193 = load float, float addrspace(5)* %.elt1192, align 4, !dbg !56
  %.elt1194 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 2, !dbg !56
  %.unpack1195 = load float, float addrspace(5)* %.elt1194, align 4, !dbg !56
  %2229 = fsub float %2141, %2146, !dbg !56
  %2230 = fsub float 1.000000e+00, %2229, !dbg !56
  %2231 = fsub float %2135, %2140, !dbg !56
  %2232 = fsub float 1.000000e+00, %2231, !dbg !56
  %2233 = fmul float %2232, %2156, !dbg !56
  %2234 = fmul float %2231, %2161, !dbg !56
  %2235 = fadd float %2233, %2234, !dbg !56
  %2236 = fmul float %2230, %2235, !dbg !56
  %2237 = fmul float %2232, %2167, !dbg !56
  %2238 = fmul float %2231, %2175, !dbg !56
  %2239 = fadd float %2237, %2238, !dbg !56
  %2240 = fmul float %2229, %2239, !dbg !56
  %2241 = fadd float %2236, %2240, !dbg !56
  %hprod658 = fmul float %2177, %2179, !dbg !56
  %2242 = fmul float %2241, %hprod658, !dbg !56
  %2243 = fsub float %2190, %2195, !dbg !56
  %2244 = fsub float 1.000000e+00, %2243, !dbg !56
  %2245 = fsub float %2182, %2187, !dbg !56
  %2246 = fsub float 1.000000e+00, %2245, !dbg !56
  %2247 = fmul float %2246, %2205, !dbg !56
  %2248 = fmul float %2245, %2210, !dbg !56
  %2249 = fadd float %2247, %2248, !dbg !56
  %2250 = fmul float %2244, %2249, !dbg !56
  %2251 = fmul float %2246, %2216, !dbg !56
  %2252 = fmul float %2245, %2224, !dbg !56
  %2253 = fadd float %2251, %2252, !dbg !56
  %2254 = fmul float %2243, %2253, !dbg !56
  %2255 = fadd float %2250, %2254, !dbg !56
  %hprod659 = fmul float %2226, %2228, !dbg !56
  %2256 = fmul float %2255, %hprod659, !dbg !56
  %2257 = fmul float %2256, 4.000000e+00, !dbg !56
  %factor = fdiv float %2242, %2257, !dbg !56
  %2258 = fmul float %.unpack1191, %factor, !dbg !56
  %2259 = fmul float %.unpack1193, %factor, !dbg !56
  %2260 = fmul float %.unpack1195, %factor, !dbg !56
  %fr_4463343.repack1196 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 0, !dbg !56
  store float %2258, float addrspace(5)* %fr_4463343.repack1196, align 4, !dbg !56
  %fr_4463343.repack1198 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 1, !dbg !56
  store float %2259, float addrspace(5)* %fr_4463343.repack1198, align 4, !dbg !56
  %fr_4463343.repack1200 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4463343, i32 0, i32 2, !dbg !56
  store float %2260, float addrspace(5)* %fr_4463343.repack1200, align 4, !dbg !56
  %2261 = insertvalue %9 undef, float %2258, 0, !dbg !56
  %2262 = insertvalue %9 %2261, float %2259, 1, !dbg !56
  %2263 = insertvalue %9 %2262, float %2260, 2, !dbg !56
  br label %evaluate_brdf_cont, !dbg !56

expr_true191:                                     ; preds = %expr_false172, %continue208
  %2264 = load [0 x i32]*, [0 x i32]* addrspace(5)* %916, align 8, !dbg !75
  %2265 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !75
  %2266 = sext i32 %2265 to i64, !dbg !75
  %2267 = getelementptr inbounds [0 x i32], [0 x i32]* %2264, i64 0, i64 %2266, !dbg !75
  %2268 = load i32, i32* %2267, align 4, !dbg !75
  %2269 = icmp eq i32 %2268, 1, !dbg !75
  br i1 %2269, label %expr_true207, label %expr_false192, !dbg !75

expr_false192:                                    ; preds = %expr_true191
  store float %878, float addrspace(5)* %dim_param_4462647, align 4, !dbg !76
  %2270 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !76
  %2271 = icmp eq i32 %2270, 1, !dbg !76
  br i1 %2271, label %expr_true197, label %expr_false193, !dbg !76

expr_false193:                                    ; preds = %expr_false192
  %2272 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !77
  %2273 = icmp eq i32 %2272, 2, !dbg !77
  br i1 %2273, label %expr_true195, label %if_join198, !dbg !77

expr_true195:                                     ; preds = %expr_false193
  store float 2.000000e+00, float addrspace(5)* %dim_param_4462647, align 4, !dbg !78
  br label %if_join198, !dbg !78

expr_true197:                                     ; preds = %expr_false192
  store float %893, float addrspace(5)* %dim_param_4462647, align 4, !dbg !77
  br label %if_join198, !dbg !77

if_join198:                                       ; preds = %expr_true195, %expr_false193, %expr_true197
  %2274 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !79
  %2275 = load float, float addrspace(5)* %dim_param_4462647, align 4, !dbg !79
  %2276 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %914, i32 %2274, float %2275), !dbg !79
  %2277 = load [0 x float]*, [0 x float]* addrspace(5)* %917, align 8, !dbg !80
  %2278 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !80
  %2279 = load i32, i32 addrspace(5)* %918, align 8, !dbg !80
  %2280 = mul nsw i32 %2278, %2279, !dbg !80
  %2281 = add nsw i32 %2280, %2276, !dbg !80
  %2282 = sext i32 %2281 to i64, !dbg !80
  %2283 = getelementptr inbounds [0 x float], [0 x float]* %2277, i64 0, i64 %2282, !dbg !80
  %2284 = load float, float* %2283, align 4, !dbg !80
  %2285 = load [0 x float]*, [0 x float]* addrspace(5)* %917, align 8, !dbg !80
  %2286 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !80
  %2287 = load i32, i32 addrspace(5)* %918, align 8, !dbg !80
  %2288 = mul nsw i32 %2286, %2287, !dbg !80
  %2289 = add nsw i32 %2288, %2276, !dbg !80
  %2290 = add nsw i32 %2289, 1, !dbg !80
  %2291 = sext i32 %2290 to i64, !dbg !80
  %2292 = getelementptr inbounds [0 x float], [0 x float]* %2285, i64 0, i64 %2291, !dbg !80
  %2293 = load float, float* %2292, align 4, !dbg !80
  %2294 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !80
  %2295 = load float, float addrspace(5)* %dim_param_4462647, align 4, !dbg !80
  %2296 = fsub float %2295, %2284, !dbg !80
  %2297 = fsub float %2293, %2284, !dbg !80
  %2298 = fdiv float %2296, %2297, !dbg !80
  %2299 = fcmp olt float %2298, 0.000000e+00, !dbg !80
  %2300 = fcmp ogt float %2298, 1.000000e+00, !dbg !80
  %.1206 = select i1 %2300, float 1.000000e+00, float %2298, !dbg !80
  %clampf_cont206 = select i1 %2299, float 0.000000e+00, float %.1206, !dbg !80
  %2301 = shl nsw i32 %2294, 1, !dbg !81
  %2302 = or i32 %2301, 1, !dbg !81
  %2303 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 %2302, !dbg !81
  store float %clampf_cont206, float addrspace(5)* %2303, align 4, !dbg !81
  %2304 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !81
  %2305 = shl nsw i32 %2304, 1, !dbg !81
  %2306 = or i32 %2305, 1, !dbg !81
  %2307 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 %2306, !dbg !81
  %2308 = load float, float addrspace(5)* %2307, align 4, !dbg !81
  %2309 = shl nsw i32 %2304, 1, !dbg !81
  %2310 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 %2309, !dbg !81
  %2311 = fsub float 1.000000e+00, %2308, !dbg !81
  store float %2311, float addrspace(5)* %2310, align 4, !dbg !81
  %2312 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !81
  %2313 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !81
  %2314 = sext i32 %2313 to i64, !dbg !81
  %2315 = getelementptr inbounds [0 x i32], [0 x i32]* %2312, i64 0, i64 %2314, !dbg !81
  %2316 = load i32, i32* %2315, align 4, !dbg !81
  %2317 = load i32, i32 addrspace(5)* %slice_offset_4462737, align 4, !dbg !81
  %2318 = mul nsw i32 %2316, %2276, !dbg !81
  %2319 = add nsw i32 %2317, %2318, !dbg !81
  store i32 %2319, i32 addrspace(5)* %slice_offset_4462737, align 4, !dbg !81
  %2320 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !81
  br label %continue208, !dbg !81

expr_true207:                                     ; preds = %expr_true191
  %2321 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !76
  %2322 = shl nsw i32 %2321, 1, !dbg !76
  %2323 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 %2322, !dbg !76
  store float 1.000000e+00, float addrspace(5)* %2323, align 4, !dbg !76
  %2324 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !76
  %2325 = shl nsw i32 %2324, 1, !dbg !76
  %2326 = or i32 %2325, 1, !dbg !76
  %2327 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462629, i32 0, i32 %2326, !dbg !76
  store float 0.000000e+00, float addrspace(5)* %2327, align 4, !dbg !76
  %2328 = load i32, i32 addrspace(5)* %dim_4462607, align 4, !dbg !76
  br label %continue208, !dbg !76

continue208:                                      ; preds = %expr_true207, %if_join198
  %storemerge1202.in = phi i32 [ %2320, %if_join198 ], [ %2328, %expr_true207 ]
  %storemerge1202 = add nsw i32 %storemerge1202.in, 1, !dbg !40
  store i32 %storemerge1202, i32 addrspace(5)* %dim_4462607, align 4, !dbg !40
  %2329 = icmp slt i32 %storemerge1202.in, 2, !dbg !74
  br i1 %2329, label %expr_true191, label %expr_false178, !dbg !74

expr_true209:                                     ; preds = %expr_false166, %continue226
  %2330 = load [0 x i32]*, [0 x i32]* addrspace(5)* %916, align 8, !dbg !75
  %2331 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !75
  %2332 = sext i32 %2331 to i64, !dbg !75
  %2333 = getelementptr inbounds [0 x i32], [0 x i32]* %2330, i64 0, i64 %2332, !dbg !75
  %2334 = load i32, i32* %2333, align 4, !dbg !75
  %2335 = icmp eq i32 %2334, 1, !dbg !75
  br i1 %2335, label %expr_true225, label %expr_false210, !dbg !75

expr_false210:                                    ; preds = %expr_true209
  store float %878, float addrspace(5)* %dim_param_4462457, align 4, !dbg !76
  %2336 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !76
  %2337 = icmp eq i32 %2336, 1, !dbg !76
  br i1 %2337, label %expr_true215, label %expr_false211, !dbg !76

expr_false211:                                    ; preds = %expr_false210
  %2338 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !77
  %2339 = icmp eq i32 %2338, 2, !dbg !77
  br i1 %2339, label %expr_true213, label %if_join216, !dbg !77

expr_true213:                                     ; preds = %expr_false211
  store float 1.000000e+00, float addrspace(5)* %dim_param_4462457, align 4, !dbg !78
  br label %if_join216, !dbg !78

expr_true215:                                     ; preds = %expr_false210
  store float %893, float addrspace(5)* %dim_param_4462457, align 4, !dbg !77
  br label %if_join216, !dbg !77

if_join216:                                       ; preds = %expr_true213, %expr_false211, %expr_true215
  %2340 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !79
  %2341 = load float, float addrspace(5)* %dim_param_4462457, align 4, !dbg !79
  %2342 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %914, i32 %2340, float %2341), !dbg !79
  %2343 = load [0 x float]*, [0 x float]* addrspace(5)* %917, align 8, !dbg !80
  %2344 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !80
  %2345 = load i32, i32 addrspace(5)* %918, align 8, !dbg !80
  %2346 = mul nsw i32 %2344, %2345, !dbg !80
  %2347 = add nsw i32 %2346, %2342, !dbg !80
  %2348 = sext i32 %2347 to i64, !dbg !80
  %2349 = getelementptr inbounds [0 x float], [0 x float]* %2343, i64 0, i64 %2348, !dbg !80
  %2350 = load float, float* %2349, align 4, !dbg !80
  %2351 = load [0 x float]*, [0 x float]* addrspace(5)* %917, align 8, !dbg !80
  %2352 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !80
  %2353 = load i32, i32 addrspace(5)* %918, align 8, !dbg !80
  %2354 = mul nsw i32 %2352, %2353, !dbg !80
  %2355 = add nsw i32 %2354, %2342, !dbg !80
  %2356 = add nsw i32 %2355, 1, !dbg !80
  %2357 = sext i32 %2356 to i64, !dbg !80
  %2358 = getelementptr inbounds [0 x float], [0 x float]* %2351, i64 0, i64 %2357, !dbg !80
  %2359 = load float, float* %2358, align 4, !dbg !80
  %2360 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !80
  %2361 = load float, float addrspace(5)* %dim_param_4462457, align 4, !dbg !80
  %2362 = fsub float %2361, %2350, !dbg !80
  %2363 = fsub float %2359, %2350, !dbg !80
  %2364 = fdiv float %2362, %2363, !dbg !80
  %2365 = fcmp olt float %2364, 0.000000e+00, !dbg !80
  %2366 = fcmp ogt float %2364, 1.000000e+00, !dbg !80
  %.1207 = select i1 %2366, float 1.000000e+00, float %2364, !dbg !80
  %clampf_cont224 = select i1 %2365, float 0.000000e+00, float %.1207, !dbg !80
  %2367 = shl nsw i32 %2360, 1, !dbg !81
  %2368 = or i32 %2367, 1, !dbg !81
  %2369 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 %2368, !dbg !81
  store float %clampf_cont224, float addrspace(5)* %2369, align 4, !dbg !81
  %2370 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !81
  %2371 = shl nsw i32 %2370, 1, !dbg !81
  %2372 = or i32 %2371, 1, !dbg !81
  %2373 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 %2372, !dbg !81
  %2374 = load float, float addrspace(5)* %2373, align 4, !dbg !81
  %2375 = shl nsw i32 %2370, 1, !dbg !81
  %2376 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 %2375, !dbg !81
  %2377 = fsub float 1.000000e+00, %2374, !dbg !81
  store float %2377, float addrspace(5)* %2376, align 4, !dbg !81
  %2378 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !81
  %2379 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !81
  %2380 = sext i32 %2379 to i64, !dbg !81
  %2381 = getelementptr inbounds [0 x i32], [0 x i32]* %2378, i64 0, i64 %2380, !dbg !81
  %2382 = load i32, i32* %2381, align 4, !dbg !81
  %2383 = load i32, i32 addrspace(5)* %slice_offset_4462547, align 4, !dbg !81
  %2384 = mul nsw i32 %2382, %2342, !dbg !81
  %2385 = add nsw i32 %2383, %2384, !dbg !81
  store i32 %2385, i32 addrspace(5)* %slice_offset_4462547, align 4, !dbg !81
  %2386 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !81
  br label %continue226, !dbg !81

expr_true225:                                     ; preds = %expr_true209
  %2387 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !76
  %2388 = shl nsw i32 %2387, 1, !dbg !76
  %2389 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 %2388, !dbg !76
  store float 1.000000e+00, float addrspace(5)* %2389, align 4, !dbg !76
  %2390 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !76
  %2391 = shl nsw i32 %2390, 1, !dbg !76
  %2392 = or i32 %2391, 1, !dbg !76
  %2393 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462439, i32 0, i32 %2392, !dbg !76
  store float 0.000000e+00, float addrspace(5)* %2393, align 4, !dbg !76
  %2394 = load i32, i32 addrspace(5)* %dim_4462417, align 4, !dbg !76
  br label %continue226, !dbg !76

continue226:                                      ; preds = %expr_true225, %if_join216
  %storemerge1203.in = phi i32 [ %2386, %if_join216 ], [ %2394, %expr_true225 ]
  %storemerge1203 = add nsw i32 %storemerge1203.in, 1, !dbg !40
  store i32 %storemerge1203, i32 addrspace(5)* %dim_4462417, align 4, !dbg !40
  %2395 = icmp slt i32 %storemerge1203.in, 2, !dbg !74
  br i1 %2395, label %expr_true209, label %expr_false172, !dbg !74

expr_true227:                                     ; preds = %if_join160, %continue244
  %2396 = load [0 x i32]*, [0 x i32]* addrspace(5)* %916, align 8, !dbg !75
  %2397 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !75
  %2398 = sext i32 %2397 to i64, !dbg !75
  %2399 = getelementptr inbounds [0 x i32], [0 x i32]* %2396, i64 0, i64 %2398, !dbg !75
  %2400 = load i32, i32* %2399, align 4, !dbg !75
  %2401 = icmp eq i32 %2400, 1, !dbg !75
  br i1 %2401, label %expr_true243, label %expr_false228, !dbg !75

expr_false228:                                    ; preds = %expr_true227
  store float %878, float addrspace(5)* %dim_param_4462259, align 4, !dbg !76
  %2402 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !76
  %2403 = icmp eq i32 %2402, 1, !dbg !76
  br i1 %2403, label %expr_true233, label %expr_false229, !dbg !76

expr_false229:                                    ; preds = %expr_false228
  %2404 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !77
  %2405 = icmp eq i32 %2404, 2, !dbg !77
  br i1 %2405, label %expr_true231, label %if_join234, !dbg !77

expr_true231:                                     ; preds = %expr_false229
  store float 0.000000e+00, float addrspace(5)* %dim_param_4462259, align 4, !dbg !78
  br label %if_join234, !dbg !78

expr_true233:                                     ; preds = %expr_false228
  store float %893, float addrspace(5)* %dim_param_4462259, align 4, !dbg !77
  br label %if_join234, !dbg !77

if_join234:                                       ; preds = %expr_true231, %expr_false229, %expr_true233
  %2406 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !79
  %2407 = load float, float addrspace(5)* %dim_param_4462259, align 4, !dbg !79
  %2408 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %914, i32 %2406, float %2407), !dbg !79
  %2409 = load [0 x float]*, [0 x float]* addrspace(5)* %917, align 8, !dbg !80
  %2410 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !80
  %2411 = load i32, i32 addrspace(5)* %918, align 8, !dbg !80
  %2412 = mul nsw i32 %2410, %2411, !dbg !80
  %2413 = add nsw i32 %2412, %2408, !dbg !80
  %2414 = sext i32 %2413 to i64, !dbg !80
  %2415 = getelementptr inbounds [0 x float], [0 x float]* %2409, i64 0, i64 %2414, !dbg !80
  %2416 = load float, float* %2415, align 4, !dbg !80
  %2417 = load [0 x float]*, [0 x float]* addrspace(5)* %917, align 8, !dbg !80
  %2418 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !80
  %2419 = load i32, i32 addrspace(5)* %918, align 8, !dbg !80
  %2420 = mul nsw i32 %2418, %2419, !dbg !80
  %2421 = add nsw i32 %2420, %2408, !dbg !80
  %2422 = add nsw i32 %2421, 1, !dbg !80
  %2423 = sext i32 %2422 to i64, !dbg !80
  %2424 = getelementptr inbounds [0 x float], [0 x float]* %2417, i64 0, i64 %2423, !dbg !80
  %2425 = load float, float* %2424, align 4, !dbg !80
  %2426 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !80
  %2427 = load float, float addrspace(5)* %dim_param_4462259, align 4, !dbg !80
  %2428 = fsub float %2427, %2416, !dbg !80
  %2429 = fsub float %2425, %2416, !dbg !80
  %2430 = fdiv float %2428, %2429, !dbg !80
  %2431 = fcmp olt float %2430, 0.000000e+00, !dbg !80
  %2432 = fcmp ogt float %2430, 1.000000e+00, !dbg !80
  %.1208 = select i1 %2432, float 1.000000e+00, float %2430, !dbg !80
  %clampf_cont242 = select i1 %2431, float 0.000000e+00, float %.1208, !dbg !80
  %2433 = shl nsw i32 %2426, 1, !dbg !81
  %2434 = or i32 %2433, 1, !dbg !81
  %2435 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 %2434, !dbg !81
  store float %clampf_cont242, float addrspace(5)* %2435, align 4, !dbg !81
  %2436 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !81
  %2437 = shl nsw i32 %2436, 1, !dbg !81
  %2438 = or i32 %2437, 1, !dbg !81
  %2439 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 %2438, !dbg !81
  %2440 = load float, float addrspace(5)* %2439, align 4, !dbg !81
  %2441 = shl nsw i32 %2436, 1, !dbg !81
  %2442 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 %2441, !dbg !81
  %2443 = fsub float 1.000000e+00, %2440, !dbg !81
  store float %2443, float addrspace(5)* %2442, align 4, !dbg !81
  %2444 = load [0 x i32]*, [0 x i32]* addrspace(5)* %915, align 8, !dbg !81
  %2445 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !81
  %2446 = sext i32 %2445 to i64, !dbg !81
  %2447 = getelementptr inbounds [0 x i32], [0 x i32]* %2444, i64 0, i64 %2446, !dbg !81
  %2448 = load i32, i32* %2447, align 4, !dbg !81
  %2449 = load i32, i32 addrspace(5)* %slice_offset_4462352, align 4, !dbg !81
  %2450 = mul nsw i32 %2448, %2408, !dbg !81
  %2451 = add nsw i32 %2449, %2450, !dbg !81
  store i32 %2451, i32 addrspace(5)* %slice_offset_4462352, align 4, !dbg !81
  %2452 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !81
  br label %continue244, !dbg !81

expr_true243:                                     ; preds = %expr_true227
  %2453 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !76
  %2454 = shl nsw i32 %2453, 1, !dbg !76
  %2455 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 %2454, !dbg !76
  store float 1.000000e+00, float addrspace(5)* %2455, align 4, !dbg !76
  %2456 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !76
  %2457 = shl nsw i32 %2456, 1, !dbg !76
  %2458 = or i32 %2457, 1, !dbg !76
  %2459 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4462241, i32 0, i32 %2458, !dbg !76
  store float 0.000000e+00, float addrspace(5)* %2459, align 4, !dbg !76
  %2460 = load i32, i32 addrspace(5)* %dim_4462217, align 4, !dbg !76
  br label %continue244, !dbg !76

continue244:                                      ; preds = %expr_true243, %if_join234
  %storemerge1204.in = phi i32 [ %2452, %if_join234 ], [ %2460, %expr_true243 ]
  %storemerge1204 = add nsw i32 %storemerge1204.in, 1, !dbg !40
  store i32 %storemerge1204, i32 addrspace(5)* %dim_4462217, align 4, !dbg !40
  %2461 = icmp slt i32 %storemerge1204.in, 2, !dbg !74
  br i1 %2461, label %expr_true227, label %expr_false166, !dbg !74

evaluate_brdf_cont:                               ; preds = %expr_false138, %if_join137, %expr_false178
  %evaluate_brdf_cont248 = phi %9 [ %2263, %expr_false178 ], [ zeroinitializer, %if_join137 ], [ zeroinitializer, %expr_false138 ], !dbg !82
  %2462 = extractvalue %1 %285, 1, !dbg !23
  %2463 = sext i32 %ray_id to i64, !dbg !23
  %2464 = getelementptr inbounds [0 x float], [0 x float]* %2462, i64 0, i64 %2463, !dbg !23
  store float %218, float* %2464, align 4, !dbg !23
  %2465 = extractvalue %1 %285, 2, !dbg !23
  %2466 = sext i32 %ray_id to i64, !dbg !23
  %2467 = getelementptr inbounds [0 x float], [0 x float]* %2465, i64 0, i64 %2466, !dbg !23
  store float %232, float* %2467, align 4, !dbg !23
  %2468 = extractvalue %1 %285, 3, !dbg !23
  %2469 = sext i32 %ray_id to i64, !dbg !23
  %2470 = getelementptr inbounds [0 x float], [0 x float]* %2468, i64 0, i64 %2469, !dbg !23
  store float %245, float* %2470, align 4, !dbg !23
  %2471 = extractvalue %1 %285, 4, !dbg !23
  %2472 = sext i32 %ray_id to i64, !dbg !23
  %2473 = getelementptr inbounds [0 x float], [0 x float]* %2471, i64 0, i64 %2472, !dbg !23
  store float %276, float* %2473, align 4, !dbg !23
  %2474 = extractvalue %1 %285, 5, !dbg !23
  %2475 = sext i32 %ray_id to i64, !dbg !23
  %2476 = getelementptr inbounds [0 x float], [0 x float]* %2474, i64 0, i64 %2475, !dbg !23
  store float %278, float* %2476, align 4, !dbg !23
  %2477 = extractvalue %1 %285, 6, !dbg !23
  %2478 = sext i32 %ray_id to i64, !dbg !23
  %2479 = getelementptr inbounds [0 x float], [0 x float]* %2477, i64 0, i64 %2478, !dbg !23
  store float %281, float* %2479, align 4, !dbg !23
  %2480 = extractvalue %1 %285, 7, !dbg !23
  %2481 = sext i32 %ray_id to i64, !dbg !23
  %2482 = getelementptr inbounds [0 x float], [0 x float]* %2480, i64 0, i64 %2481, !dbg !23
  store float 0x3F50624DE0000000, float* %2482, align 4, !dbg !23
  %2483 = extractvalue %1 %285, 8, !dbg !23
  %2484 = sext i32 %ray_id to i64, !dbg !23
  %2485 = getelementptr inbounds [0 x float], [0 x float]* %2483, i64 0, i64 %2484, !dbg !23
  store float 0x3FEFF7CEE0000000, float* %2485, align 4, !dbg !23
  %2486 = extractvalue %2 %_4454569, 2, !dbg !23
  %2487 = sext i32 %ray_id to i64, !dbg !23
  %2488 = getelementptr inbounds [0 x float], [0 x float]* %2486, i64 0, i64 %2487, !dbg !23
  %2489 = extractvalue %9 %.pn835, 0, !dbg !23
  %2490 = extractvalue %9 %evaluate_brdf_cont248, 0, !dbg !23
  %2491 = fmul float %.unpack1087, %2490, !dbg !23
  %2492 = fmul float %2489, %2491, !dbg !23
  %cos_e = fmul float %283, %inv_d, !dbg !23
  %2493 = fmul float %cos_e, %.pn829, !dbg !23
  %inv_d2 = fmul float %inv_d, %inv_d, !dbg !23
  %2494 = fmul float %2493, %inv_d2, !dbg !23
  %pdf_l = fmul float %.pn833, 5.000000e-01, !dbg !23
  %inv_pdf_l = fdiv float 1.000000e+00, %pdf_l, !dbg !23
  %geom_factor = fmul float %2494, %inv_pdf_l, !dbg !23
  %2495 = fmul float %_cont111, %.pn829, !dbg !23
  %2496 = fmul float %2495, %inv_d2, !dbg !23
  %2497 = fmul float %2496, %inv_pdf_l, !dbg !23
  %2498 = fadd float %2497, 1.000000e+00, !dbg !23
  %2499 = fdiv float 1.000000e+00, %2498, !dbg !23
  %2500 = fmul float %geom_factor, %2499, !dbg !23
  %2501 = fmul float %2492, %2500, !dbg !23
  store float %2501, float* %2488, align 4, !dbg !23
  %2502 = extractvalue %2 %_4454569, 3, !dbg !23
  %2503 = sext i32 %ray_id to i64, !dbg !23
  %2504 = getelementptr inbounds [0 x float], [0 x float]* %2502, i64 0, i64 %2503, !dbg !23
  %2505 = extractvalue %9 %.pn835, 1, !dbg !23
  %2506 = extractvalue %9 %evaluate_brdf_cont248, 1, !dbg !23
  %2507 = fmul float %.unpack1089, %2506, !dbg !23
  %2508 = fmul float %2505, %2507, !dbg !23
  %2509 = fmul float %2508, %2500, !dbg !23
  store float %2509, float* %2504, align 4, !dbg !23
  %2510 = extractvalue %2 %_4454569, 4, !dbg !23
  %2511 = sext i32 %ray_id to i64, !dbg !23
  %2512 = getelementptr inbounds [0 x float], [0 x float]* %2510, i64 0, i64 %2511, !dbg !23
  %2513 = extractvalue %9 %.pn835, 2, !dbg !23
  %2514 = extractvalue %9 %evaluate_brdf_cont248, 2, !dbg !23
  %2515 = fmul float %.unpack1091, %2514, !dbg !23
  %2516 = fmul float %2513, %2515, !dbg !23
  %2517 = fmul float %2516, %2500, !dbg !23
  store float %2517, float* %2512, align 4, !dbg !23
  br label %break, !dbg !23

break:                                            ; preds = %_cont, %evaluate_brdf_cont
  %storemerge = phi i32 [ %64, %evaluate_brdf_cont ], [ -1, %_cont ], !dbg !40
  store i32 %storemerge, i32* %288, align 4, !dbg !40
  %.elt = getelementptr inbounds %9, %9 addrspace(5)* %308, i32 0, i32 0, !dbg !83
  %.unpack = load float, float addrspace(5)* %.elt, align 4, !dbg !83
  %.elt838 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 1, !dbg !83
  %.unpack839 = load float, float addrspace(5)* %.elt838, align 4, !dbg !83
  %.elt840 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 2, !dbg !83
  %.unpack841 = load float, float addrspace(5)* %.elt840, align 4, !dbg !83
  %2518 = fmul float %.unpack, 0x3FCB367A00000000, !dbg !83
  %2519 = fmul float %.unpack839, 0x3FE6E2EB20000000, !dbg !83
  %2520 = fadd float %2518, %2519, !dbg !83
  %2521 = fmul float %.unpack841, 0x3FB27BB300000000, !dbg !83
  %2522 = fadd float %2520, %2521, !dbg !83
  %prob = fmul float %2522, 2.000000e+00, !dbg !83
  %2523 = fcmp ogt float %prob, 7.500000e-01, !dbg !83
  %.prob = select i1 %2523, float 7.500000e-01, float %prob, !dbg !84
  %2524 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 3, !dbg !85
  %2525 = load i32, i32 addrspace(5)* %2524, align 4, !dbg !85
  %2526 = icmp sgt i32 %2525, 63, !dbg !85
  br i1 %2526, label %expr_true550, label %expr_false261, !dbg !85

expr_false261:                                    ; preds = %break
  %2527 = load i32, i32 addrspace(5)* %155, align 4, !dbg !86
  %2528 = icmp eq i32 %2527, 0, !dbg !86
  %2529 = select i1 %2528, i32 1, i32 %2527, !dbg !86
  %2530 = shl i32 %2529, 13, !dbg !86
  %2531 = xor i32 %2529, %2530, !dbg !86
  %2532 = lshr i32 %2531, 17, !dbg !86
  %2533 = xor i32 %2531, %2532, !dbg !86
  %2534 = shl i32 %2533, 5, !dbg !86
  %2535 = xor i32 %2533, %2534, !dbg !86
  %2536 = and i32 %2535, 8388607, !dbg !86
  %2537 = or i32 %2536, 1065353216, !dbg !86
  %2538 = bitcast i32 %2537 to float, !dbg !86
  %2539 = fadd float %2538, -1.000000e+00, !dbg !86
  %2540 = fcmp ugt float %.prob, %2539, !dbg !86
  store i32 %2535, i32 addrspace(5)* %155, align 4, !dbg !86
  br i1 %2540, label %expr_false262, label %expr_true549, !dbg !86

expr_false262:                                    ; preds = %expr_false261
  %2541 = call float @__ocml_sqrt_f32(float %300), !dbg !87
  %tangent_4455174.repack = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 0, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455174.repack, align 4, !dbg !24
  %tangent_4455174.repack842 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 1, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455174.repack842, align 4, !dbg !24
  %tangent_4455174.repack843 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 2, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455174.repack843, align 4, !dbg !24
  %2542 = call float @__ocml_fabs_f32(float %.pn827), !dbg !24
  %2543 = call float @__ocml_fabs_f32(float %.pn825), !dbg !35
  %2544 = fcmp olt float %2543, %2542, !dbg !36
  %2545 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 0, !dbg !36
  %2546 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 1, !dbg !36
  %2547 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 2, !dbg !36
  br i1 %2544, label %expr_true272, label %expr_false269, !dbg !36

expr_false269:                                    ; preds = %expr_false262
  %2548 = call float @__ocml_sqrt_f32(float %291), !dbg !37
  %2549 = fdiv float 1.000000e+00, %2548, !dbg !38
  %2550 = fmul float %2549, 0.000000e+00, !dbg !38
  store float %2550, float addrspace(5)* %2545, align 4, !dbg !38
  %2551 = fmul float %.pn823, %2549, !dbg !38
  store float %2551, float addrspace(5)* %2546, align 4, !dbg !38
  %2552 = fmul float %2549, %292, !dbg !38
  br label %if_join275, !dbg !38

expr_true272:                                     ; preds = %expr_false262
  %2553 = call float @__ocml_sqrt_f32(float %294), !dbg !37
  %2554 = fdiv float 1.000000e+00, %2553, !dbg !39
  %2555 = fmul float %2554, %295, !dbg !39
  store float %2555, float addrspace(5)* %2545, align 4, !dbg !39
  %2556 = fmul float %2554, 0.000000e+00, !dbg !39
  store float %2556, float addrspace(5)* %2546, align 4, !dbg !39
  %2557 = fmul float %.pn827, %2554, !dbg !39
  br label %if_join275, !dbg !39

if_join275:                                       ; preds = %expr_true272, %expr_false269
  %storemerge844 = phi float [ %2552, %expr_false269 ], [ %2557, %expr_true272 ], !dbg !40
  store float %storemerge844, float addrspace(5)* %2547, align 4, !dbg !40
  %2558 = fdiv float 1.000000e+00, %2541, !dbg !41
  %2559 = fmul float %2558, %50, !dbg !41
  %2560 = fmul float %.pn827, %2559, !dbg !41
  %2561 = fmul float %2558, %59, !dbg !41
  %2562 = fmul float %.pn825, %2561, !dbg !41
  %2563 = fadd float %2560, %2562, !dbg !41
  %2564 = fmul float %2558, %60, !dbg !41
  %2565 = fmul float %.pn823, %2564, !dbg !41
  %2566 = fadd float %2563, %2565, !dbg !41
  %2567 = fcmp ugt float %2566, 0.000000e+00, !dbg !41
  %.elt845 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 0, !dbg !41
  %.unpack846 = load float, float addrspace(5)* %.elt845, align 4, !dbg !41
  %.elt847 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 1, !dbg !41
  %.unpack848 = load float, float addrspace(5)* %.elt847, align 4, !dbg !41
  %.elt849 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455174, i32 0, i32 2, !dbg !41
  %.unpack850 = load float, float addrspace(5)* %.elt849, align 4, !dbg !41
  store %7 %307, %7 addrspace(5)* %_4455410, align 8, !dbg !41
  %2568 = load i32, i32 addrspace(5)* %155, align 4, !dbg !41
  %2569 = icmp eq i32 %2568, 0, !dbg !41
  %2570 = select i1 %2569, i32 1, i32 %2568, !dbg !41
  %2571 = shl i32 %2570, 13, !dbg !41
  %2572 = xor i32 %2570, %2571, !dbg !41
  %2573 = lshr i32 %2572, 17, !dbg !41
  %2574 = xor i32 %2572, %2573, !dbg !41
  %2575 = shl i32 %2574, 5, !dbg !41
  %2576 = xor i32 %2574, %2575, !dbg !41
  store i32 %2576, i32 addrspace(5)* %155, align 4, !dbg !41
  %2577 = icmp eq i32 %2576, 0, !dbg !41
  %2578 = select i1 %2577, i32 1, i32 %2576, !dbg !41
  %2579 = shl i32 %2578, 13, !dbg !41
  %2580 = xor i32 %2578, %2579, !dbg !41
  %2581 = lshr i32 %2580, 17, !dbg !41
  %2582 = xor i32 %2580, %2581, !dbg !41
  %2583 = shl i32 %2582, 5, !dbg !41
  %2584 = xor i32 %2582, %2583, !dbg !41
  store i32 %2584, i32 addrspace(5)* %155, align 4, !dbg !41
  br i1 %2567, label %expr_false276, label %sample_brdf_cont, !dbg !41

expr_false276:                                    ; preds = %if_join275
  %2585 = fmul float %.unpack846, %2559, !dbg !88
  %2586 = fmul float %.unpack848, %2561, !dbg !88
  %2587 = fadd float %2585, %2586, !dbg !88
  %2588 = fmul float %.unpack850, %2564, !dbg !88
  %2589 = fadd float %2587, %2588, !dbg !88
  %2590 = fmul float %2589, %2589, !dbg !88
  %2591 = fmul float %.pn825, %.unpack850, !dbg !88
  %2592 = fmul float %.pn823, %.unpack848, !dbg !88
  %2593 = fsub float %2591, %2592, !dbg !88
  %2594 = fmul float %2593, %2559, !dbg !88
  %2595 = fmul float %.pn823, %.unpack846, !dbg !88
  %2596 = fmul float %.pn827, %.unpack850, !dbg !88
  %2597 = fsub float %2595, %2596, !dbg !88
  %2598 = fmul float %2597, %2561, !dbg !88
  %2599 = fadd float %2594, %2598, !dbg !88
  %2600 = fmul float %.pn827, %.unpack848, !dbg !88
  %2601 = fmul float %.pn825, %.unpack846, !dbg !88
  %2602 = fsub float %2600, %2601, !dbg !88
  %2603 = fmul float %2602, %2564, !dbg !88
  %2604 = fadd float %2599, %2603, !dbg !88
  %2605 = fmul float %2604, %2604, !dbg !88
  %2606 = fadd float %2590, %2605, !dbg !88
  %2607 = fadd float %2566, -1.000000e+00, !dbg !88
  %2608 = fmul float %2607, %2607, !dbg !88
  %2609 = fadd float %2606, %2608, !dbg !88
  %2610 = call float @__ocml_sqrt_f32(float %2609), !dbg !88
  %2611 = fmul float %2610, 5.000000e-01, !dbg !44
  %2612 = call float @__ocml_asin_f32(float %2611), !dbg !44
  %2613 = call float @__ocml_atan2_f32(float %2604, float %2589), !dbg !45
  %2614 = fmul float %2612, 2.000000e+00, !dbg !89
  %2615 = fmul float %2614, 0x3FE45F3060000000, !dbg !89
  %2616 = call float @__ocml_sqrt_f32(float %2615), !dbg !89
  %2617 = and i32 %2584, 8388607, !dbg !90
  %2618 = or i32 %2617, 1065353216, !dbg !90
  %2619 = bitcast i32 %2618 to float, !dbg !90
  %2620 = fadd float %2619, -1.000000e+00, !dbg !90
  %2621 = and i32 %2576, 8388607, !dbg !90
  %2622 = or i32 %2621, 1065353216, !dbg !90
  %2623 = bitcast i32 %2622 to float, !dbg !90
  %2624 = fadd float %2623, -1.000000e+00, !dbg !90
  %sample_4457824.repack = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 0, !dbg !90
  store float %2620, float addrspace(5)* %sample_4457824.repack, align 4, !dbg !90
  %sample_4457824.repack858 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 1, !dbg !90
  store float %2624, float addrspace(5)* %sample_4457824.repack858, align 4, !dbg !90
  %n_sample_4455858.repack = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4455858, i32 0, i32 0, !dbg !90
  store float %2620, float addrspace(5)* %n_sample_4455858.repack, align 4, !dbg !90
  %n_sample_4455858.repack861 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4455858, i32 0, i32 1, !dbg !90
  store float %2624, float addrspace(5)* %n_sample_4455858.repack861, align 4, !dbg !90
  %param_weight_4455520.repack = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 0, !dbg !90
  store float 0.000000e+00, float addrspace(5)* %param_weight_4455520.repack, align 4, !dbg !90
  %param_weight_4455520.repack863 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 1, !dbg !90
  store float 0.000000e+00, float addrspace(5)* %param_weight_4455520.repack863, align 4, !dbg !90
  %param_weight_4455520.repack864 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 2, !dbg !90
  store float 0.000000e+00, float addrspace(5)* %param_weight_4455520.repack864, align 4, !dbg !90
  %param_weight_4455520.repack865 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 3, !dbg !90
  store float 0.000000e+00, float addrspace(5)* %param_weight_4455520.repack865, align 4, !dbg !90
  store i32 0, i32 addrspace(5)* %slice_offset_4455708, align 4, !dbg !90
  store i32 0, i32 addrspace(5)* %dim_4455496, align 4, !dbg !90
  %2625 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, !dbg !90
  %2626 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 4, !dbg !90
  %2627 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 3, !dbg !90
  %2628 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 5, !dbg !90
  %2629 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 6, !dbg !90
  br label %expr_true497, !dbg !91

expr_false286:                                    ; preds = %continue511
  %2630 = load i32, i32 addrspace(5)* %slice_offset_4455708, align 4, !dbg !92
  %2631 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 0, i32 1, !dbg !92
  %2632 = load i32, i32 addrspace(5)* %2631, align 4, !dbg !92
  %offset = mul nsw i32 %2630, %2632, !dbg !92
  store i32 %offset, i32 addrspace(5)* %offset_4455856, align 4, !dbg !92
  %2633 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4455858, i32 0, i32 1, !dbg !92
  %2634 = load float, float addrspace(5)* %2633, align 4, !dbg !92
  %2635 = load i32, i32 addrspace(5)* %2631, align 4, !dbg !92
  %size660 = add nsw i32 %2635, -2, !dbg !92
  store i32 %size660, i32 addrspace(5)* %size_4455733, align 4, !dbg !92
  store i32 1, i32 addrspace(5)* %first_4455836, align 4, !dbg !92
  %2636 = bitcast [4 x float] addrspace(5)* %param_weight_4455520 to [0 x float] addrspace(5)*, !dbg !92
  %2637 = addrspacecast [0 x float] addrspace(5)* %2636 to [0 x float]*, !dbg !92
  %2638 = icmp sgt i32 %2635, 2, !dbg !93
  br i1 %2638, label %expr_true491, label %expr_false288, !dbg !93

expr_false288:                                    ; preds = %if_join496, %expr_false286
  %2639 = load i32, i32 addrspace(5)* %first_4455836, align 4, !dbg !94
  %2640 = add nsw i32 %2639, -1, !dbg !94
  %2641 = icmp slt i32 %size660, %2640, !dbg !94
  %size660. = select i1 %2641, i32 %size660, i32 %2640, !dbg !94
  %.inv = icmp sgt i32 %2639, 0, !dbg !94
  %clamp_cont293 = select i1 %.inv, i32 %size660., i32 0, !dbg !94
  %2642 = load i32, i32 addrspace(5)* %offset_4455856, align 4, !dbg !95
  %2643 = call fastcc float @fetch_marginal_warp2D2_4455738(%3 addrspace(5)* %2625, i32 %2642, i32 %clamp_cont293, [0 x float]* %2637), !dbg !95
  %2644 = load float, float addrspace(5)* %2633, align 4, !dbg !96
  %2645 = fsub float %2644, %2643, !dbg !96
  store float %2645, float addrspace(5)* %2633, align 4, !dbg !96
  %2646 = getelementptr inbounds %3, %3 addrspace(5)* %2625, i32 0, i32 0, i32 0, !dbg !96
  %2647 = load i32, i32 addrspace(5)* %2646, align 8, !dbg !96
  %2648 = load i32, i32 addrspace(5)* %2631, align 4, !dbg !96
  %2649 = mul nsw i32 %clamp_cont293, %2647, !dbg !96
  store i32 %2649, i32 addrspace(5)* %offset_4455856, align 4, !dbg !96
  %2650 = load i32, i32 addrspace(5)* %slice_offset_4455708, align 4, !dbg !96
  %slice_size = mul nsw i32 %2647, %2648, !dbg !96
  %2651 = mul nsw i32 %2650, %slice_size, !dbg !96
  %2652 = add nsw i32 %2649, %2651, !dbg !96
  store i32 %2652, i32 addrspace(5)* %offset_4455856, align 4, !dbg !96
  %2653 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 9, !dbg !96
  %2654 = load [0 x float]*, [0 x float]* addrspace(5)* %2653, align 8, !dbg !96
  %2655 = load i32, i32 addrspace(5)* %2646, align 8, !dbg !96
  %2656 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !96
  %2657 = getelementptr inbounds [0 x i32], [0 x i32]* %2656, i64 0, i64 1, !dbg !96
  %2658 = load i32, i32* %2657, align 4, !dbg !96
  %2659 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 2, !dbg !96
  %2660 = addrspacecast float addrspace(5)* %2659 to float*, !dbg !96
  %2661 = load float, float* %2660, align 4, !dbg !96
  %2662 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 3, !dbg !96
  %2663 = addrspacecast float addrspace(5)* %2662 to float*, !dbg !96
  %2664 = load float, float* %2663, align 4, !dbg !96
  %2665 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !96
  %2666 = getelementptr inbounds [0 x i32], [0 x i32]* %2665, i64 0, i64 0, !dbg !96
  %2667 = load i32, i32* %2666, align 4, !dbg !96
  %2668 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 0, !dbg !96
  %2669 = addrspacecast float addrspace(5)* %2668 to float*, !dbg !96
  %2670 = load float, float* %2669, align 4, !dbg !96
  %2671 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 1, !dbg !96
  %2672 = addrspacecast float addrspace(5)* %2671 to float*, !dbg !96
  %2673 = load float, float* %2672, align 4, !dbg !96
  %2674 = add nsw i32 %2652, %2655, !dbg !96
  %2675 = add nsw i32 %2674, -1, !dbg !96
  %2676 = sext i32 %2675 to i64, !dbg !96
  %2677 = getelementptr inbounds [0 x float], [0 x float]* %2654, i64 0, i64 %2676, !dbg !96
  %2678 = load float, float* %2677, align 4, !dbg !96
  %2679 = fmul float %2678, %2670, !dbg !96
  %2680 = mul nsw i32 %2667, %slice_size, !dbg !96
  %i1661 = add nsw i32 %2675, %2680, !dbg !96
  %2681 = sext i32 %i1661 to i64, !dbg !96
  %2682 = getelementptr inbounds [0 x float], [0 x float]* %2654, i64 0, i64 %2681, !dbg !96
  %2683 = load float, float* %2682, align 4, !dbg !96
  %2684 = fmul float %2683, %2673, !dbg !96
  %2685 = fadd float %2679, %2684, !dbg !96
  %2686 = fmul float %2685, %2661, !dbg !96
  %2687 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !96
  %2688 = getelementptr inbounds [0 x i32], [0 x i32]* %2687, i64 0, i64 0, !dbg !96
  %2689 = load i32, i32* %2688, align 4, !dbg !96
  %2690 = load float, float* %2669, align 4, !dbg !96
  %2691 = load float, float* %2672, align 4, !dbg !96
  %2692 = mul nsw i32 %2658, %slice_size, !dbg !96
  %i1662 = add nsw i32 %2675, %2692, !dbg !96
  %2693 = sext i32 %i1662 to i64, !dbg !96
  %2694 = getelementptr inbounds [0 x float], [0 x float]* %2654, i64 0, i64 %2693, !dbg !96
  %2695 = load float, float* %2694, align 4, !dbg !96
  %2696 = fmul float %2695, %2690, !dbg !96
  %2697 = mul nsw i32 %2689, %slice_size, !dbg !96
  %i1663 = add nsw i32 %i1662, %2697, !dbg !96
  %2698 = sext i32 %i1663 to i64, !dbg !96
  %2699 = getelementptr inbounds [0 x float], [0 x float]* %2654, i64 0, i64 %2698, !dbg !96
  %2700 = load float, float* %2699, align 4, !dbg !96
  %2701 = fmul float %2700, %2691, !dbg !96
  %2702 = fadd float %2696, %2701, !dbg !96
  %2703 = fmul float %2702, %2664, !dbg !96
  %2704 = fadd float %2686, %2703, !dbg !96
  %2705 = load [0 x float]*, [0 x float]* addrspace(5)* %2653, align 8, !dbg !96
  %2706 = load i32, i32 addrspace(5)* %2646, align 8, !dbg !96
  %2707 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !96
  %2708 = getelementptr inbounds [0 x i32], [0 x i32]* %2707, i64 0, i64 1, !dbg !96
  %2709 = load i32, i32* %2708, align 4, !dbg !96
  %2710 = load float, float* %2660, align 4, !dbg !96
  %2711 = load float, float* %2663, align 4, !dbg !96
  %2712 = getelementptr inbounds [0 x i32], [0 x i32]* %2707, i64 0, i64 0, !dbg !96
  %2713 = load i32, i32* %2712, align 4, !dbg !96
  %2714 = load float, float* %2669, align 4, !dbg !96
  %2715 = load float, float* %2672, align 4, !dbg !96
  %2716 = shl nsw i32 %2706, 1, !dbg !96
  %2717 = add nsw i32 %2716, -1, !dbg !96
  %2718 = add nsw i32 %2652, %2717, !dbg !96
  %2719 = sext i32 %2718 to i64, !dbg !96
  %2720 = getelementptr inbounds [0 x float], [0 x float]* %2705, i64 0, i64 %2719, !dbg !96
  %2721 = load float, float* %2720, align 4, !dbg !96
  %2722 = fmul float %2721, %2714, !dbg !96
  %2723 = mul nsw i32 %2713, %slice_size, !dbg !96
  %i1664 = add nsw i32 %2718, %2723, !dbg !96
  %2724 = sext i32 %i1664 to i64, !dbg !96
  %2725 = getelementptr inbounds [0 x float], [0 x float]* %2705, i64 0, i64 %2724, !dbg !96
  %2726 = load float, float* %2725, align 4, !dbg !96
  %2727 = fmul float %2726, %2715, !dbg !96
  %2728 = fadd float %2722, %2727, !dbg !96
  %2729 = fmul float %2728, %2710, !dbg !96
  %2730 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !96
  %2731 = getelementptr inbounds [0 x i32], [0 x i32]* %2730, i64 0, i64 0, !dbg !96
  %2732 = load i32, i32* %2731, align 4, !dbg !96
  %2733 = load float, float* %2669, align 4, !dbg !96
  %2734 = load float, float* %2672, align 4, !dbg !96
  %2735 = mul nsw i32 %2709, %slice_size, !dbg !96
  %i1665 = add nsw i32 %2718, %2735, !dbg !96
  %2736 = sext i32 %i1665 to i64, !dbg !96
  %2737 = getelementptr inbounds [0 x float], [0 x float]* %2705, i64 0, i64 %2736, !dbg !96
  %2738 = load float, float* %2737, align 4, !dbg !96
  %2739 = fmul float %2738, %2733, !dbg !96
  %2740 = mul nsw i32 %2732, %slice_size, !dbg !96
  %i1666 = add nsw i32 %i1665, %2740, !dbg !96
  %2741 = sext i32 %i1666 to i64, !dbg !96
  %2742 = getelementptr inbounds [0 x float], [0 x float]* %2705, i64 0, i64 %2741, !dbg !96
  %2743 = load float, float* %2742, align 4, !dbg !96
  %2744 = fmul float %2743, %2734, !dbg !96
  %2745 = fadd float %2739, %2744, !dbg !96
  %2746 = fmul float %2745, %2711, !dbg !96
  %2747 = fadd float %2729, %2746, !dbg !96
  %2748 = fsub float %2704, %2747, !dbg !96
  %2749 = fcmp olt float %2748, 0.000000e+00, !dbg !96
  %2750 = fneg float %2748, !dbg !96
  %absf_cont297 = select i1 %2749, float %2750, float %2748, !dbg !96
  %2751 = fadd float %2704, %2747, !dbg !97
  %2752 = fmul float %2751, 0x3F1A36E2E0000000, !dbg !97
  %is_const = fcmp olt float %absf_cont297, %2752, !dbg !97
  %2753 = load float, float addrspace(5)* %2633, align 4, !dbg !98
  br i1 %is_const, label %expr_true301, label %expr_false298, !dbg !97

expr_false298:                                    ; preds = %expr_false288
  %2754 = fmul float %2704, %2704, !dbg !98
  %2755 = fmul float %2753, 2.000000e+00, !dbg !98
  %2756 = fmul float %2755, %2748, !dbg !98
  %2757 = fsub float %2754, %2756, !dbg !98
  %2758 = call float @__ocml_sqrt_f32(float %2757), !dbg !98
  %2759 = fsub float %2704, %2758, !dbg !99
  %2760 = fdiv float %2759, %2748, !dbg !99
  br label %if_join302, !dbg !99

expr_true301:                                     ; preds = %expr_false288
  %2761 = fmul float %2753, 2.000000e+00, !dbg !98
  store float %2761, float addrspace(5)* %2633, align 4, !dbg !98
  %2762 = fdiv float %2761, %2751, !dbg !98
  br label %if_join302, !dbg !98

if_join302:                                       ; preds = %expr_true301, %expr_false298
  %storemerge866 = phi float [ %2760, %expr_false298 ], [ %2762, %expr_true301 ], !dbg !40
  store float %storemerge866, float addrspace(5)* %2633, align 4, !dbg !40
  %2763 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4455858, i32 0, i32 0, !dbg !100
  %2764 = load float, float addrspace(5)* %2763, align 4, !dbg !100
  %2765 = fsub float 1.000000e+00, %storemerge866, !dbg !100
  %2766 = fmul float %2765, %2704, !dbg !100
  %2767 = fmul float %storemerge866, %2747, !dbg !100
  %2768 = fadd float %2766, %2767, !dbg !100
  %2769 = fmul float %2764, %2768, !dbg !100
  store float %2769, float addrspace(5)* %2763, align 4, !dbg !100
  %2770 = load i32, i32 addrspace(5)* %offset_4455856, align 4, !dbg !100
  %2771 = insertvalue %5 undef, float %2769, 0, !dbg !100
  %.elt869 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4455858, i32 0, i32 1, !dbg !100
  %.unpack870 = load float, float addrspace(5)* %.elt869, align 4, !dbg !100
  %2772 = insertvalue %5 %2771, float %.unpack870, 1, !dbg !100
  %2773 = load i32, i32 addrspace(5)* %2646, align 8, !dbg !100
  %size667 = add nsw i32 %2773, -2, !dbg !100
  store i32 %size667, i32 addrspace(5)* %size_4456097, align 4, !dbg !100
  store i32 1, i32 addrspace(5)* %first_4456285, align 4, !dbg !100
  %2774 = icmp sgt i32 %2773, 2, !dbg !101
  br i1 %2774, label %expr_true485, label %expr_false304, !dbg !101

expr_false304:                                    ; preds = %if_join490, %if_join302
  %2775 = load i32, i32 addrspace(5)* %first_4456285, align 4, !dbg !102
  %2776 = add nsw i32 %2775, -1, !dbg !102
  %2777 = icmp slt i32 %size667, %2776, !dbg !102
  %size667. = select i1 %2777, i32 %size667, i32 %2776, !dbg !102
  %.inv1218 = icmp sgt i32 %2775, 0, !dbg !102
  %clamp_cont310 = select i1 %.inv1218, i32 %size667., i32 0, !dbg !102
  %2778 = load float, float addrspace(5)* %2763, align 4, !dbg !103
  %2779 = load i32, i32 addrspace(5)* %offset_4455856, align 4, !dbg !103
  %2780 = insertvalue %5 undef, float %2778, 0, !dbg !103
  %.elt873 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4455858, i32 0, i32 1, !dbg !103
  %.unpack874 = load float, float addrspace(5)* %.elt873, align 4, !dbg !103
  %2781 = insertvalue %5 %2780, float %.unpack874, 1, !dbg !103
  %2782 = call fastcc float @fetch_conditional_warp2D2_4456102(%3 addrspace(5)* %2625, i32 %2779, i32 %clamp_cont310, i32 %slice_size, %5 %2781, [0 x float]* %2637), !dbg !103
  %2783 = fsub float %2778, %2782, !dbg !104
  store float %2783, float addrspace(5)* %2763, align 4, !dbg !104
  %2784 = load i32, i32 addrspace(5)* %offset_4455856, align 4, !dbg !104
  %2785 = add nsw i32 %2784, %clamp_cont310, !dbg !104
  store i32 %2785, i32 addrspace(5)* %offset_4455856, align 4, !dbg !104
  %2786 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 7, !dbg !104
  %2787 = load [0 x float]*, [0 x float]* addrspace(5)* %2786, align 8, !dbg !104
  %2788 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2789 = getelementptr inbounds [0 x i32], [0 x i32]* %2788, i64 0, i64 1, !dbg !104
  %2790 = load i32, i32* %2789, align 4, !dbg !104
  %2791 = load float, float* %2660, align 4, !dbg !104
  %2792 = load float, float* %2663, align 4, !dbg !104
  %2793 = getelementptr inbounds [0 x i32], [0 x i32]* %2788, i64 0, i64 0, !dbg !104
  %2794 = load i32, i32* %2793, align 4, !dbg !104
  %2795 = load float, float* %2669, align 4, !dbg !104
  %2796 = load float, float* %2672, align 4, !dbg !104
  %2797 = sext i32 %2785 to i64, !dbg !104
  %2798 = getelementptr inbounds [0 x float], [0 x float]* %2787, i64 0, i64 %2797, !dbg !104
  %2799 = load float, float* %2798, align 4, !dbg !104
  %2800 = mul nsw i32 %2794, %slice_size, !dbg !104
  %i1668 = add nsw i32 %2785, %2800, !dbg !104
  %2801 = sext i32 %i1668 to i64, !dbg !104
  %2802 = getelementptr inbounds [0 x float], [0 x float]* %2787, i64 0, i64 %2801, !dbg !104
  %2803 = load float, float* %2802, align 4, !dbg !104
  %2804 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2805 = getelementptr inbounds [0 x i32], [0 x i32]* %2804, i64 0, i64 0, !dbg !104
  %2806 = load i32, i32* %2805, align 4, !dbg !104
  %2807 = load float, float* %2669, align 4, !dbg !104
  %2808 = load float, float* %2672, align 4, !dbg !104
  %2809 = mul nsw i32 %2790, %slice_size, !dbg !104
  %i1669 = add nsw i32 %2785, %2809, !dbg !104
  %2810 = sext i32 %i1669 to i64, !dbg !104
  %2811 = getelementptr inbounds [0 x float], [0 x float]* %2787, i64 0, i64 %2810, !dbg !104
  %2812 = load float, float* %2811, align 4, !dbg !104
  %2813 = mul nsw i32 %2806, %slice_size, !dbg !104
  %i1670 = add nsw i32 %i1669, %2813, !dbg !104
  %2814 = sext i32 %i1670 to i64, !dbg !104
  %2815 = getelementptr inbounds [0 x float], [0 x float]* %2787, i64 0, i64 %2814, !dbg !104
  %2816 = load float, float* %2815, align 4, !dbg !104
  %2817 = load [0 x float]*, [0 x float]* addrspace(5)* %2786, align 8, !dbg !104
  %2818 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2819 = getelementptr inbounds [0 x i32], [0 x i32]* %2818, i64 0, i64 1, !dbg !104
  %2820 = load i32, i32* %2819, align 4, !dbg !104
  %2821 = load float, float* %2660, align 4, !dbg !104
  %2822 = load float, float* %2663, align 4, !dbg !104
  %2823 = getelementptr inbounds [0 x i32], [0 x i32]* %2818, i64 0, i64 0, !dbg !104
  %2824 = load i32, i32* %2823, align 4, !dbg !104
  %2825 = load float, float* %2669, align 4, !dbg !104
  %2826 = load float, float* %2672, align 4, !dbg !104
  %2827 = getelementptr inbounds [0 x float], [0 x float]* %2817, i64 0, i64 1, !dbg !104
  %2828 = sext i32 %2785 to i64, !dbg !104
  %2829 = getelementptr inbounds float, float* %2827, i64 %2828, !dbg !104
  %2830 = load float, float* %2829, align 4, !dbg !104
  %2831 = mul nsw i32 %2824, %slice_size, !dbg !104
  %i1671 = add nsw i32 %2785, %2831, !dbg !104
  %2832 = sext i32 %i1671 to i64, !dbg !104
  %2833 = getelementptr inbounds float, float* %2827, i64 %2832, !dbg !104
  %2834 = load float, float* %2833, align 4, !dbg !104
  %2835 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2836 = getelementptr inbounds [0 x i32], [0 x i32]* %2835, i64 0, i64 0, !dbg !104
  %2837 = load i32, i32* %2836, align 4, !dbg !104
  %2838 = load float, float* %2669, align 4, !dbg !104
  %2839 = load float, float* %2672, align 4, !dbg !104
  %2840 = mul nsw i32 %2820, %slice_size, !dbg !104
  %i1672 = add nsw i32 %2785, %2840, !dbg !104
  %2841 = sext i32 %i1672 to i64, !dbg !104
  %2842 = getelementptr inbounds float, float* %2827, i64 %2841, !dbg !104
  %2843 = load float, float* %2842, align 4, !dbg !104
  %2844 = mul nsw i32 %2837, %slice_size, !dbg !104
  %i1673 = add nsw i32 %i1672, %2844, !dbg !104
  %2845 = sext i32 %i1673 to i64, !dbg !104
  %2846 = getelementptr inbounds float, float* %2827, i64 %2845, !dbg !104
  %2847 = load float, float* %2846, align 4, !dbg !104
  %2848 = load [0 x float]*, [0 x float]* addrspace(5)* %2786, align 8, !dbg !104
  %2849 = load i32, i32 addrspace(5)* %2646, align 8, !dbg !104
  %2850 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2851 = getelementptr inbounds [0 x i32], [0 x i32]* %2850, i64 0, i64 1, !dbg !104
  %2852 = load i32, i32* %2851, align 4, !dbg !104
  %2853 = load float, float* %2660, align 4, !dbg !104
  %2854 = load float, float* %2663, align 4, !dbg !104
  %2855 = getelementptr inbounds [0 x i32], [0 x i32]* %2850, i64 0, i64 0, !dbg !104
  %2856 = load i32, i32* %2855, align 4, !dbg !104
  %2857 = load float, float* %2669, align 4, !dbg !104
  %2858 = load float, float* %2672, align 4, !dbg !104
  %2859 = sext i32 %2849 to i64, !dbg !104
  %2860 = getelementptr inbounds [0 x float], [0 x float]* %2848, i64 0, i64 %2859, !dbg !104
  %2861 = sext i32 %2785 to i64, !dbg !104
  %2862 = getelementptr inbounds float, float* %2860, i64 %2861, !dbg !104
  %2863 = load float, float* %2862, align 4, !dbg !104
  %2864 = mul nsw i32 %2856, %slice_size, !dbg !104
  %i1674 = add nsw i32 %2785, %2864, !dbg !104
  %2865 = sext i32 %i1674 to i64, !dbg !104
  %2866 = getelementptr inbounds float, float* %2860, i64 %2865, !dbg !104
  %2867 = load float, float* %2866, align 4, !dbg !104
  %2868 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2869 = getelementptr inbounds [0 x i32], [0 x i32]* %2868, i64 0, i64 0, !dbg !104
  %2870 = load i32, i32* %2869, align 4, !dbg !104
  %2871 = load float, float* %2669, align 4, !dbg !104
  %2872 = load float, float* %2672, align 4, !dbg !104
  %2873 = mul nsw i32 %2852, %slice_size, !dbg !104
  %i1675 = add nsw i32 %2785, %2873, !dbg !104
  %2874 = sext i32 %i1675 to i64, !dbg !104
  %2875 = getelementptr inbounds float, float* %2860, i64 %2874, !dbg !104
  %2876 = load float, float* %2875, align 4, !dbg !104
  %2877 = mul nsw i32 %2870, %slice_size, !dbg !104
  %i1676 = add nsw i32 %i1675, %2877, !dbg !104
  %2878 = sext i32 %i1676 to i64, !dbg !104
  %2879 = getelementptr inbounds float, float* %2860, i64 %2878, !dbg !104
  %2880 = load float, float* %2879, align 4, !dbg !104
  %2881 = load [0 x float]*, [0 x float]* addrspace(5)* %2786, align 8, !dbg !104
  %2882 = load i32, i32 addrspace(5)* %2646, align 8, !dbg !104
  %2883 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2884 = getelementptr inbounds [0 x i32], [0 x i32]* %2883, i64 0, i64 1, !dbg !104
  %2885 = load i32, i32* %2884, align 4, !dbg !104
  %2886 = load float, float* %2660, align 4, !dbg !104
  %2887 = load float, float* %2663, align 4, !dbg !104
  %2888 = getelementptr inbounds [0 x i32], [0 x i32]* %2883, i64 0, i64 0, !dbg !104
  %2889 = load i32, i32* %2888, align 4, !dbg !104
  %2890 = load float, float* %2669, align 4, !dbg !104
  %2891 = load float, float* %2672, align 4, !dbg !104
  %2892 = add nsw i32 %2882, 1, !dbg !104
  %2893 = sext i32 %2892 to i64, !dbg !104
  %2894 = getelementptr inbounds [0 x float], [0 x float]* %2881, i64 0, i64 %2893, !dbg !104
  %2895 = sext i32 %2785 to i64, !dbg !104
  %2896 = getelementptr inbounds float, float* %2894, i64 %2895, !dbg !104
  %2897 = load float, float* %2896, align 4, !dbg !104
  %2898 = mul nsw i32 %2889, %slice_size, !dbg !104
  %i1677 = add nsw i32 %2785, %2898, !dbg !104
  %2899 = sext i32 %i1677 to i64, !dbg !104
  %2900 = getelementptr inbounds float, float* %2894, i64 %2899, !dbg !104
  %2901 = load float, float* %2900, align 4, !dbg !104
  %2902 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !104
  %2903 = getelementptr inbounds [0 x i32], [0 x i32]* %2902, i64 0, i64 0, !dbg !104
  %2904 = load i32, i32* %2903, align 4, !dbg !104
  %2905 = load float, float* %2669, align 4, !dbg !104
  %2906 = load float, float* %2672, align 4, !dbg !104
  %2907 = mul nsw i32 %2885, %slice_size, !dbg !104
  %i1678 = add nsw i32 %2785, %2907, !dbg !104
  %2908 = sext i32 %i1678 to i64, !dbg !104
  %2909 = getelementptr inbounds float, float* %2894, i64 %2908, !dbg !104
  %2910 = load float, float* %2909, align 4, !dbg !104
  %2911 = mul nsw i32 %2904, %slice_size, !dbg !104
  %i1679 = add nsw i32 %i1678, %2911, !dbg !104
  %2912 = sext i32 %i1679 to i64, !dbg !104
  %2913 = getelementptr inbounds float, float* %2894, i64 %2912, !dbg !104
  %2914 = load float, float* %2913, align 4, !dbg !104
  %2915 = load float, float addrspace(5)* %2633, align 4, !dbg !104
  %2916 = fsub float 1.000000e+00, %2915, !dbg !104
  %2917 = fmul float %2799, %2795, !dbg !104
  %2918 = fmul float %2803, %2796, !dbg !104
  %2919 = fadd float %2917, %2918, !dbg !104
  %2920 = fmul float %2919, %2791, !dbg !104
  %2921 = fmul float %2812, %2807, !dbg !104
  %2922 = fmul float %2816, %2808, !dbg !104
  %2923 = fadd float %2921, %2922, !dbg !104
  %2924 = fmul float %2923, %2792, !dbg !104
  %2925 = fadd float %2920, %2924, !dbg !104
  %2926 = fmul float %2916, %2925, !dbg !104
  %2927 = load float, float addrspace(5)* %2633, align 4, !dbg !104
  %2928 = fmul float %2863, %2857, !dbg !104
  %2929 = fmul float %2867, %2858, !dbg !104
  %2930 = fadd float %2928, %2929, !dbg !104
  %2931 = fmul float %2930, %2853, !dbg !104
  %2932 = fmul float %2876, %2871, !dbg !104
  %2933 = fmul float %2880, %2872, !dbg !104
  %2934 = fadd float %2932, %2933, !dbg !104
  %2935 = fmul float %2934, %2854, !dbg !104
  %2936 = fadd float %2931, %2935, !dbg !104
  %2937 = fmul float %2927, %2936, !dbg !104
  %2938 = fadd float %2926, %2937, !dbg !104
  %2939 = load float, float addrspace(5)* %2633, align 4, !dbg !104
  %2940 = fsub float 1.000000e+00, %2939, !dbg !104
  %2941 = fmul float %2830, %2825, !dbg !104
  %2942 = fmul float %2834, %2826, !dbg !104
  %2943 = fadd float %2941, %2942, !dbg !104
  %2944 = fmul float %2943, %2821, !dbg !104
  %2945 = fmul float %2843, %2838, !dbg !104
  %2946 = fmul float %2847, %2839, !dbg !104
  %2947 = fadd float %2945, %2946, !dbg !104
  %2948 = fmul float %2947, %2822, !dbg !104
  %2949 = fadd float %2944, %2948, !dbg !104
  %2950 = fmul float %2940, %2949, !dbg !104
  %2951 = load float, float addrspace(5)* %2633, align 4, !dbg !104
  %2952 = fmul float %2897, %2890, !dbg !104
  %2953 = fmul float %2901, %2891, !dbg !104
  %2954 = fadd float %2952, %2953, !dbg !104
  %2955 = fmul float %2954, %2886, !dbg !104
  %2956 = fmul float %2910, %2905, !dbg !104
  %2957 = fmul float %2914, %2906, !dbg !104
  %2958 = fadd float %2956, %2957, !dbg !104
  %2959 = fmul float %2958, %2887, !dbg !104
  %2960 = fadd float %2955, %2959, !dbg !104
  %2961 = fmul float %2951, %2960, !dbg !104
  %2962 = fadd float %2950, %2961, !dbg !104
  %2963 = fsub float %2938, %2962, !dbg !104
  %2964 = fcmp olt float %2963, 0.000000e+00, !dbg !104
  %2965 = fneg float %2963, !dbg !104
  %absf_cont315 = select i1 %2964, float %2965, float %2963, !dbg !104
  %2966 = fadd float %2938, %2962, !dbg !105
  %2967 = fmul float %2966, 0x3F1A36E2E0000000, !dbg !105
  %2968 = fcmp olt float %absf_cont315, %2967, !dbg !105
  %2969 = load float, float addrspace(5)* %2763, align 4, !dbg !106
  br i1 %2968, label %expr_true319, label %expr_false316, !dbg !105

expr_false316:                                    ; preds = %expr_false304
  %2970 = fmul float %2938, %2938, !dbg !106
  %2971 = fmul float %2969, 2.000000e+00, !dbg !106
  %2972 = fmul float %2971, %2963, !dbg !106
  %2973 = fsub float %2970, %2972, !dbg !106
  %2974 = call float @__ocml_sqrt_f32(float %2973), !dbg !106
  %2975 = fsub float %2938, %2974, !dbg !107
  %2976 = fdiv float %2975, %2963, !dbg !107
  br label %if_join320, !dbg !107

expr_true319:                                     ; preds = %expr_false304
  %2977 = fmul float %2969, 2.000000e+00, !dbg !106
  store float %2977, float addrspace(5)* %2763, align 4, !dbg !106
  %2978 = fdiv float %2977, %2966, !dbg !106
  br label %if_join320, !dbg !106

if_join320:                                       ; preds = %expr_true319, %expr_false316
  %storemerge875 = phi float [ %2976, %expr_false316 ], [ %2978, %expr_true319 ], !dbg !40
  store float %storemerge875, float addrspace(5)* %2763, align 4, !dbg !40
  %.elt878 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4455858, i32 0, i32 1, !dbg !108
  %.unpack879 = load float, float addrspace(5)* %.elt878, align 4, !dbg !108
  %.elt880 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 1, i32 0, !dbg !108
  %.unpack881 = load float, float addrspace(5)* %.elt880, align 8, !dbg !108
  %.elt882 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 1, i32 1, !dbg !108
  %.unpack883 = load float, float addrspace(5)* %.elt882, align 4, !dbg !108
  %2979 = load float, float addrspace(5)* %2763, align 4, !dbg !108
  %2980 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 2, i32 0, !dbg !108
  %2981 = load float, float addrspace(5)* %2980, align 8, !dbg !108
  %2982 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 3, i32 2, i32 1, !dbg !108
  %2983 = load float, float addrspace(5)* %2982, align 4, !dbg !108
  %2984 = sitofp i32 %clamp_cont310 to float, !dbg !108
  %2985 = fadd float %storemerge875, %2984, !dbg !108
  %2986 = fmul float %2985, %.unpack881, !dbg !108
  %2987 = sitofp i32 %clamp_cont293 to float, !dbg !108
  %2988 = fadd float %.unpack879, %2987, !dbg !108
  %2989 = fmul float %2988, %.unpack883, !dbg !108
  %sample_4457824.repack884 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 0, !dbg !108
  store float %2986, float addrspace(5)* %sample_4457824.repack884, align 4, !dbg !108
  %sample_4457824.repack886 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 1, !dbg !108
  store float %2989, float addrspace(5)* %sample_4457824.repack886, align 4, !dbg !108
  %n_sample_4456900.repack = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4456900, i32 0, i32 0, !dbg !108
  store float %2986, float addrspace(5)* %n_sample_4456900.repack, align 4, !dbg !108
  %n_sample_4456900.repack889 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4456900, i32 0, i32 1, !dbg !108
  store float %2989, float addrspace(5)* %n_sample_4456900.repack889, align 4, !dbg !108
  %param_weight_4456734.repack = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 0, !dbg !108
  store float 0.000000e+00, float addrspace(5)* %param_weight_4456734.repack, align 4, !dbg !108
  %param_weight_4456734.repack891 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 1, !dbg !108
  store float 0.000000e+00, float addrspace(5)* %param_weight_4456734.repack891, align 4, !dbg !108
  %param_weight_4456734.repack892 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 2, !dbg !108
  store float 0.000000e+00, float addrspace(5)* %param_weight_4456734.repack892, align 4, !dbg !108
  %param_weight_4456734.repack893 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 3, !dbg !108
  store float 0.000000e+00, float addrspace(5)* %param_weight_4456734.repack893, align 4, !dbg !108
  store i32 0, i32 addrspace(5)* %slice_offset_4456845, align 4, !dbg !108
  store i32 0, i32 addrspace(5)* %dim_4456710, align 4, !dbg !108
  %2990 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, !dbg !108
  %2991 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 4, !dbg !108
  %2992 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 3, !dbg !108
  %2993 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 5, !dbg !108
  %2994 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 6, !dbg !108
  br label %expr_true470, !dbg !91

expr_false322:                                    ; preds = %continue484
  %2995 = load i32, i32 addrspace(5)* %slice_offset_4456845, align 4, !dbg !92
  %2996 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 0, i32 1, !dbg !92
  %2997 = load i32, i32 addrspace(5)* %2996, align 4, !dbg !92
  %offset680 = mul nsw i32 %2995, %2997, !dbg !92
  store i32 %offset680, i32 addrspace(5)* %offset_4456898, align 4, !dbg !92
  %2998 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4456900, i32 0, i32 1, !dbg !92
  %2999 = load float, float addrspace(5)* %2998, align 4, !dbg !92
  %3000 = load i32, i32 addrspace(5)* %2996, align 4, !dbg !92
  %size681 = add nsw i32 %3000, -2, !dbg !92
  store i32 %size681, i32 addrspace(5)* %size_4456870, align 4, !dbg !92
  store i32 1, i32 addrspace(5)* %first_4456878, align 4, !dbg !92
  %3001 = bitcast [4 x float] addrspace(5)* %param_weight_4456734 to [0 x float] addrspace(5)*, !dbg !92
  %3002 = addrspacecast [0 x float] addrspace(5)* %3001 to [0 x float]*, !dbg !92
  %3003 = icmp sgt i32 %3000, 2, !dbg !93
  br i1 %3003, label %expr_true464, label %expr_false324, !dbg !93

expr_false324:                                    ; preds = %if_join469, %expr_false322
  %3004 = load i32, i32 addrspace(5)* %first_4456878, align 4, !dbg !94
  %3005 = add nsw i32 %3004, -1, !dbg !94
  %3006 = icmp slt i32 %size681, %3005, !dbg !94
  %size681. = select i1 %3006, i32 %size681, i32 %3005, !dbg !94
  %.inv1219 = icmp sgt i32 %3004, 0, !dbg !94
  %clamp_cont330 = select i1 %.inv1219, i32 %size681., i32 0, !dbg !94
  %3007 = load i32, i32 addrspace(5)* %offset_4456898, align 4, !dbg !95
  %3008 = call fastcc float @fetch_marginal_warp2D2_4455738(%3 addrspace(5)* %2990, i32 %3007, i32 %clamp_cont330, [0 x float]* %3002), !dbg !95
  %3009 = load float, float addrspace(5)* %2998, align 4, !dbg !96
  %3010 = fsub float %3009, %3008, !dbg !96
  store float %3010, float addrspace(5)* %2998, align 4, !dbg !96
  %3011 = getelementptr inbounds %3, %3 addrspace(5)* %2990, i32 0, i32 0, i32 0, !dbg !96
  %3012 = load i32, i32 addrspace(5)* %3011, align 8, !dbg !96
  %3013 = load i32, i32 addrspace(5)* %2996, align 4, !dbg !96
  %3014 = mul nsw i32 %clamp_cont330, %3012, !dbg !96
  store i32 %3014, i32 addrspace(5)* %offset_4456898, align 4, !dbg !96
  %3015 = load i32, i32 addrspace(5)* %slice_offset_4456845, align 4, !dbg !96
  %slice_size682 = mul nsw i32 %3012, %3013, !dbg !96
  %3016 = mul nsw i32 %3015, %slice_size682, !dbg !96
  %3017 = add nsw i32 %3014, %3016, !dbg !96
  store i32 %3017, i32 addrspace(5)* %offset_4456898, align 4, !dbg !96
  %3018 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 9, !dbg !96
  %3019 = load [0 x float]*, [0 x float]* addrspace(5)* %3018, align 8, !dbg !96
  %3020 = load i32, i32 addrspace(5)* %3011, align 8, !dbg !96
  %3021 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !96
  %3022 = getelementptr inbounds [0 x i32], [0 x i32]* %3021, i64 0, i64 1, !dbg !96
  %3023 = load i32, i32* %3022, align 4, !dbg !96
  %3024 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 2, !dbg !96
  %3025 = addrspacecast float addrspace(5)* %3024 to float*, !dbg !96
  %3026 = load float, float* %3025, align 4, !dbg !96
  %3027 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 3, !dbg !96
  %3028 = addrspacecast float addrspace(5)* %3027 to float*, !dbg !96
  %3029 = load float, float* %3028, align 4, !dbg !96
  %3030 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !96
  %3031 = getelementptr inbounds [0 x i32], [0 x i32]* %3030, i64 0, i64 0, !dbg !96
  %3032 = load i32, i32* %3031, align 4, !dbg !96
  %3033 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 0, !dbg !96
  %3034 = addrspacecast float addrspace(5)* %3033 to float*, !dbg !96
  %3035 = load float, float* %3034, align 4, !dbg !96
  %3036 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 1, !dbg !96
  %3037 = addrspacecast float addrspace(5)* %3036 to float*, !dbg !96
  %3038 = load float, float* %3037, align 4, !dbg !96
  %3039 = add nsw i32 %3017, %3020, !dbg !96
  %3040 = add nsw i32 %3039, -1, !dbg !96
  %3041 = sext i32 %3040 to i64, !dbg !96
  %3042 = getelementptr inbounds [0 x float], [0 x float]* %3019, i64 0, i64 %3041, !dbg !96
  %3043 = load float, float* %3042, align 4, !dbg !96
  %3044 = fmul float %3043, %3035, !dbg !96
  %3045 = mul nsw i32 %3032, %slice_size682, !dbg !96
  %i1683 = add nsw i32 %3040, %3045, !dbg !96
  %3046 = sext i32 %i1683 to i64, !dbg !96
  %3047 = getelementptr inbounds [0 x float], [0 x float]* %3019, i64 0, i64 %3046, !dbg !96
  %3048 = load float, float* %3047, align 4, !dbg !96
  %3049 = fmul float %3048, %3038, !dbg !96
  %3050 = fadd float %3044, %3049, !dbg !96
  %3051 = fmul float %3050, %3026, !dbg !96
  %3052 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !96
  %3053 = getelementptr inbounds [0 x i32], [0 x i32]* %3052, i64 0, i64 0, !dbg !96
  %3054 = load i32, i32* %3053, align 4, !dbg !96
  %3055 = load float, float* %3034, align 4, !dbg !96
  %3056 = load float, float* %3037, align 4, !dbg !96
  %3057 = mul nsw i32 %3023, %slice_size682, !dbg !96
  %i1684 = add nsw i32 %3040, %3057, !dbg !96
  %3058 = sext i32 %i1684 to i64, !dbg !96
  %3059 = getelementptr inbounds [0 x float], [0 x float]* %3019, i64 0, i64 %3058, !dbg !96
  %3060 = load float, float* %3059, align 4, !dbg !96
  %3061 = fmul float %3060, %3055, !dbg !96
  %3062 = mul nsw i32 %3054, %slice_size682, !dbg !96
  %i1685 = add nsw i32 %i1684, %3062, !dbg !96
  %3063 = sext i32 %i1685 to i64, !dbg !96
  %3064 = getelementptr inbounds [0 x float], [0 x float]* %3019, i64 0, i64 %3063, !dbg !96
  %3065 = load float, float* %3064, align 4, !dbg !96
  %3066 = fmul float %3065, %3056, !dbg !96
  %3067 = fadd float %3061, %3066, !dbg !96
  %3068 = fmul float %3067, %3029, !dbg !96
  %3069 = fadd float %3051, %3068, !dbg !96
  %3070 = load [0 x float]*, [0 x float]* addrspace(5)* %3018, align 8, !dbg !96
  %3071 = load i32, i32 addrspace(5)* %3011, align 8, !dbg !96
  %3072 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !96
  %3073 = getelementptr inbounds [0 x i32], [0 x i32]* %3072, i64 0, i64 1, !dbg !96
  %3074 = load i32, i32* %3073, align 4, !dbg !96
  %3075 = load float, float* %3025, align 4, !dbg !96
  %3076 = load float, float* %3028, align 4, !dbg !96
  %3077 = getelementptr inbounds [0 x i32], [0 x i32]* %3072, i64 0, i64 0, !dbg !96
  %3078 = load i32, i32* %3077, align 4, !dbg !96
  %3079 = load float, float* %3034, align 4, !dbg !96
  %3080 = load float, float* %3037, align 4, !dbg !96
  %3081 = shl nsw i32 %3071, 1, !dbg !96
  %3082 = add nsw i32 %3081, -1, !dbg !96
  %3083 = add nsw i32 %3017, %3082, !dbg !96
  %3084 = sext i32 %3083 to i64, !dbg !96
  %3085 = getelementptr inbounds [0 x float], [0 x float]* %3070, i64 0, i64 %3084, !dbg !96
  %3086 = load float, float* %3085, align 4, !dbg !96
  %3087 = fmul float %3086, %3079, !dbg !96
  %3088 = mul nsw i32 %3078, %slice_size682, !dbg !96
  %i1686 = add nsw i32 %3083, %3088, !dbg !96
  %3089 = sext i32 %i1686 to i64, !dbg !96
  %3090 = getelementptr inbounds [0 x float], [0 x float]* %3070, i64 0, i64 %3089, !dbg !96
  %3091 = load float, float* %3090, align 4, !dbg !96
  %3092 = fmul float %3091, %3080, !dbg !96
  %3093 = fadd float %3087, %3092, !dbg !96
  %3094 = fmul float %3093, %3075, !dbg !96
  %3095 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !96
  %3096 = getelementptr inbounds [0 x i32], [0 x i32]* %3095, i64 0, i64 0, !dbg !96
  %3097 = load i32, i32* %3096, align 4, !dbg !96
  %3098 = load float, float* %3034, align 4, !dbg !96
  %3099 = load float, float* %3037, align 4, !dbg !96
  %3100 = mul nsw i32 %3074, %slice_size682, !dbg !96
  %i1687 = add nsw i32 %3083, %3100, !dbg !96
  %3101 = sext i32 %i1687 to i64, !dbg !96
  %3102 = getelementptr inbounds [0 x float], [0 x float]* %3070, i64 0, i64 %3101, !dbg !96
  %3103 = load float, float* %3102, align 4, !dbg !96
  %3104 = fmul float %3103, %3098, !dbg !96
  %3105 = mul nsw i32 %3097, %slice_size682, !dbg !96
  %i1688 = add nsw i32 %i1687, %3105, !dbg !96
  %3106 = sext i32 %i1688 to i64, !dbg !96
  %3107 = getelementptr inbounds [0 x float], [0 x float]* %3070, i64 0, i64 %3106, !dbg !96
  %3108 = load float, float* %3107, align 4, !dbg !96
  %3109 = fmul float %3108, %3099, !dbg !96
  %3110 = fadd float %3104, %3109, !dbg !96
  %3111 = fmul float %3110, %3076, !dbg !96
  %3112 = fadd float %3094, %3111, !dbg !96
  %3113 = fsub float %3069, %3112, !dbg !96
  %3114 = fcmp olt float %3113, 0.000000e+00, !dbg !96
  %3115 = fneg float %3113, !dbg !96
  %absf_cont336 = select i1 %3114, float %3115, float %3113, !dbg !96
  %3116 = fadd float %3069, %3112, !dbg !97
  %3117 = fmul float %3116, 0x3F1A36E2E0000000, !dbg !97
  %is_const689 = fcmp olt float %absf_cont336, %3117, !dbg !97
  %3118 = load float, float addrspace(5)* %2998, align 4, !dbg !98
  br i1 %is_const689, label %expr_true340, label %expr_false337, !dbg !97

expr_false337:                                    ; preds = %expr_false324
  %3119 = fmul float %3069, %3069, !dbg !98
  %3120 = fmul float %3118, 2.000000e+00, !dbg !98
  %3121 = fmul float %3120, %3113, !dbg !98
  %3122 = fsub float %3119, %3121, !dbg !98
  %3123 = call float @__ocml_sqrt_f32(float %3122), !dbg !98
  %3124 = fsub float %3069, %3123, !dbg !99
  %3125 = fdiv float %3124, %3113, !dbg !99
  br label %if_join341, !dbg !99

expr_true340:                                     ; preds = %expr_false324
  %3126 = fmul float %3118, 2.000000e+00, !dbg !98
  store float %3126, float addrspace(5)* %2998, align 4, !dbg !98
  %3127 = fdiv float %3126, %3116, !dbg !98
  br label %if_join341, !dbg !98

if_join341:                                       ; preds = %expr_true340, %expr_false337
  %storemerge894 = phi float [ %3125, %expr_false337 ], [ %3127, %expr_true340 ], !dbg !40
  store float %storemerge894, float addrspace(5)* %2998, align 4, !dbg !40
  %3128 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4456900, i32 0, i32 0, !dbg !100
  %3129 = load float, float addrspace(5)* %3128, align 4, !dbg !100
  %3130 = fsub float 1.000000e+00, %storemerge894, !dbg !100
  %3131 = fmul float %3130, %3069, !dbg !100
  %3132 = fmul float %storemerge894, %3112, !dbg !100
  %3133 = fadd float %3131, %3132, !dbg !100
  %3134 = fmul float %3129, %3133, !dbg !100
  store float %3134, float addrspace(5)* %3128, align 4, !dbg !100
  %3135 = load i32, i32 addrspace(5)* %offset_4456898, align 4, !dbg !100
  %3136 = insertvalue %5 undef, float %3134, 0, !dbg !100
  %.elt897 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4456900, i32 0, i32 1, !dbg !100
  %.unpack898 = load float, float addrspace(5)* %.elt897, align 4, !dbg !100
  %3137 = insertvalue %5 %3136, float %.unpack898, 1, !dbg !100
  %3138 = load i32, i32 addrspace(5)* %3011, align 8, !dbg !100
  %size690 = add nsw i32 %3138, -2, !dbg !100
  store i32 %size690, i32 addrspace(5)* %size_4457138, align 4, !dbg !100
  store i32 1, i32 addrspace(5)* %first_4457146, align 4, !dbg !100
  %3139 = icmp sgt i32 %3138, 2, !dbg !101
  br i1 %3139, label %expr_true458, label %expr_false343, !dbg !101

expr_false343:                                    ; preds = %if_join463, %if_join341
  %3140 = load i32, i32 addrspace(5)* %first_4457146, align 4, !dbg !102
  %3141 = add nsw i32 %3140, -1, !dbg !102
  %3142 = icmp slt i32 %size690, %3141, !dbg !102
  %size690. = select i1 %3142, i32 %size690, i32 %3141, !dbg !102
  %.inv1220 = icmp sgt i32 %3140, 0, !dbg !102
  %clamp_cont349 = select i1 %.inv1220, i32 %size690., i32 0, !dbg !102
  %3143 = load float, float addrspace(5)* %3128, align 4, !dbg !103
  %3144 = load i32, i32 addrspace(5)* %offset_4456898, align 4, !dbg !103
  %3145 = insertvalue %5 undef, float %3143, 0, !dbg !103
  %.elt901 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4456900, i32 0, i32 1, !dbg !103
  %.unpack902 = load float, float addrspace(5)* %.elt901, align 4, !dbg !103
  %3146 = insertvalue %5 %3145, float %.unpack902, 1, !dbg !103
  %3147 = call fastcc float @fetch_conditional_warp2D2_4456102(%3 addrspace(5)* %2990, i32 %3144, i32 %clamp_cont349, i32 %slice_size682, %5 %3146, [0 x float]* %3002), !dbg !103
  %3148 = fsub float %3143, %3147, !dbg !104
  store float %3148, float addrspace(5)* %3128, align 4, !dbg !104
  %3149 = load i32, i32 addrspace(5)* %offset_4456898, align 4, !dbg !104
  %3150 = add nsw i32 %3149, %clamp_cont349, !dbg !104
  store i32 %3150, i32 addrspace(5)* %offset_4456898, align 4, !dbg !104
  %3151 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 7, !dbg !104
  %3152 = load [0 x float]*, [0 x float]* addrspace(5)* %3151, align 8, !dbg !104
  %3153 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3154 = getelementptr inbounds [0 x i32], [0 x i32]* %3153, i64 0, i64 1, !dbg !104
  %3155 = load i32, i32* %3154, align 4, !dbg !104
  %3156 = load float, float* %3025, align 4, !dbg !104
  %3157 = load float, float* %3028, align 4, !dbg !104
  %3158 = getelementptr inbounds [0 x i32], [0 x i32]* %3153, i64 0, i64 0, !dbg !104
  %3159 = load i32, i32* %3158, align 4, !dbg !104
  %3160 = load float, float* %3034, align 4, !dbg !104
  %3161 = load float, float* %3037, align 4, !dbg !104
  %3162 = sext i32 %3150 to i64, !dbg !104
  %3163 = getelementptr inbounds [0 x float], [0 x float]* %3152, i64 0, i64 %3162, !dbg !104
  %3164 = load float, float* %3163, align 4, !dbg !104
  %3165 = mul nsw i32 %3159, %slice_size682, !dbg !104
  %i1691 = add nsw i32 %3150, %3165, !dbg !104
  %3166 = sext i32 %i1691 to i64, !dbg !104
  %3167 = getelementptr inbounds [0 x float], [0 x float]* %3152, i64 0, i64 %3166, !dbg !104
  %3168 = load float, float* %3167, align 4, !dbg !104
  %3169 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3170 = getelementptr inbounds [0 x i32], [0 x i32]* %3169, i64 0, i64 0, !dbg !104
  %3171 = load i32, i32* %3170, align 4, !dbg !104
  %3172 = load float, float* %3034, align 4, !dbg !104
  %3173 = load float, float* %3037, align 4, !dbg !104
  %3174 = mul nsw i32 %3155, %slice_size682, !dbg !104
  %i1692 = add nsw i32 %3150, %3174, !dbg !104
  %3175 = sext i32 %i1692 to i64, !dbg !104
  %3176 = getelementptr inbounds [0 x float], [0 x float]* %3152, i64 0, i64 %3175, !dbg !104
  %3177 = load float, float* %3176, align 4, !dbg !104
  %3178 = mul nsw i32 %3171, %slice_size682, !dbg !104
  %i1693 = add nsw i32 %i1692, %3178, !dbg !104
  %3179 = sext i32 %i1693 to i64, !dbg !104
  %3180 = getelementptr inbounds [0 x float], [0 x float]* %3152, i64 0, i64 %3179, !dbg !104
  %3181 = load float, float* %3180, align 4, !dbg !104
  %3182 = load [0 x float]*, [0 x float]* addrspace(5)* %3151, align 8, !dbg !104
  %3183 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3184 = getelementptr inbounds [0 x i32], [0 x i32]* %3183, i64 0, i64 1, !dbg !104
  %3185 = load i32, i32* %3184, align 4, !dbg !104
  %3186 = load float, float* %3025, align 4, !dbg !104
  %3187 = load float, float* %3028, align 4, !dbg !104
  %3188 = getelementptr inbounds [0 x i32], [0 x i32]* %3183, i64 0, i64 0, !dbg !104
  %3189 = load i32, i32* %3188, align 4, !dbg !104
  %3190 = load float, float* %3034, align 4, !dbg !104
  %3191 = load float, float* %3037, align 4, !dbg !104
  %3192 = getelementptr inbounds [0 x float], [0 x float]* %3182, i64 0, i64 1, !dbg !104
  %3193 = sext i32 %3150 to i64, !dbg !104
  %3194 = getelementptr inbounds float, float* %3192, i64 %3193, !dbg !104
  %3195 = load float, float* %3194, align 4, !dbg !104
  %3196 = mul nsw i32 %3189, %slice_size682, !dbg !104
  %i1694 = add nsw i32 %3150, %3196, !dbg !104
  %3197 = sext i32 %i1694 to i64, !dbg !104
  %3198 = getelementptr inbounds float, float* %3192, i64 %3197, !dbg !104
  %3199 = load float, float* %3198, align 4, !dbg !104
  %3200 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3201 = getelementptr inbounds [0 x i32], [0 x i32]* %3200, i64 0, i64 0, !dbg !104
  %3202 = load i32, i32* %3201, align 4, !dbg !104
  %3203 = load float, float* %3034, align 4, !dbg !104
  %3204 = load float, float* %3037, align 4, !dbg !104
  %3205 = mul nsw i32 %3185, %slice_size682, !dbg !104
  %i1695 = add nsw i32 %3150, %3205, !dbg !104
  %3206 = sext i32 %i1695 to i64, !dbg !104
  %3207 = getelementptr inbounds float, float* %3192, i64 %3206, !dbg !104
  %3208 = load float, float* %3207, align 4, !dbg !104
  %3209 = mul nsw i32 %3202, %slice_size682, !dbg !104
  %i1696 = add nsw i32 %i1695, %3209, !dbg !104
  %3210 = sext i32 %i1696 to i64, !dbg !104
  %3211 = getelementptr inbounds float, float* %3192, i64 %3210, !dbg !104
  %3212 = load float, float* %3211, align 4, !dbg !104
  %3213 = load [0 x float]*, [0 x float]* addrspace(5)* %3151, align 8, !dbg !104
  %3214 = load i32, i32 addrspace(5)* %3011, align 8, !dbg !104
  %3215 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3216 = getelementptr inbounds [0 x i32], [0 x i32]* %3215, i64 0, i64 1, !dbg !104
  %3217 = load i32, i32* %3216, align 4, !dbg !104
  %3218 = load float, float* %3025, align 4, !dbg !104
  %3219 = load float, float* %3028, align 4, !dbg !104
  %3220 = getelementptr inbounds [0 x i32], [0 x i32]* %3215, i64 0, i64 0, !dbg !104
  %3221 = load i32, i32* %3220, align 4, !dbg !104
  %3222 = load float, float* %3034, align 4, !dbg !104
  %3223 = load float, float* %3037, align 4, !dbg !104
  %3224 = sext i32 %3214 to i64, !dbg !104
  %3225 = getelementptr inbounds [0 x float], [0 x float]* %3213, i64 0, i64 %3224, !dbg !104
  %3226 = sext i32 %3150 to i64, !dbg !104
  %3227 = getelementptr inbounds float, float* %3225, i64 %3226, !dbg !104
  %3228 = load float, float* %3227, align 4, !dbg !104
  %3229 = mul nsw i32 %3221, %slice_size682, !dbg !104
  %i1697 = add nsw i32 %3150, %3229, !dbg !104
  %3230 = sext i32 %i1697 to i64, !dbg !104
  %3231 = getelementptr inbounds float, float* %3225, i64 %3230, !dbg !104
  %3232 = load float, float* %3231, align 4, !dbg !104
  %3233 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3234 = getelementptr inbounds [0 x i32], [0 x i32]* %3233, i64 0, i64 0, !dbg !104
  %3235 = load i32, i32* %3234, align 4, !dbg !104
  %3236 = load float, float* %3034, align 4, !dbg !104
  %3237 = load float, float* %3037, align 4, !dbg !104
  %3238 = mul nsw i32 %3217, %slice_size682, !dbg !104
  %i1698 = add nsw i32 %3150, %3238, !dbg !104
  %3239 = sext i32 %i1698 to i64, !dbg !104
  %3240 = getelementptr inbounds float, float* %3225, i64 %3239, !dbg !104
  %3241 = load float, float* %3240, align 4, !dbg !104
  %3242 = mul nsw i32 %3235, %slice_size682, !dbg !104
  %i1699 = add nsw i32 %i1698, %3242, !dbg !104
  %3243 = sext i32 %i1699 to i64, !dbg !104
  %3244 = getelementptr inbounds float, float* %3225, i64 %3243, !dbg !104
  %3245 = load float, float* %3244, align 4, !dbg !104
  %3246 = load [0 x float]*, [0 x float]* addrspace(5)* %3151, align 8, !dbg !104
  %3247 = load i32, i32 addrspace(5)* %3011, align 8, !dbg !104
  %3248 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3249 = getelementptr inbounds [0 x i32], [0 x i32]* %3248, i64 0, i64 1, !dbg !104
  %3250 = load i32, i32* %3249, align 4, !dbg !104
  %3251 = load float, float* %3025, align 4, !dbg !104
  %3252 = load float, float* %3028, align 4, !dbg !104
  %3253 = getelementptr inbounds [0 x i32], [0 x i32]* %3248, i64 0, i64 0, !dbg !104
  %3254 = load i32, i32* %3253, align 4, !dbg !104
  %3255 = load float, float* %3034, align 4, !dbg !104
  %3256 = load float, float* %3037, align 4, !dbg !104
  %3257 = add nsw i32 %3247, 1, !dbg !104
  %3258 = sext i32 %3257 to i64, !dbg !104
  %3259 = getelementptr inbounds [0 x float], [0 x float]* %3246, i64 0, i64 %3258, !dbg !104
  %3260 = sext i32 %3150 to i64, !dbg !104
  %3261 = getelementptr inbounds float, float* %3259, i64 %3260, !dbg !104
  %3262 = load float, float* %3261, align 4, !dbg !104
  %3263 = mul nsw i32 %3254, %slice_size682, !dbg !104
  %i1700 = add nsw i32 %3150, %3263, !dbg !104
  %3264 = sext i32 %i1700 to i64, !dbg !104
  %3265 = getelementptr inbounds float, float* %3259, i64 %3264, !dbg !104
  %3266 = load float, float* %3265, align 4, !dbg !104
  %3267 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !104
  %3268 = getelementptr inbounds [0 x i32], [0 x i32]* %3267, i64 0, i64 0, !dbg !104
  %3269 = load i32, i32* %3268, align 4, !dbg !104
  %3270 = load float, float* %3034, align 4, !dbg !104
  %3271 = load float, float* %3037, align 4, !dbg !104
  %3272 = mul nsw i32 %3250, %slice_size682, !dbg !104
  %i1701 = add nsw i32 %3150, %3272, !dbg !104
  %3273 = sext i32 %i1701 to i64, !dbg !104
  %3274 = getelementptr inbounds float, float* %3259, i64 %3273, !dbg !104
  %3275 = load float, float* %3274, align 4, !dbg !104
  %3276 = mul nsw i32 %3269, %slice_size682, !dbg !104
  %i1702 = add nsw i32 %i1701, %3276, !dbg !104
  %3277 = sext i32 %i1702 to i64, !dbg !104
  %3278 = getelementptr inbounds float, float* %3259, i64 %3277, !dbg !104
  %3279 = load float, float* %3278, align 4, !dbg !104
  %3280 = load float, float addrspace(5)* %2998, align 4, !dbg !104
  %3281 = fsub float 1.000000e+00, %3280, !dbg !104
  %3282 = fmul float %3164, %3160, !dbg !104
  %3283 = fmul float %3168, %3161, !dbg !104
  %3284 = fadd float %3282, %3283, !dbg !104
  %3285 = fmul float %3284, %3156, !dbg !104
  %3286 = fmul float %3177, %3172, !dbg !104
  %3287 = fmul float %3181, %3173, !dbg !104
  %3288 = fadd float %3286, %3287, !dbg !104
  %3289 = fmul float %3288, %3157, !dbg !104
  %3290 = fadd float %3285, %3289, !dbg !104
  %3291 = fmul float %3281, %3290, !dbg !104
  %3292 = load float, float addrspace(5)* %2998, align 4, !dbg !104
  %3293 = fmul float %3228, %3222, !dbg !104
  %3294 = fmul float %3232, %3223, !dbg !104
  %3295 = fadd float %3293, %3294, !dbg !104
  %3296 = fmul float %3295, %3218, !dbg !104
  %3297 = fmul float %3241, %3236, !dbg !104
  %3298 = fmul float %3245, %3237, !dbg !104
  %3299 = fadd float %3297, %3298, !dbg !104
  %3300 = fmul float %3299, %3219, !dbg !104
  %3301 = fadd float %3296, %3300, !dbg !104
  %3302 = fmul float %3292, %3301, !dbg !104
  %3303 = fadd float %3291, %3302, !dbg !104
  %3304 = load float, float addrspace(5)* %2998, align 4, !dbg !104
  %3305 = fsub float 1.000000e+00, %3304, !dbg !104
  %3306 = fmul float %3195, %3190, !dbg !104
  %3307 = fmul float %3199, %3191, !dbg !104
  %3308 = fadd float %3306, %3307, !dbg !104
  %3309 = fmul float %3308, %3186, !dbg !104
  %3310 = fmul float %3208, %3203, !dbg !104
  %3311 = fmul float %3212, %3204, !dbg !104
  %3312 = fadd float %3310, %3311, !dbg !104
  %3313 = fmul float %3312, %3187, !dbg !104
  %3314 = fadd float %3309, %3313, !dbg !104
  %3315 = fmul float %3305, %3314, !dbg !104
  %3316 = load float, float addrspace(5)* %2998, align 4, !dbg !104
  %3317 = fmul float %3262, %3255, !dbg !104
  %3318 = fmul float %3266, %3256, !dbg !104
  %3319 = fadd float %3317, %3318, !dbg !104
  %3320 = fmul float %3319, %3251, !dbg !104
  %3321 = fmul float %3275, %3270, !dbg !104
  %3322 = fmul float %3279, %3271, !dbg !104
  %3323 = fadd float %3321, %3322, !dbg !104
  %3324 = fmul float %3323, %3252, !dbg !104
  %3325 = fadd float %3320, %3324, !dbg !104
  %3326 = fmul float %3316, %3325, !dbg !104
  %3327 = fadd float %3315, %3326, !dbg !104
  %3328 = fsub float %3303, %3327, !dbg !104
  %3329 = fcmp olt float %3328, 0.000000e+00, !dbg !104
  %3330 = fneg float %3328, !dbg !104
  %absf_cont355 = select i1 %3329, float %3330, float %3328, !dbg !104
  %3331 = fadd float %3303, %3327, !dbg !105
  %3332 = fmul float %3331, 0x3F1A36E2E0000000, !dbg !105
  %3333 = fcmp olt float %absf_cont355, %3332, !dbg !105
  %3334 = load float, float addrspace(5)* %3128, align 4, !dbg !106
  br i1 %3333, label %expr_true359, label %expr_false356, !dbg !105

expr_false356:                                    ; preds = %expr_false343
  %3335 = fmul float %3303, %3303, !dbg !106
  %3336 = fmul float %3334, 2.000000e+00, !dbg !106
  %3337 = fmul float %3336, %3328, !dbg !106
  %3338 = fsub float %3335, %3337, !dbg !106
  %3339 = call float @__ocml_sqrt_f32(float %3338), !dbg !106
  %3340 = fsub float %3303, %3339, !dbg !107
  %3341 = fdiv float %3340, %3328, !dbg !107
  br label %if_join360, !dbg !107

expr_true359:                                     ; preds = %expr_false343
  %3342 = fmul float %3334, 2.000000e+00, !dbg !106
  store float %3342, float addrspace(5)* %3128, align 4, !dbg !106
  %3343 = fdiv float %3342, %3331, !dbg !106
  br label %if_join360, !dbg !106

if_join360:                                       ; preds = %expr_true359, %expr_false356
  %storemerge903 = phi float [ %3341, %expr_false356 ], [ %3343, %expr_true359 ], !dbg !40
  store float %storemerge903, float addrspace(5)* %3128, align 4, !dbg !40
  %.elt906 = getelementptr inbounds %5, %5 addrspace(5)* %n_sample_4456900, i32 0, i32 1, !dbg !108
  %.unpack907 = load float, float addrspace(5)* %.elt906, align 4, !dbg !108
  %.elt908 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 1, i32 0, !dbg !108
  %.unpack909 = load float, float addrspace(5)* %.elt908, align 8, !dbg !108
  %.elt910 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 1, i32 1, !dbg !108
  %.unpack911 = load float, float addrspace(5)* %.elt910, align 4, !dbg !108
  %3344 = load float, float addrspace(5)* %3128, align 4, !dbg !108
  %3345 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 2, i32 0, !dbg !108
  %3346 = load float, float addrspace(5)* %3345, align 8, !dbg !108
  %3347 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 2, i32 2, i32 1, !dbg !108
  %3348 = load float, float addrspace(5)* %3347, align 4, !dbg !108
  %3349 = sitofp i32 %clamp_cont330 to float, !dbg !108
  %3350 = fadd float %.unpack907, %3349, !dbg !108
  %3351 = fmul float %3350, %.unpack911, !dbg !108
  %3352 = fmul float %3351, 2.000000e+00, !dbg !108
  %3353 = fadd float %3352, -1.000000e+00, !dbg !108
  %3354 = fmul float %3353, 0x400921FB60000000, !dbg !108
  store float %3354, float addrspace(5)* %phi_m_4457585, align 4, !dbg !108
  %3355 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 5, !dbg !108
  %3356 = load i1, i1 addrspace(5)* %3355, align 8, !dbg !108
  br i1 %3356, label %expr_true362, label %if_join363, !dbg !108

expr_true362:                                     ; preds = %if_join360
  %3357 = fadd float %3354, %2613, !dbg !109
  store float %3357, float addrspace(5)* %phi_m_4457585, align 4, !dbg !109
  br label %if_join363, !dbg !109

if_join363:                                       ; preds = %if_join360, %expr_true362
  %3358 = load float, float addrspace(5)* %phi_m_4457585, align 4, !dbg !110
  %3359 = call float @__ocml_sin_f32(float %3358), !dbg !110
  %3360 = load float, float addrspace(5)* %phi_m_4457585, align 4, !dbg !111
  %3361 = call float @__ocml_cos_f32(float %3360), !dbg !111
  %3362 = sitofp i32 %clamp_cont349 to float, !dbg !112
  %3363 = fadd float %storemerge903, %3362, !dbg !112
  %3364 = fmul float %3363, %.unpack909, !dbg !112
  %3365 = fmul float %3364, %3364, !dbg !112
  %3366 = fmul float %3365, 0x3FF921FB60000000, !dbg !112
  %3367 = call float @__ocml_sin_f32(float %3366), !dbg !112
  %3368 = call float @__ocml_cos_f32(float %3366), !dbg !113
  %3369 = fmul float %3361, %3367, !dbg !114
  %3370 = fmul float %3369, %2589, !dbg !114
  %3371 = fmul float %3359, %3367, !dbg !114
  %3372 = fmul float %3371, %2604, !dbg !114
  %3373 = fadd float %3370, %3372, !dbg !114
  %3374 = fmul float %3368, %2566, !dbg !114
  %3375 = fadd float %3373, %3374, !dbg !114
  %3376 = fmul float %3375, 2.000000e+00, !dbg !114
  %3377 = fmul float %3368, %3376, !dbg !114
  %3378 = fsub float %3377, %2566, !dbg !114
  %3379 = fcmp ugt float %3378, 0.000000e+00, !dbg !114
  br i1 %3379, label %expr_false372, label %sample_brdf_cont, !dbg !114

expr_false372:                                    ; preds = %if_join363
  %fr_4457822.repack = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 0, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %fr_4457822.repack, align 4, !dbg !115
  %fr_4457822.repack912 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 1, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %fr_4457822.repack912, align 4, !dbg !115
  %fr_4457822.repack913 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 2, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %fr_4457822.repack913, align 4, !dbg !115
  %.elt914 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 0, !dbg !115
  %.unpack915 = load float, float addrspace(5)* %.elt914, align 4, !dbg !115
  %.elt916 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 1, !dbg !115
  %.unpack917 = load float, float addrspace(5)* %.elt916, align 4, !dbg !115
  %param_weight_4457669.repack = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 0, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457669.repack, align 4, !dbg !115
  %param_weight_4457669.repack918 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 1, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457669.repack918, align 4, !dbg !115
  %param_weight_4457669.repack919 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 2, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457669.repack919, align 4, !dbg !115
  %param_weight_4457669.repack920 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 3, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457669.repack920, align 4, !dbg !115
  %param_weight_4457669.repack921 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 4, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457669.repack921, align 4, !dbg !115
  %param_weight_4457669.repack922 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 5, !dbg !115
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457669.repack922, align 4, !dbg !115
  store i32 0, i32 addrspace(5)* %slice_offset_4457780, align 4, !dbg !115
  store i32 0, i32 addrspace(5)* %dim_4457645, align 4, !dbg !115
  %3380 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, !dbg !115
  %3381 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 4, !dbg !115
  %3382 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 3, !dbg !115
  %3383 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 5, !dbg !115
  %3384 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 6, !dbg !115
  br label %expr_true439, !dbg !74

expr_false374:                                    ; preds = %continue456
  %3385 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 2, !dbg !75
  %.elt923 = getelementptr inbounds %5, %5 addrspace(5)* %3385, i32 0, i32 0, !dbg !75
  %.unpack924 = load float, float addrspace(5)* %.elt923, align 8, !dbg !75
  %.elt925 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 2, i32 1, !dbg !75
  %.unpack926 = load float, float addrspace(5)* %.elt925, align 4, !dbg !75
  %.elt927 = getelementptr inbounds %3, %3 addrspace(5)* %3380, i32 0, i32 0, i32 0, !dbg !75
  %.unpack928 = load i32, i32 addrspace(5)* %.elt927, align 8, !dbg !75
  %.elt929 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 0, i32 1, !dbg !75
  %.unpack930 = load i32, i32 addrspace(5)* %.elt929, align 4, !dbg !75
  %3386 = fmul float %.unpack915, %.unpack924, !dbg !75
  %3387 = sitofp i32 %.unpack928 to float, !dbg !75
  %3388 = fadd float %3387, -2.000000e+00, !dbg !75
  %3389 = fcmp olt float %3386, %3388, !dbg !75
  %3390 = select i1 %3389, float %3386, float %3388, !dbg !75
  %3391 = call float @__ocml_floor_f32(float %3390), !dbg !75
  %3392 = fmul float %.unpack917, %.unpack926, !dbg !55
  %3393 = sitofp i32 %.unpack930 to float, !dbg !55
  %3394 = fadd float %3393, -2.000000e+00, !dbg !55
  %3395 = fcmp olt float %3392, %3394, !dbg !55
  %3396 = select i1 %3395, float %3392, float %3394, !dbg !55
  %3397 = call float @__ocml_floor_f32(float %3396), !dbg !55
  %3398 = getelementptr inbounds %3, %3 addrspace(5)* %3380, i32 0, i32 0, i32 0, !dbg !56
  %3399 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %3400 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 0, i32 1, !dbg !56
  %3401 = load i32, i32 addrspace(5)* %3400, align 4, !dbg !56
  %3402 = load i32, i32 addrspace(5)* %slice_offset_4457780, align 4, !dbg !56
  %3403 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 7, !dbg !56
  %3404 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %3405 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3406 = getelementptr inbounds [0 x i32], [0 x i32]* %3405, i64 0, i64 2, !dbg !56
  %3407 = load i32, i32* %3406, align 4, !dbg !56
  %3408 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 4, !dbg !56
  %3409 = addrspacecast float addrspace(5)* %3408 to float*, !dbg !56
  %3410 = load float, float* %3409, align 4, !dbg !56
  %3411 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 5, !dbg !56
  %3412 = addrspacecast float addrspace(5)* %3411 to float*, !dbg !56
  %3413 = load float, float* %3412, align 4, !dbg !56
  %3414 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3415 = getelementptr inbounds [0 x i32], [0 x i32]* %3414, i64 0, i64 1, !dbg !56
  %3416 = load i32, i32* %3415, align 4, !dbg !56
  %3417 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 2, !dbg !56
  %3418 = addrspacecast float addrspace(5)* %3417 to float*, !dbg !56
  %3419 = load float, float* %3418, align 4, !dbg !56
  %3420 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 3, !dbg !56
  %3421 = addrspacecast float addrspace(5)* %3420 to float*, !dbg !56
  %3422 = load float, float* %3421, align 4, !dbg !56
  %3423 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3424 = getelementptr inbounds [0 x i32], [0 x i32]* %3423, i64 0, i64 0, !dbg !56
  %3425 = load i32, i32* %3424, align 4, !dbg !56
  %3426 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 0, !dbg !56
  %3427 = addrspacecast float addrspace(5)* %3426 to float*, !dbg !56
  %3428 = load float, float* %3427, align 4, !dbg !56
  %3429 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 1, !dbg !56
  %3430 = addrspacecast float addrspace(5)* %3429 to float*, !dbg !56
  %3431 = load float, float* %3430, align 4, !dbg !56
  %3432 = fptosi float %3391 to i32, !dbg !56
  %3433 = fptosi float %3397 to i32, !dbg !56
  %3434 = mul nsw i32 %3399, %3433, !dbg !56
  %index703 = add nsw i32 %3434, %3432, !dbg !56
  %size704 = mul nsw i32 %3399, %3401, !dbg !56
  %3435 = mul nsw i32 %3402, %size704, !dbg !56
  %3436 = add nsw i32 %index703, %3435, !dbg !56
  %3437 = sext i32 %3436 to i64, !dbg !56
  %3438 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3437, !dbg !56
  %3439 = load float, float* %3438, align 4, !dbg !56
  %3440 = mul nsw i32 %3425, %size704, !dbg !56
  %i1705 = add nsw i32 %3436, %3440, !dbg !56
  %3441 = sext i32 %i1705 to i64, !dbg !56
  %3442 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3441, !dbg !56
  %3443 = load float, float* %3442, align 4, !dbg !56
  %3444 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3445 = getelementptr inbounds [0 x i32], [0 x i32]* %3444, i64 0, i64 0, !dbg !56
  %3446 = load i32, i32* %3445, align 4, !dbg !56
  %3447 = load float, float* %3427, align 4, !dbg !56
  %3448 = load float, float* %3430, align 4, !dbg !56
  %3449 = mul nsw i32 %3416, %size704, !dbg !56
  %i1706 = add nsw i32 %3436, %3449, !dbg !56
  %3450 = sext i32 %i1706 to i64, !dbg !56
  %3451 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3450, !dbg !56
  %3452 = load float, float* %3451, align 4, !dbg !56
  %3453 = mul nsw i32 %3446, %size704, !dbg !56
  %i1707 = add nsw i32 %i1706, %3453, !dbg !56
  %3454 = sext i32 %i1707 to i64, !dbg !56
  %3455 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3454, !dbg !56
  %3456 = load float, float* %3455, align 4, !dbg !56
  %3457 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3458 = getelementptr inbounds [0 x i32], [0 x i32]* %3457, i64 0, i64 1, !dbg !56
  %3459 = load i32, i32* %3458, align 4, !dbg !56
  %3460 = load float, float* %3418, align 4, !dbg !56
  %3461 = load float, float* %3421, align 4, !dbg !56
  %3462 = getelementptr inbounds [0 x i32], [0 x i32]* %3457, i64 0, i64 0, !dbg !56
  %3463 = load i32, i32* %3462, align 4, !dbg !56
  %3464 = load float, float* %3427, align 4, !dbg !56
  %3465 = load float, float* %3430, align 4, !dbg !56
  %3466 = mul nsw i32 %3407, %size704, !dbg !56
  %i1708 = add nsw i32 %3436, %3466, !dbg !56
  %3467 = sext i32 %i1708 to i64, !dbg !56
  %3468 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3467, !dbg !56
  %3469 = load float, float* %3468, align 4, !dbg !56
  %3470 = mul nsw i32 %3463, %size704, !dbg !56
  %i1709 = add nsw i32 %i1708, %3470, !dbg !56
  %3471 = sext i32 %i1709 to i64, !dbg !56
  %3472 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3471, !dbg !56
  %3473 = load float, float* %3472, align 4, !dbg !56
  %3474 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3475 = getelementptr inbounds [0 x i32], [0 x i32]* %3474, i64 0, i64 0, !dbg !56
  %3476 = load i32, i32* %3475, align 4, !dbg !56
  %3477 = load float, float* %3427, align 4, !dbg !56
  %3478 = load float, float* %3430, align 4, !dbg !56
  %3479 = mul nsw i32 %3459, %size704, !dbg !56
  %i1710 = add nsw i32 %i1708, %3479, !dbg !56
  %3480 = sext i32 %i1710 to i64, !dbg !56
  %3481 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3480, !dbg !56
  %3482 = load float, float* %3481, align 4, !dbg !56
  %3483 = mul nsw i32 %3476, %size704, !dbg !56
  %i1711 = add nsw i32 %i1710, %3483, !dbg !56
  %3484 = sext i32 %i1711 to i64, !dbg !56
  %3485 = getelementptr inbounds [0 x float], [0 x float]* %3404, i64 0, i64 %3484, !dbg !56
  %3486 = load float, float* %3485, align 4, !dbg !56
  %3487 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %3488 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3489 = getelementptr inbounds [0 x i32], [0 x i32]* %3488, i64 0, i64 2, !dbg !56
  %3490 = load i32, i32* %3489, align 4, !dbg !56
  %3491 = load float, float* %3409, align 4, !dbg !56
  %3492 = load float, float* %3412, align 4, !dbg !56
  %3493 = getelementptr inbounds [0 x i32], [0 x i32]* %3488, i64 0, i64 1, !dbg !56
  %3494 = load i32, i32* %3493, align 4, !dbg !56
  %3495 = load float, float* %3418, align 4, !dbg !56
  %3496 = load float, float* %3421, align 4, !dbg !56
  %3497 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3498 = getelementptr inbounds [0 x i32], [0 x i32]* %3497, i64 0, i64 0, !dbg !56
  %3499 = load i32, i32* %3498, align 4, !dbg !56
  %3500 = load float, float* %3427, align 4, !dbg !56
  %3501 = load float, float* %3430, align 4, !dbg !56
  %3502 = getelementptr inbounds [0 x float], [0 x float]* %3487, i64 0, i64 1, !dbg !56
  %3503 = sext i32 %3436 to i64, !dbg !56
  %3504 = getelementptr inbounds float, float* %3502, i64 %3503, !dbg !56
  %3505 = load float, float* %3504, align 4, !dbg !56
  %3506 = mul nsw i32 %3499, %size704, !dbg !56
  %i1712 = add nsw i32 %3436, %3506, !dbg !56
  %3507 = sext i32 %i1712 to i64, !dbg !56
  %3508 = getelementptr inbounds float, float* %3502, i64 %3507, !dbg !56
  %3509 = load float, float* %3508, align 4, !dbg !56
  %3510 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3511 = getelementptr inbounds [0 x i32], [0 x i32]* %3510, i64 0, i64 0, !dbg !56
  %3512 = load i32, i32* %3511, align 4, !dbg !56
  %3513 = load float, float* %3427, align 4, !dbg !56
  %3514 = load float, float* %3430, align 4, !dbg !56
  %3515 = mul nsw i32 %3494, %size704, !dbg !56
  %i1713 = add nsw i32 %3436, %3515, !dbg !56
  %3516 = sext i32 %i1713 to i64, !dbg !56
  %3517 = getelementptr inbounds float, float* %3502, i64 %3516, !dbg !56
  %3518 = load float, float* %3517, align 4, !dbg !56
  %3519 = mul nsw i32 %3512, %size704, !dbg !56
  %i1714 = add nsw i32 %i1713, %3519, !dbg !56
  %3520 = sext i32 %i1714 to i64, !dbg !56
  %3521 = getelementptr inbounds float, float* %3502, i64 %3520, !dbg !56
  %3522 = load float, float* %3521, align 4, !dbg !56
  %3523 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3524 = getelementptr inbounds [0 x i32], [0 x i32]* %3523, i64 0, i64 1, !dbg !56
  %3525 = load i32, i32* %3524, align 4, !dbg !56
  %3526 = load float, float* %3418, align 4, !dbg !56
  %3527 = load float, float* %3421, align 4, !dbg !56
  %3528 = getelementptr inbounds [0 x i32], [0 x i32]* %3523, i64 0, i64 0, !dbg !56
  %3529 = load i32, i32* %3528, align 4, !dbg !56
  %3530 = load float, float* %3427, align 4, !dbg !56
  %3531 = load float, float* %3430, align 4, !dbg !56
  %3532 = mul nsw i32 %3490, %size704, !dbg !56
  %i1715 = add nsw i32 %3436, %3532, !dbg !56
  %3533 = sext i32 %i1715 to i64, !dbg !56
  %3534 = getelementptr inbounds float, float* %3502, i64 %3533, !dbg !56
  %3535 = load float, float* %3534, align 4, !dbg !56
  %3536 = mul nsw i32 %3529, %size704, !dbg !56
  %i1716 = add nsw i32 %i1715, %3536, !dbg !56
  %3537 = sext i32 %i1716 to i64, !dbg !56
  %3538 = getelementptr inbounds float, float* %3502, i64 %3537, !dbg !56
  %3539 = load float, float* %3538, align 4, !dbg !56
  %3540 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3541 = getelementptr inbounds [0 x i32], [0 x i32]* %3540, i64 0, i64 0, !dbg !56
  %3542 = load i32, i32* %3541, align 4, !dbg !56
  %3543 = load float, float* %3427, align 4, !dbg !56
  %3544 = load float, float* %3430, align 4, !dbg !56
  %3545 = mul nsw i32 %3525, %size704, !dbg !56
  %i1717 = add nsw i32 %i1715, %3545, !dbg !56
  %3546 = sext i32 %i1717 to i64, !dbg !56
  %3547 = getelementptr inbounds float, float* %3502, i64 %3546, !dbg !56
  %3548 = load float, float* %3547, align 4, !dbg !56
  %3549 = mul nsw i32 %3542, %size704, !dbg !56
  %i1718 = add nsw i32 %i1717, %3549, !dbg !56
  %3550 = sext i32 %i1718 to i64, !dbg !56
  %3551 = getelementptr inbounds float, float* %3502, i64 %3550, !dbg !56
  %3552 = load float, float* %3551, align 4, !dbg !56
  %3553 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %3554 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %3555 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3556 = getelementptr inbounds [0 x i32], [0 x i32]* %3555, i64 0, i64 2, !dbg !56
  %3557 = load i32, i32* %3556, align 4, !dbg !56
  %3558 = load float, float* %3409, align 4, !dbg !56
  %3559 = load float, float* %3412, align 4, !dbg !56
  %3560 = getelementptr inbounds [0 x i32], [0 x i32]* %3555, i64 0, i64 1, !dbg !56
  %3561 = load i32, i32* %3560, align 4, !dbg !56
  %3562 = load float, float* %3418, align 4, !dbg !56
  %3563 = load float, float* %3421, align 4, !dbg !56
  %3564 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3565 = getelementptr inbounds [0 x i32], [0 x i32]* %3564, i64 0, i64 0, !dbg !56
  %3566 = load i32, i32* %3565, align 4, !dbg !56
  %3567 = load float, float* %3427, align 4, !dbg !56
  %3568 = load float, float* %3430, align 4, !dbg !56
  %3569 = sext i32 %3554 to i64, !dbg !56
  %3570 = getelementptr inbounds [0 x float], [0 x float]* %3553, i64 0, i64 %3569, !dbg !56
  %3571 = sext i32 %3436 to i64, !dbg !56
  %3572 = getelementptr inbounds float, float* %3570, i64 %3571, !dbg !56
  %3573 = load float, float* %3572, align 4, !dbg !56
  %3574 = mul nsw i32 %3566, %size704, !dbg !56
  %i1719 = add nsw i32 %3436, %3574, !dbg !56
  %3575 = sext i32 %i1719 to i64, !dbg !56
  %3576 = getelementptr inbounds float, float* %3570, i64 %3575, !dbg !56
  %3577 = load float, float* %3576, align 4, !dbg !56
  %3578 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3579 = getelementptr inbounds [0 x i32], [0 x i32]* %3578, i64 0, i64 0, !dbg !56
  %3580 = load i32, i32* %3579, align 4, !dbg !56
  %3581 = load float, float* %3427, align 4, !dbg !56
  %3582 = load float, float* %3430, align 4, !dbg !56
  %3583 = mul nsw i32 %3561, %size704, !dbg !56
  %i1720 = add nsw i32 %3436, %3583, !dbg !56
  %3584 = sext i32 %i1720 to i64, !dbg !56
  %3585 = getelementptr inbounds float, float* %3570, i64 %3584, !dbg !56
  %3586 = load float, float* %3585, align 4, !dbg !56
  %3587 = mul nsw i32 %3580, %size704, !dbg !56
  %i1721 = add nsw i32 %i1720, %3587, !dbg !56
  %3588 = sext i32 %i1721 to i64, !dbg !56
  %3589 = getelementptr inbounds float, float* %3570, i64 %3588, !dbg !56
  %3590 = load float, float* %3589, align 4, !dbg !56
  %3591 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3592 = getelementptr inbounds [0 x i32], [0 x i32]* %3591, i64 0, i64 1, !dbg !56
  %3593 = load i32, i32* %3592, align 4, !dbg !56
  %3594 = load float, float* %3418, align 4, !dbg !56
  %3595 = load float, float* %3421, align 4, !dbg !56
  %3596 = getelementptr inbounds [0 x i32], [0 x i32]* %3591, i64 0, i64 0, !dbg !56
  %3597 = load i32, i32* %3596, align 4, !dbg !56
  %3598 = load float, float* %3427, align 4, !dbg !56
  %3599 = load float, float* %3430, align 4, !dbg !56
  %3600 = mul nsw i32 %3557, %size704, !dbg !56
  %i1722 = add nsw i32 %3436, %3600, !dbg !56
  %3601 = sext i32 %i1722 to i64, !dbg !56
  %3602 = getelementptr inbounds float, float* %3570, i64 %3601, !dbg !56
  %3603 = load float, float* %3602, align 4, !dbg !56
  %3604 = mul nsw i32 %3597, %size704, !dbg !56
  %i1723 = add nsw i32 %i1722, %3604, !dbg !56
  %3605 = sext i32 %i1723 to i64, !dbg !56
  %3606 = getelementptr inbounds float, float* %3570, i64 %3605, !dbg !56
  %3607 = load float, float* %3606, align 4, !dbg !56
  %3608 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3609 = getelementptr inbounds [0 x i32], [0 x i32]* %3608, i64 0, i64 0, !dbg !56
  %3610 = load i32, i32* %3609, align 4, !dbg !56
  %3611 = load float, float* %3427, align 4, !dbg !56
  %3612 = load float, float* %3430, align 4, !dbg !56
  %3613 = mul nsw i32 %3593, %size704, !dbg !56
  %i1724 = add nsw i32 %i1722, %3613, !dbg !56
  %3614 = sext i32 %i1724 to i64, !dbg !56
  %3615 = getelementptr inbounds float, float* %3570, i64 %3614, !dbg !56
  %3616 = load float, float* %3615, align 4, !dbg !56
  %3617 = mul nsw i32 %3610, %size704, !dbg !56
  %i1725 = add nsw i32 %i1724, %3617, !dbg !56
  %3618 = sext i32 %i1725 to i64, !dbg !56
  %3619 = getelementptr inbounds float, float* %3570, i64 %3618, !dbg !56
  %3620 = load float, float* %3619, align 4, !dbg !56
  %3621 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %3622 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %3623 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3624 = getelementptr inbounds [0 x i32], [0 x i32]* %3623, i64 0, i64 2, !dbg !56
  %3625 = load i32, i32* %3624, align 4, !dbg !56
  %3626 = load float, float* %3409, align 4, !dbg !56
  %3627 = load float, float* %3412, align 4, !dbg !56
  %3628 = getelementptr inbounds [0 x i32], [0 x i32]* %3623, i64 0, i64 1, !dbg !56
  %3629 = load i32, i32* %3628, align 4, !dbg !56
  %3630 = load float, float* %3418, align 4, !dbg !56
  %3631 = load float, float* %3421, align 4, !dbg !56
  %3632 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3633 = getelementptr inbounds [0 x i32], [0 x i32]* %3632, i64 0, i64 0, !dbg !56
  %3634 = load i32, i32* %3633, align 4, !dbg !56
  %3635 = load float, float* %3427, align 4, !dbg !56
  %3636 = load float, float* %3430, align 4, !dbg !56
  %3637 = add nsw i32 %3622, 1, !dbg !56
  %3638 = sext i32 %3637 to i64, !dbg !56
  %3639 = getelementptr inbounds [0 x float], [0 x float]* %3621, i64 0, i64 %3638, !dbg !56
  %3640 = sext i32 %3436 to i64, !dbg !56
  %3641 = getelementptr inbounds float, float* %3639, i64 %3640, !dbg !56
  %3642 = load float, float* %3641, align 4, !dbg !56
  %3643 = mul nsw i32 %3634, %size704, !dbg !56
  %i1726 = add nsw i32 %3436, %3643, !dbg !56
  %3644 = sext i32 %i1726 to i64, !dbg !56
  %3645 = getelementptr inbounds float, float* %3639, i64 %3644, !dbg !56
  %3646 = load float, float* %3645, align 4, !dbg !56
  %3647 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3648 = getelementptr inbounds [0 x i32], [0 x i32]* %3647, i64 0, i64 0, !dbg !56
  %3649 = load i32, i32* %3648, align 4, !dbg !56
  %3650 = load float, float* %3427, align 4, !dbg !56
  %3651 = load float, float* %3430, align 4, !dbg !56
  %3652 = mul nsw i32 %3629, %size704, !dbg !56
  %i1727 = add nsw i32 %3436, %3652, !dbg !56
  %3653 = sext i32 %i1727 to i64, !dbg !56
  %3654 = getelementptr inbounds float, float* %3639, i64 %3653, !dbg !56
  %3655 = load float, float* %3654, align 4, !dbg !56
  %3656 = mul nsw i32 %3649, %size704, !dbg !56
  %i1728 = add nsw i32 %i1727, %3656, !dbg !56
  %3657 = sext i32 %i1728 to i64, !dbg !56
  %3658 = getelementptr inbounds float, float* %3639, i64 %3657, !dbg !56
  %3659 = load float, float* %3658, align 4, !dbg !56
  %3660 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3661 = getelementptr inbounds [0 x i32], [0 x i32]* %3660, i64 0, i64 1, !dbg !56
  %3662 = load i32, i32* %3661, align 4, !dbg !56
  %3663 = load float, float* %3418, align 4, !dbg !56
  %3664 = load float, float* %3421, align 4, !dbg !56
  %3665 = getelementptr inbounds [0 x i32], [0 x i32]* %3660, i64 0, i64 0, !dbg !56
  %3666 = load i32, i32* %3665, align 4, !dbg !56
  %3667 = load float, float* %3427, align 4, !dbg !56
  %3668 = load float, float* %3430, align 4, !dbg !56
  %3669 = mul nsw i32 %3625, %size704, !dbg !56
  %i1729 = add nsw i32 %3436, %3669, !dbg !56
  %3670 = sext i32 %i1729 to i64, !dbg !56
  %3671 = getelementptr inbounds float, float* %3639, i64 %3670, !dbg !56
  %3672 = load float, float* %3671, align 4, !dbg !56
  %3673 = mul nsw i32 %3666, %size704, !dbg !56
  %i1730 = add nsw i32 %i1729, %3673, !dbg !56
  %3674 = sext i32 %i1730 to i64, !dbg !56
  %3675 = getelementptr inbounds float, float* %3639, i64 %3674, !dbg !56
  %3676 = load float, float* %3675, align 4, !dbg !56
  %3677 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3678 = getelementptr inbounds [0 x i32], [0 x i32]* %3677, i64 0, i64 0, !dbg !56
  %3679 = load i32, i32* %3678, align 4, !dbg !56
  %3680 = load float, float* %3427, align 4, !dbg !56
  %3681 = load float, float* %3430, align 4, !dbg !56
  %3682 = mul nsw i32 %3662, %size704, !dbg !56
  %i1731 = add nsw i32 %i1729, %3682, !dbg !56
  %3683 = sext i32 %i1731 to i64, !dbg !56
  %3684 = getelementptr inbounds float, float* %3639, i64 %3683, !dbg !56
  %3685 = load float, float* %3684, align 4, !dbg !56
  %3686 = mul nsw i32 %3679, %size704, !dbg !56
  %i1732 = add nsw i32 %i1731, %3686, !dbg !56
  %3687 = sext i32 %i1732 to i64, !dbg !56
  %3688 = getelementptr inbounds float, float* %3639, i64 %3687, !dbg !56
  %3689 = load float, float* %3688, align 4, !dbg !56
  %3690 = getelementptr inbounds %5, %5 addrspace(5)* %3385, i32 0, i32 0, !dbg !56
  %3691 = load float, float addrspace(5)* %3690, align 8, !dbg !56
  %3692 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 2, i32 1, !dbg !56
  %3693 = load float, float addrspace(5)* %3692, align 4, !dbg !56
  %3694 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 0, !dbg !56
  %3695 = fsub float %3392, %3397, !dbg !56
  %3696 = fsub float 1.000000e+00, %3695, !dbg !56
  %3697 = fsub float %3386, %3391, !dbg !56
  %3698 = fsub float 1.000000e+00, %3697, !dbg !56
  %3699 = fmul float %3439, %3428, !dbg !56
  %3700 = fmul float %3443, %3431, !dbg !56
  %3701 = fadd float %3699, %3700, !dbg !56
  %3702 = fmul float %3701, %3419, !dbg !56
  %3703 = fmul float %3452, %3447, !dbg !56
  %3704 = fmul float %3456, %3448, !dbg !56
  %3705 = fadd float %3703, %3704, !dbg !56
  %3706 = fmul float %3705, %3422, !dbg !56
  %3707 = fadd float %3702, %3706, !dbg !56
  %3708 = fmul float %3707, %3410, !dbg !56
  %3709 = fmul float %3469, %3464, !dbg !56
  %3710 = fmul float %3473, %3465, !dbg !56
  %3711 = fadd float %3709, %3710, !dbg !56
  %3712 = fmul float %3711, %3460, !dbg !56
  %3713 = fmul float %3482, %3477, !dbg !56
  %3714 = fmul float %3486, %3478, !dbg !56
  %3715 = fadd float %3713, %3714, !dbg !56
  %3716 = fmul float %3715, %3461, !dbg !56
  %3717 = fadd float %3712, %3716, !dbg !56
  %3718 = fmul float %3717, %3413, !dbg !56
  %3719 = fadd float %3708, %3718, !dbg !56
  %3720 = fmul float %3698, %3719, !dbg !56
  %3721 = fmul float %3505, %3500, !dbg !56
  %3722 = fmul float %3509, %3501, !dbg !56
  %3723 = fadd float %3721, %3722, !dbg !56
  %3724 = fmul float %3723, %3495, !dbg !56
  %3725 = fmul float %3518, %3513, !dbg !56
  %3726 = fmul float %3522, %3514, !dbg !56
  %3727 = fadd float %3725, %3726, !dbg !56
  %3728 = fmul float %3727, %3496, !dbg !56
  %3729 = fadd float %3724, %3728, !dbg !56
  %3730 = fmul float %3729, %3491, !dbg !56
  %3731 = fmul float %3535, %3530, !dbg !56
  %3732 = fmul float %3539, %3531, !dbg !56
  %3733 = fadd float %3731, %3732, !dbg !56
  %3734 = fmul float %3733, %3526, !dbg !56
  %3735 = fmul float %3548, %3543, !dbg !56
  %3736 = fmul float %3552, %3544, !dbg !56
  %3737 = fadd float %3735, %3736, !dbg !56
  %3738 = fmul float %3737, %3527, !dbg !56
  %3739 = fadd float %3734, %3738, !dbg !56
  %3740 = fmul float %3739, %3492, !dbg !56
  %3741 = fadd float %3730, %3740, !dbg !56
  %3742 = fmul float %3697, %3741, !dbg !56
  %3743 = fadd float %3720, %3742, !dbg !56
  %3744 = fmul float %3696, %3743, !dbg !56
  %3745 = fmul float %3573, %3567, !dbg !56
  %3746 = fmul float %3577, %3568, !dbg !56
  %3747 = fadd float %3745, %3746, !dbg !56
  %3748 = fmul float %3747, %3562, !dbg !56
  %3749 = fmul float %3586, %3581, !dbg !56
  %3750 = fmul float %3590, %3582, !dbg !56
  %3751 = fadd float %3749, %3750, !dbg !56
  %3752 = fmul float %3751, %3563, !dbg !56
  %3753 = fadd float %3748, %3752, !dbg !56
  %3754 = fmul float %3753, %3558, !dbg !56
  %3755 = fmul float %3603, %3598, !dbg !56
  %3756 = fmul float %3607, %3599, !dbg !56
  %3757 = fadd float %3755, %3756, !dbg !56
  %3758 = fmul float %3757, %3594, !dbg !56
  %3759 = fmul float %3616, %3611, !dbg !56
  %3760 = fmul float %3620, %3612, !dbg !56
  %3761 = fadd float %3759, %3760, !dbg !56
  %3762 = fmul float %3761, %3595, !dbg !56
  %3763 = fadd float %3758, %3762, !dbg !56
  %3764 = fmul float %3763, %3559, !dbg !56
  %3765 = fadd float %3754, %3764, !dbg !56
  %3766 = fmul float %3698, %3765, !dbg !56
  %3767 = fmul float %3642, %3635, !dbg !56
  %3768 = fmul float %3646, %3636, !dbg !56
  %3769 = fadd float %3767, %3768, !dbg !56
  %3770 = fmul float %3769, %3630, !dbg !56
  %3771 = fmul float %3655, %3650, !dbg !56
  %3772 = fmul float %3659, %3651, !dbg !56
  %3773 = fadd float %3771, %3772, !dbg !56
  %3774 = fmul float %3773, %3631, !dbg !56
  %3775 = fadd float %3770, %3774, !dbg !56
  %3776 = fmul float %3775, %3626, !dbg !56
  %3777 = fmul float %3672, %3667, !dbg !56
  %3778 = fmul float %3676, %3668, !dbg !56
  %3779 = fadd float %3777, %3778, !dbg !56
  %3780 = fmul float %3779, %3663, !dbg !56
  %3781 = fmul float %3685, %3680, !dbg !56
  %3782 = fmul float %3689, %3681, !dbg !56
  %3783 = fadd float %3781, %3782, !dbg !56
  %3784 = fmul float %3783, %3664, !dbg !56
  %3785 = fadd float %3780, %3784, !dbg !56
  %3786 = fmul float %3785, %3627, !dbg !56
  %3787 = fadd float %3776, %3786, !dbg !56
  %3788 = fmul float %3697, %3787, !dbg !56
  %3789 = fadd float %3766, %3788, !dbg !56
  %3790 = fmul float %3695, %3789, !dbg !56
  %3791 = fadd float %3744, %3790, !dbg !56
  %hprod733 = fmul float %3691, %3693, !dbg !56
  %3792 = fmul float %3791, %hprod733, !dbg !56
  store float %3792, float addrspace(5)* %3694, align 4, !dbg !56
  %.elt931 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 0, !dbg !56
  %.unpack932 = load float, float addrspace(5)* %.elt931, align 4, !dbg !56
  %.elt933 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 1, !dbg !56
  %.unpack934 = load float, float addrspace(5)* %.elt933, align 4, !dbg !56
  %param_weight_4457876.repack = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 0, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457876.repack, align 4, !dbg !56
  %param_weight_4457876.repack935 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 1, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457876.repack935, align 4, !dbg !56
  %param_weight_4457876.repack936 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 2, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457876.repack936, align 4, !dbg !56
  %param_weight_4457876.repack937 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 3, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457876.repack937, align 4, !dbg !56
  %param_weight_4457876.repack938 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 4, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457876.repack938, align 4, !dbg !56
  %param_weight_4457876.repack939 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 5, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4457876.repack939, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %slice_offset_4457984, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %dim_4457854, align 4, !dbg !56
  br label %expr_true421, !dbg !74

expr_false380:                                    ; preds = %continue438
  %.elt940 = getelementptr inbounds %5, %5 addrspace(5)* %3385, i32 0, i32 0, !dbg !75
  %.unpack941 = load float, float addrspace(5)* %.elt940, align 8, !dbg !75
  %.elt942 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 2, i32 1, !dbg !75
  %.unpack943 = load float, float addrspace(5)* %.elt942, align 4, !dbg !75
  %.elt944 = getelementptr inbounds %3, %3 addrspace(5)* %3380, i32 0, i32 0, i32 0, !dbg !75
  %.unpack945 = load i32, i32 addrspace(5)* %.elt944, align 8, !dbg !75
  %.elt946 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 0, i32 1, !dbg !75
  %.unpack947 = load i32, i32 addrspace(5)* %.elt946, align 4, !dbg !75
  %3793 = fmul float %.unpack932, %.unpack941, !dbg !75
  %3794 = sitofp i32 %.unpack945 to float, !dbg !75
  %3795 = fadd float %3794, -2.000000e+00, !dbg !75
  %3796 = fcmp olt float %3793, %3795, !dbg !75
  %3797 = select i1 %3796, float %3793, float %3795, !dbg !75
  %3798 = call float @__ocml_floor_f32(float %3797), !dbg !75
  %3799 = fmul float %.unpack934, %.unpack943, !dbg !55
  %3800 = sitofp i32 %.unpack947 to float, !dbg !55
  %3801 = fadd float %3800, -2.000000e+00, !dbg !55
  %3802 = fcmp olt float %3799, %3801, !dbg !55
  %3803 = select i1 %3802, float %3799, float %3801, !dbg !55
  %3804 = call float @__ocml_floor_f32(float %3803), !dbg !55
  %3805 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %3806 = load i32, i32 addrspace(5)* %3400, align 4, !dbg !56
  %3807 = load i32, i32 addrspace(5)* %slice_offset_4457984, align 4, !dbg !56
  %3808 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %3809 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3810 = getelementptr inbounds [0 x i32], [0 x i32]* %3809, i64 0, i64 2, !dbg !56
  %3811 = load i32, i32* %3810, align 4, !dbg !56
  %3812 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 4, !dbg !56
  %3813 = addrspacecast float addrspace(5)* %3812 to float*, !dbg !56
  %3814 = load float, float* %3813, align 4, !dbg !56
  %3815 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 5, !dbg !56
  %3816 = addrspacecast float addrspace(5)* %3815 to float*, !dbg !56
  %3817 = load float, float* %3816, align 4, !dbg !56
  %3818 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3819 = getelementptr inbounds [0 x i32], [0 x i32]* %3818, i64 0, i64 1, !dbg !56
  %3820 = load i32, i32* %3819, align 4, !dbg !56
  %3821 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 2, !dbg !56
  %3822 = addrspacecast float addrspace(5)* %3821 to float*, !dbg !56
  %3823 = load float, float* %3822, align 4, !dbg !56
  %3824 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 3, !dbg !56
  %3825 = addrspacecast float addrspace(5)* %3824 to float*, !dbg !56
  %3826 = load float, float* %3825, align 4, !dbg !56
  %3827 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3828 = getelementptr inbounds [0 x i32], [0 x i32]* %3827, i64 0, i64 0, !dbg !56
  %3829 = load i32, i32* %3828, align 4, !dbg !56
  %3830 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 0, !dbg !56
  %3831 = addrspacecast float addrspace(5)* %3830 to float*, !dbg !56
  %3832 = load float, float* %3831, align 4, !dbg !56
  %3833 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 1, !dbg !56
  %3834 = addrspacecast float addrspace(5)* %3833 to float*, !dbg !56
  %3835 = load float, float* %3834, align 4, !dbg !56
  %3836 = fptosi float %3798 to i32, !dbg !56
  %3837 = fptosi float %3804 to i32, !dbg !56
  %3838 = mul nsw i32 %3805, %3837, !dbg !56
  %index734 = add nsw i32 %3838, %3836, !dbg !56
  %size735 = mul nsw i32 %3805, %3806, !dbg !56
  %3839 = mul nsw i32 %3807, %size735, !dbg !56
  %3840 = add nsw i32 %index734, %3839, !dbg !56
  %3841 = sext i32 %3840 to i64, !dbg !56
  %3842 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3841, !dbg !56
  %3843 = load float, float* %3842, align 4, !dbg !56
  %3844 = mul nsw i32 %3829, %size735, !dbg !56
  %i1736 = add nsw i32 %3840, %3844, !dbg !56
  %3845 = sext i32 %i1736 to i64, !dbg !56
  %3846 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3845, !dbg !56
  %3847 = load float, float* %3846, align 4, !dbg !56
  %3848 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3849 = getelementptr inbounds [0 x i32], [0 x i32]* %3848, i64 0, i64 0, !dbg !56
  %3850 = load i32, i32* %3849, align 4, !dbg !56
  %3851 = load float, float* %3831, align 4, !dbg !56
  %3852 = load float, float* %3834, align 4, !dbg !56
  %3853 = mul nsw i32 %3820, %size735, !dbg !56
  %i1737 = add nsw i32 %3840, %3853, !dbg !56
  %3854 = sext i32 %i1737 to i64, !dbg !56
  %3855 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3854, !dbg !56
  %3856 = load float, float* %3855, align 4, !dbg !56
  %3857 = mul nsw i32 %3850, %size735, !dbg !56
  %i1738 = add nsw i32 %i1737, %3857, !dbg !56
  %3858 = sext i32 %i1738 to i64, !dbg !56
  %3859 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3858, !dbg !56
  %3860 = load float, float* %3859, align 4, !dbg !56
  %3861 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3862 = getelementptr inbounds [0 x i32], [0 x i32]* %3861, i64 0, i64 1, !dbg !56
  %3863 = load i32, i32* %3862, align 4, !dbg !56
  %3864 = load float, float* %3822, align 4, !dbg !56
  %3865 = load float, float* %3825, align 4, !dbg !56
  %3866 = getelementptr inbounds [0 x i32], [0 x i32]* %3861, i64 0, i64 0, !dbg !56
  %3867 = load i32, i32* %3866, align 4, !dbg !56
  %3868 = load float, float* %3831, align 4, !dbg !56
  %3869 = load float, float* %3834, align 4, !dbg !56
  %3870 = mul nsw i32 %3811, %size735, !dbg !56
  %i1739 = add nsw i32 %3840, %3870, !dbg !56
  %3871 = sext i32 %i1739 to i64, !dbg !56
  %3872 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3871, !dbg !56
  %3873 = load float, float* %3872, align 4, !dbg !56
  %3874 = mul nsw i32 %3867, %size735, !dbg !56
  %i1740 = add nsw i32 %i1739, %3874, !dbg !56
  %3875 = sext i32 %i1740 to i64, !dbg !56
  %3876 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3875, !dbg !56
  %3877 = load float, float* %3876, align 4, !dbg !56
  %3878 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3879 = getelementptr inbounds [0 x i32], [0 x i32]* %3878, i64 0, i64 0, !dbg !56
  %3880 = load i32, i32* %3879, align 4, !dbg !56
  %3881 = load float, float* %3831, align 4, !dbg !56
  %3882 = load float, float* %3834, align 4, !dbg !56
  %3883 = mul nsw i32 %3863, %size735, !dbg !56
  %i1741 = add nsw i32 %i1739, %3883, !dbg !56
  %3884 = sext i32 %i1741 to i64, !dbg !56
  %3885 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3884, !dbg !56
  %3886 = load float, float* %3885, align 4, !dbg !56
  %3887 = mul nsw i32 %3880, %size735, !dbg !56
  %i1742 = add nsw i32 %i1741, %3887, !dbg !56
  %3888 = sext i32 %i1742 to i64, !dbg !56
  %3889 = getelementptr inbounds [0 x float], [0 x float]* %3808, i64 0, i64 %3888, !dbg !56
  %3890 = load float, float* %3889, align 4, !dbg !56
  %3891 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %3892 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3893 = getelementptr inbounds [0 x i32], [0 x i32]* %3892, i64 0, i64 2, !dbg !56
  %3894 = load i32, i32* %3893, align 4, !dbg !56
  %3895 = load float, float* %3813, align 4, !dbg !56
  %3896 = load float, float* %3816, align 4, !dbg !56
  %3897 = getelementptr inbounds [0 x i32], [0 x i32]* %3892, i64 0, i64 1, !dbg !56
  %3898 = load i32, i32* %3897, align 4, !dbg !56
  %3899 = load float, float* %3822, align 4, !dbg !56
  %3900 = load float, float* %3825, align 4, !dbg !56
  %3901 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3902 = getelementptr inbounds [0 x i32], [0 x i32]* %3901, i64 0, i64 0, !dbg !56
  %3903 = load i32, i32* %3902, align 4, !dbg !56
  %3904 = load float, float* %3831, align 4, !dbg !56
  %3905 = load float, float* %3834, align 4, !dbg !56
  %3906 = getelementptr inbounds [0 x float], [0 x float]* %3891, i64 0, i64 1, !dbg !56
  %3907 = sext i32 %3840 to i64, !dbg !56
  %3908 = getelementptr inbounds float, float* %3906, i64 %3907, !dbg !56
  %3909 = load float, float* %3908, align 4, !dbg !56
  %3910 = mul nsw i32 %3903, %size735, !dbg !56
  %i1743 = add nsw i32 %3840, %3910, !dbg !56
  %3911 = sext i32 %i1743 to i64, !dbg !56
  %3912 = getelementptr inbounds float, float* %3906, i64 %3911, !dbg !56
  %3913 = load float, float* %3912, align 4, !dbg !56
  %3914 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3915 = getelementptr inbounds [0 x i32], [0 x i32]* %3914, i64 0, i64 0, !dbg !56
  %3916 = load i32, i32* %3915, align 4, !dbg !56
  %3917 = load float, float* %3831, align 4, !dbg !56
  %3918 = load float, float* %3834, align 4, !dbg !56
  %3919 = mul nsw i32 %3898, %size735, !dbg !56
  %i1744 = add nsw i32 %3840, %3919, !dbg !56
  %3920 = sext i32 %i1744 to i64, !dbg !56
  %3921 = getelementptr inbounds float, float* %3906, i64 %3920, !dbg !56
  %3922 = load float, float* %3921, align 4, !dbg !56
  %3923 = mul nsw i32 %3916, %size735, !dbg !56
  %i1745 = add nsw i32 %i1744, %3923, !dbg !56
  %3924 = sext i32 %i1745 to i64, !dbg !56
  %3925 = getelementptr inbounds float, float* %3906, i64 %3924, !dbg !56
  %3926 = load float, float* %3925, align 4, !dbg !56
  %3927 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3928 = getelementptr inbounds [0 x i32], [0 x i32]* %3927, i64 0, i64 1, !dbg !56
  %3929 = load i32, i32* %3928, align 4, !dbg !56
  %3930 = load float, float* %3822, align 4, !dbg !56
  %3931 = load float, float* %3825, align 4, !dbg !56
  %3932 = getelementptr inbounds [0 x i32], [0 x i32]* %3927, i64 0, i64 0, !dbg !56
  %3933 = load i32, i32* %3932, align 4, !dbg !56
  %3934 = load float, float* %3831, align 4, !dbg !56
  %3935 = load float, float* %3834, align 4, !dbg !56
  %3936 = mul nsw i32 %3894, %size735, !dbg !56
  %i1746 = add nsw i32 %3840, %3936, !dbg !56
  %3937 = sext i32 %i1746 to i64, !dbg !56
  %3938 = getelementptr inbounds float, float* %3906, i64 %3937, !dbg !56
  %3939 = load float, float* %3938, align 4, !dbg !56
  %3940 = mul nsw i32 %3933, %size735, !dbg !56
  %i1747 = add nsw i32 %i1746, %3940, !dbg !56
  %3941 = sext i32 %i1747 to i64, !dbg !56
  %3942 = getelementptr inbounds float, float* %3906, i64 %3941, !dbg !56
  %3943 = load float, float* %3942, align 4, !dbg !56
  %3944 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3945 = getelementptr inbounds [0 x i32], [0 x i32]* %3944, i64 0, i64 0, !dbg !56
  %3946 = load i32, i32* %3945, align 4, !dbg !56
  %3947 = load float, float* %3831, align 4, !dbg !56
  %3948 = load float, float* %3834, align 4, !dbg !56
  %3949 = mul nsw i32 %3929, %size735, !dbg !56
  %i1748 = add nsw i32 %i1746, %3949, !dbg !56
  %3950 = sext i32 %i1748 to i64, !dbg !56
  %3951 = getelementptr inbounds float, float* %3906, i64 %3950, !dbg !56
  %3952 = load float, float* %3951, align 4, !dbg !56
  %3953 = mul nsw i32 %3946, %size735, !dbg !56
  %i1749 = add nsw i32 %i1748, %3953, !dbg !56
  %3954 = sext i32 %i1749 to i64, !dbg !56
  %3955 = getelementptr inbounds float, float* %3906, i64 %3954, !dbg !56
  %3956 = load float, float* %3955, align 4, !dbg !56
  %3957 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %3958 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %3959 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3960 = getelementptr inbounds [0 x i32], [0 x i32]* %3959, i64 0, i64 2, !dbg !56
  %3961 = load i32, i32* %3960, align 4, !dbg !56
  %3962 = load float, float* %3813, align 4, !dbg !56
  %3963 = load float, float* %3816, align 4, !dbg !56
  %3964 = getelementptr inbounds [0 x i32], [0 x i32]* %3959, i64 0, i64 1, !dbg !56
  %3965 = load i32, i32* %3964, align 4, !dbg !56
  %3966 = load float, float* %3822, align 4, !dbg !56
  %3967 = load float, float* %3825, align 4, !dbg !56
  %3968 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3969 = getelementptr inbounds [0 x i32], [0 x i32]* %3968, i64 0, i64 0, !dbg !56
  %3970 = load i32, i32* %3969, align 4, !dbg !56
  %3971 = load float, float* %3831, align 4, !dbg !56
  %3972 = load float, float* %3834, align 4, !dbg !56
  %3973 = sext i32 %3958 to i64, !dbg !56
  %3974 = getelementptr inbounds [0 x float], [0 x float]* %3957, i64 0, i64 %3973, !dbg !56
  %3975 = sext i32 %3840 to i64, !dbg !56
  %3976 = getelementptr inbounds float, float* %3974, i64 %3975, !dbg !56
  %3977 = load float, float* %3976, align 4, !dbg !56
  %3978 = mul nsw i32 %3970, %size735, !dbg !56
  %i1750 = add nsw i32 %3840, %3978, !dbg !56
  %3979 = sext i32 %i1750 to i64, !dbg !56
  %3980 = getelementptr inbounds float, float* %3974, i64 %3979, !dbg !56
  %3981 = load float, float* %3980, align 4, !dbg !56
  %3982 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3983 = getelementptr inbounds [0 x i32], [0 x i32]* %3982, i64 0, i64 0, !dbg !56
  %3984 = load i32, i32* %3983, align 4, !dbg !56
  %3985 = load float, float* %3831, align 4, !dbg !56
  %3986 = load float, float* %3834, align 4, !dbg !56
  %3987 = mul nsw i32 %3965, %size735, !dbg !56
  %i1751 = add nsw i32 %3840, %3987, !dbg !56
  %3988 = sext i32 %i1751 to i64, !dbg !56
  %3989 = getelementptr inbounds float, float* %3974, i64 %3988, !dbg !56
  %3990 = load float, float* %3989, align 4, !dbg !56
  %3991 = mul nsw i32 %3984, %size735, !dbg !56
  %i1752 = add nsw i32 %i1751, %3991, !dbg !56
  %3992 = sext i32 %i1752 to i64, !dbg !56
  %3993 = getelementptr inbounds float, float* %3974, i64 %3992, !dbg !56
  %3994 = load float, float* %3993, align 4, !dbg !56
  %3995 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %3996 = getelementptr inbounds [0 x i32], [0 x i32]* %3995, i64 0, i64 1, !dbg !56
  %3997 = load i32, i32* %3996, align 4, !dbg !56
  %3998 = load float, float* %3822, align 4, !dbg !56
  %3999 = load float, float* %3825, align 4, !dbg !56
  %4000 = getelementptr inbounds [0 x i32], [0 x i32]* %3995, i64 0, i64 0, !dbg !56
  %4001 = load i32, i32* %4000, align 4, !dbg !56
  %4002 = load float, float* %3831, align 4, !dbg !56
  %4003 = load float, float* %3834, align 4, !dbg !56
  %4004 = mul nsw i32 %3961, %size735, !dbg !56
  %i1753 = add nsw i32 %3840, %4004, !dbg !56
  %4005 = sext i32 %i1753 to i64, !dbg !56
  %4006 = getelementptr inbounds float, float* %3974, i64 %4005, !dbg !56
  %4007 = load float, float* %4006, align 4, !dbg !56
  %4008 = mul nsw i32 %4001, %size735, !dbg !56
  %i1754 = add nsw i32 %i1753, %4008, !dbg !56
  %4009 = sext i32 %i1754 to i64, !dbg !56
  %4010 = getelementptr inbounds float, float* %3974, i64 %4009, !dbg !56
  %4011 = load float, float* %4010, align 4, !dbg !56
  %4012 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4013 = getelementptr inbounds [0 x i32], [0 x i32]* %4012, i64 0, i64 0, !dbg !56
  %4014 = load i32, i32* %4013, align 4, !dbg !56
  %4015 = load float, float* %3831, align 4, !dbg !56
  %4016 = load float, float* %3834, align 4, !dbg !56
  %4017 = mul nsw i32 %3997, %size735, !dbg !56
  %i1755 = add nsw i32 %i1753, %4017, !dbg !56
  %4018 = sext i32 %i1755 to i64, !dbg !56
  %4019 = getelementptr inbounds float, float* %3974, i64 %4018, !dbg !56
  %4020 = load float, float* %4019, align 4, !dbg !56
  %4021 = mul nsw i32 %4014, %size735, !dbg !56
  %i1756 = add nsw i32 %i1755, %4021, !dbg !56
  %4022 = sext i32 %i1756 to i64, !dbg !56
  %4023 = getelementptr inbounds float, float* %3974, i64 %4022, !dbg !56
  %4024 = load float, float* %4023, align 4, !dbg !56
  %4025 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %4026 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %4027 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4028 = getelementptr inbounds [0 x i32], [0 x i32]* %4027, i64 0, i64 2, !dbg !56
  %4029 = load i32, i32* %4028, align 4, !dbg !56
  %4030 = load float, float* %3813, align 4, !dbg !56
  %4031 = load float, float* %3816, align 4, !dbg !56
  %4032 = getelementptr inbounds [0 x i32], [0 x i32]* %4027, i64 0, i64 1, !dbg !56
  %4033 = load i32, i32* %4032, align 4, !dbg !56
  %4034 = load float, float* %3822, align 4, !dbg !56
  %4035 = load float, float* %3825, align 4, !dbg !56
  %4036 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4037 = getelementptr inbounds [0 x i32], [0 x i32]* %4036, i64 0, i64 0, !dbg !56
  %4038 = load i32, i32* %4037, align 4, !dbg !56
  %4039 = load float, float* %3831, align 4, !dbg !56
  %4040 = load float, float* %3834, align 4, !dbg !56
  %4041 = add nsw i32 %4026, 1, !dbg !56
  %4042 = sext i32 %4041 to i64, !dbg !56
  %4043 = getelementptr inbounds [0 x float], [0 x float]* %4025, i64 0, i64 %4042, !dbg !56
  %4044 = sext i32 %3840 to i64, !dbg !56
  %4045 = getelementptr inbounds float, float* %4043, i64 %4044, !dbg !56
  %4046 = load float, float* %4045, align 4, !dbg !56
  %4047 = mul nsw i32 %4038, %size735, !dbg !56
  %i1757 = add nsw i32 %3840, %4047, !dbg !56
  %4048 = sext i32 %i1757 to i64, !dbg !56
  %4049 = getelementptr inbounds float, float* %4043, i64 %4048, !dbg !56
  %4050 = load float, float* %4049, align 4, !dbg !56
  %4051 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4052 = getelementptr inbounds [0 x i32], [0 x i32]* %4051, i64 0, i64 0, !dbg !56
  %4053 = load i32, i32* %4052, align 4, !dbg !56
  %4054 = load float, float* %3831, align 4, !dbg !56
  %4055 = load float, float* %3834, align 4, !dbg !56
  %4056 = mul nsw i32 %4033, %size735, !dbg !56
  %i1758 = add nsw i32 %3840, %4056, !dbg !56
  %4057 = sext i32 %i1758 to i64, !dbg !56
  %4058 = getelementptr inbounds float, float* %4043, i64 %4057, !dbg !56
  %4059 = load float, float* %4058, align 4, !dbg !56
  %4060 = mul nsw i32 %4053, %size735, !dbg !56
  %i1759 = add nsw i32 %i1758, %4060, !dbg !56
  %4061 = sext i32 %i1759 to i64, !dbg !56
  %4062 = getelementptr inbounds float, float* %4043, i64 %4061, !dbg !56
  %4063 = load float, float* %4062, align 4, !dbg !56
  %4064 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4065 = getelementptr inbounds [0 x i32], [0 x i32]* %4064, i64 0, i64 1, !dbg !56
  %4066 = load i32, i32* %4065, align 4, !dbg !56
  %4067 = load float, float* %3822, align 4, !dbg !56
  %4068 = load float, float* %3825, align 4, !dbg !56
  %4069 = getelementptr inbounds [0 x i32], [0 x i32]* %4064, i64 0, i64 0, !dbg !56
  %4070 = load i32, i32* %4069, align 4, !dbg !56
  %4071 = load float, float* %3831, align 4, !dbg !56
  %4072 = load float, float* %3834, align 4, !dbg !56
  %4073 = mul nsw i32 %4029, %size735, !dbg !56
  %i1760 = add nsw i32 %3840, %4073, !dbg !56
  %4074 = sext i32 %i1760 to i64, !dbg !56
  %4075 = getelementptr inbounds float, float* %4043, i64 %4074, !dbg !56
  %4076 = load float, float* %4075, align 4, !dbg !56
  %4077 = mul nsw i32 %4070, %size735, !dbg !56
  %i1761 = add nsw i32 %i1760, %4077, !dbg !56
  %4078 = sext i32 %i1761 to i64, !dbg !56
  %4079 = getelementptr inbounds float, float* %4043, i64 %4078, !dbg !56
  %4080 = load float, float* %4079, align 4, !dbg !56
  %4081 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4082 = getelementptr inbounds [0 x i32], [0 x i32]* %4081, i64 0, i64 0, !dbg !56
  %4083 = load i32, i32* %4082, align 4, !dbg !56
  %4084 = load float, float* %3831, align 4, !dbg !56
  %4085 = load float, float* %3834, align 4, !dbg !56
  %4086 = mul nsw i32 %4066, %size735, !dbg !56
  %i1762 = add nsw i32 %i1760, %4086, !dbg !56
  %4087 = sext i32 %i1762 to i64, !dbg !56
  %4088 = getelementptr inbounds float, float* %4043, i64 %4087, !dbg !56
  %4089 = load float, float* %4088, align 4, !dbg !56
  %4090 = mul nsw i32 %4083, %size735, !dbg !56
  %i1763 = add nsw i32 %i1762, %4090, !dbg !56
  %4091 = sext i32 %i1763 to i64, !dbg !56
  %4092 = getelementptr inbounds float, float* %4043, i64 %4091, !dbg !56
  %4093 = load float, float* %4092, align 4, !dbg !56
  %4094 = load float, float addrspace(5)* %3690, align 8, !dbg !56
  %4095 = load float, float addrspace(5)* %3692, align 4, !dbg !56
  %4096 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 1, !dbg !56
  %4097 = fsub float %3799, %3804, !dbg !56
  %4098 = fsub float 1.000000e+00, %4097, !dbg !56
  %4099 = fsub float %3793, %3798, !dbg !56
  %4100 = fsub float 1.000000e+00, %4099, !dbg !56
  %4101 = fmul float %3843, %3832, !dbg !56
  %4102 = fmul float %3847, %3835, !dbg !56
  %4103 = fadd float %4101, %4102, !dbg !56
  %4104 = fmul float %4103, %3823, !dbg !56
  %4105 = fmul float %3856, %3851, !dbg !56
  %4106 = fmul float %3860, %3852, !dbg !56
  %4107 = fadd float %4105, %4106, !dbg !56
  %4108 = fmul float %4107, %3826, !dbg !56
  %4109 = fadd float %4104, %4108, !dbg !56
  %4110 = fmul float %4109, %3814, !dbg !56
  %4111 = fmul float %3873, %3868, !dbg !56
  %4112 = fmul float %3877, %3869, !dbg !56
  %4113 = fadd float %4111, %4112, !dbg !56
  %4114 = fmul float %4113, %3864, !dbg !56
  %4115 = fmul float %3886, %3881, !dbg !56
  %4116 = fmul float %3890, %3882, !dbg !56
  %4117 = fadd float %4115, %4116, !dbg !56
  %4118 = fmul float %4117, %3865, !dbg !56
  %4119 = fadd float %4114, %4118, !dbg !56
  %4120 = fmul float %4119, %3817, !dbg !56
  %4121 = fadd float %4110, %4120, !dbg !56
  %4122 = fmul float %4100, %4121, !dbg !56
  %4123 = fmul float %3909, %3904, !dbg !56
  %4124 = fmul float %3913, %3905, !dbg !56
  %4125 = fadd float %4123, %4124, !dbg !56
  %4126 = fmul float %4125, %3899, !dbg !56
  %4127 = fmul float %3922, %3917, !dbg !56
  %4128 = fmul float %3926, %3918, !dbg !56
  %4129 = fadd float %4127, %4128, !dbg !56
  %4130 = fmul float %4129, %3900, !dbg !56
  %4131 = fadd float %4126, %4130, !dbg !56
  %4132 = fmul float %4131, %3895, !dbg !56
  %4133 = fmul float %3939, %3934, !dbg !56
  %4134 = fmul float %3943, %3935, !dbg !56
  %4135 = fadd float %4133, %4134, !dbg !56
  %4136 = fmul float %4135, %3930, !dbg !56
  %4137 = fmul float %3952, %3947, !dbg !56
  %4138 = fmul float %3956, %3948, !dbg !56
  %4139 = fadd float %4137, %4138, !dbg !56
  %4140 = fmul float %4139, %3931, !dbg !56
  %4141 = fadd float %4136, %4140, !dbg !56
  %4142 = fmul float %4141, %3896, !dbg !56
  %4143 = fadd float %4132, %4142, !dbg !56
  %4144 = fmul float %4099, %4143, !dbg !56
  %4145 = fadd float %4122, %4144, !dbg !56
  %4146 = fmul float %4098, %4145, !dbg !56
  %4147 = fmul float %3977, %3971, !dbg !56
  %4148 = fmul float %3981, %3972, !dbg !56
  %4149 = fadd float %4147, %4148, !dbg !56
  %4150 = fmul float %4149, %3966, !dbg !56
  %4151 = fmul float %3990, %3985, !dbg !56
  %4152 = fmul float %3994, %3986, !dbg !56
  %4153 = fadd float %4151, %4152, !dbg !56
  %4154 = fmul float %4153, %3967, !dbg !56
  %4155 = fadd float %4150, %4154, !dbg !56
  %4156 = fmul float %4155, %3962, !dbg !56
  %4157 = fmul float %4007, %4002, !dbg !56
  %4158 = fmul float %4011, %4003, !dbg !56
  %4159 = fadd float %4157, %4158, !dbg !56
  %4160 = fmul float %4159, %3998, !dbg !56
  %4161 = fmul float %4020, %4015, !dbg !56
  %4162 = fmul float %4024, %4016, !dbg !56
  %4163 = fadd float %4161, %4162, !dbg !56
  %4164 = fmul float %4163, %3999, !dbg !56
  %4165 = fadd float %4160, %4164, !dbg !56
  %4166 = fmul float %4165, %3963, !dbg !56
  %4167 = fadd float %4156, %4166, !dbg !56
  %4168 = fmul float %4100, %4167, !dbg !56
  %4169 = fmul float %4046, %4039, !dbg !56
  %4170 = fmul float %4050, %4040, !dbg !56
  %4171 = fadd float %4169, %4170, !dbg !56
  %4172 = fmul float %4171, %4034, !dbg !56
  %4173 = fmul float %4059, %4054, !dbg !56
  %4174 = fmul float %4063, %4055, !dbg !56
  %4175 = fadd float %4173, %4174, !dbg !56
  %4176 = fmul float %4175, %4035, !dbg !56
  %4177 = fadd float %4172, %4176, !dbg !56
  %4178 = fmul float %4177, %4030, !dbg !56
  %4179 = fmul float %4076, %4071, !dbg !56
  %4180 = fmul float %4080, %4072, !dbg !56
  %4181 = fadd float %4179, %4180, !dbg !56
  %4182 = fmul float %4181, %4067, !dbg !56
  %4183 = fmul float %4089, %4084, !dbg !56
  %4184 = fmul float %4093, %4085, !dbg !56
  %4185 = fadd float %4183, %4184, !dbg !56
  %4186 = fmul float %4185, %4068, !dbg !56
  %4187 = fadd float %4182, %4186, !dbg !56
  %4188 = fmul float %4187, %4031, !dbg !56
  %4189 = fadd float %4178, %4188, !dbg !56
  %4190 = fmul float %4099, %4189, !dbg !56
  %4191 = fadd float %4168, %4190, !dbg !56
  %4192 = fmul float %4097, %4191, !dbg !56
  %4193 = fadd float %4146, %4192, !dbg !56
  %hprod764 = fmul float %4094, %4095, !dbg !56
  %4194 = fmul float %4193, %hprod764, !dbg !56
  store float %4194, float addrspace(5)* %4096, align 4, !dbg !56
  %.elt948 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 0, !dbg !56
  %.unpack949 = load float, float addrspace(5)* %.elt948, align 4, !dbg !56
  %.elt950 = getelementptr inbounds %5, %5 addrspace(5)* %sample_4457824, i32 0, i32 1, !dbg !56
  %.unpack951 = load float, float addrspace(5)* %.elt950, align 4, !dbg !56
  %param_weight_4458810.repack = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 0, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4458810.repack, align 4, !dbg !56
  %param_weight_4458810.repack952 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 1, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4458810.repack952, align 4, !dbg !56
  %param_weight_4458810.repack953 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 2, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4458810.repack953, align 4, !dbg !56
  %param_weight_4458810.repack954 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 3, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4458810.repack954, align 4, !dbg !56
  %param_weight_4458810.repack955 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 4, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4458810.repack955, align 4, !dbg !56
  %param_weight_4458810.repack956 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 5, !dbg !56
  store float 0.000000e+00, float addrspace(5)* %param_weight_4458810.repack956, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %slice_offset_4458918, align 4, !dbg !56
  store i32 0, i32 addrspace(5)* %dim_4458788, align 4, !dbg !56
  br label %expr_true403, !dbg !74

expr_false386:                                    ; preds = %continue420
  %.elt957 = getelementptr inbounds %5, %5 addrspace(5)* %3385, i32 0, i32 0, !dbg !75
  %.unpack958 = load float, float addrspace(5)* %.elt957, align 8, !dbg !75
  %.elt959 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 2, i32 1, !dbg !75
  %.unpack960 = load float, float addrspace(5)* %.elt959, align 4, !dbg !75
  %.elt961 = getelementptr inbounds %3, %3 addrspace(5)* %3380, i32 0, i32 0, i32 0, !dbg !75
  %.unpack962 = load i32, i32 addrspace(5)* %.elt961, align 8, !dbg !75
  %.elt963 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 4, i32 0, i32 1, !dbg !75
  %.unpack964 = load i32, i32 addrspace(5)* %.elt963, align 4, !dbg !75
  %4195 = fmul float %.unpack949, %.unpack958, !dbg !75
  %4196 = sitofp i32 %.unpack962 to float, !dbg !75
  %4197 = fadd float %4196, -2.000000e+00, !dbg !75
  %4198 = fcmp olt float %4195, %4197, !dbg !75
  %4199 = select i1 %4198, float %4195, float %4197, !dbg !75
  %4200 = call float @__ocml_floor_f32(float %4199), !dbg !75
  %4201 = fmul float %.unpack951, %.unpack960, !dbg !55
  %4202 = sitofp i32 %.unpack964 to float, !dbg !55
  %4203 = fadd float %4202, -2.000000e+00, !dbg !55
  %4204 = fcmp olt float %4201, %4203, !dbg !55
  %4205 = select i1 %4204, float %4201, float %4203, !dbg !55
  %4206 = call float @__ocml_floor_f32(float %4205), !dbg !55
  %4207 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %4208 = load i32, i32 addrspace(5)* %3400, align 4, !dbg !56
  %4209 = load i32, i32 addrspace(5)* %slice_offset_4458918, align 4, !dbg !56
  %4210 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %4211 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4212 = getelementptr inbounds [0 x i32], [0 x i32]* %4211, i64 0, i64 2, !dbg !56
  %4213 = load i32, i32* %4212, align 4, !dbg !56
  %4214 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 4, !dbg !56
  %4215 = addrspacecast float addrspace(5)* %4214 to float*, !dbg !56
  %4216 = load float, float* %4215, align 4, !dbg !56
  %4217 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 5, !dbg !56
  %4218 = addrspacecast float addrspace(5)* %4217 to float*, !dbg !56
  %4219 = load float, float* %4218, align 4, !dbg !56
  %4220 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4221 = getelementptr inbounds [0 x i32], [0 x i32]* %4220, i64 0, i64 1, !dbg !56
  %4222 = load i32, i32* %4221, align 4, !dbg !56
  %4223 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 2, !dbg !56
  %4224 = addrspacecast float addrspace(5)* %4223 to float*, !dbg !56
  %4225 = load float, float* %4224, align 4, !dbg !56
  %4226 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 3, !dbg !56
  %4227 = addrspacecast float addrspace(5)* %4226 to float*, !dbg !56
  %4228 = load float, float* %4227, align 4, !dbg !56
  %4229 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4230 = getelementptr inbounds [0 x i32], [0 x i32]* %4229, i64 0, i64 0, !dbg !56
  %4231 = load i32, i32* %4230, align 4, !dbg !56
  %4232 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 0, !dbg !56
  %4233 = addrspacecast float addrspace(5)* %4232 to float*, !dbg !56
  %4234 = load float, float* %4233, align 4, !dbg !56
  %4235 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 1, !dbg !56
  %4236 = addrspacecast float addrspace(5)* %4235 to float*, !dbg !56
  %4237 = load float, float* %4236, align 4, !dbg !56
  %4238 = fptosi float %4200 to i32, !dbg !56
  %4239 = fptosi float %4206 to i32, !dbg !56
  %4240 = mul nsw i32 %4207, %4239, !dbg !56
  %index765 = add nsw i32 %4240, %4238, !dbg !56
  %size766 = mul nsw i32 %4207, %4208, !dbg !56
  %4241 = mul nsw i32 %4209, %size766, !dbg !56
  %4242 = add nsw i32 %index765, %4241, !dbg !56
  %4243 = sext i32 %4242 to i64, !dbg !56
  %4244 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4243, !dbg !56
  %4245 = load float, float* %4244, align 4, !dbg !56
  %4246 = mul nsw i32 %4231, %size766, !dbg !56
  %i1767 = add nsw i32 %4242, %4246, !dbg !56
  %4247 = sext i32 %i1767 to i64, !dbg !56
  %4248 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4247, !dbg !56
  %4249 = load float, float* %4248, align 4, !dbg !56
  %4250 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4251 = getelementptr inbounds [0 x i32], [0 x i32]* %4250, i64 0, i64 0, !dbg !56
  %4252 = load i32, i32* %4251, align 4, !dbg !56
  %4253 = load float, float* %4233, align 4, !dbg !56
  %4254 = load float, float* %4236, align 4, !dbg !56
  %4255 = mul nsw i32 %4222, %size766, !dbg !56
  %i1768 = add nsw i32 %4242, %4255, !dbg !56
  %4256 = sext i32 %i1768 to i64, !dbg !56
  %4257 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4256, !dbg !56
  %4258 = load float, float* %4257, align 4, !dbg !56
  %4259 = mul nsw i32 %4252, %size766, !dbg !56
  %i1769 = add nsw i32 %i1768, %4259, !dbg !56
  %4260 = sext i32 %i1769 to i64, !dbg !56
  %4261 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4260, !dbg !56
  %4262 = load float, float* %4261, align 4, !dbg !56
  %4263 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4264 = getelementptr inbounds [0 x i32], [0 x i32]* %4263, i64 0, i64 1, !dbg !56
  %4265 = load i32, i32* %4264, align 4, !dbg !56
  %4266 = load float, float* %4224, align 4, !dbg !56
  %4267 = load float, float* %4227, align 4, !dbg !56
  %4268 = getelementptr inbounds [0 x i32], [0 x i32]* %4263, i64 0, i64 0, !dbg !56
  %4269 = load i32, i32* %4268, align 4, !dbg !56
  %4270 = load float, float* %4233, align 4, !dbg !56
  %4271 = load float, float* %4236, align 4, !dbg !56
  %4272 = mul nsw i32 %4213, %size766, !dbg !56
  %i1770 = add nsw i32 %4242, %4272, !dbg !56
  %4273 = sext i32 %i1770 to i64, !dbg !56
  %4274 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4273, !dbg !56
  %4275 = load float, float* %4274, align 4, !dbg !56
  %4276 = mul nsw i32 %4269, %size766, !dbg !56
  %i1771 = add nsw i32 %i1770, %4276, !dbg !56
  %4277 = sext i32 %i1771 to i64, !dbg !56
  %4278 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4277, !dbg !56
  %4279 = load float, float* %4278, align 4, !dbg !56
  %4280 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4281 = getelementptr inbounds [0 x i32], [0 x i32]* %4280, i64 0, i64 0, !dbg !56
  %4282 = load i32, i32* %4281, align 4, !dbg !56
  %4283 = load float, float* %4233, align 4, !dbg !56
  %4284 = load float, float* %4236, align 4, !dbg !56
  %4285 = mul nsw i32 %4265, %size766, !dbg !56
  %i1772 = add nsw i32 %i1770, %4285, !dbg !56
  %4286 = sext i32 %i1772 to i64, !dbg !56
  %4287 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4286, !dbg !56
  %4288 = load float, float* %4287, align 4, !dbg !56
  %4289 = mul nsw i32 %4282, %size766, !dbg !56
  %i1773 = add nsw i32 %i1772, %4289, !dbg !56
  %4290 = sext i32 %i1773 to i64, !dbg !56
  %4291 = getelementptr inbounds [0 x float], [0 x float]* %4210, i64 0, i64 %4290, !dbg !56
  %4292 = load float, float* %4291, align 4, !dbg !56
  %4293 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %4294 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4295 = getelementptr inbounds [0 x i32], [0 x i32]* %4294, i64 0, i64 2, !dbg !56
  %4296 = load i32, i32* %4295, align 4, !dbg !56
  %4297 = load float, float* %4215, align 4, !dbg !56
  %4298 = load float, float* %4218, align 4, !dbg !56
  %4299 = getelementptr inbounds [0 x i32], [0 x i32]* %4294, i64 0, i64 1, !dbg !56
  %4300 = load i32, i32* %4299, align 4, !dbg !56
  %4301 = load float, float* %4224, align 4, !dbg !56
  %4302 = load float, float* %4227, align 4, !dbg !56
  %4303 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4304 = getelementptr inbounds [0 x i32], [0 x i32]* %4303, i64 0, i64 0, !dbg !56
  %4305 = load i32, i32* %4304, align 4, !dbg !56
  %4306 = load float, float* %4233, align 4, !dbg !56
  %4307 = load float, float* %4236, align 4, !dbg !56
  %4308 = getelementptr inbounds [0 x float], [0 x float]* %4293, i64 0, i64 1, !dbg !56
  %4309 = sext i32 %4242 to i64, !dbg !56
  %4310 = getelementptr inbounds float, float* %4308, i64 %4309, !dbg !56
  %4311 = load float, float* %4310, align 4, !dbg !56
  %4312 = mul nsw i32 %4305, %size766, !dbg !56
  %i1774 = add nsw i32 %4242, %4312, !dbg !56
  %4313 = sext i32 %i1774 to i64, !dbg !56
  %4314 = getelementptr inbounds float, float* %4308, i64 %4313, !dbg !56
  %4315 = load float, float* %4314, align 4, !dbg !56
  %4316 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4317 = getelementptr inbounds [0 x i32], [0 x i32]* %4316, i64 0, i64 0, !dbg !56
  %4318 = load i32, i32* %4317, align 4, !dbg !56
  %4319 = load float, float* %4233, align 4, !dbg !56
  %4320 = load float, float* %4236, align 4, !dbg !56
  %4321 = mul nsw i32 %4300, %size766, !dbg !56
  %i1775 = add nsw i32 %4242, %4321, !dbg !56
  %4322 = sext i32 %i1775 to i64, !dbg !56
  %4323 = getelementptr inbounds float, float* %4308, i64 %4322, !dbg !56
  %4324 = load float, float* %4323, align 4, !dbg !56
  %4325 = mul nsw i32 %4318, %size766, !dbg !56
  %i1776 = add nsw i32 %i1775, %4325, !dbg !56
  %4326 = sext i32 %i1776 to i64, !dbg !56
  %4327 = getelementptr inbounds float, float* %4308, i64 %4326, !dbg !56
  %4328 = load float, float* %4327, align 4, !dbg !56
  %4329 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4330 = getelementptr inbounds [0 x i32], [0 x i32]* %4329, i64 0, i64 1, !dbg !56
  %4331 = load i32, i32* %4330, align 4, !dbg !56
  %4332 = load float, float* %4224, align 4, !dbg !56
  %4333 = load float, float* %4227, align 4, !dbg !56
  %4334 = getelementptr inbounds [0 x i32], [0 x i32]* %4329, i64 0, i64 0, !dbg !56
  %4335 = load i32, i32* %4334, align 4, !dbg !56
  %4336 = load float, float* %4233, align 4, !dbg !56
  %4337 = load float, float* %4236, align 4, !dbg !56
  %4338 = mul nsw i32 %4296, %size766, !dbg !56
  %i1777 = add nsw i32 %4242, %4338, !dbg !56
  %4339 = sext i32 %i1777 to i64, !dbg !56
  %4340 = getelementptr inbounds float, float* %4308, i64 %4339, !dbg !56
  %4341 = load float, float* %4340, align 4, !dbg !56
  %4342 = mul nsw i32 %4335, %size766, !dbg !56
  %i1778 = add nsw i32 %i1777, %4342, !dbg !56
  %4343 = sext i32 %i1778 to i64, !dbg !56
  %4344 = getelementptr inbounds float, float* %4308, i64 %4343, !dbg !56
  %4345 = load float, float* %4344, align 4, !dbg !56
  %4346 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4347 = getelementptr inbounds [0 x i32], [0 x i32]* %4346, i64 0, i64 0, !dbg !56
  %4348 = load i32, i32* %4347, align 4, !dbg !56
  %4349 = load float, float* %4233, align 4, !dbg !56
  %4350 = load float, float* %4236, align 4, !dbg !56
  %4351 = mul nsw i32 %4331, %size766, !dbg !56
  %i1779 = add nsw i32 %i1777, %4351, !dbg !56
  %4352 = sext i32 %i1779 to i64, !dbg !56
  %4353 = getelementptr inbounds float, float* %4308, i64 %4352, !dbg !56
  %4354 = load float, float* %4353, align 4, !dbg !56
  %4355 = mul nsw i32 %4348, %size766, !dbg !56
  %i1780 = add nsw i32 %i1779, %4355, !dbg !56
  %4356 = sext i32 %i1780 to i64, !dbg !56
  %4357 = getelementptr inbounds float, float* %4308, i64 %4356, !dbg !56
  %4358 = load float, float* %4357, align 4, !dbg !56
  %4359 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %4360 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %4361 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4362 = getelementptr inbounds [0 x i32], [0 x i32]* %4361, i64 0, i64 2, !dbg !56
  %4363 = load i32, i32* %4362, align 4, !dbg !56
  %4364 = load float, float* %4215, align 4, !dbg !56
  %4365 = load float, float* %4218, align 4, !dbg !56
  %4366 = getelementptr inbounds [0 x i32], [0 x i32]* %4361, i64 0, i64 1, !dbg !56
  %4367 = load i32, i32* %4366, align 4, !dbg !56
  %4368 = load float, float* %4224, align 4, !dbg !56
  %4369 = load float, float* %4227, align 4, !dbg !56
  %4370 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4371 = getelementptr inbounds [0 x i32], [0 x i32]* %4370, i64 0, i64 0, !dbg !56
  %4372 = load i32, i32* %4371, align 4, !dbg !56
  %4373 = load float, float* %4233, align 4, !dbg !56
  %4374 = load float, float* %4236, align 4, !dbg !56
  %4375 = sext i32 %4360 to i64, !dbg !56
  %4376 = getelementptr inbounds [0 x float], [0 x float]* %4359, i64 0, i64 %4375, !dbg !56
  %4377 = sext i32 %4242 to i64, !dbg !56
  %4378 = getelementptr inbounds float, float* %4376, i64 %4377, !dbg !56
  %4379 = load float, float* %4378, align 4, !dbg !56
  %4380 = mul nsw i32 %4372, %size766, !dbg !56
  %i1781 = add nsw i32 %4242, %4380, !dbg !56
  %4381 = sext i32 %i1781 to i64, !dbg !56
  %4382 = getelementptr inbounds float, float* %4376, i64 %4381, !dbg !56
  %4383 = load float, float* %4382, align 4, !dbg !56
  %4384 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4385 = getelementptr inbounds [0 x i32], [0 x i32]* %4384, i64 0, i64 0, !dbg !56
  %4386 = load i32, i32* %4385, align 4, !dbg !56
  %4387 = load float, float* %4233, align 4, !dbg !56
  %4388 = load float, float* %4236, align 4, !dbg !56
  %4389 = mul nsw i32 %4367, %size766, !dbg !56
  %i1782 = add nsw i32 %4242, %4389, !dbg !56
  %4390 = sext i32 %i1782 to i64, !dbg !56
  %4391 = getelementptr inbounds float, float* %4376, i64 %4390, !dbg !56
  %4392 = load float, float* %4391, align 4, !dbg !56
  %4393 = mul nsw i32 %4386, %size766, !dbg !56
  %i1783 = add nsw i32 %i1782, %4393, !dbg !56
  %4394 = sext i32 %i1783 to i64, !dbg !56
  %4395 = getelementptr inbounds float, float* %4376, i64 %4394, !dbg !56
  %4396 = load float, float* %4395, align 4, !dbg !56
  %4397 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4398 = getelementptr inbounds [0 x i32], [0 x i32]* %4397, i64 0, i64 1, !dbg !56
  %4399 = load i32, i32* %4398, align 4, !dbg !56
  %4400 = load float, float* %4224, align 4, !dbg !56
  %4401 = load float, float* %4227, align 4, !dbg !56
  %4402 = getelementptr inbounds [0 x i32], [0 x i32]* %4397, i64 0, i64 0, !dbg !56
  %4403 = load i32, i32* %4402, align 4, !dbg !56
  %4404 = load float, float* %4233, align 4, !dbg !56
  %4405 = load float, float* %4236, align 4, !dbg !56
  %4406 = mul nsw i32 %4363, %size766, !dbg !56
  %i1784 = add nsw i32 %4242, %4406, !dbg !56
  %4407 = sext i32 %i1784 to i64, !dbg !56
  %4408 = getelementptr inbounds float, float* %4376, i64 %4407, !dbg !56
  %4409 = load float, float* %4408, align 4, !dbg !56
  %4410 = mul nsw i32 %4403, %size766, !dbg !56
  %i1785 = add nsw i32 %i1784, %4410, !dbg !56
  %4411 = sext i32 %i1785 to i64, !dbg !56
  %4412 = getelementptr inbounds float, float* %4376, i64 %4411, !dbg !56
  %4413 = load float, float* %4412, align 4, !dbg !56
  %4414 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4415 = getelementptr inbounds [0 x i32], [0 x i32]* %4414, i64 0, i64 0, !dbg !56
  %4416 = load i32, i32* %4415, align 4, !dbg !56
  %4417 = load float, float* %4233, align 4, !dbg !56
  %4418 = load float, float* %4236, align 4, !dbg !56
  %4419 = mul nsw i32 %4399, %size766, !dbg !56
  %i1786 = add nsw i32 %i1784, %4419, !dbg !56
  %4420 = sext i32 %i1786 to i64, !dbg !56
  %4421 = getelementptr inbounds float, float* %4376, i64 %4420, !dbg !56
  %4422 = load float, float* %4421, align 4, !dbg !56
  %4423 = mul nsw i32 %4416, %size766, !dbg !56
  %i1787 = add nsw i32 %i1786, %4423, !dbg !56
  %4424 = sext i32 %i1787 to i64, !dbg !56
  %4425 = getelementptr inbounds float, float* %4376, i64 %4424, !dbg !56
  %4426 = load float, float* %4425, align 4, !dbg !56
  %4427 = load [0 x float]*, [0 x float]* addrspace(5)* %3403, align 8, !dbg !56
  %4428 = load i32, i32 addrspace(5)* %3398, align 8, !dbg !56
  %4429 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4430 = getelementptr inbounds [0 x i32], [0 x i32]* %4429, i64 0, i64 2, !dbg !56
  %4431 = load i32, i32* %4430, align 4, !dbg !56
  %4432 = load float, float* %4215, align 4, !dbg !56
  %4433 = load float, float* %4218, align 4, !dbg !56
  %4434 = getelementptr inbounds [0 x i32], [0 x i32]* %4429, i64 0, i64 1, !dbg !56
  %4435 = load i32, i32* %4434, align 4, !dbg !56
  %4436 = load float, float* %4224, align 4, !dbg !56
  %4437 = load float, float* %4227, align 4, !dbg !56
  %4438 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4439 = getelementptr inbounds [0 x i32], [0 x i32]* %4438, i64 0, i64 0, !dbg !56
  %4440 = load i32, i32* %4439, align 4, !dbg !56
  %4441 = load float, float* %4233, align 4, !dbg !56
  %4442 = load float, float* %4236, align 4, !dbg !56
  %4443 = add nsw i32 %4428, 1, !dbg !56
  %4444 = sext i32 %4443 to i64, !dbg !56
  %4445 = getelementptr inbounds [0 x float], [0 x float]* %4427, i64 0, i64 %4444, !dbg !56
  %4446 = sext i32 %4242 to i64, !dbg !56
  %4447 = getelementptr inbounds float, float* %4445, i64 %4446, !dbg !56
  %4448 = load float, float* %4447, align 4, !dbg !56
  %4449 = mul nsw i32 %4440, %size766, !dbg !56
  %i1788 = add nsw i32 %4242, %4449, !dbg !56
  %4450 = sext i32 %i1788 to i64, !dbg !56
  %4451 = getelementptr inbounds float, float* %4445, i64 %4450, !dbg !56
  %4452 = load float, float* %4451, align 4, !dbg !56
  %4453 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4454 = getelementptr inbounds [0 x i32], [0 x i32]* %4453, i64 0, i64 0, !dbg !56
  %4455 = load i32, i32* %4454, align 4, !dbg !56
  %4456 = load float, float* %4233, align 4, !dbg !56
  %4457 = load float, float* %4236, align 4, !dbg !56
  %4458 = mul nsw i32 %4435, %size766, !dbg !56
  %i1789 = add nsw i32 %4242, %4458, !dbg !56
  %4459 = sext i32 %i1789 to i64, !dbg !56
  %4460 = getelementptr inbounds float, float* %4445, i64 %4459, !dbg !56
  %4461 = load float, float* %4460, align 4, !dbg !56
  %4462 = mul nsw i32 %4455, %size766, !dbg !56
  %i1790 = add nsw i32 %i1789, %4462, !dbg !56
  %4463 = sext i32 %i1790 to i64, !dbg !56
  %4464 = getelementptr inbounds float, float* %4445, i64 %4463, !dbg !56
  %4465 = load float, float* %4464, align 4, !dbg !56
  %4466 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4467 = getelementptr inbounds [0 x i32], [0 x i32]* %4466, i64 0, i64 1, !dbg !56
  %4468 = load i32, i32* %4467, align 4, !dbg !56
  %4469 = load float, float* %4224, align 4, !dbg !56
  %4470 = load float, float* %4227, align 4, !dbg !56
  %4471 = getelementptr inbounds [0 x i32], [0 x i32]* %4466, i64 0, i64 0, !dbg !56
  %4472 = load i32, i32* %4471, align 4, !dbg !56
  %4473 = load float, float* %4233, align 4, !dbg !56
  %4474 = load float, float* %4236, align 4, !dbg !56
  %4475 = mul nsw i32 %4431, %size766, !dbg !56
  %i1791 = add nsw i32 %4242, %4475, !dbg !56
  %4476 = sext i32 %i1791 to i64, !dbg !56
  %4477 = getelementptr inbounds float, float* %4445, i64 %4476, !dbg !56
  %4478 = load float, float* %4477, align 4, !dbg !56
  %4479 = mul nsw i32 %4472, %size766, !dbg !56
  %i1792 = add nsw i32 %i1791, %4479, !dbg !56
  %4480 = sext i32 %i1792 to i64, !dbg !56
  %4481 = getelementptr inbounds float, float* %4445, i64 %4480, !dbg !56
  %4482 = load float, float* %4481, align 4, !dbg !56
  %4483 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !56
  %4484 = getelementptr inbounds [0 x i32], [0 x i32]* %4483, i64 0, i64 0, !dbg !56
  %4485 = load i32, i32* %4484, align 4, !dbg !56
  %4486 = load float, float* %4233, align 4, !dbg !56
  %4487 = load float, float* %4236, align 4, !dbg !56
  %4488 = mul nsw i32 %4468, %size766, !dbg !56
  %i1793 = add nsw i32 %i1791, %4488, !dbg !56
  %4489 = sext i32 %i1793 to i64, !dbg !56
  %4490 = getelementptr inbounds float, float* %4445, i64 %4489, !dbg !56
  %4491 = load float, float* %4490, align 4, !dbg !56
  %4492 = mul nsw i32 %4485, %size766, !dbg !56
  %i1794 = add nsw i32 %i1793, %4492, !dbg !56
  %4493 = sext i32 %i1794 to i64, !dbg !56
  %4494 = getelementptr inbounds float, float* %4445, i64 %4493, !dbg !56
  %4495 = load float, float* %4494, align 4, !dbg !56
  %4496 = load float, float addrspace(5)* %3690, align 8, !dbg !56
  %4497 = load float, float addrspace(5)* %3692, align 4, !dbg !56
  %4498 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 2, !dbg !56
  %4499 = fsub float %4201, %4206, !dbg !56
  %4500 = fsub float 1.000000e+00, %4499, !dbg !56
  %4501 = fsub float %4195, %4200, !dbg !56
  %4502 = fsub float 1.000000e+00, %4501, !dbg !56
  %4503 = fmul float %4245, %4234, !dbg !56
  %4504 = fmul float %4249, %4237, !dbg !56
  %4505 = fadd float %4503, %4504, !dbg !56
  %4506 = fmul float %4505, %4225, !dbg !56
  %4507 = fmul float %4258, %4253, !dbg !56
  %4508 = fmul float %4262, %4254, !dbg !56
  %4509 = fadd float %4507, %4508, !dbg !56
  %4510 = fmul float %4509, %4228, !dbg !56
  %4511 = fadd float %4506, %4510, !dbg !56
  %4512 = fmul float %4511, %4216, !dbg !56
  %4513 = fmul float %4275, %4270, !dbg !56
  %4514 = fmul float %4279, %4271, !dbg !56
  %4515 = fadd float %4513, %4514, !dbg !56
  %4516 = fmul float %4515, %4266, !dbg !56
  %4517 = fmul float %4288, %4283, !dbg !56
  %4518 = fmul float %4292, %4284, !dbg !56
  %4519 = fadd float %4517, %4518, !dbg !56
  %4520 = fmul float %4519, %4267, !dbg !56
  %4521 = fadd float %4516, %4520, !dbg !56
  %4522 = fmul float %4521, %4219, !dbg !56
  %4523 = fadd float %4512, %4522, !dbg !56
  %4524 = fmul float %4502, %4523, !dbg !56
  %4525 = fmul float %4311, %4306, !dbg !56
  %4526 = fmul float %4315, %4307, !dbg !56
  %4527 = fadd float %4525, %4526, !dbg !56
  %4528 = fmul float %4527, %4301, !dbg !56
  %4529 = fmul float %4324, %4319, !dbg !56
  %4530 = fmul float %4328, %4320, !dbg !56
  %4531 = fadd float %4529, %4530, !dbg !56
  %4532 = fmul float %4531, %4302, !dbg !56
  %4533 = fadd float %4528, %4532, !dbg !56
  %4534 = fmul float %4533, %4297, !dbg !56
  %4535 = fmul float %4341, %4336, !dbg !56
  %4536 = fmul float %4345, %4337, !dbg !56
  %4537 = fadd float %4535, %4536, !dbg !56
  %4538 = fmul float %4537, %4332, !dbg !56
  %4539 = fmul float %4354, %4349, !dbg !56
  %4540 = fmul float %4358, %4350, !dbg !56
  %4541 = fadd float %4539, %4540, !dbg !56
  %4542 = fmul float %4541, %4333, !dbg !56
  %4543 = fadd float %4538, %4542, !dbg !56
  %4544 = fmul float %4543, %4298, !dbg !56
  %4545 = fadd float %4534, %4544, !dbg !56
  %4546 = fmul float %4501, %4545, !dbg !56
  %4547 = fadd float %4524, %4546, !dbg !56
  %4548 = fmul float %4500, %4547, !dbg !56
  %4549 = fmul float %4379, %4373, !dbg !56
  %4550 = fmul float %4383, %4374, !dbg !56
  %4551 = fadd float %4549, %4550, !dbg !56
  %4552 = fmul float %4551, %4368, !dbg !56
  %4553 = fmul float %4392, %4387, !dbg !56
  %4554 = fmul float %4396, %4388, !dbg !56
  %4555 = fadd float %4553, %4554, !dbg !56
  %4556 = fmul float %4555, %4369, !dbg !56
  %4557 = fadd float %4552, %4556, !dbg !56
  %4558 = fmul float %4557, %4364, !dbg !56
  %4559 = fmul float %4409, %4404, !dbg !56
  %4560 = fmul float %4413, %4405, !dbg !56
  %4561 = fadd float %4559, %4560, !dbg !56
  %4562 = fmul float %4561, %4400, !dbg !56
  %4563 = fmul float %4422, %4417, !dbg !56
  %4564 = fmul float %4426, %4418, !dbg !56
  %4565 = fadd float %4563, %4564, !dbg !56
  %4566 = fmul float %4565, %4401, !dbg !56
  %4567 = fadd float %4562, %4566, !dbg !56
  %4568 = fmul float %4567, %4365, !dbg !56
  %4569 = fadd float %4558, %4568, !dbg !56
  %4570 = fmul float %4502, %4569, !dbg !56
  %4571 = fmul float %4448, %4441, !dbg !56
  %4572 = fmul float %4452, %4442, !dbg !56
  %4573 = fadd float %4571, %4572, !dbg !56
  %4574 = fmul float %4573, %4436, !dbg !56
  %4575 = fmul float %4461, %4456, !dbg !56
  %4576 = fmul float %4465, %4457, !dbg !56
  %4577 = fadd float %4575, %4576, !dbg !56
  %4578 = fmul float %4577, %4437, !dbg !56
  %4579 = fadd float %4574, %4578, !dbg !56
  %4580 = fmul float %4579, %4432, !dbg !56
  %4581 = fmul float %4478, %4473, !dbg !56
  %4582 = fmul float %4482, %4474, !dbg !56
  %4583 = fadd float %4581, %4582, !dbg !56
  %4584 = fmul float %4583, %4469, !dbg !56
  %4585 = fmul float %4491, %4486, !dbg !56
  %4586 = fmul float %4495, %4487, !dbg !56
  %4587 = fadd float %4585, %4586, !dbg !56
  %4588 = fmul float %4587, %4470, !dbg !56
  %4589 = fadd float %4584, %4588, !dbg !56
  %4590 = fmul float %4589, %4433, !dbg !56
  %4591 = fadd float %4580, %4590, !dbg !56
  %4592 = fmul float %4501, %4591, !dbg !56
  %4593 = fadd float %4570, %4592, !dbg !56
  %4594 = fmul float %4499, %4593, !dbg !56
  %4595 = fadd float %4548, %4594, !dbg !56
  %hprod795 = fmul float %4496, %4497, !dbg !56
  %4596 = fmul float %4595, %hprod795, !dbg !56
  store float %4596, float addrspace(5)* %4498, align 4, !dbg !56
  %4597 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 0, i32 2, !dbg !56
  %.elt965 = getelementptr inbounds %5, %5 addrspace(5)* %4597, i32 0, i32 0, !dbg !56
  %.unpack966 = load float, float addrspace(5)* %.elt965, align 8, !dbg !56
  %.elt967 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 0, i32 2, i32 1, !dbg !56
  %.unpack968 = load float, float addrspace(5)* %.elt967, align 4, !dbg !56
  %.elt969 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 0, i32 0, i32 0, !dbg !56
  %.unpack970 = load i32, i32 addrspace(5)* %.elt969, align 8, !dbg !56
  %.elt971 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 0, i32 0, i32 1, !dbg !56
  %.unpack972 = load i32, i32 addrspace(5)* %.elt971, align 4, !dbg !56
  %4598 = fmul float %3364, %.unpack966, !dbg !56
  %4599 = sitofp i32 %.unpack970 to float, !dbg !56
  %4600 = fadd float %4599, -2.000000e+00, !dbg !56
  %4601 = fcmp olt float %4598, %4600, !dbg !56
  %4602 = select i1 %4601, float %4598, float %4600, !dbg !56
  %4603 = call float @__ocml_floor_f32(float %4602), !dbg !56
  %4604 = fmul float %3351, %.unpack968, !dbg !55
  %4605 = sitofp i32 %.unpack972 to float, !dbg !55
  %4606 = fadd float %4605, -2.000000e+00, !dbg !55
  %4607 = fcmp olt float %4604, %4606, !dbg !55
  %4608 = select i1 %4607, float %4604, float %4606, !dbg !55
  %4609 = call float @__ocml_floor_f32(float %4608), !dbg !55
  %4610 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 0, i32 0, i32 0, !dbg !56
  %4611 = load i32, i32 addrspace(5)* %4610, align 8, !dbg !56
  %4612 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 0, i32 7, !dbg !56
  %4613 = load [0 x float]*, [0 x float]* addrspace(5)* %4612, align 8, !dbg !56
  %4614 = fptosi float %4603 to i32, !dbg !56
  %4615 = fptosi float %4609 to i32, !dbg !56
  %4616 = mul nsw i32 %4611, %4615, !dbg !56
  %index796 = add nsw i32 %4616, %4614, !dbg !56
  %4617 = sext i32 %index796 to i64, !dbg !56
  %4618 = getelementptr inbounds [0 x float], [0 x float]* %4613, i64 0, i64 %4617, !dbg !56
  %4619 = load float, float* %4618, align 4, !dbg !56
  %4620 = load [0 x float]*, [0 x float]* addrspace(5)* %4612, align 8, !dbg !56
  %4621 = getelementptr inbounds [0 x float], [0 x float]* %4620, i64 0, i64 1, !dbg !56
  %4622 = sext i32 %index796 to i64, !dbg !56
  %4623 = getelementptr inbounds float, float* %4621, i64 %4622, !dbg !56
  %4624 = load float, float* %4623, align 4, !dbg !56
  %4625 = load i32, i32 addrspace(5)* %4610, align 8, !dbg !56
  %4626 = sext i32 %4625 to i64, !dbg !56
  %4627 = getelementptr inbounds [0 x float], [0 x float]* %4620, i64 0, i64 %4626, !dbg !56
  %4628 = sext i32 %index796 to i64, !dbg !56
  %4629 = getelementptr inbounds float, float* %4627, i64 %4628, !dbg !56
  %4630 = load float, float* %4629, align 4, !dbg !56
  %4631 = load [0 x float]*, [0 x float]* addrspace(5)* %4612, align 8, !dbg !56
  %4632 = load i32, i32 addrspace(5)* %4610, align 8, !dbg !56
  %4633 = add nsw i32 %4632, 1, !dbg !56
  %4634 = sext i32 %4633 to i64, !dbg !56
  %4635 = getelementptr inbounds [0 x float], [0 x float]* %4631, i64 0, i64 %4634, !dbg !56
  %4636 = sext i32 %index796 to i64, !dbg !56
  %4637 = getelementptr inbounds float, float* %4635, i64 %4636, !dbg !56
  %4638 = load float, float* %4637, align 4, !dbg !56
  %4639 = getelementptr inbounds %5, %5 addrspace(5)* %4597, i32 0, i32 0, !dbg !56
  %4640 = load float, float addrspace(5)* %4639, align 8, !dbg !56
  %4641 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 0, i32 2, i32 1, !dbg !56
  %4642 = load float, float addrspace(5)* %4641, align 4, !dbg !56
  %4643 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 1, !dbg !56
  %4644 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 1, i32 2, !dbg !56
  %.elt973 = getelementptr inbounds %5, %5 addrspace(5)* %4644, i32 0, i32 0, !dbg !56
  %.unpack974 = load float, float addrspace(5)* %.elt973, align 8, !dbg !56
  %.elt975 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 1, i32 2, i32 1, !dbg !56
  %.unpack976 = load float, float addrspace(5)* %.elt975, align 4, !dbg !56
  %.elt977 = getelementptr inbounds %3, %3 addrspace(5)* %4643, i32 0, i32 0, i32 0, !dbg !56
  %.unpack978 = load i32, i32 addrspace(5)* %.elt977, align 8, !dbg !56
  %.elt979 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 1, i32 0, i32 1, !dbg !56
  %.unpack980 = load i32, i32 addrspace(5)* %.elt979, align 4, !dbg !56
  %4645 = fmul float %2616, %.unpack974, !dbg !56
  %4646 = sitofp i32 %.unpack978 to float, !dbg !56
  %4647 = fadd float %4646, -2.000000e+00, !dbg !56
  %4648 = fcmp olt float %4645, %4647, !dbg !56
  %4649 = select i1 %4648, float %4645, float %4647, !dbg !56
  %4650 = call float @__ocml_floor_f32(float %4649), !dbg !56
  %4651 = fadd float %2613, 0x400921FB60000000, !dbg !55
  %4652 = fdiv float %4651, 0x401921FB60000000, !dbg !55
  %4653 = fmul float %4652, %.unpack976, !dbg !55
  %4654 = sitofp i32 %.unpack980 to float, !dbg !55
  %4655 = fadd float %4654, -2.000000e+00, !dbg !55
  %4656 = fcmp olt float %4653, %4655, !dbg !55
  %4657 = select i1 %4656, float %4653, float %4655, !dbg !55
  %4658 = call float @__ocml_floor_f32(float %4657), !dbg !55
  %4659 = fmul float %3364, 0x4033BD3CE0000000, !dbg !56
  %4660 = fmul float %4659, %3367, !dbg !56
  %4661 = fcmp ogt float %4660, 0x3EB0C6F7A0000000, !dbg !56
  %4662 = getelementptr inbounds %3, %3 addrspace(5)* %4643, i32 0, i32 0, i32 0, !dbg !56
  %4663 = load i32, i32 addrspace(5)* %4662, align 8, !dbg !56
  %4664 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 1, i32 7, !dbg !56
  %4665 = load [0 x float]*, [0 x float]* addrspace(5)* %4664, align 8, !dbg !56
  %4666 = fptosi float %4650 to i32, !dbg !56
  %4667 = fptosi float %4658 to i32, !dbg !56
  %4668 = mul nsw i32 %4663, %4667, !dbg !56
  %index797 = add nsw i32 %4668, %4666, !dbg !56
  %4669 = sext i32 %index797 to i64, !dbg !56
  %4670 = getelementptr inbounds [0 x float], [0 x float]* %4665, i64 0, i64 %4669, !dbg !56
  %4671 = load float, float* %4670, align 4, !dbg !56
  %4672 = load [0 x float]*, [0 x float]* addrspace(5)* %4664, align 8, !dbg !56
  %4673 = getelementptr inbounds [0 x float], [0 x float]* %4672, i64 0, i64 1, !dbg !56
  %4674 = sext i32 %index797 to i64, !dbg !56
  %4675 = getelementptr inbounds float, float* %4673, i64 %4674, !dbg !56
  %4676 = load float, float* %4675, align 4, !dbg !56
  %4677 = load i32, i32 addrspace(5)* %4662, align 8, !dbg !56
  %4678 = sext i32 %4677 to i64, !dbg !56
  %4679 = getelementptr inbounds [0 x float], [0 x float]* %4672, i64 0, i64 %4678, !dbg !56
  %4680 = sext i32 %index797 to i64, !dbg !56
  %4681 = getelementptr inbounds float, float* %4679, i64 %4680, !dbg !56
  %4682 = load float, float* %4681, align 4, !dbg !56
  %4683 = load [0 x float]*, [0 x float]* addrspace(5)* %4664, align 8, !dbg !56
  %4684 = load i32, i32 addrspace(5)* %4662, align 8, !dbg !56
  %4685 = add nsw i32 %4684, 1, !dbg !56
  %4686 = sext i32 %4685 to i64, !dbg !56
  %4687 = getelementptr inbounds [0 x float], [0 x float]* %4683, i64 0, i64 %4686, !dbg !56
  %4688 = sext i32 %index797 to i64, !dbg !56
  %4689 = getelementptr inbounds float, float* %4687, i64 %4688, !dbg !56
  %4690 = load float, float* %4689, align 4, !dbg !56
  %4691 = getelementptr inbounds %5, %5 addrspace(5)* %4644, i32 0, i32 0, !dbg !56
  %4692 = load float, float addrspace(5)* %4691, align 8, !dbg !56
  %4693 = getelementptr inbounds %7, %7 addrspace(5)* %_4455410, i32 0, i32 1, i32 2, i32 1, !dbg !56
  %4694 = load float, float addrspace(5)* %4693, align 4, !dbg !56
  %.elt981 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 0, !dbg !56
  %.unpack982 = load float, float addrspace(5)* %.elt981, align 4, !dbg !56
  %.elt983 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 1, !dbg !56
  %.unpack984 = load float, float addrspace(5)* %.elt983, align 4, !dbg !56
  %.elt985 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 2, !dbg !56
  %.unpack986 = load float, float addrspace(5)* %.elt985, align 4, !dbg !56
  %4695 = fsub float %4604, %4609, !dbg !56
  %4696 = fsub float 1.000000e+00, %4695, !dbg !56
  %4697 = fsub float %4598, %4603, !dbg !56
  %4698 = fsub float 1.000000e+00, %4697, !dbg !56
  %4699 = fmul float %4698, %4619, !dbg !56
  %4700 = fmul float %4697, %4624, !dbg !56
  %4701 = fadd float %4699, %4700, !dbg !56
  %4702 = fmul float %4696, %4701, !dbg !56
  %4703 = fmul float %4698, %4630, !dbg !56
  %4704 = fmul float %4697, %4638, !dbg !56
  %4705 = fadd float %4703, %4704, !dbg !56
  %4706 = fmul float %4695, %4705, !dbg !56
  %4707 = fadd float %4702, %4706, !dbg !56
  %hprod798 = fmul float %4640, %4642, !dbg !56
  %4708 = fmul float %4707, %hprod798, !dbg !56
  %4709 = fsub float %4653, %4658, !dbg !56
  %4710 = fsub float 1.000000e+00, %4709, !dbg !56
  %4711 = fsub float %4645, %4650, !dbg !56
  %4712 = fsub float 1.000000e+00, %4711, !dbg !56
  %4713 = fmul float %4712, %4671, !dbg !56
  %4714 = fmul float %4711, %4676, !dbg !56
  %4715 = fadd float %4713, %4714, !dbg !56
  %4716 = fmul float %4710, %4715, !dbg !56
  %4717 = fmul float %4712, %4682, !dbg !56
  %4718 = fmul float %4711, %4690, !dbg !56
  %4719 = fadd float %4717, %4718, !dbg !56
  %4720 = fmul float %4709, %4719, !dbg !56
  %4721 = fadd float %4716, %4720, !dbg !56
  %hprod799 = fmul float %4692, %4694, !dbg !56
  %4722 = fmul float %4721, %hprod799, !dbg !56
  %4723 = fmul float %4722, 4.000000e+00, !dbg !56
  %4724 = fdiv float %4708, %4723, !dbg !56
  %4725 = fmul float %.unpack982, %4724, !dbg !56
  %4726 = fmul float %.unpack984, %4724, !dbg !56
  %4727 = fmul float %.unpack986, %4724, !dbg !56
  %fr_4457822.repack987 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 0, !dbg !56
  store float %4725, float addrspace(5)* %fr_4457822.repack987, align 4, !dbg !56
  %fr_4457822.repack989 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 1, !dbg !56
  store float %4726, float addrspace(5)* %fr_4457822.repack989, align 4, !dbg !56
  %fr_4457822.repack991 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 2, !dbg !56
  store float %4727, float addrspace(5)* %fr_4457822.repack991, align 4, !dbg !56
  %phi.bo = fmul float %4660, 4.000000e+00, !dbg !56
  %maxf_cont402 = select i1 %4661, float %phi.bo, float 0x3ED0C6F7A0000000, !dbg !56
  %.elt993 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 0, !dbg !116
  %.unpack994 = load float, float addrspace(5)* %.elt993, align 4, !dbg !116
  %.elt995 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 1, !dbg !116
  %.unpack996 = load float, float addrspace(5)* %.elt995, align 4, !dbg !116
  %.elt997 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 2, !dbg !116
  %.unpack998 = load float, float addrspace(5)* %.elt997, align 4, !dbg !116
  %4728 = fsub float 1.000000e+00, %3344, !dbg !116
  %4729 = fmul float %4728, %3303, !dbg !116
  %4730 = fmul float %3344, %3327, !dbg !116
  %4731 = fadd float %4729, %4730, !dbg !116
  %4732 = fmul float %3346, %3348, !dbg !116
  %4733 = fmul float %4731, %4732, !dbg !116
  %4734 = fsub float 1.000000e+00, %2979, !dbg !116
  %4735 = fmul float %4734, %2938, !dbg !116
  %4736 = fmul float %2979, %2962, !dbg !116
  %4737 = fadd float %4735, %4736, !dbg !116
  %4738 = fmul float %2981, %2983, !dbg !116
  %4739 = fmul float %4737, %4738, !dbg !116
  %4740 = fmul float %4733, %4739, !dbg !116
  %4741 = fmul float %2589, %3369, !dbg !116
  %4742 = fmul float %2604, %3371, !dbg !116
  %4743 = fadd float %4741, %4742, !dbg !116
  %4744 = fmul float %2566, %3368, !dbg !116
  %4745 = fadd float %4743, %4744, !dbg !116
  %jacobian800 = fmul float %maxf_cont402, %4745, !dbg !116
  %pdf = fdiv float %4740, %jacobian800, !dbg !116
  %4746 = fdiv float 1.000000e+00, %pdf, !dbg !116
  %4747 = fmul float %.unpack994, %4746, !dbg !116
  %4748 = insertvalue %6 undef, float %4747, 0, !dbg !116
  %4749 = fmul float %.unpack996, %4746, !dbg !116
  %4750 = insertvalue %6 %4748, float %4749, 1, !dbg !116
  %4751 = fmul float %.unpack998, %4746, !dbg !116
  %4752 = insertvalue %6 %4750, float %4751, 2, !dbg !116
  %fr_4457822.repack999 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 0, !dbg !116
  store float %4747, float addrspace(5)* %fr_4457822.repack999, align 4, !dbg !116
  %fr_4457822.repack1001 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 1, !dbg !116
  store float %4749, float addrspace(5)* %fr_4457822.repack1001, align 4, !dbg !116
  %fr_4457822.repack1003 = getelementptr inbounds %6, %6 addrspace(5)* %fr_4457822, i32 0, i32 2, !dbg !116
  store float %4751, float addrspace(5)* %fr_4457822.repack1003, align 4, !dbg !116
  %4753 = insertvalue %11 undef, %6 %4752, 0, !dbg !116
  %4754 = fmul float %3369, %3376, !dbg !116
  %4755 = fsub float %4754, %2589, !dbg !116
  %4756 = insertvalue %6 undef, float %4755, 0, !dbg !116
  %4757 = fmul float %3371, %3376, !dbg !116
  %4758 = fsub float %4757, %2604, !dbg !116
  %4759 = insertvalue %6 %4756, float %4758, 1, !dbg !116
  %4760 = insertvalue %6 %4759, float %3378, 2, !dbg !116
  %4761 = insertvalue %11 %4753, %6 %4760, 1, !dbg !116
  %4762 = insertvalue %11 %4761, float %pdf, 2, !dbg !116
  br label %sample_brdf_cont, !dbg !116

expr_true403:                                     ; preds = %expr_false380, %continue420
  %4763 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3382, align 8, !dbg !75
  %4764 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !75
  %4765 = sext i32 %4764 to i64, !dbg !75
  %4766 = getelementptr inbounds [0 x i32], [0 x i32]* %4763, i64 0, i64 %4765, !dbg !75
  %4767 = load i32, i32* %4766, align 4, !dbg !75
  %4768 = icmp eq i32 %4767, 1, !dbg !75
  br i1 %4768, label %expr_true419, label %expr_false404, !dbg !75

expr_false404:                                    ; preds = %expr_true403
  store float %2613, float addrspace(5)* %dim_param_4458828, align 4, !dbg !76
  %4769 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !76
  %4770 = icmp eq i32 %4769, 1, !dbg !76
  br i1 %4770, label %expr_true409, label %expr_false405, !dbg !76

expr_false405:                                    ; preds = %expr_false404
  %4771 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !77
  %4772 = icmp eq i32 %4771, 2, !dbg !77
  br i1 %4772, label %expr_true407, label %if_join410, !dbg !77

expr_true407:                                     ; preds = %expr_false405
  store float 2.000000e+00, float addrspace(5)* %dim_param_4458828, align 4, !dbg !78
  br label %if_join410, !dbg !78

expr_true409:                                     ; preds = %expr_false404
  store float %2614, float addrspace(5)* %dim_param_4458828, align 4, !dbg !77
  br label %if_join410, !dbg !77

if_join410:                                       ; preds = %expr_true407, %expr_false405, %expr_true409
  %4773 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !79
  %4774 = load float, float addrspace(5)* %dim_param_4458828, align 4, !dbg !79
  %4775 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %3380, i32 %4773, float %4774), !dbg !79
  %4776 = load [0 x float]*, [0 x float]* addrspace(5)* %3383, align 8, !dbg !80
  %4777 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !80
  %4778 = load i32, i32 addrspace(5)* %3384, align 8, !dbg !80
  %4779 = mul nsw i32 %4777, %4778, !dbg !80
  %4780 = add nsw i32 %4779, %4775, !dbg !80
  %4781 = sext i32 %4780 to i64, !dbg !80
  %4782 = getelementptr inbounds [0 x float], [0 x float]* %4776, i64 0, i64 %4781, !dbg !80
  %4783 = load float, float* %4782, align 4, !dbg !80
  %4784 = load [0 x float]*, [0 x float]* addrspace(5)* %3383, align 8, !dbg !80
  %4785 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !80
  %4786 = load i32, i32 addrspace(5)* %3384, align 8, !dbg !80
  %4787 = mul nsw i32 %4785, %4786, !dbg !80
  %4788 = add nsw i32 %4787, %4775, !dbg !80
  %4789 = add nsw i32 %4788, 1, !dbg !80
  %4790 = sext i32 %4789 to i64, !dbg !80
  %4791 = getelementptr inbounds [0 x float], [0 x float]* %4784, i64 0, i64 %4790, !dbg !80
  %4792 = load float, float* %4791, align 4, !dbg !80
  %4793 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !80
  %4794 = load float, float addrspace(5)* %dim_param_4458828, align 4, !dbg !80
  %4795 = fsub float %4794, %4783, !dbg !80
  %4796 = fsub float %4792, %4783, !dbg !80
  %4797 = fdiv float %4795, %4796, !dbg !80
  %4798 = fcmp olt float %4797, 0.000000e+00, !dbg !80
  %4799 = fcmp ogt float %4797, 1.000000e+00, !dbg !80
  %.1209 = select i1 %4799, float 1.000000e+00, float %4797, !dbg !80
  %clampf_cont418 = select i1 %4798, float 0.000000e+00, float %.1209, !dbg !80
  %4800 = shl nsw i32 %4793, 1, !dbg !81
  %4801 = or i32 %4800, 1, !dbg !81
  %4802 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 %4801, !dbg !81
  store float %clampf_cont418, float addrspace(5)* %4802, align 4, !dbg !81
  %4803 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !81
  %4804 = shl nsw i32 %4803, 1, !dbg !81
  %4805 = or i32 %4804, 1, !dbg !81
  %4806 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 %4805, !dbg !81
  %4807 = load float, float addrspace(5)* %4806, align 4, !dbg !81
  %4808 = shl nsw i32 %4803, 1, !dbg !81
  %4809 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 %4808, !dbg !81
  %4810 = fsub float 1.000000e+00, %4807, !dbg !81
  store float %4810, float addrspace(5)* %4809, align 4, !dbg !81
  %4811 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !81
  %4812 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !81
  %4813 = sext i32 %4812 to i64, !dbg !81
  %4814 = getelementptr inbounds [0 x i32], [0 x i32]* %4811, i64 0, i64 %4813, !dbg !81
  %4815 = load i32, i32* %4814, align 4, !dbg !81
  %4816 = load i32, i32 addrspace(5)* %slice_offset_4458918, align 4, !dbg !81
  %4817 = mul nsw i32 %4815, %4775, !dbg !81
  %4818 = add nsw i32 %4816, %4817, !dbg !81
  store i32 %4818, i32 addrspace(5)* %slice_offset_4458918, align 4, !dbg !81
  %4819 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !81
  br label %continue420, !dbg !81

expr_true419:                                     ; preds = %expr_true403
  %4820 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !76
  %4821 = shl nsw i32 %4820, 1, !dbg !76
  %4822 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 %4821, !dbg !76
  store float 1.000000e+00, float addrspace(5)* %4822, align 4, !dbg !76
  %4823 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !76
  %4824 = shl nsw i32 %4823, 1, !dbg !76
  %4825 = or i32 %4824, 1, !dbg !76
  %4826 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4458810, i32 0, i32 %4825, !dbg !76
  store float 0.000000e+00, float addrspace(5)* %4826, align 4, !dbg !76
  %4827 = load i32, i32 addrspace(5)* %dim_4458788, align 4, !dbg !76
  br label %continue420, !dbg !76

continue420:                                      ; preds = %expr_true419, %if_join410
  %storemerge1026.in = phi i32 [ %4819, %if_join410 ], [ %4827, %expr_true419 ]
  %storemerge1026 = add nsw i32 %storemerge1026.in, 1, !dbg !40
  store i32 %storemerge1026, i32 addrspace(5)* %dim_4458788, align 4, !dbg !40
  %4828 = icmp slt i32 %storemerge1026.in, 2, !dbg !74
  br i1 %4828, label %expr_true403, label %expr_false386, !dbg !74

expr_true421:                                     ; preds = %expr_false374, %continue438
  %4829 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3382, align 8, !dbg !75
  %4830 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !75
  %4831 = sext i32 %4830 to i64, !dbg !75
  %4832 = getelementptr inbounds [0 x i32], [0 x i32]* %4829, i64 0, i64 %4831, !dbg !75
  %4833 = load i32, i32* %4832, align 4, !dbg !75
  %4834 = icmp eq i32 %4833, 1, !dbg !75
  br i1 %4834, label %expr_true437, label %expr_false422, !dbg !75

expr_false422:                                    ; preds = %expr_true421
  store float %2613, float addrspace(5)* %dim_param_4457894, align 4, !dbg !76
  %4835 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !76
  %4836 = icmp eq i32 %4835, 1, !dbg !76
  br i1 %4836, label %expr_true427, label %expr_false423, !dbg !76

expr_false423:                                    ; preds = %expr_false422
  %4837 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !77
  %4838 = icmp eq i32 %4837, 2, !dbg !77
  br i1 %4838, label %expr_true425, label %if_join428, !dbg !77

expr_true425:                                     ; preds = %expr_false423
  store float 1.000000e+00, float addrspace(5)* %dim_param_4457894, align 4, !dbg !78
  br label %if_join428, !dbg !78

expr_true427:                                     ; preds = %expr_false422
  store float %2614, float addrspace(5)* %dim_param_4457894, align 4, !dbg !77
  br label %if_join428, !dbg !77

if_join428:                                       ; preds = %expr_true425, %expr_false423, %expr_true427
  %4839 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !79
  %4840 = load float, float addrspace(5)* %dim_param_4457894, align 4, !dbg !79
  %4841 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %3380, i32 %4839, float %4840), !dbg !79
  %4842 = load [0 x float]*, [0 x float]* addrspace(5)* %3383, align 8, !dbg !80
  %4843 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !80
  %4844 = load i32, i32 addrspace(5)* %3384, align 8, !dbg !80
  %4845 = mul nsw i32 %4843, %4844, !dbg !80
  %4846 = add nsw i32 %4845, %4841, !dbg !80
  %4847 = sext i32 %4846 to i64, !dbg !80
  %4848 = getelementptr inbounds [0 x float], [0 x float]* %4842, i64 0, i64 %4847, !dbg !80
  %4849 = load float, float* %4848, align 4, !dbg !80
  %4850 = load [0 x float]*, [0 x float]* addrspace(5)* %3383, align 8, !dbg !80
  %4851 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !80
  %4852 = load i32, i32 addrspace(5)* %3384, align 8, !dbg !80
  %4853 = mul nsw i32 %4851, %4852, !dbg !80
  %4854 = add nsw i32 %4853, %4841, !dbg !80
  %4855 = add nsw i32 %4854, 1, !dbg !80
  %4856 = sext i32 %4855 to i64, !dbg !80
  %4857 = getelementptr inbounds [0 x float], [0 x float]* %4850, i64 0, i64 %4856, !dbg !80
  %4858 = load float, float* %4857, align 4, !dbg !80
  %4859 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !80
  %4860 = load float, float addrspace(5)* %dim_param_4457894, align 4, !dbg !80
  %4861 = fsub float %4860, %4849, !dbg !80
  %4862 = fsub float %4858, %4849, !dbg !80
  %4863 = fdiv float %4861, %4862, !dbg !80
  %4864 = fcmp olt float %4863, 0.000000e+00, !dbg !80
  %4865 = fcmp ogt float %4863, 1.000000e+00, !dbg !80
  %.1210 = select i1 %4865, float 1.000000e+00, float %4863, !dbg !80
  %clampf_cont436 = select i1 %4864, float 0.000000e+00, float %.1210, !dbg !80
  %4866 = shl nsw i32 %4859, 1, !dbg !81
  %4867 = or i32 %4866, 1, !dbg !81
  %4868 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 %4867, !dbg !81
  store float %clampf_cont436, float addrspace(5)* %4868, align 4, !dbg !81
  %4869 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !81
  %4870 = shl nsw i32 %4869, 1, !dbg !81
  %4871 = or i32 %4870, 1, !dbg !81
  %4872 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 %4871, !dbg !81
  %4873 = load float, float addrspace(5)* %4872, align 4, !dbg !81
  %4874 = shl nsw i32 %4869, 1, !dbg !81
  %4875 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 %4874, !dbg !81
  %4876 = fsub float 1.000000e+00, %4873, !dbg !81
  store float %4876, float addrspace(5)* %4875, align 4, !dbg !81
  %4877 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !81
  %4878 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !81
  %4879 = sext i32 %4878 to i64, !dbg !81
  %4880 = getelementptr inbounds [0 x i32], [0 x i32]* %4877, i64 0, i64 %4879, !dbg !81
  %4881 = load i32, i32* %4880, align 4, !dbg !81
  %4882 = load i32, i32 addrspace(5)* %slice_offset_4457984, align 4, !dbg !81
  %4883 = mul nsw i32 %4881, %4841, !dbg !81
  %4884 = add nsw i32 %4882, %4883, !dbg !81
  store i32 %4884, i32 addrspace(5)* %slice_offset_4457984, align 4, !dbg !81
  %4885 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !81
  br label %continue438, !dbg !81

expr_true437:                                     ; preds = %expr_true421
  %4886 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !76
  %4887 = shl nsw i32 %4886, 1, !dbg !76
  %4888 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 %4887, !dbg !76
  store float 1.000000e+00, float addrspace(5)* %4888, align 4, !dbg !76
  %4889 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !76
  %4890 = shl nsw i32 %4889, 1, !dbg !76
  %4891 = or i32 %4890, 1, !dbg !76
  %4892 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457876, i32 0, i32 %4891, !dbg !76
  store float 0.000000e+00, float addrspace(5)* %4892, align 4, !dbg !76
  %4893 = load i32, i32 addrspace(5)* %dim_4457854, align 4, !dbg !76
  br label %continue438, !dbg !76

continue438:                                      ; preds = %expr_true437, %if_join428
  %storemerge1027.in = phi i32 [ %4885, %if_join428 ], [ %4893, %expr_true437 ]
  %storemerge1027 = add nsw i32 %storemerge1027.in, 1, !dbg !40
  store i32 %storemerge1027, i32 addrspace(5)* %dim_4457854, align 4, !dbg !40
  %4894 = icmp slt i32 %storemerge1027.in, 2, !dbg !74
  br i1 %4894, label %expr_true421, label %expr_false380, !dbg !74

expr_true439:                                     ; preds = %expr_false372, %continue456
  %4895 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3382, align 8, !dbg !75
  %4896 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !75
  %4897 = sext i32 %4896 to i64, !dbg !75
  %4898 = getelementptr inbounds [0 x i32], [0 x i32]* %4895, i64 0, i64 %4897, !dbg !75
  %4899 = load i32, i32* %4898, align 4, !dbg !75
  %4900 = icmp eq i32 %4899, 1, !dbg !75
  br i1 %4900, label %expr_true455, label %expr_false440, !dbg !75

expr_false440:                                    ; preds = %expr_true439
  store float %2613, float addrspace(5)* %dim_param_4457687, align 4, !dbg !76
  %4901 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !76
  %4902 = icmp eq i32 %4901, 1, !dbg !76
  br i1 %4902, label %expr_true445, label %expr_false441, !dbg !76

expr_false441:                                    ; preds = %expr_false440
  %4903 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !77
  %4904 = icmp eq i32 %4903, 2, !dbg !77
  br i1 %4904, label %expr_true443, label %if_join446, !dbg !77

expr_true443:                                     ; preds = %expr_false441
  store float 0.000000e+00, float addrspace(5)* %dim_param_4457687, align 4, !dbg !78
  br label %if_join446, !dbg !78

expr_true445:                                     ; preds = %expr_false440
  store float %2614, float addrspace(5)* %dim_param_4457687, align 4, !dbg !77
  br label %if_join446, !dbg !77

if_join446:                                       ; preds = %expr_true443, %expr_false441, %expr_true445
  %4905 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !79
  %4906 = load float, float addrspace(5)* %dim_param_4457687, align 4, !dbg !79
  %4907 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %3380, i32 %4905, float %4906), !dbg !79
  %4908 = load [0 x float]*, [0 x float]* addrspace(5)* %3383, align 8, !dbg !80
  %4909 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !80
  %4910 = load i32, i32 addrspace(5)* %3384, align 8, !dbg !80
  %4911 = mul nsw i32 %4909, %4910, !dbg !80
  %4912 = add nsw i32 %4911, %4907, !dbg !80
  %4913 = sext i32 %4912 to i64, !dbg !80
  %4914 = getelementptr inbounds [0 x float], [0 x float]* %4908, i64 0, i64 %4913, !dbg !80
  %4915 = load float, float* %4914, align 4, !dbg !80
  %4916 = load [0 x float]*, [0 x float]* addrspace(5)* %3383, align 8, !dbg !80
  %4917 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !80
  %4918 = load i32, i32 addrspace(5)* %3384, align 8, !dbg !80
  %4919 = mul nsw i32 %4917, %4918, !dbg !80
  %4920 = add nsw i32 %4919, %4907, !dbg !80
  %4921 = add nsw i32 %4920, 1, !dbg !80
  %4922 = sext i32 %4921 to i64, !dbg !80
  %4923 = getelementptr inbounds [0 x float], [0 x float]* %4916, i64 0, i64 %4922, !dbg !80
  %4924 = load float, float* %4923, align 4, !dbg !80
  %4925 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !80
  %4926 = load float, float addrspace(5)* %dim_param_4457687, align 4, !dbg !80
  %4927 = fsub float %4926, %4915, !dbg !80
  %4928 = fsub float %4924, %4915, !dbg !80
  %4929 = fdiv float %4927, %4928, !dbg !80
  %4930 = fcmp olt float %4929, 0.000000e+00, !dbg !80
  %4931 = fcmp ogt float %4929, 1.000000e+00, !dbg !80
  %.1211 = select i1 %4931, float 1.000000e+00, float %4929, !dbg !80
  %clampf_cont454 = select i1 %4930, float 0.000000e+00, float %.1211, !dbg !80
  %4932 = shl nsw i32 %4925, 1, !dbg !81
  %4933 = or i32 %4932, 1, !dbg !81
  %4934 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 %4933, !dbg !81
  store float %clampf_cont454, float addrspace(5)* %4934, align 4, !dbg !81
  %4935 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !81
  %4936 = shl nsw i32 %4935, 1, !dbg !81
  %4937 = or i32 %4936, 1, !dbg !81
  %4938 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 %4937, !dbg !81
  %4939 = load float, float addrspace(5)* %4938, align 4, !dbg !81
  %4940 = shl nsw i32 %4935, 1, !dbg !81
  %4941 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 %4940, !dbg !81
  %4942 = fsub float 1.000000e+00, %4939, !dbg !81
  store float %4942, float addrspace(5)* %4941, align 4, !dbg !81
  %4943 = load [0 x i32]*, [0 x i32]* addrspace(5)* %3381, align 8, !dbg !81
  %4944 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !81
  %4945 = sext i32 %4944 to i64, !dbg !81
  %4946 = getelementptr inbounds [0 x i32], [0 x i32]* %4943, i64 0, i64 %4945, !dbg !81
  %4947 = load i32, i32* %4946, align 4, !dbg !81
  %4948 = load i32, i32 addrspace(5)* %slice_offset_4457780, align 4, !dbg !81
  %4949 = mul nsw i32 %4947, %4907, !dbg !81
  %4950 = add nsw i32 %4948, %4949, !dbg !81
  store i32 %4950, i32 addrspace(5)* %slice_offset_4457780, align 4, !dbg !81
  %4951 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !81
  br label %continue456, !dbg !81

expr_true455:                                     ; preds = %expr_true439
  %4952 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !76
  %4953 = shl nsw i32 %4952, 1, !dbg !76
  %4954 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 %4953, !dbg !76
  store float 1.000000e+00, float addrspace(5)* %4954, align 4, !dbg !76
  %4955 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !76
  %4956 = shl nsw i32 %4955, 1, !dbg !76
  %4957 = or i32 %4956, 1, !dbg !76
  %4958 = getelementptr inbounds [6 x float], [6 x float] addrspace(5)* %param_weight_4457669, i32 0, i32 %4957, !dbg !76
  store float 0.000000e+00, float addrspace(5)* %4958, align 4, !dbg !76
  %4959 = load i32, i32 addrspace(5)* %dim_4457645, align 4, !dbg !76
  br label %continue456, !dbg !76

continue456:                                      ; preds = %expr_true455, %if_join446
  %storemerge1028.in = phi i32 [ %4951, %if_join446 ], [ %4959, %expr_true455 ]
  %storemerge1028 = add nsw i32 %storemerge1028.in, 1, !dbg !40
  store i32 %storemerge1028, i32 addrspace(5)* %dim_4457645, align 4, !dbg !40
  %4960 = icmp slt i32 %storemerge1028.in, 2, !dbg !74
  br i1 %4960, label %expr_true439, label %expr_false374, !dbg !74

expr_true458:                                     ; preds = %if_join341, %if_join463
  %4961 = load i32, i32 addrspace(5)* %size_4457138, align 4, !dbg !102
  %4962 = load i32, i32 addrspace(5)* %first_4457146, align 4, !dbg !102
  %h = ashr i32 %4961, 1, !dbg !102
  %middle = add nsw i32 %4962, %h, !dbg !102
  %4963 = call fastcc float @fetch_conditional_warp2D2_4456102(%3 addrspace(5)* %2990, i32 %3135, i32 %middle, i32 %slice_size682, %5 %3137, [0 x float]* %3002), !dbg !102
  %4964 = fcmp olt float %4963, %3134, !dbg !117
  br i1 %4964, label %expr_true462, label %if_join463, !dbg !117

expr_true462:                                     ; preds = %expr_true458
  %4965 = add nsw i32 %middle, 1, !dbg !118
  store i32 %4965, i32 addrspace(5)* %first_4457146, align 4, !dbg !118
  %4966 = load i32, i32 addrspace(5)* %size_4457138, align 4, !dbg !118
  %.neg = xor i32 %h, -1, !dbg !118
  %4967 = add i32 %4966, %.neg, !dbg !118
  br label %if_join463, !dbg !118

if_join463:                                       ; preds = %expr_true458, %expr_true462
  %storemerge1029 = phi i32 [ %4967, %expr_true462 ], [ %h, %expr_true458 ], !dbg !118
  store i32 %storemerge1029, i32 addrspace(5)* %size_4457138, align 4, !dbg !118
  %4968 = icmp sgt i32 %storemerge1029, 0, !dbg !101
  br i1 %4968, label %expr_true458, label %expr_false343, !dbg !101

expr_true464:                                     ; preds = %expr_false322, %if_join469
  %4969 = load i32, i32 addrspace(5)* %size_4456870, align 4, !dbg !94
  %4970 = load i32, i32 addrspace(5)* %first_4456878, align 4, !dbg !94
  %h801 = ashr i32 %4969, 1, !dbg !94
  %middle802 = add nsw i32 %4970, %h801, !dbg !94
  %4971 = call fastcc float @fetch_marginal_warp2D2_4455738(%3 addrspace(5)* %2990, i32 %offset680, i32 %middle802, [0 x float]* %3002), !dbg !94
  %4972 = fcmp olt float %4971, %2999, !dbg !119
  br i1 %4972, label %expr_true468, label %if_join469, !dbg !119

expr_true468:                                     ; preds = %expr_true464
  %4973 = add nsw i32 %middle802, 1, !dbg !120
  store i32 %4973, i32 addrspace(5)* %first_4456878, align 4, !dbg !120
  %4974 = load i32, i32 addrspace(5)* %size_4456870, align 4, !dbg !120
  %.neg1031 = xor i32 %h801, -1, !dbg !120
  %4975 = add i32 %4974, %.neg1031, !dbg !120
  br label %if_join469, !dbg !120

if_join469:                                       ; preds = %expr_true464, %expr_true468
  %storemerge1030 = phi i32 [ %4975, %expr_true468 ], [ %h801, %expr_true464 ], !dbg !120
  store i32 %storemerge1030, i32 addrspace(5)* %size_4456870, align 4, !dbg !120
  %4976 = icmp sgt i32 %storemerge1030, 0, !dbg !93
  br i1 %4976, label %expr_true464, label %expr_false324, !dbg !93

expr_true470:                                     ; preds = %if_join320, %continue484
  %4977 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2992, align 8, !dbg !92
  %4978 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !92
  %4979 = sext i32 %4978 to i64, !dbg !92
  %4980 = getelementptr inbounds [0 x i32], [0 x i32]* %4977, i64 0, i64 %4979, !dbg !92
  %4981 = load i32, i32* %4980, align 4, !dbg !92
  %4982 = icmp eq i32 %4981, 1, !dbg !92
  br i1 %4982, label %expr_true483, label %expr_false471, !dbg !92

expr_false471:                                    ; preds = %expr_true470
  store float %2613, float addrspace(5)* %dim_param_4456752, align 4, !dbg !121
  %4983 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !121
  %4984 = icmp eq i32 %4983, 1, !dbg !121
  %spec.store.select1216 = select i1 %4984, float %2614, float %2613, !dbg !121
  store float %spec.store.select1216, float addrspace(5)* %dim_param_4456752, align 4, !dbg !40
  %4985 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %2990, i32 %4983, float %spec.store.select1216), !dbg !122
  %4986 = load [0 x float]*, [0 x float]* addrspace(5)* %2993, align 8, !dbg !123
  %4987 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !123
  %4988 = load i32, i32 addrspace(5)* %2994, align 8, !dbg !123
  %4989 = mul nsw i32 %4987, %4988, !dbg !123
  %4990 = add nsw i32 %4989, %4985, !dbg !123
  %4991 = sext i32 %4990 to i64, !dbg !123
  %4992 = getelementptr inbounds [0 x float], [0 x float]* %4986, i64 0, i64 %4991, !dbg !123
  %4993 = load float, float* %4992, align 4, !dbg !123
  %4994 = load [0 x float]*, [0 x float]* addrspace(5)* %2993, align 8, !dbg !123
  %4995 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !123
  %4996 = load i32, i32 addrspace(5)* %2994, align 8, !dbg !123
  %4997 = mul nsw i32 %4995, %4996, !dbg !123
  %4998 = add nsw i32 %4997, %4985, !dbg !123
  %4999 = add nsw i32 %4998, 1, !dbg !123
  %5000 = sext i32 %4999 to i64, !dbg !123
  %5001 = getelementptr inbounds [0 x float], [0 x float]* %4994, i64 0, i64 %5000, !dbg !123
  %5002 = load float, float* %5001, align 4, !dbg !123
  %5003 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !123
  %5004 = load float, float addrspace(5)* %dim_param_4456752, align 4, !dbg !123
  %5005 = fsub float %5004, %4993, !dbg !123
  %5006 = fsub float %5002, %4993, !dbg !123
  %5007 = fdiv float %5005, %5006, !dbg !123
  %5008 = fcmp olt float %5007, 0.000000e+00, !dbg !123
  %5009 = fcmp ogt float %5007, 1.000000e+00, !dbg !123
  %.1212 = select i1 %5009, float 1.000000e+00, float %5007, !dbg !123
  %clampf_cont482 = select i1 %5008, float 0.000000e+00, float %.1212, !dbg !123
  %5010 = shl nsw i32 %5003, 1, !dbg !124
  %5011 = or i32 %5010, 1, !dbg !124
  %5012 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 %5011, !dbg !124
  store float %clampf_cont482, float addrspace(5)* %5012, align 4, !dbg !124
  %5013 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !124
  %5014 = shl nsw i32 %5013, 1, !dbg !124
  %5015 = or i32 %5014, 1, !dbg !124
  %5016 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 %5015, !dbg !124
  %5017 = load float, float addrspace(5)* %5016, align 4, !dbg !124
  %5018 = shl nsw i32 %5013, 1, !dbg !124
  %5019 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 %5018, !dbg !124
  %5020 = fsub float 1.000000e+00, %5017, !dbg !124
  store float %5020, float addrspace(5)* %5019, align 4, !dbg !124
  %5021 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2991, align 8, !dbg !124
  %5022 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !124
  %5023 = sext i32 %5022 to i64, !dbg !124
  %5024 = getelementptr inbounds [0 x i32], [0 x i32]* %5021, i64 0, i64 %5023, !dbg !124
  %5025 = load i32, i32* %5024, align 4, !dbg !124
  %5026 = load i32, i32 addrspace(5)* %slice_offset_4456845, align 4, !dbg !124
  %5027 = mul nsw i32 %5025, %4985, !dbg !124
  %5028 = add nsw i32 %5026, %5027, !dbg !124
  store i32 %5028, i32 addrspace(5)* %slice_offset_4456845, align 4, !dbg !124
  %5029 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !124
  br label %continue484, !dbg !124

expr_true483:                                     ; preds = %expr_true470
  %5030 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !121
  %5031 = shl nsw i32 %5030, 1, !dbg !121
  %5032 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 %5031, !dbg !121
  store float 1.000000e+00, float addrspace(5)* %5032, align 4, !dbg !121
  %5033 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !121
  %5034 = shl nsw i32 %5033, 1, !dbg !121
  %5035 = or i32 %5034, 1, !dbg !121
  %5036 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4456734, i32 0, i32 %5035, !dbg !121
  store float 0.000000e+00, float addrspace(5)* %5036, align 4, !dbg !121
  %5037 = load i32, i32 addrspace(5)* %dim_4456710, align 4, !dbg !121
  br label %continue484, !dbg !121

continue484:                                      ; preds = %expr_true483, %expr_false471
  %storemerge1032.in = phi i32 [ %5029, %expr_false471 ], [ %5037, %expr_true483 ]
  %storemerge1032 = add nsw i32 %storemerge1032.in, 1, !dbg !40
  store i32 %storemerge1032, i32 addrspace(5)* %dim_4456710, align 4, !dbg !40
  %5038 = icmp slt i32 %storemerge1032.in, 1, !dbg !91
  br i1 %5038, label %expr_true470, label %expr_false322, !dbg !91

expr_true485:                                     ; preds = %if_join302, %if_join490
  %5039 = load i32, i32 addrspace(5)* %size_4456097, align 4, !dbg !102
  %5040 = load i32, i32 addrspace(5)* %first_4456285, align 4, !dbg !102
  %h803 = ashr i32 %5039, 1, !dbg !102
  %middle804 = add nsw i32 %5040, %h803, !dbg !102
  %5041 = call fastcc float @fetch_conditional_warp2D2_4456102(%3 addrspace(5)* %2625, i32 %2770, i32 %middle804, i32 %slice_size, %5 %2772, [0 x float]* %2637), !dbg !102
  %5042 = fcmp olt float %5041, %2769, !dbg !117
  br i1 %5042, label %expr_true489, label %if_join490, !dbg !117

expr_true489:                                     ; preds = %expr_true485
  %5043 = add nsw i32 %middle804, 1, !dbg !118
  store i32 %5043, i32 addrspace(5)* %first_4456285, align 4, !dbg !118
  %5044 = load i32, i32 addrspace(5)* %size_4456097, align 4, !dbg !118
  %.neg1034 = xor i32 %h803, -1, !dbg !118
  %5045 = add i32 %5044, %.neg1034, !dbg !118
  br label %if_join490, !dbg !118

if_join490:                                       ; preds = %expr_true485, %expr_true489
  %storemerge1033 = phi i32 [ %5045, %expr_true489 ], [ %h803, %expr_true485 ], !dbg !118
  store i32 %storemerge1033, i32 addrspace(5)* %size_4456097, align 4, !dbg !118
  %5046 = icmp sgt i32 %storemerge1033, 0, !dbg !101
  br i1 %5046, label %expr_true485, label %expr_false304, !dbg !101

expr_true491:                                     ; preds = %expr_false286, %if_join496
  %5047 = load i32, i32 addrspace(5)* %size_4455733, align 4, !dbg !94
  %5048 = load i32, i32 addrspace(5)* %first_4455836, align 4, !dbg !94
  %h805 = ashr i32 %5047, 1, !dbg !94
  %middle806 = add nsw i32 %5048, %h805, !dbg !94
  %5049 = call fastcc float @fetch_marginal_warp2D2_4455738(%3 addrspace(5)* %2625, i32 %offset, i32 %middle806, [0 x float]* %2637), !dbg !94
  %5050 = fcmp olt float %5049, %2634, !dbg !119
  br i1 %5050, label %expr_true495, label %if_join496, !dbg !119

expr_true495:                                     ; preds = %expr_true491
  %5051 = add nsw i32 %middle806, 1, !dbg !120
  store i32 %5051, i32 addrspace(5)* %first_4455836, align 4, !dbg !120
  %5052 = load i32, i32 addrspace(5)* %size_4455733, align 4, !dbg !120
  %.neg1036 = xor i32 %h805, -1, !dbg !120
  %5053 = add i32 %5052, %.neg1036, !dbg !120
  br label %if_join496, !dbg !120

if_join496:                                       ; preds = %expr_true491, %expr_true495
  %storemerge1035 = phi i32 [ %5053, %expr_true495 ], [ %h805, %expr_true491 ], !dbg !120
  store i32 %storemerge1035, i32 addrspace(5)* %size_4455733, align 4, !dbg !120
  %5054 = icmp sgt i32 %storemerge1035, 0, !dbg !93
  br i1 %5054, label %expr_true491, label %expr_false288, !dbg !93

expr_true497:                                     ; preds = %expr_false276, %continue511
  %5055 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2627, align 8, !dbg !92
  %5056 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !92
  %5057 = sext i32 %5056 to i64, !dbg !92
  %5058 = getelementptr inbounds [0 x i32], [0 x i32]* %5055, i64 0, i64 %5057, !dbg !92
  %5059 = load i32, i32* %5058, align 4, !dbg !92
  %5060 = icmp eq i32 %5059, 1, !dbg !92
  br i1 %5060, label %expr_true510, label %expr_false498, !dbg !92

expr_false498:                                    ; preds = %expr_true497
  store float %2613, float addrspace(5)* %dim_param_4455538, align 4, !dbg !121
  %5061 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !121
  %5062 = icmp eq i32 %5061, 1, !dbg !121
  %spec.store.select1217 = select i1 %5062, float %2614, float %2613, !dbg !121
  store float %spec.store.select1217, float addrspace(5)* %dim_param_4455538, align 4, !dbg !40
  %5063 = call fastcc i32 @find_interval_eval_4455546(%3 addrspace(5)* %2625, i32 %5061, float %spec.store.select1217), !dbg !122
  %5064 = load [0 x float]*, [0 x float]* addrspace(5)* %2628, align 8, !dbg !123
  %5065 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !123
  %5066 = load i32, i32 addrspace(5)* %2629, align 8, !dbg !123
  %5067 = mul nsw i32 %5065, %5066, !dbg !123
  %5068 = add nsw i32 %5067, %5063, !dbg !123
  %5069 = sext i32 %5068 to i64, !dbg !123
  %5070 = getelementptr inbounds [0 x float], [0 x float]* %5064, i64 0, i64 %5069, !dbg !123
  %5071 = load float, float* %5070, align 4, !dbg !123
  %5072 = load [0 x float]*, [0 x float]* addrspace(5)* %2628, align 8, !dbg !123
  %5073 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !123
  %5074 = load i32, i32 addrspace(5)* %2629, align 8, !dbg !123
  %5075 = mul nsw i32 %5073, %5074, !dbg !123
  %5076 = add nsw i32 %5075, %5063, !dbg !123
  %5077 = add nsw i32 %5076, 1, !dbg !123
  %5078 = sext i32 %5077 to i64, !dbg !123
  %5079 = getelementptr inbounds [0 x float], [0 x float]* %5072, i64 0, i64 %5078, !dbg !123
  %5080 = load float, float* %5079, align 4, !dbg !123
  %5081 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !123
  %5082 = load float, float addrspace(5)* %dim_param_4455538, align 4, !dbg !123
  %5083 = fsub float %5082, %5071, !dbg !123
  %5084 = fsub float %5080, %5071, !dbg !123
  %5085 = fdiv float %5083, %5084, !dbg !123
  %5086 = fcmp olt float %5085, 0.000000e+00, !dbg !123
  %5087 = fcmp ogt float %5085, 1.000000e+00, !dbg !123
  %.1213 = select i1 %5087, float 1.000000e+00, float %5085, !dbg !123
  %clampf_cont509 = select i1 %5086, float 0.000000e+00, float %.1213, !dbg !123
  %5088 = shl nsw i32 %5081, 1, !dbg !124
  %5089 = or i32 %5088, 1, !dbg !124
  %5090 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 %5089, !dbg !124
  store float %clampf_cont509, float addrspace(5)* %5090, align 4, !dbg !124
  %5091 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !124
  %5092 = shl nsw i32 %5091, 1, !dbg !124
  %5093 = or i32 %5092, 1, !dbg !124
  %5094 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 %5093, !dbg !124
  %5095 = load float, float addrspace(5)* %5094, align 4, !dbg !124
  %5096 = shl nsw i32 %5091, 1, !dbg !124
  %5097 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 %5096, !dbg !124
  %5098 = fsub float 1.000000e+00, %5095, !dbg !124
  store float %5098, float addrspace(5)* %5097, align 4, !dbg !124
  %5099 = load [0 x i32]*, [0 x i32]* addrspace(5)* %2626, align 8, !dbg !124
  %5100 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !124
  %5101 = sext i32 %5100 to i64, !dbg !124
  %5102 = getelementptr inbounds [0 x i32], [0 x i32]* %5099, i64 0, i64 %5101, !dbg !124
  %5103 = load i32, i32* %5102, align 4, !dbg !124
  %5104 = load i32, i32 addrspace(5)* %slice_offset_4455708, align 4, !dbg !124
  %5105 = mul nsw i32 %5103, %5063, !dbg !124
  %5106 = add nsw i32 %5104, %5105, !dbg !124
  store i32 %5106, i32 addrspace(5)* %slice_offset_4455708, align 4, !dbg !124
  %5107 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !124
  br label %continue511, !dbg !124

expr_true510:                                     ; preds = %expr_true497
  %5108 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !121
  %5109 = shl nsw i32 %5108, 1, !dbg !121
  %5110 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 %5109, !dbg !121
  store float 1.000000e+00, float addrspace(5)* %5110, align 4, !dbg !121
  %5111 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !121
  %5112 = shl nsw i32 %5111, 1, !dbg !121
  %5113 = or i32 %5112, 1, !dbg !121
  %5114 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4455520, i32 0, i32 %5113, !dbg !121
  store float 0.000000e+00, float addrspace(5)* %5114, align 4, !dbg !121
  %5115 = load i32, i32 addrspace(5)* %dim_4455496, align 4, !dbg !121
  br label %continue511, !dbg !121

continue511:                                      ; preds = %expr_true510, %expr_false498
  %storemerge1037.in = phi i32 [ %5107, %expr_false498 ], [ %5115, %expr_true510 ]
  %storemerge1037 = add nsw i32 %storemerge1037.in, 1, !dbg !40
  store i32 %storemerge1037, i32 addrspace(5)* %dim_4455496, align 4, !dbg !40
  %5116 = icmp slt i32 %storemerge1037.in, 1, !dbg !91
  br i1 %5116, label %expr_true497, label %expr_false286, !dbg !91

sample_brdf_cont:                                 ; preds = %if_join275, %if_join363, %expr_false386
  %sample_brdf_cont513 = phi %11 [ %4762, %expr_false386 ], [ zeroinitializer, %if_join363 ], [ zeroinitializer, %if_join275 ], !dbg !125
  %5117 = extractvalue %11 %sample_brdf_cont513, 1, !dbg !125
  %5118 = extractvalue %6 %5117, 0, !dbg !125
  %5119 = fmul float %5118, %5118, !dbg !125
  %5120 = extractvalue %6 %5117, 1, !dbg !125
  %5121 = fmul float %5120, %5120, !dbg !125
  %5122 = fadd float %5119, %5121, !dbg !125
  %5123 = extractvalue %6 %5117, 2, !dbg !125
  %5124 = fmul float %5123, %5123, !dbg !125
  %5125 = fadd float %5122, %5124, !dbg !125
  %5126 = call float @__ocml_sqrt_f32(float %5125), !dbg !125
  %tangent_4455215.repack = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 0, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455215.repack, align 4, !dbg !24
  %tangent_4455215.repack1005 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 1, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455215.repack1005, align 4, !dbg !24
  %tangent_4455215.repack1006 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 2, !dbg !24
  store float 0.000000e+00, float addrspace(5)* %tangent_4455215.repack1006, align 4, !dbg !24
  %5127 = call float @__ocml_fabs_f32(float %.pn827), !dbg !24
  %5128 = call float @__ocml_fabs_f32(float %.pn825), !dbg !35
  %5129 = fcmp olt float %5128, %5127, !dbg !36
  %5130 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 0, !dbg !36
  %5131 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 1, !dbg !36
  %5132 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 2, !dbg !36
  br i1 %5129, label %expr_true523, label %expr_false520, !dbg !36

expr_false520:                                    ; preds = %sample_brdf_cont
  %5133 = call float @__ocml_sqrt_f32(float %291), !dbg !37
  %5134 = fdiv float 1.000000e+00, %5133, !dbg !38
  %5135 = fmul float %5134, 0.000000e+00, !dbg !38
  store float %5135, float addrspace(5)* %5130, align 4, !dbg !38
  %5136 = fmul float %.pn823, %5134, !dbg !38
  store float %5136, float addrspace(5)* %5131, align 4, !dbg !38
  %5137 = fmul float %5134, %292, !dbg !38
  br label %if_join526, !dbg !38

expr_true523:                                     ; preds = %sample_brdf_cont
  %5138 = call float @__ocml_sqrt_f32(float %294), !dbg !37
  %5139 = fdiv float 1.000000e+00, %5138, !dbg !39
  %5140 = fmul float %5139, %295, !dbg !39
  store float %5140, float addrspace(5)* %5130, align 4, !dbg !39
  %5141 = fmul float %5139, 0.000000e+00, !dbg !39
  store float %5141, float addrspace(5)* %5131, align 4, !dbg !39
  %5142 = fmul float %.pn827, %5139, !dbg !39
  br label %if_join526, !dbg !39

if_join526:                                       ; preds = %expr_true523, %expr_false520
  %storemerge1007 = phi float [ %5137, %expr_false520 ], [ %5142, %expr_true523 ], !dbg !40
  store float %storemerge1007, float addrspace(5)* %5132, align 4, !dbg !40
  %5143 = extractvalue %11 %sample_brdf_cont513, 2, !dbg !41
  %5144 = fcmp ogt float %5143, 0.000000e+00, !dbg !41
  %.elt1008 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 0, !dbg !41
  %.unpack1009 = load float, float addrspace(5)* %.elt1008, align 4, !dbg !41
  %.elt1010 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 1, !dbg !41
  %.unpack1011 = load float, float addrspace(5)* %.elt1010, align 4, !dbg !41
  %.elt1012 = getelementptr inbounds %6, %6 addrspace(5)* %tangent_4455215, i32 0, i32 2, !dbg !41
  %.unpack1013 = load float, float addrspace(5)* %.elt1012, align 4, !dbg !41
  %5145 = fdiv float 1.000000e+00, %5126, !dbg !41
  %5146 = fmul float %5123, %5145, !dbg !41
  %5147 = fmul float %.pn827, %5146, !dbg !41
  %5148 = fmul float %5118, %5145, !dbg !41
  %5149 = fmul float %.unpack1009, %5148, !dbg !41
  %5150 = fadd float %5147, %5149, !dbg !41
  %5151 = fmul float %.pn825, %.unpack1013, !dbg !41
  %5152 = fmul float %.pn823, %.unpack1011, !dbg !41
  %5153 = fsub float %5151, %5152, !dbg !41
  %5154 = fmul float %5120, %5145, !dbg !41
  %5155 = fmul float %5153, %5154, !dbg !41
  %5156 = fadd float %5150, %5155, !dbg !41
  %5157 = fmul float %.pn825, %5146, !dbg !41
  %5158 = fmul float %.unpack1011, %5148, !dbg !41
  %5159 = fadd float %5157, %5158, !dbg !41
  %5160 = fmul float %.pn823, %.unpack1009, !dbg !41
  %5161 = fmul float %.pn827, %.unpack1013, !dbg !41
  %5162 = fsub float %5160, %5161, !dbg !41
  %5163 = fmul float %5162, %5154, !dbg !41
  %5164 = fadd float %5159, %5163, !dbg !41
  %5165 = fmul float %.pn823, %5146, !dbg !41
  %5166 = fmul float %.unpack1013, %5148, !dbg !41
  %5167 = fadd float %5165, %5166, !dbg !41
  %5168 = fmul float %.pn827, %.unpack1011, !dbg !41
  %5169 = fmul float %.pn825, %.unpack1009, !dbg !41
  %5170 = fsub float %5168, %5169, !dbg !41
  %5171 = fmul float %5170, %5154, !dbg !41
  %5172 = fadd float %5167, %5171, !dbg !41
  br i1 %5144, label %expr_true528, label %infix_result, !dbg !41

expr_true528:                                     ; preds = %if_join526
  %5173 = fmul float %5156, %.pn821, !dbg !126
  %5174 = fmul float %5164, %.pn819, !dbg !126
  %5175 = fadd float %5173, %5174, !dbg !126
  %5176 = fmul float %5172, %.pn817, !dbg !126
  %5177 = fadd float %5175, %5176, !dbg !126
  %5178 = fcmp ogt float %5177, 0.000000e+00, !dbg !126
  br i1 %5178, label %expr_true530, label %infix_result, !dbg !126

expr_true530:                                     ; preds = %expr_true528
  br label %infix_result, !dbg !127

infix_result:                                     ; preds = %if_join526, %expr_true528, %expr_true530
  %infix_result531 = phi i1 [ true, %expr_true530 ], [ false, %expr_true528 ], [ false, %if_join526 ], !dbg !128
  %.1214 = select i1 %infix_result531, float %5143, float 1.000000e+00, !dbg !129
  %5179 = fmul float %5118, %.pn827, !dbg !130
  %5180 = fmul float %5120, %.pn825, !dbg !130
  %5181 = fadd float %5179, %5180, !dbg !130
  %5182 = fmul float %5123, %.pn823, !dbg !130
  %5183 = fadd float %5181, %5182, !dbg !130
  br i1 %infix_result531, label %expr_true537, label %if_join538, !dbg !130

expr_true537:                                     ; preds = %infix_result
  %5184 = extractvalue %11 %sample_brdf_cont513, 0, !dbg !131
  %5185 = extractvalue %6 %5184, 0, !dbg !131
  %5186 = fdiv float %5143, %5183, !dbg !131
  %5187 = fmul float %5185, %5186, !dbg !131
  %5188 = insertvalue %9 undef, float %5187, 0, !dbg !131
  %5189 = extractvalue %6 %5184, 1, !dbg !131
  %5190 = fmul float %5189, %5186, !dbg !131
  %5191 = insertvalue %9 %5188, float %5190, 1, !dbg !131
  %5192 = extractvalue %6 %5184, 2, !dbg !131
  %5193 = fmul float %5192, %5186, !dbg !131
  %5194 = insertvalue %9 %5191, float %5193, 2, !dbg !131
  br label %if_join538, !dbg !131

if_join538:                                       ; preds = %infix_result, %expr_true537
  %if_join539 = phi %9 [ %5194, %expr_true537 ], [ zeroinitializer, %infix_result ], !dbg !132
  %.elt1020 = getelementptr inbounds %9, %9 addrspace(5)* %308, i32 0, i32 0, !dbg !132
  %.unpack1021 = load float, float addrspace(5)* %.elt1020, align 4, !dbg !132
  %.elt1022 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 1, !dbg !132
  %.unpack1023 = load float, float addrspace(5)* %.elt1022, align 4, !dbg !132
  %.elt1024 = getelementptr inbounds %8, %8 addrspace(5)* %state_4454625, i32 0, i32 1, i32 2, !dbg !132
  %.unpack1025 = load float, float addrspace(5)* %.elt1024, align 4, !dbg !132
  %5195 = load i32, i32 addrspace(5)* %155, align 4, !dbg !23
  %5196 = load i32, i32 addrspace(5)* %2524, align 4, !dbg !23
  store float %218, float* %36, align 4, !dbg !23
  store float %232, float* %40, align 4, !dbg !23
  store float %245, float* %44, align 4, !dbg !23
  store float %5156, float* %48, align 4, !dbg !23
  store float %5164, float* %53, align 4, !dbg !23
  store float %5172, float* %57, align 4, !dbg !23
  %5197 = extractvalue %1 %33, 7, !dbg !23
  %5198 = sext i32 %ray_id to i64, !dbg !23
  %5199 = getelementptr inbounds [0 x float], [0 x float]* %5197, i64 0, i64 %5198, !dbg !23
  store float 0x3F50624DE0000000, float* %5199, align 4, !dbg !23
  %5200 = extractvalue %1 %33, 8, !dbg !23
  %5201 = sext i32 %ray_id to i64, !dbg !23
  %5202 = getelementptr inbounds [0 x float], [0 x float]* %5200, i64 0, i64 %5201, !dbg !23
  store float 0x47EFFFFFE0000000, float* %5202, align 4, !dbg !23
  store i32 %5195, i32* %11, align 4, !dbg !23
  %5203 = extractvalue %9 %if_join539, 0, !dbg !23
  %5204 = fmul float %.unpack1021, %5203, !dbg !23
  %5205 = fmul float %.1214, %.prob, !dbg !23
  %5206 = fdiv float %5183, %5205, !dbg !23
  %5207 = fmul float %5204, %5206, !dbg !23
  store float %5207, float* %15, align 4, !dbg !23
  %5208 = extractvalue %9 %if_join539, 1, !dbg !23
  %5209 = fmul float %.unpack1023, %5208, !dbg !23
  %5210 = fmul float %5209, %5206, !dbg !23
  store float %5210, float* %19, align 4, !dbg !23
  %5211 = extractvalue %9 %if_join539, 2, !dbg !23
  %5212 = fmul float %.unpack1025, %5211, !dbg !23
  %5213 = fmul float %5212, %5206, !dbg !23
  store float %5213, float* %23, align 4, !dbg !23
  %5214 = fdiv float 1.000000e+00, %.1214, !dbg !23
  store float %5214, float* %27, align 4, !dbg !23
  %5215 = add nsw i32 %5196, 1, !dbg !23
  store i32 %5215, i32* %31, align 4, !dbg !23
  ret void, !dbg !23

expr_true549:                                     ; preds = %expr_false261
  store i32 -1, i32* %63, align 4, !dbg !87
  ret void, !dbg !87

expr_true550:                                     ; preds = %break
  store i32 -1, i32* %63, align 4, !dbg !86
  ret void, !dbg !86

expr_true551:                                     ; preds = %lambda_4087297
  ret void, !dbg !20
}

declare float @__ocml_sqrt_f32(float) local_unnamed_addr

declare float @__ocml_fabs_f32(float) local_unnamed_addr

declare float @__ocml_asin_f32(float) local_unnamed_addr

declare float @__ocml_atan2_f32(float, float) local_unnamed_addr

declare float @__ocml_floor_f32(float) local_unnamed_addr

define internal fastcc %10 @invert_warp2D2_4461194(%3* %warp_4461196, %5 %sample_4461197, float %dim_param_4461198, float %theta_i_4461199) unnamed_addr !dbg !133 {
invert_warp2D2:
  %dim_param_4461246 = alloca float, align 4, addrspace(5)
  %dim_4461205 = alloca i32, align 4, addrspace(5)
  %slice_offset_4461339 = alloca i32, align 4, addrspace(5)
  %param_weight_4461228 = alloca [4 x float], align 4, addrspace(5)
  %param_weight_4461228.repack = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 0, !dbg !135
  store float 0.000000e+00, float addrspace(5)* %param_weight_4461228.repack, align 4, !dbg !135
  %param_weight_4461228.repack35 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 1, !dbg !135
  store float 0.000000e+00, float addrspace(5)* %param_weight_4461228.repack35, align 4, !dbg !135
  %param_weight_4461228.repack36 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 2, !dbg !135
  store float 0.000000e+00, float addrspace(5)* %param_weight_4461228.repack36, align 4, !dbg !135
  %param_weight_4461228.repack37 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 3, !dbg !135
  store float 0.000000e+00, float addrspace(5)* %param_weight_4461228.repack37, align 4, !dbg !135
  store i32 0, i32 addrspace(5)* %slice_offset_4461339, align 4, !dbg !135
  store i32 0, i32 addrspace(5)* %dim_4461205, align 4, !dbg !135
  %0 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 4, !dbg !135
  %1 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 3, !dbg !135
  %2 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 5, !dbg !135
  %3 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 6, !dbg !135
  br label %expr_true, !dbg !136

expr_false:                                       ; preds = %continue
  %4 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 2, !dbg !137
  %.elt = getelementptr inbounds %5, %5* %4, i64 0, i32 0, !dbg !137
  %.unpack = load float, float* %.elt, align 4, !dbg !137
  %.elt38 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 2, i32 1, !dbg !137
  %.unpack39 = load float, float* %.elt38, align 4, !dbg !137
  %.elt40 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 0, i32 0, !dbg !137
  %.unpack41 = load i32, i32* %.elt40, align 4, !dbg !137
  %.elt42 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 0, i32 1, !dbg !137
  %.unpack43 = load i32, i32* %.elt42, align 4, !dbg !137
  %5 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 0, i32 0, !dbg !137
  %6 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 0, i32 1, !dbg !137
  %7 = load i32, i32 addrspace(5)* %slice_offset_4461339, align 4, !dbg !137
  %8 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 7, !dbg !137
  %9 = load [0 x float]*, [0 x float]** %8, align 8, !dbg !137
  %10 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %10, i64 0, i64 1, !dbg !137
  %12 = load i32, i32* %11, align 4, !dbg !137
  %13 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 2, !dbg !137
  %14 = addrspacecast float addrspace(5)* %13 to float*, !dbg !137
  %15 = load float, float* %14, align 4, !dbg !137
  %16 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 3, !dbg !137
  %17 = addrspacecast float addrspace(5)* %16 to float*, !dbg !137
  %18 = load float, float* %17, align 4, !dbg !137
  %19 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %20 = getelementptr inbounds [0 x i32], [0 x i32]* %19, i64 0, i64 0, !dbg !137
  %21 = load i32, i32* %20, align 4, !dbg !137
  %22 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 0, !dbg !137
  %23 = addrspacecast float addrspace(5)* %22 to float*, !dbg !137
  %24 = load float, float* %23, align 4, !dbg !137
  %25 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 1, !dbg !137
  %26 = addrspacecast float addrspace(5)* %25 to float*, !dbg !137
  %27 = load float, float* %26, align 4, !dbg !137
  %28 = extractvalue %5 %sample_4461197, 0, !dbg !137
  %29 = fmul float %28, %.unpack, !dbg !137
  %30 = sitofp i32 %.unpack41 to float, !dbg !137
  %31 = fadd float %30, -2.000000e+00, !dbg !137
  %32 = fcmp olt float %29, %31, !dbg !137
  %33 = select i1 %32, float %29, float %31, !dbg !137
  %34 = fptosi float %33 to i32, !dbg !137
  %35 = extractvalue %5 %sample_4461197, 1, !dbg !137
  %36 = fmul float %35, %.unpack39, !dbg !137
  %37 = sitofp i32 %.unpack43 to float, !dbg !137
  %38 = fadd float %37, -2.000000e+00, !dbg !137
  %39 = fcmp olt float %36, %38, !dbg !137
  %40 = select i1 %39, float %36, float %38, !dbg !137
  %41 = fptosi float %40 to i32, !dbg !137
  %42 = mul nsw i32 %.unpack41, %41, !dbg !137
  %offset = add nsw i32 %42, %34, !dbg !137
  %slice_size = mul nsw i32 %.unpack41, %.unpack43, !dbg !137
  %43 = mul nsw i32 %7, %slice_size, !dbg !137
  %44 = add nsw i32 %offset, %43, !dbg !137
  %45 = sext i32 %44 to i64, !dbg !137
  %46 = getelementptr inbounds [0 x float], [0 x float]* %9, i64 0, i64 %45, !dbg !137
  %47 = load float, float* %46, align 4, !dbg !137
  %48 = mul nsw i32 %21, %slice_size, !dbg !137
  %i1 = add nsw i32 %44, %48, !dbg !137
  %49 = sext i32 %i1 to i64, !dbg !137
  %50 = getelementptr inbounds [0 x float], [0 x float]* %9, i64 0, i64 %49, !dbg !137
  %51 = load float, float* %50, align 4, !dbg !137
  %52 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %53 = getelementptr inbounds [0 x i32], [0 x i32]* %52, i64 0, i64 0, !dbg !137
  %54 = load i32, i32* %53, align 4, !dbg !137
  %55 = load float, float* %23, align 4, !dbg !137
  %56 = load float, float* %26, align 4, !dbg !137
  %57 = mul nsw i32 %12, %slice_size, !dbg !137
  %i19 = add nsw i32 %44, %57, !dbg !137
  %58 = sext i32 %i19 to i64, !dbg !137
  %59 = getelementptr inbounds [0 x float], [0 x float]* %9, i64 0, i64 %58, !dbg !137
  %60 = load float, float* %59, align 4, !dbg !137
  %61 = mul nsw i32 %54, %slice_size, !dbg !137
  %i110 = add nsw i32 %i19, %61, !dbg !137
  %62 = sext i32 %i110 to i64, !dbg !137
  %63 = getelementptr inbounds [0 x float], [0 x float]* %9, i64 0, i64 %62, !dbg !137
  %64 = load float, float* %63, align 4, !dbg !137
  %65 = load [0 x float]*, [0 x float]** %8, align 8, !dbg !137
  %66 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %67 = getelementptr inbounds [0 x i32], [0 x i32]* %66, i64 0, i64 1, !dbg !137
  %68 = load i32, i32* %67, align 4, !dbg !137
  %69 = load float, float* %14, align 4, !dbg !137
  %70 = load float, float* %17, align 4, !dbg !137
  %71 = getelementptr inbounds [0 x i32], [0 x i32]* %66, i64 0, i64 0, !dbg !137
  %72 = load i32, i32* %71, align 4, !dbg !137
  %73 = load float, float* %23, align 4, !dbg !137
  %74 = load float, float* %26, align 4, !dbg !137
  %75 = getelementptr inbounds [0 x float], [0 x float]* %65, i64 0, i64 1, !dbg !137
  %76 = sext i32 %44 to i64, !dbg !137
  %77 = getelementptr inbounds float, float* %75, i64 %76, !dbg !137
  %78 = load float, float* %77, align 4, !dbg !137
  %79 = mul nsw i32 %72, %slice_size, !dbg !137
  %i111 = add nsw i32 %44, %79, !dbg !137
  %80 = sext i32 %i111 to i64, !dbg !137
  %81 = getelementptr inbounds float, float* %75, i64 %80, !dbg !137
  %82 = load float, float* %81, align 4, !dbg !137
  %83 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %84 = getelementptr inbounds [0 x i32], [0 x i32]* %83, i64 0, i64 0, !dbg !137
  %85 = load i32, i32* %84, align 4, !dbg !137
  %86 = load float, float* %23, align 4, !dbg !137
  %87 = load float, float* %26, align 4, !dbg !137
  %88 = mul nsw i32 %68, %slice_size, !dbg !137
  %i112 = add nsw i32 %44, %88, !dbg !137
  %89 = sext i32 %i112 to i64, !dbg !137
  %90 = getelementptr inbounds float, float* %75, i64 %89, !dbg !137
  %91 = load float, float* %90, align 4, !dbg !137
  %92 = mul nsw i32 %85, %slice_size, !dbg !137
  %i113 = add nsw i32 %i112, %92, !dbg !137
  %93 = sext i32 %i113 to i64, !dbg !137
  %94 = getelementptr inbounds float, float* %75, i64 %93, !dbg !137
  %95 = load float, float* %94, align 4, !dbg !137
  %96 = load [0 x float]*, [0 x float]** %8, align 8, !dbg !137
  %97 = load i32, i32* %5, align 4, !dbg !137
  %98 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %99 = getelementptr inbounds [0 x i32], [0 x i32]* %98, i64 0, i64 1, !dbg !137
  %100 = load i32, i32* %99, align 4, !dbg !137
  %101 = load float, float* %14, align 4, !dbg !137
  %102 = load float, float* %17, align 4, !dbg !137
  %103 = getelementptr inbounds [0 x i32], [0 x i32]* %98, i64 0, i64 0, !dbg !137
  %104 = load i32, i32* %103, align 4, !dbg !137
  %105 = load float, float* %23, align 4, !dbg !137
  %106 = load float, float* %26, align 4, !dbg !137
  %107 = sext i32 %97 to i64, !dbg !137
  %108 = getelementptr inbounds [0 x float], [0 x float]* %96, i64 0, i64 %107, !dbg !137
  %109 = sext i32 %44 to i64, !dbg !137
  %110 = getelementptr inbounds float, float* %108, i64 %109, !dbg !137
  %111 = load float, float* %110, align 4, !dbg !137
  %112 = mul nsw i32 %104, %slice_size, !dbg !137
  %i114 = add nsw i32 %44, %112, !dbg !137
  %113 = sext i32 %i114 to i64, !dbg !137
  %114 = getelementptr inbounds float, float* %108, i64 %113, !dbg !137
  %115 = load float, float* %114, align 4, !dbg !137
  %116 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %117 = getelementptr inbounds [0 x i32], [0 x i32]* %116, i64 0, i64 0, !dbg !137
  %118 = load i32, i32* %117, align 4, !dbg !137
  %119 = load float, float* %23, align 4, !dbg !137
  %120 = load float, float* %26, align 4, !dbg !137
  %121 = mul nsw i32 %100, %slice_size, !dbg !137
  %i115 = add nsw i32 %44, %121, !dbg !137
  %122 = sext i32 %i115 to i64, !dbg !137
  %123 = getelementptr inbounds float, float* %108, i64 %122, !dbg !137
  %124 = load float, float* %123, align 4, !dbg !137
  %125 = mul nsw i32 %118, %slice_size, !dbg !137
  %i116 = add nsw i32 %i115, %125, !dbg !137
  %126 = sext i32 %i116 to i64, !dbg !137
  %127 = getelementptr inbounds float, float* %108, i64 %126, !dbg !137
  %128 = load float, float* %127, align 4, !dbg !137
  %129 = load [0 x float]*, [0 x float]** %8, align 8, !dbg !137
  %130 = load i32, i32* %5, align 4, !dbg !137
  %131 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %132 = getelementptr inbounds [0 x i32], [0 x i32]* %131, i64 0, i64 1, !dbg !137
  %133 = load i32, i32* %132, align 4, !dbg !137
  %134 = load float, float* %14, align 4, !dbg !137
  %135 = load float, float* %17, align 4, !dbg !137
  %136 = getelementptr inbounds [0 x i32], [0 x i32]* %131, i64 0, i64 0, !dbg !137
  %137 = load i32, i32* %136, align 4, !dbg !137
  %138 = load float, float* %23, align 4, !dbg !137
  %139 = load float, float* %26, align 4, !dbg !137
  %140 = add nsw i32 %130, 1, !dbg !137
  %141 = sext i32 %140 to i64, !dbg !137
  %142 = getelementptr inbounds [0 x float], [0 x float]* %129, i64 0, i64 %141, !dbg !137
  %143 = sext i32 %44 to i64, !dbg !137
  %144 = getelementptr inbounds float, float* %142, i64 %143, !dbg !137
  %145 = load float, float* %144, align 4, !dbg !137
  %146 = mul nsw i32 %137, %slice_size, !dbg !137
  %i117 = add nsw i32 %44, %146, !dbg !137
  %147 = sext i32 %i117 to i64, !dbg !137
  %148 = getelementptr inbounds float, float* %142, i64 %147, !dbg !137
  %149 = load float, float* %148, align 4, !dbg !137
  %150 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %151 = getelementptr inbounds [0 x i32], [0 x i32]* %150, i64 0, i64 0, !dbg !137
  %152 = load i32, i32* %151, align 4, !dbg !137
  %153 = load float, float* %23, align 4, !dbg !137
  %154 = load float, float* %26, align 4, !dbg !137
  %155 = mul nsw i32 %133, %slice_size, !dbg !137
  %i118 = add nsw i32 %44, %155, !dbg !137
  %156 = sext i32 %i118 to i64, !dbg !137
  %157 = getelementptr inbounds float, float* %142, i64 %156, !dbg !137
  %158 = load float, float* %157, align 4, !dbg !137
  %159 = mul nsw i32 %152, %slice_size, !dbg !137
  %i119 = add nsw i32 %i118, %159, !dbg !137
  %160 = sext i32 %i119 to i64, !dbg !137
  %161 = getelementptr inbounds float, float* %142, i64 %160, !dbg !137
  %162 = load float, float* %161, align 4, !dbg !137
  %163 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 9, !dbg !137
  %164 = load [0 x float]*, [0 x float]** %163, align 8, !dbg !137
  %165 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %166 = getelementptr inbounds [0 x i32], [0 x i32]* %165, i64 0, i64 1, !dbg !137
  %167 = load i32, i32* %166, align 4, !dbg !137
  %168 = load float, float* %14, align 4, !dbg !137
  %169 = load float, float* %17, align 4, !dbg !137
  %170 = getelementptr inbounds [0 x i32], [0 x i32]* %165, i64 0, i64 0, !dbg !137
  %171 = load i32, i32* %170, align 4, !dbg !137
  %172 = load float, float* %23, align 4, !dbg !137
  %173 = load float, float* %26, align 4, !dbg !137
  %174 = sext i32 %44 to i64, !dbg !137
  %175 = getelementptr inbounds [0 x float], [0 x float]* %164, i64 0, i64 %174, !dbg !137
  %176 = load float, float* %175, align 4, !dbg !137
  %177 = mul nsw i32 %171, %slice_size, !dbg !137
  %i120 = add nsw i32 %44, %177, !dbg !137
  %178 = sext i32 %i120 to i64, !dbg !137
  %179 = getelementptr inbounds [0 x float], [0 x float]* %164, i64 0, i64 %178, !dbg !137
  %180 = load float, float* %179, align 4, !dbg !137
  %181 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %182 = getelementptr inbounds [0 x i32], [0 x i32]* %181, i64 0, i64 0, !dbg !137
  %183 = load i32, i32* %182, align 4, !dbg !137
  %184 = load float, float* %23, align 4, !dbg !137
  %185 = load float, float* %26, align 4, !dbg !137
  %186 = mul nsw i32 %167, %slice_size, !dbg !137
  %i121 = add nsw i32 %44, %186, !dbg !137
  %187 = sext i32 %i121 to i64, !dbg !137
  %188 = getelementptr inbounds [0 x float], [0 x float]* %164, i64 0, i64 %187, !dbg !137
  %189 = load float, float* %188, align 4, !dbg !137
  %190 = mul nsw i32 %183, %slice_size, !dbg !137
  %i122 = add nsw i32 %i121, %190, !dbg !137
  %191 = sext i32 %i122 to i64, !dbg !137
  %192 = getelementptr inbounds [0 x float], [0 x float]* %164, i64 0, i64 %191, !dbg !137
  %193 = load float, float* %192, align 4, !dbg !137
  %194 = load [0 x float]*, [0 x float]** %163, align 8, !dbg !137
  %195 = load i32, i32* %5, align 4, !dbg !137
  %196 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %197 = getelementptr inbounds [0 x i32], [0 x i32]* %196, i64 0, i64 1, !dbg !137
  %198 = load i32, i32* %197, align 4, !dbg !137
  %199 = load float, float* %14, align 4, !dbg !137
  %200 = load float, float* %17, align 4, !dbg !137
  %201 = getelementptr inbounds [0 x i32], [0 x i32]* %196, i64 0, i64 0, !dbg !137
  %202 = load i32, i32* %201, align 4, !dbg !137
  %203 = load float, float* %23, align 4, !dbg !137
  %204 = load float, float* %26, align 4, !dbg !137
  %205 = sext i32 %195 to i64, !dbg !137
  %206 = getelementptr inbounds [0 x float], [0 x float]* %194, i64 0, i64 %205, !dbg !137
  %207 = sext i32 %44 to i64, !dbg !137
  %208 = getelementptr inbounds float, float* %206, i64 %207, !dbg !137
  %209 = load float, float* %208, align 4, !dbg !137
  %210 = mul nsw i32 %202, %slice_size, !dbg !137
  %i123 = add nsw i32 %44, %210, !dbg !137
  %211 = sext i32 %i123 to i64, !dbg !137
  %212 = getelementptr inbounds float, float* %206, i64 %211, !dbg !137
  %213 = load float, float* %212, align 4, !dbg !137
  %214 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %215 = getelementptr inbounds [0 x i32], [0 x i32]* %214, i64 0, i64 0, !dbg !137
  %216 = load i32, i32* %215, align 4, !dbg !137
  %217 = load float, float* %23, align 4, !dbg !137
  %218 = load float, float* %26, align 4, !dbg !137
  %219 = mul nsw i32 %198, %slice_size, !dbg !137
  %i124 = add nsw i32 %44, %219, !dbg !137
  %220 = sext i32 %i124 to i64, !dbg !137
  %221 = getelementptr inbounds float, float* %206, i64 %220, !dbg !137
  %222 = load float, float* %221, align 4, !dbg !137
  %223 = mul nsw i32 %216, %slice_size, !dbg !137
  %i125 = add nsw i32 %i124, %223, !dbg !137
  %224 = sext i32 %i125 to i64, !dbg !137
  %225 = getelementptr inbounds float, float* %206, i64 %224, !dbg !137
  %226 = load float, float* %225, align 4, !dbg !137
  %227 = load i32, i32* %5, align 4, !dbg !137
  %228 = load i32, i32 addrspace(5)* %slice_offset_4461339, align 4, !dbg !137
  %229 = load [0 x float]*, [0 x float]** %163, align 8, !dbg !137
  %230 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %231 = getelementptr inbounds [0 x i32], [0 x i32]* %230, i64 0, i64 1, !dbg !137
  %232 = load i32, i32* %231, align 4, !dbg !137
  %233 = load float, float* %14, align 4, !dbg !137
  %234 = load float, float* %17, align 4, !dbg !137
  %235 = getelementptr inbounds [0 x i32], [0 x i32]* %230, i64 0, i64 0, !dbg !137
  %236 = load i32, i32* %235, align 4, !dbg !137
  %237 = load float, float* %23, align 4, !dbg !137
  %238 = load float, float* %26, align 4, !dbg !137
  %239 = mul nsw i32 %227, %41, !dbg !137
  %240 = mul nsw i32 %228, %slice_size, !dbg !137
  %241 = add nsw i32 %239, %240, !dbg !137
  %242 = add nsw i32 %241, %227, !dbg !137
  %243 = add nsw i32 %242, -1, !dbg !137
  %244 = sext i32 %243 to i64, !dbg !137
  %245 = getelementptr inbounds [0 x float], [0 x float]* %229, i64 0, i64 %244, !dbg !137
  %246 = load float, float* %245, align 4, !dbg !137
  %247 = mul nsw i32 %236, %slice_size, !dbg !137
  %i126 = add nsw i32 %243, %247, !dbg !137
  %248 = sext i32 %i126 to i64, !dbg !137
  %249 = getelementptr inbounds [0 x float], [0 x float]* %229, i64 0, i64 %248, !dbg !137
  %250 = load float, float* %249, align 4, !dbg !137
  %251 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %252 = getelementptr inbounds [0 x i32], [0 x i32]* %251, i64 0, i64 0, !dbg !137
  %253 = load i32, i32* %252, align 4, !dbg !137
  %254 = load float, float* %23, align 4, !dbg !137
  %255 = load float, float* %26, align 4, !dbg !137
  %256 = mul nsw i32 %232, %slice_size, !dbg !137
  %i127 = add nsw i32 %243, %256, !dbg !137
  %257 = sext i32 %i127 to i64, !dbg !137
  %258 = getelementptr inbounds [0 x float], [0 x float]* %229, i64 0, i64 %257, !dbg !137
  %259 = load float, float* %258, align 4, !dbg !137
  %260 = mul nsw i32 %253, %slice_size, !dbg !137
  %i128 = add nsw i32 %i127, %260, !dbg !137
  %261 = sext i32 %i128 to i64, !dbg !137
  %262 = getelementptr inbounds [0 x float], [0 x float]* %229, i64 0, i64 %261, !dbg !137
  %263 = load float, float* %262, align 4, !dbg !137
  %264 = load [0 x float]*, [0 x float]** %163, align 8, !dbg !137
  %265 = load i32, i32* %5, align 4, !dbg !137
  %266 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %267 = getelementptr inbounds [0 x i32], [0 x i32]* %266, i64 0, i64 1, !dbg !137
  %268 = load i32, i32* %267, align 4, !dbg !137
  %269 = load float, float* %14, align 4, !dbg !137
  %270 = load float, float* %17, align 4, !dbg !137
  %271 = getelementptr inbounds [0 x i32], [0 x i32]* %266, i64 0, i64 0, !dbg !137
  %272 = load i32, i32* %271, align 4, !dbg !137
  %273 = load float, float* %23, align 4, !dbg !137
  %274 = load float, float* %26, align 4, !dbg !137
  %275 = shl nsw i32 %265, 1, !dbg !137
  %276 = add nsw i32 %275, -1, !dbg !137
  %277 = add nsw i32 %241, %276, !dbg !137
  %278 = sext i32 %277 to i64, !dbg !137
  %279 = getelementptr inbounds [0 x float], [0 x float]* %264, i64 0, i64 %278, !dbg !137
  %280 = load float, float* %279, align 4, !dbg !137
  %281 = mul nsw i32 %272, %slice_size, !dbg !137
  %i129 = add nsw i32 %277, %281, !dbg !137
  %282 = sext i32 %i129 to i64, !dbg !137
  %283 = getelementptr inbounds [0 x float], [0 x float]* %264, i64 0, i64 %282, !dbg !137
  %284 = load float, float* %283, align 4, !dbg !137
  %285 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %286 = getelementptr inbounds [0 x i32], [0 x i32]* %285, i64 0, i64 0, !dbg !137
  %287 = load i32, i32* %286, align 4, !dbg !137
  %288 = load float, float* %23, align 4, !dbg !137
  %289 = load float, float* %26, align 4, !dbg !137
  %290 = mul nsw i32 %268, %slice_size, !dbg !137
  %i130 = add nsw i32 %277, %290, !dbg !137
  %291 = sext i32 %i130 to i64, !dbg !137
  %292 = getelementptr inbounds [0 x float], [0 x float]* %264, i64 0, i64 %291, !dbg !137
  %293 = load float, float* %292, align 4, !dbg !137
  %294 = mul nsw i32 %287, %slice_size, !dbg !137
  %i131 = add nsw i32 %i130, %294, !dbg !137
  %295 = sext i32 %i131 to i64, !dbg !137
  %296 = getelementptr inbounds [0 x float], [0 x float]* %264, i64 0, i64 %295, !dbg !137
  %297 = load float, float* %296, align 4, !dbg !137
  %298 = sitofp i32 %41 to float, !dbg !137
  %299 = fsub float %36, %298, !dbg !137
  %300 = fmul float %246, %237, !dbg !137
  %301 = fmul float %250, %238, !dbg !137
  %302 = fadd float %300, %301, !dbg !137
  %303 = fmul float %302, %233, !dbg !137
  %304 = fmul float %259, %254, !dbg !137
  %305 = fmul float %263, %255, !dbg !137
  %306 = fadd float %304, %305, !dbg !137
  %307 = fmul float %306, %234, !dbg !137
  %308 = fadd float %303, %307, !dbg !137
  %309 = fmul float %299, 5.000000e-01, !dbg !137
  %310 = fmul float %280, %273, !dbg !137
  %311 = fmul float %284, %274, !dbg !137
  %312 = fadd float %310, %311, !dbg !137
  %313 = fmul float %312, %269, !dbg !137
  %314 = fmul float %293, %288, !dbg !137
  %315 = fmul float %297, %289, !dbg !137
  %316 = fadd float %314, %315, !dbg !137
  %317 = fmul float %316, %270, !dbg !137
  %318 = fadd float %313, %317, !dbg !137
  %319 = fsub float %318, %308, !dbg !137
  %320 = fmul float %309, %319, !dbg !137
  %321 = fadd float %308, %320, !dbg !137
  %322 = fmul float %299, %321, !dbg !137
  %323 = load i32, i32 addrspace(5)* %slice_offset_4461339, align 4, !dbg !137
  %324 = load i32, i32* %6, align 4, !dbg !137
  %325 = mul nsw i32 %323, %324, !dbg !137
  %326 = add nsw i32 %325, %41, !dbg !137
  %327 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 8, !dbg !137
  %328 = load [0 x float]*, [0 x float]** %327, align 8, !dbg !137
  %329 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %330 = getelementptr inbounds [0 x i32], [0 x i32]* %329, i64 0, i64 1, !dbg !137
  %331 = load i32, i32* %330, align 4, !dbg !137
  %332 = load float, float* %14, align 4, !dbg !137
  %333 = load float, float* %17, align 4, !dbg !137
  %334 = getelementptr inbounds [0 x i32], [0 x i32]* %329, i64 0, i64 0, !dbg !137
  %335 = load i32, i32* %334, align 4, !dbg !137
  %336 = load float, float* %23, align 4, !dbg !137
  %337 = load float, float* %26, align 4, !dbg !137
  %338 = sext i32 %326 to i64, !dbg !137
  %339 = getelementptr inbounds [0 x float], [0 x float]* %328, i64 0, i64 %338, !dbg !137
  %340 = load float, float* %339, align 4, !dbg !137
  %341 = mul nsw i32 %335, %324, !dbg !137
  %i132 = add nsw i32 %326, %341, !dbg !137
  %342 = sext i32 %i132 to i64, !dbg !137
  %343 = getelementptr inbounds [0 x float], [0 x float]* %328, i64 0, i64 %342, !dbg !137
  %344 = load float, float* %343, align 4, !dbg !137
  %345 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !137
  %346 = getelementptr inbounds [0 x i32], [0 x i32]* %345, i64 0, i64 0, !dbg !137
  %347 = load i32, i32* %346, align 4, !dbg !137
  %348 = load float, float* %23, align 4, !dbg !137
  %349 = load float, float* %26, align 4, !dbg !137
  %350 = mul nsw i32 %331, %324, !dbg !137
  %i133 = add nsw i32 %326, %350, !dbg !137
  %351 = sext i32 %i133 to i64, !dbg !137
  %352 = getelementptr inbounds [0 x float], [0 x float]* %328, i64 0, i64 %351, !dbg !137
  %353 = load float, float* %352, align 4, !dbg !137
  %354 = mul nsw i32 %347, %324, !dbg !137
  %i134 = add nsw i32 %i133, %354, !dbg !137
  %355 = sext i32 %i134 to i64, !dbg !137
  %356 = getelementptr inbounds [0 x float], [0 x float]* %328, i64 0, i64 %355, !dbg !137
  %357 = load float, float* %356, align 4, !dbg !137
  %358 = fmul float %340, %336, !dbg !137
  %359 = fmul float %344, %337, !dbg !137
  %360 = fadd float %358, %359, !dbg !137
  %361 = fmul float %360, %332, !dbg !137
  %362 = fmul float %353, %348, !dbg !137
  %363 = fmul float %357, %349, !dbg !137
  %364 = fadd float %362, %363, !dbg !137
  %365 = fmul float %364, %333, !dbg !137
  %366 = fadd float %361, %365, !dbg !137
  %367 = fadd float %322, %366, !dbg !137
  %368 = getelementptr inbounds %5, %5* %4, i64 0, i32 0, !dbg !137
  %369 = load float, float* %368, align 4, !dbg !137
  %370 = getelementptr inbounds %3, %3* %warp_4461196, i64 0, i32 2, i32 1, !dbg !137
  %371 = load float, float* %370, align 4, !dbg !137
  %372 = sitofp i32 %34 to float, !dbg !137
  %373 = fsub float %29, %372, !dbg !137
  %374 = fsub float 1.000000e+00, %299, !dbg !137
  %375 = fmul float %47, %24, !dbg !137
  %376 = fmul float %51, %27, !dbg !137
  %377 = fadd float %375, %376, !dbg !137
  %378 = fmul float %377, %15, !dbg !137
  %379 = fmul float %60, %55, !dbg !137
  %380 = fmul float %64, %56, !dbg !137
  %381 = fadd float %379, %380, !dbg !137
  %382 = fmul float %381, %18, !dbg !137
  %383 = fadd float %378, %382, !dbg !137
  %384 = fmul float %374, %383, !dbg !137
  %385 = fmul float %111, %105, !dbg !137
  %386 = fmul float %115, %106, !dbg !137
  %387 = fadd float %385, %386, !dbg !137
  %388 = fmul float %387, %101, !dbg !137
  %389 = fmul float %124, %119, !dbg !137
  %390 = fmul float %128, %120, !dbg !137
  %391 = fadd float %389, %390, !dbg !137
  %392 = fmul float %391, %102, !dbg !137
  %393 = fadd float %388, %392, !dbg !137
  %394 = fmul float %299, %393, !dbg !137
  %395 = fadd float %384, %394, !dbg !137
  %396 = fmul float %373, 5.000000e-01, !dbg !137
  %397 = fmul float %78, %73, !dbg !137
  %398 = fmul float %82, %74, !dbg !137
  %399 = fadd float %397, %398, !dbg !137
  %400 = fmul float %399, %69, !dbg !137
  %401 = fmul float %91, %86, !dbg !137
  %402 = fmul float %95, %87, !dbg !137
  %403 = fadd float %401, %402, !dbg !137
  %404 = fmul float %403, %70, !dbg !137
  %405 = fadd float %400, %404, !dbg !137
  %406 = fmul float %374, %405, !dbg !137
  %407 = fmul float %145, %138, !dbg !137
  %408 = fmul float %149, %139, !dbg !137
  %409 = fadd float %407, %408, !dbg !137
  %410 = fmul float %409, %134, !dbg !137
  %411 = fmul float %158, %153, !dbg !137
  %412 = fmul float %162, %154, !dbg !137
  %413 = fadd float %411, %412, !dbg !137
  %414 = fmul float %413, %135, !dbg !137
  %415 = fadd float %410, %414, !dbg !137
  %416 = fmul float %299, %415, !dbg !137
  %417 = fadd float %406, %416, !dbg !137
  %418 = fsub float %417, %395, !dbg !137
  %419 = fmul float %396, %418, !dbg !137
  %420 = fadd float %395, %419, !dbg !137
  %421 = fmul float %373, %420, !dbg !137
  %422 = fmul float %176, %172, !dbg !137
  %423 = fmul float %180, %173, !dbg !137
  %424 = fadd float %422, %423, !dbg !137
  %425 = fmul float %424, %168, !dbg !137
  %426 = fmul float %189, %184, !dbg !137
  %427 = fmul float %193, %185, !dbg !137
  %428 = fadd float %426, %427, !dbg !137
  %429 = fmul float %428, %169, !dbg !137
  %430 = fadd float %425, %429, !dbg !137
  %431 = fmul float %374, %430, !dbg !137
  %432 = fmul float %209, %203, !dbg !137
  %433 = fmul float %213, %204, !dbg !137
  %434 = fadd float %432, %433, !dbg !137
  %435 = fmul float %434, %199, !dbg !137
  %436 = fmul float %222, %217, !dbg !137
  %437 = fmul float %226, %218, !dbg !137
  %438 = fadd float %436, %437, !dbg !137
  %439 = fmul float %438, %200, !dbg !137
  %440 = fadd float %435, %439, !dbg !137
  %441 = fmul float %299, %440, !dbg !137
  %442 = fadd float %431, %441, !dbg !137
  %443 = fadd float %421, %442, !dbg !137
  %444 = fmul float %374, %308, !dbg !137
  %445 = fmul float %299, %318, !dbg !137
  %446 = fadd float %444, %445, !dbg !137
  %447 = fdiv float %443, %446, !dbg !137
  %448 = insertvalue %5 undef, float %447, 0, !dbg !137
  %449 = insertvalue %5 %448, float %367, 1, !dbg !137
  %450 = insertvalue %10 undef, %5 %449, 0, !dbg !137
  %451 = fsub float 1.000000e+00, %373, !dbg !137
  %452 = fmul float %451, %395, !dbg !137
  %453 = fmul float %373, %417, !dbg !137
  %454 = fadd float %452, %453, !dbg !137
  %455 = fmul float %369, %371, !dbg !137
  %456 = fmul float %454, %455, !dbg !137
  %457 = insertvalue %10 %450, float %456, 1, !dbg !137
  ret %10 %457, !dbg !137

expr_true:                                        ; preds = %invert_warp2D2, %continue
  %458 = load [0 x i32]*, [0 x i32]** %1, align 8, !dbg !137
  %459 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !137
  %460 = sext i32 %459 to i64, !dbg !137
  %461 = getelementptr inbounds [0 x i32], [0 x i32]* %458, i64 0, i64 %460, !dbg !137
  %462 = load i32, i32* %461, align 4, !dbg !137
  %463 = icmp eq i32 %462, 1, !dbg !137
  br i1 %463, label %expr_true8, label %expr_false1, !dbg !137

expr_false1:                                      ; preds = %expr_true
  store float %dim_param_4461198, float addrspace(5)* %dim_param_4461246, align 4, !dbg !138
  %464 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !138
  %465 = icmp eq i32 %464, 1, !dbg !138
  %spec.store.select = select i1 %465, float %theta_i_4461199, float %dim_param_4461198, !dbg !138
  store float %spec.store.select, float addrspace(5)* %dim_param_4461246, align 4, !dbg !139
  %466 = call fastcc i32 @find_interval_eval_4455546(%3* %warp_4461196, i32 %464, float %spec.store.select), !dbg !140
  %467 = load [0 x float]*, [0 x float]** %2, align 8, !dbg !141
  %468 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !141
  %469 = load i32, i32* %3, align 4, !dbg !141
  %470 = mul nsw i32 %468, %469, !dbg !141
  %471 = add nsw i32 %470, %466, !dbg !141
  %472 = sext i32 %471 to i64, !dbg !141
  %473 = getelementptr inbounds [0 x float], [0 x float]* %467, i64 0, i64 %472, !dbg !141
  %474 = load float, float* %473, align 4, !dbg !141
  %475 = load [0 x float]*, [0 x float]** %2, align 8, !dbg !141
  %476 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !141
  %477 = load i32, i32* %3, align 4, !dbg !141
  %478 = mul nsw i32 %476, %477, !dbg !141
  %479 = add nsw i32 %478, %466, !dbg !141
  %480 = add nsw i32 %479, 1, !dbg !141
  %481 = sext i32 %480 to i64, !dbg !141
  %482 = getelementptr inbounds [0 x float], [0 x float]* %475, i64 0, i64 %481, !dbg !141
  %483 = load float, float* %482, align 4, !dbg !141
  %484 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !141
  %485 = load float, float addrspace(5)* %dim_param_4461246, align 4, !dbg !141
  %486 = fsub float %485, %474, !dbg !141
  %487 = fsub float %483, %474, !dbg !141
  %488 = fdiv float %486, %487, !dbg !141
  %489 = fcmp olt float %488, 0.000000e+00, !dbg !141
  %490 = fcmp ogt float %488, 1.000000e+00, !dbg !141
  %. = select i1 %490, float 1.000000e+00, float %488, !dbg !141
  %clampf = select i1 %489, float 0.000000e+00, float %., !dbg !141
  %491 = shl nsw i32 %484, 1, !dbg !142
  %492 = or i32 %491, 1, !dbg !142
  %493 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 %492, !dbg !142
  store float %clampf, float addrspace(5)* %493, align 4, !dbg !142
  %494 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !142
  %495 = shl nsw i32 %494, 1, !dbg !142
  %496 = or i32 %495, 1, !dbg !142
  %497 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 %496, !dbg !142
  %498 = load float, float addrspace(5)* %497, align 4, !dbg !142
  %499 = shl nsw i32 %494, 1, !dbg !142
  %500 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 %499, !dbg !142
  %501 = fsub float 1.000000e+00, %498, !dbg !142
  store float %501, float addrspace(5)* %500, align 4, !dbg !142
  %502 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !142
  %503 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !142
  %504 = sext i32 %503 to i64, !dbg !142
  %505 = getelementptr inbounds [0 x i32], [0 x i32]* %502, i64 0, i64 %504, !dbg !142
  %506 = load i32, i32* %505, align 4, !dbg !142
  %507 = load i32, i32 addrspace(5)* %slice_offset_4461339, align 4, !dbg !142
  %508 = mul nsw i32 %506, %466, !dbg !142
  %509 = add nsw i32 %507, %508, !dbg !142
  store i32 %509, i32 addrspace(5)* %slice_offset_4461339, align 4, !dbg !142
  %510 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !142
  br label %continue, !dbg !142

expr_true8:                                       ; preds = %expr_true
  %511 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !138
  %512 = shl nsw i32 %511, 1, !dbg !138
  %513 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 %512, !dbg !138
  store float 1.000000e+00, float addrspace(5)* %513, align 4, !dbg !138
  %514 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !138
  %515 = shl nsw i32 %514, 1, !dbg !138
  %516 = or i32 %515, 1, !dbg !138
  %517 = getelementptr inbounds [4 x float], [4 x float] addrspace(5)* %param_weight_4461228, i32 0, i32 %516, !dbg !138
  store float 0.000000e+00, float addrspace(5)* %517, align 4, !dbg !138
  %518 = load i32, i32 addrspace(5)* %dim_4461205, align 4, !dbg !138
  br label %continue, !dbg !138

continue:                                         ; preds = %expr_true8, %expr_false1
  %storemerge.in = phi i32 [ %510, %expr_false1 ], [ %518, %expr_true8 ]
  %storemerge = add nsw i32 %storemerge.in, 1, !dbg !139
  store i32 %storemerge, i32 addrspace(5)* %dim_4461205, align 4, !dbg !139
  %519 = icmp slt i32 %storemerge.in, 1, !dbg !136
  br i1 %519, label %expr_true, label %expr_false, !dbg !136
}

define internal fastcc i32 @find_interval_eval_4455546(%3* %warp_4455548, i32 %dim_4455549, float %param_val_4455550) unnamed_addr !dbg !143 {
find_interval_eval:
  %first_4455564 = alloca i32, align 4, addrspace(5)
  %size_4455556 = alloca i32, align 4, addrspace(5)
  %0 = getelementptr inbounds %3, %3* %warp_4455548, i64 0, i32 3, !dbg !145
  %1 = load [0 x i32]*, [0 x i32]** %0, align 8, !dbg !145
  %2 = sext i32 %dim_4455549 to i64, !dbg !145
  %3 = getelementptr inbounds [0 x i32], [0 x i32]* %1, i64 0, i64 %2, !dbg !145
  %4 = load i32, i32* %3, align 4, !dbg !145
  %size = add nsw i32 %4, -2, !dbg !145
  store i32 %size, i32 addrspace(5)* %size_4455556, align 4, !dbg !145
  store i32 1, i32 addrspace(5)* %first_4455564, align 4, !dbg !145
  %5 = getelementptr inbounds %3, %3* %warp_4455548, i64 0, i32 5, !dbg !145
  %6 = getelementptr inbounds %3, %3* %warp_4455548, i64 0, i32 6, !dbg !145
  %7 = icmp sgt i32 %4, 2, !dbg !146
  br i1 %7, label %expr_true4, label %expr_false, !dbg !146

expr_false:                                       ; preds = %if_join, %find_interval_eval
  %8 = load i32, i32 addrspace(5)* %first_4455564, align 4, !dbg !147
  %9 = add nsw i32 %8, -1, !dbg !147
  %10 = icmp slt i32 %size, %9, !dbg !147
  %spec.select = select i1 %10, i32 %size, i32 %9, !dbg !147
  %.inv = icmp sgt i32 %8, 0, !dbg !147
  %merge = select i1 %.inv, i32 %spec.select, i32 0, !dbg !147
  ret i32 %merge, !dbg !148

expr_true4:                                       ; preds = %find_interval_eval, %if_join
  %11 = load i32, i32 addrspace(5)* %size_4455556, align 4, !dbg !147
  %12 = load i32, i32 addrspace(5)* %first_4455564, align 4, !dbg !147
  %13 = load [0 x float]*, [0 x float]** %5, align 8, !dbg !147
  %14 = load i32, i32* %6, align 4, !dbg !147
  %15 = mul nsw i32 %14, %dim_4455549, !dbg !147
  %h = ashr i32 %11, 1, !dbg !147
  %middle = add nsw i32 %12, %h, !dbg !147
  %16 = add nsw i32 %15, %middle, !dbg !147
  %17 = sext i32 %16 to i64, !dbg !147
  %18 = getelementptr inbounds [0 x float], [0 x float]* %13, i64 0, i64 %17, !dbg !147
  %19 = load float, float* %18, align 4, !dbg !147
  %20 = fcmp ugt float %19, %param_val_4455550, !dbg !147
  br i1 %20, label %if_join, label %expr_true6, !dbg !147

expr_true6:                                       ; preds = %expr_true4
  %21 = add nsw i32 %middle, 1, !dbg !149
  store i32 %21, i32 addrspace(5)* %first_4455564, align 4, !dbg !149
  %22 = load i32, i32 addrspace(5)* %size_4455556, align 4, !dbg !149
  %.neg = xor i32 %h, -1, !dbg !149
  %23 = add i32 %22, %.neg, !dbg !149
  br label %if_join, !dbg !149

if_join:                                          ; preds = %expr_true4, %expr_true6
  %storemerge = phi i32 [ %23, %expr_true6 ], [ %h, %expr_true4 ], !dbg !149
  store i32 %storemerge, i32 addrspace(5)* %size_4455556, align 4, !dbg !149
  %24 = icmp sgt i32 %storemerge, 0, !dbg !146
  br i1 %24, label %expr_true4, label %expr_false, !dbg !146
}

define internal fastcc float @fetch_marginal_warp2D2_4455738(%3* %warp_4455740, i32 %offset_4455741, i32 %idx_4455742, [0 x float]* %param_weight_4455743) unnamed_addr !dbg !150 {
fetch_marginal_warp2D2:
  %0 = getelementptr inbounds %3, %3* %warp_4455740, i64 0, i32 8, !dbg !152
  %1 = load [0 x float]*, [0 x float]** %0, align 8, !dbg !152
  %2 = getelementptr inbounds %3, %3* %warp_4455740, i64 0, i32 0, i32 1, !dbg !152
  %3 = load i32, i32* %2, align 4, !dbg !152
  %4 = getelementptr inbounds %3, %3* %warp_4455740, i64 0, i32 4, !dbg !152
  %5 = load [0 x i32]*, [0 x i32]** %4, align 8, !dbg !152
  %6 = getelementptr inbounds [0 x i32], [0 x i32]* %5, i64 0, i64 1, !dbg !152
  %7 = load i32, i32* %6, align 4, !dbg !152
  %8 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4455743, i64 0, i64 2, !dbg !152
  %9 = load float, float* %8, align 4, !dbg !152
  %10 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4455743, i64 0, i64 3, !dbg !152
  %11 = load float, float* %10, align 4, !dbg !152
  %12 = load [0 x i32]*, [0 x i32]** %4, align 8, !dbg !152
  %13 = getelementptr inbounds [0 x i32], [0 x i32]* %12, i64 0, i64 0, !dbg !152
  %14 = load i32, i32* %13, align 4, !dbg !152
  %15 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4455743, i64 0, i64 0, !dbg !152
  %16 = load float, float* %15, align 4, !dbg !152
  %17 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4455743, i64 0, i64 1, !dbg !152
  %18 = load float, float* %17, align 4, !dbg !152
  %19 = add nsw i32 %offset_4455741, %idx_4455742, !dbg !152
  %20 = sext i32 %19 to i64, !dbg !152
  %21 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %20, !dbg !152
  %22 = load float, float* %21, align 4, !dbg !152
  %23 = mul nsw i32 %14, %3, !dbg !152
  %i1 = add nsw i32 %19, %23, !dbg !152
  %24 = sext i32 %i1 to i64, !dbg !152
  %25 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %24, !dbg !152
  %26 = load float, float* %25, align 4, !dbg !152
  %27 = load [0 x i32]*, [0 x i32]** %4, align 8, !dbg !152
  %28 = getelementptr inbounds [0 x i32], [0 x i32]* %27, i64 0, i64 0, !dbg !152
  %29 = load i32, i32* %28, align 4, !dbg !152
  %30 = load float, float* %15, align 4, !dbg !152
  %31 = load float, float* %17, align 4, !dbg !152
  %32 = mul nsw i32 %7, %3, !dbg !152
  %i11 = add nsw i32 %19, %32, !dbg !152
  %33 = sext i32 %i11 to i64, !dbg !152
  %34 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %33, !dbg !152
  %35 = load float, float* %34, align 4, !dbg !152
  %36 = mul nsw i32 %29, %3, !dbg !152
  %i12 = add nsw i32 %i11, %36, !dbg !152
  %37 = sext i32 %i12 to i64, !dbg !152
  %38 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %37, !dbg !152
  %39 = load float, float* %38, align 4, !dbg !152
  %40 = fmul float %22, %16, !dbg !152
  %41 = fmul float %26, %18, !dbg !152
  %42 = fadd float %40, %41, !dbg !152
  %43 = fmul float %42, %9, !dbg !152
  %44 = fmul float %35, %30, !dbg !152
  %45 = fmul float %39, %31, !dbg !152
  %46 = fadd float %44, %45, !dbg !152
  %47 = fmul float %46, %11, !dbg !152
  %48 = fadd float %43, %47, !dbg !152
  ret float %48, !dbg !152
}

define internal fastcc float @fetch_conditional_warp2D2_4456102(%3* %warp_4456104, i32 %offset_4456105, i32 %idx_4456106, i32 %slice_size_4456107, %5 %sample_4456108, [0 x float]* %param_weight_4456109) unnamed_addr !dbg !153 {
fetch_conditional_warp2D2:
  %0 = getelementptr inbounds %3, %3* %warp_4456104, i64 0, i32 9, !dbg !155
  %1 = load [0 x float]*, [0 x float]** %0, align 8, !dbg !155
  %2 = getelementptr inbounds %3, %3* %warp_4456104, i64 0, i32 4, !dbg !155
  %3 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !155
  %4 = getelementptr inbounds [0 x i32], [0 x i32]* %3, i64 0, i64 1, !dbg !155
  %5 = load i32, i32* %4, align 4, !dbg !155
  %6 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4456109, i64 0, i64 2, !dbg !155
  %7 = load float, float* %6, align 4, !dbg !155
  %8 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4456109, i64 0, i64 3, !dbg !155
  %9 = load float, float* %8, align 4, !dbg !155
  %10 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !155
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %10, i64 0, i64 0, !dbg !155
  %12 = load i32, i32* %11, align 4, !dbg !155
  %13 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4456109, i64 0, i64 0, !dbg !155
  %14 = load float, float* %13, align 4, !dbg !155
  %15 = getelementptr inbounds [0 x float], [0 x float]* %param_weight_4456109, i64 0, i64 1, !dbg !155
  %16 = load float, float* %15, align 4, !dbg !155
  %17 = add nsw i32 %offset_4456105, %idx_4456106, !dbg !155
  %18 = sext i32 %17 to i64, !dbg !155
  %19 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %18, !dbg !155
  %20 = load float, float* %19, align 4, !dbg !155
  %21 = mul nsw i32 %12, %slice_size_4456107, !dbg !155
  %i1 = add nsw i32 %17, %21, !dbg !155
  %22 = sext i32 %i1 to i64, !dbg !155
  %23 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %22, !dbg !155
  %24 = load float, float* %23, align 4, !dbg !155
  %25 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !155
  %26 = getelementptr inbounds [0 x i32], [0 x i32]* %25, i64 0, i64 0, !dbg !155
  %27 = load i32, i32* %26, align 4, !dbg !155
  %28 = load float, float* %13, align 4, !dbg !155
  %29 = load float, float* %15, align 4, !dbg !155
  %30 = mul nsw i32 %5, %slice_size_4456107, !dbg !155
  %i11 = add nsw i32 %17, %30, !dbg !155
  %31 = sext i32 %i11 to i64, !dbg !155
  %32 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %31, !dbg !155
  %33 = load float, float* %32, align 4, !dbg !155
  %34 = mul nsw i32 %27, %slice_size_4456107, !dbg !155
  %i12 = add nsw i32 %i11, %34, !dbg !155
  %35 = sext i32 %i12 to i64, !dbg !155
  %36 = getelementptr inbounds [0 x float], [0 x float]* %1, i64 0, i64 %35, !dbg !155
  %37 = load float, float* %36, align 4, !dbg !155
  %38 = load [0 x float]*, [0 x float]** %0, align 8, !dbg !155
  %39 = getelementptr inbounds %3, %3* %warp_4456104, i64 0, i32 0, i32 0, !dbg !155
  %40 = load i32, i32* %39, align 4, !dbg !155
  %41 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !155
  %42 = getelementptr inbounds [0 x i32], [0 x i32]* %41, i64 0, i64 1, !dbg !155
  %43 = load i32, i32* %42, align 4, !dbg !155
  %44 = load float, float* %6, align 4, !dbg !155
  %45 = load float, float* %8, align 4, !dbg !155
  %46 = getelementptr inbounds [0 x i32], [0 x i32]* %41, i64 0, i64 0, !dbg !155
  %47 = load i32, i32* %46, align 4, !dbg !155
  %48 = load float, float* %13, align 4, !dbg !155
  %49 = load float, float* %15, align 4, !dbg !155
  %50 = sext i32 %40 to i64, !dbg !155
  %51 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %50, !dbg !155
  %52 = sext i32 %17 to i64, !dbg !155
  %53 = getelementptr inbounds float, float* %51, i64 %52, !dbg !155
  %54 = load float, float* %53, align 4, !dbg !155
  %55 = mul nsw i32 %47, %slice_size_4456107, !dbg !155
  %i13 = add nsw i32 %17, %55, !dbg !155
  %56 = sext i32 %i13 to i64, !dbg !155
  %57 = getelementptr inbounds float, float* %51, i64 %56, !dbg !155
  %58 = load float, float* %57, align 4, !dbg !155
  %59 = load [0 x i32]*, [0 x i32]** %2, align 8, !dbg !155
  %60 = getelementptr inbounds [0 x i32], [0 x i32]* %59, i64 0, i64 0, !dbg !155
  %61 = load i32, i32* %60, align 4, !dbg !155
  %62 = load float, float* %13, align 4, !dbg !155
  %63 = load float, float* %15, align 4, !dbg !155
  %64 = mul nsw i32 %43, %slice_size_4456107, !dbg !155
  %i14 = add nsw i32 %17, %64, !dbg !155
  %65 = sext i32 %i14 to i64, !dbg !155
  %66 = getelementptr inbounds float, float* %51, i64 %65, !dbg !155
  %67 = load float, float* %66, align 4, !dbg !155
  %68 = mul nsw i32 %61, %slice_size_4456107, !dbg !155
  %i15 = add nsw i32 %i14, %68, !dbg !155
  %69 = sext i32 %i15 to i64, !dbg !155
  %70 = getelementptr inbounds float, float* %51, i64 %69, !dbg !155
  %71 = load float, float* %70, align 4, !dbg !155
  %72 = extractvalue %5 %sample_4456108, 1, !dbg !155
  %73 = fsub float 1.000000e+00, %72, !dbg !155
  %74 = fmul float %20, %14, !dbg !155
  %75 = fmul float %24, %16, !dbg !155
  %76 = fadd float %74, %75, !dbg !155
  %77 = fmul float %76, %7, !dbg !155
  %78 = fmul float %33, %28, !dbg !155
  %79 = fmul float %37, %29, !dbg !155
  %80 = fadd float %78, %79, !dbg !155
  %81 = fmul float %80, %9, !dbg !155
  %82 = fadd float %77, %81, !dbg !155
  %83 = fmul float %73, %82, !dbg !155
  %84 = fmul float %54, %48, !dbg !155
  %85 = fmul float %58, %49, !dbg !155
  %86 = fadd float %84, %85, !dbg !155
  %87 = fmul float %86, %44, !dbg !155
  %88 = fmul float %67, %62, !dbg !155
  %89 = fmul float %71, %63, !dbg !155
  %90 = fadd float %88, %89, !dbg !155
  %91 = fmul float %90, %45, !dbg !155
  %92 = fadd float %87, %91, !dbg !155
  %93 = fmul float %72, %92, !dbg !155
  %94 = fadd float %83, %93, !dbg !155
  ret float %94, !dbg !155
}

declare float @__ocml_sin_f32(float) local_unnamed_addr

declare float @__ocml_cos_f32(float) local_unnamed_addr

define amdgpu_kernel void @lambda_4082328(%6 %_4454226, %6 %_4454227, i32 %_4454228, i32 %_4454229, i32 %_4454230, %6 %_4454231, float %_4454232, i32 %_4454233, float %_4454234, i32 %_4454235, i32 %_4454236, %6 %_4454237, %0 %_4454238) local_unnamed_addr !dbg !156 !reqd_work_group_size !7 {
lambda_4082328:
  %rnd_4454262 = alloca i32, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !158
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !159
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !160
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !159
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !159
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !159
  %6 = zext i16 %5 to i32, !dbg !161
  %7 = mul nsw i32 %1, %6, !dbg !161
  %8 = add nsw i32 %0, %7, !dbg !161
  %.not = icmp slt i32 %8, %_4454236, !dbg !161
  br i1 %.not, label %expr_false, label %expr_true12, !dbg !161

expr_false:                                       ; preds = %lambda_4082328
  %ray_id = add nsw i32 %8, %_4454228, !dbg !162
  %ray_id.frozen = freeze i32 %ray_id
  %pixel = sdiv i32 %ray_id.frozen, 4, !dbg !162
  %9 = mul i32 %pixel, 4
  %sample.decomposed = sub i32 %ray_id.frozen, %9
  %10 = and i32 %sample.decomposed, 255, !dbg !162
  %11 = xor i32 %10, 84696351, !dbg !162
  %12 = mul i32 %11, 16777619, !dbg !162
  %13 = lshr i32 %sample.decomposed, 8, !dbg !162
  %14 = and i32 %13, 255, !dbg !162
  %15 = xor i32 %12, %14, !dbg !162
  %16 = mul i32 %15, 16777619, !dbg !162
  %17 = lshr i32 %sample.decomposed, 16, !dbg !162
  %18 = and i32 %17, 255, !dbg !162
  %19 = xor i32 %16, %18, !dbg !162
  %20 = mul i32 %19, 16777619, !dbg !162
  %21 = lshr i32 %sample.decomposed, 24, !dbg !162
  %22 = xor i32 %20, %21, !dbg !162
  %23 = mul i32 %22, 16777619, !dbg !162
  %24 = and i32 %_4454229, 255, !dbg !162
  %25 = xor i32 %23, %24, !dbg !162
  %26 = mul i32 %25, 16777619, !dbg !162
  %27 = lshr i32 %_4454229, 8, !dbg !162
  %28 = and i32 %27, 255, !dbg !162
  %29 = xor i32 %26, %28, !dbg !162
  %30 = mul i32 %29, 16777619, !dbg !162
  %31 = lshr i32 %_4454229, 16, !dbg !162
  %32 = and i32 %31, 255, !dbg !162
  %33 = xor i32 %30, %32, !dbg !162
  %34 = mul i32 %33, 16777619, !dbg !162
  %35 = lshr i32 %_4454229, 24, !dbg !162
  %36 = xor i32 %34, %35, !dbg !162
  %37 = mul i32 %36, 16777619, !dbg !162
  %38 = zext i32 %_4454235 to i64, !dbg !162
  %39 = shl i64 4294967296, %38, !dbg !162
  %40 = zext i32 %_4454230 to i64, !dbg !162
  %41 = udiv i64 %39, %40, !dbg !162
  %42 = add i64 %41, 1, !dbg !162
  %43 = and i64 %42, 4294967295, !dbg !162
  %44 = zext i32 %pixel to i64, !dbg !162
  %45 = mul nuw i64 %43, %44, !dbg !162
  %46 = lshr i64 %45, 32, !dbg !162
  %47 = trunc i64 %46 to i32, !dbg !162
  %48 = sub i32 %pixel, %47, !dbg !162
  %49 = icmp ne i32 %_4454235, 0, !dbg !162
  %50 = zext i1 %49 to i32, !dbg !162
  %51 = lshr i32 %48, %50, !dbg !162
  %52 = add i32 %51, %47, !dbg !162
  %53 = call i32 @llvm.usub.sat.i32(i32 %_4454235, i32 1), !dbg !162
  %54 = lshr i32 %52, %53, !dbg !162
  %55 = mul nsw i32 %54, %_4454230, !dbg !162
  %x = sub nsw i32 %pixel, %55, !dbg !162
  %56 = and i32 %x, 255, !dbg !162
  %57 = xor i32 %37, %56, !dbg !162
  %58 = mul i32 %57, 16777619, !dbg !162
  %59 = lshr i32 %x, 8, !dbg !162
  %60 = and i32 %59, 255, !dbg !162
  %61 = xor i32 %58, %60, !dbg !162
  %62 = mul i32 %61, 16777619, !dbg !162
  %63 = lshr i32 %x, 16, !dbg !162
  %64 = and i32 %63, 255, !dbg !162
  %65 = xor i32 %62, %64, !dbg !162
  %66 = mul i32 %65, 16777619, !dbg !162
  %67 = lshr i32 %x, 24, !dbg !162
  %68 = xor i32 %66, %67, !dbg !162
  %69 = mul i32 %68, 16777619, !dbg !162
  %70 = and i32 %54, 255, !dbg !162
  %71 = xor i32 %69, %70, !dbg !162
  %72 = mul i32 %71, 16777619, !dbg !162
  %73 = lshr i32 %54, 8, !dbg !162
  %74 = and i32 %73, 255, !dbg !162
  %75 = xor i32 %72, %74, !dbg !162
  %76 = mul i32 %75, 16777619, !dbg !162
  %77 = lshr i32 %54, 16, !dbg !162
  %78 = and i32 %77, 255, !dbg !162
  %79 = xor i32 %76, %78, !dbg !162
  %80 = mul i32 %79, 16777619, !dbg !162
  %81 = lshr i32 %54, 24, !dbg !162
  %82 = xor i32 %80, %81, !dbg !162
  store i32 %82, i32 addrspace(5)* %rnd_4454262, align 4, !dbg !162
  %83 = icmp eq i32 %82, 0, !dbg !162
  %84 = select i1 %83, i32 1, i32 %82, !dbg !162
  %85 = shl i32 %84, 13, !dbg !162
  %86 = xor i32 %84, %85, !dbg !162
  %87 = lshr i32 %86, 17, !dbg !162
  %88 = xor i32 %86, %87, !dbg !162
  %89 = shl i32 %88, 5, !dbg !162
  %90 = xor i32 %88, %89, !dbg !162
  store i32 %90, i32 addrspace(5)* %rnd_4454262, align 4, !dbg !162
  %91 = icmp eq i32 %90, 0, !dbg !162
  %92 = select i1 %91, i32 1, i32 %90, !dbg !162
  %93 = shl i32 %92, 13, !dbg !162
  %94 = xor i32 %92, %93, !dbg !162
  %95 = lshr i32 %94, 17, !dbg !162
  %96 = xor i32 %94, %95, !dbg !162
  %97 = shl i32 %96, 5, !dbg !162
  %98 = xor i32 %96, %97, !dbg !162
  store i32 %98, i32 addrspace(5)* %rnd_4454262, align 4, !dbg !162
  %99 = extractvalue %6 %_4454227, 0, !dbg !162
  %100 = sitofp i32 %x to float, !dbg !162
  %101 = and i32 %90, 8388607, !dbg !162
  %102 = or i32 %101, 1065353216, !dbg !162
  %103 = bitcast i32 %102 to float, !dbg !162
  %104 = fadd float %103, -1.000000e+00, !dbg !162
  %105 = fadd float %104, %100, !dbg !162
  %106 = fmul float %105, 2.000000e+00, !dbg !162
  %107 = sitofp i32 %_4454230 to float, !dbg !162
  %108 = fdiv float %106, %107, !dbg !162
  %kx = fadd float %108, -1.000000e+00, !dbg !162
  %109 = fmul float %kx, %_4454232, !dbg !162
  %110 = fmul float %99, %109, !dbg !162
  %111 = extractvalue %6 %_4454226, 0, !dbg !162
  %112 = sitofp i32 %54 to float, !dbg !162
  %113 = and i32 %98, 8388607, !dbg !162
  %114 = or i32 %113, 1065353216, !dbg !162
  %115 = bitcast i32 %114 to float, !dbg !162
  %116 = fadd float %115, -1.000000e+00, !dbg !162
  %117 = fadd float %116, %112, !dbg !162
  %118 = fmul float %117, 2.000000e+00, !dbg !162
  %119 = sitofp i32 %_4454233 to float, !dbg !162
  %120 = fdiv float %118, %119, !dbg !162
  %ky = fsub float 1.000000e+00, %120, !dbg !162
  %121 = fmul float %ky, %_4454234, !dbg !162
  %122 = fmul float %111, %121, !dbg !162
  %123 = fadd float %110, %122, !dbg !162
  %124 = extractvalue %6 %_4454231, 0, !dbg !162
  %125 = fadd float %123, %124, !dbg !162
  %126 = fmul float %125, %125, !dbg !162
  %127 = extractvalue %6 %_4454227, 1, !dbg !162
  %128 = fmul float %127, %109, !dbg !162
  %129 = extractvalue %6 %_4454226, 1, !dbg !162
  %130 = fmul float %129, %121, !dbg !162
  %131 = fadd float %128, %130, !dbg !162
  %132 = extractvalue %6 %_4454231, 1, !dbg !162
  %133 = fadd float %131, %132, !dbg !162
  %134 = fmul float %133, %133, !dbg !162
  %135 = fadd float %126, %134, !dbg !162
  %136 = extractvalue %6 %_4454227, 2, !dbg !162
  %137 = fmul float %136, %109, !dbg !162
  %138 = extractvalue %6 %_4454226, 2, !dbg !162
  %139 = fmul float %138, %121, !dbg !162
  %140 = fadd float %137, %139, !dbg !162
  %141 = extractvalue %6 %_4454231, 2, !dbg !162
  %142 = fadd float %140, %141, !dbg !162
  %143 = fmul float %142, %142, !dbg !162
  %144 = fadd float %135, %143, !dbg !162
  %145 = call float @__ocml_sqrt_f32(float %144), !dbg !162
  %146 = fdiv float 1.000000e+00, %145, !dbg !163
  %147 = fmul float %125, %146, !dbg !163
  %148 = fmul float %133, %146, !dbg !164
  %149 = fmul float %142, %146, !dbg !165
  %150 = load i32, i32 addrspace(5)* %rnd_4454262, align 4, !dbg !166
  %151 = extractvalue %0 %_4454238, 12, !dbg !166
  %dst_id = add nsw i32 %151, %8, !dbg !166
  %152 = extractvalue %0 %_4454238, 0, !dbg !166
  %153 = extractvalue %1 %152, 1, !dbg !166
  %154 = sext i32 %dst_id to i64, !dbg !166
  %155 = getelementptr inbounds [0 x float], [0 x float]* %153, i64 0, i64 %154, !dbg !166
  %156 = extractvalue %6 %_4454237, 0, !dbg !166
  store float %156, float* %155, align 4, !dbg !166
  %157 = extractvalue %1 %152, 2, !dbg !166
  %158 = sext i32 %dst_id to i64, !dbg !166
  %159 = getelementptr inbounds [0 x float], [0 x float]* %157, i64 0, i64 %158, !dbg !166
  %160 = extractvalue %6 %_4454237, 1, !dbg !166
  store float %160, float* %159, align 4, !dbg !166
  %161 = extractvalue %1 %152, 3, !dbg !166
  %162 = sext i32 %dst_id to i64, !dbg !166
  %163 = getelementptr inbounds [0 x float], [0 x float]* %161, i64 0, i64 %162, !dbg !166
  %164 = extractvalue %6 %_4454237, 2, !dbg !166
  store float %164, float* %163, align 4, !dbg !166
  %165 = extractvalue %1 %152, 4, !dbg !166
  %166 = sext i32 %dst_id to i64, !dbg !166
  %167 = getelementptr inbounds [0 x float], [0 x float]* %165, i64 0, i64 %166, !dbg !166
  store float %147, float* %167, align 4, !dbg !166
  %168 = extractvalue %1 %152, 5, !dbg !166
  %169 = sext i32 %dst_id to i64, !dbg !166
  %170 = getelementptr inbounds [0 x float], [0 x float]* %168, i64 0, i64 %169, !dbg !166
  store float %148, float* %170, align 4, !dbg !166
  %171 = extractvalue %1 %152, 6, !dbg !166
  %172 = sext i32 %dst_id to i64, !dbg !166
  %173 = getelementptr inbounds [0 x float], [0 x float]* %171, i64 0, i64 %172, !dbg !166
  store float %149, float* %173, align 4, !dbg !166
  %174 = extractvalue %1 %152, 7, !dbg !166
  %175 = sext i32 %dst_id to i64, !dbg !166
  %176 = getelementptr inbounds [0 x float], [0 x float]* %174, i64 0, i64 %175, !dbg !166
  store float 0.000000e+00, float* %176, align 4, !dbg !166
  %177 = extractvalue %1 %152, 8, !dbg !166
  %178 = sext i32 %dst_id to i64, !dbg !166
  %179 = getelementptr inbounds [0 x float], [0 x float]* %177, i64 0, i64 %178, !dbg !166
  store float 0x47EFFFFFE0000000, float* %179, align 4, !dbg !166
  %180 = extractvalue %0 %_4454238, 6, !dbg !166
  %181 = sext i32 %dst_id to i64, !dbg !166
  %182 = getelementptr inbounds [0 x i32], [0 x i32]* %180, i64 0, i64 %181, !dbg !166
  store i32 %150, i32* %182, align 4, !dbg !166
  %183 = extractvalue %0 %_4454238, 8, !dbg !166
  %184 = sext i32 %dst_id to i64, !dbg !166
  %185 = getelementptr inbounds [0 x float], [0 x float]* %183, i64 0, i64 %184, !dbg !166
  store float 1.000000e+00, float* %185, align 4, !dbg !166
  %186 = extractvalue %0 %_4454238, 9, !dbg !166
  %187 = sext i32 %dst_id to i64, !dbg !166
  %188 = getelementptr inbounds [0 x float], [0 x float]* %186, i64 0, i64 %187, !dbg !166
  store float 1.000000e+00, float* %188, align 4, !dbg !166
  %189 = extractvalue %0 %_4454238, 10, !dbg !166
  %190 = sext i32 %dst_id to i64, !dbg !166
  %191 = getelementptr inbounds [0 x float], [0 x float]* %189, i64 0, i64 %190, !dbg !166
  store float 1.000000e+00, float* %191, align 4, !dbg !166
  %192 = extractvalue %0 %_4454238, 7, !dbg !166
  %193 = sext i32 %dst_id to i64, !dbg !166
  %194 = getelementptr inbounds [0 x float], [0 x float]* %192, i64 0, i64 %193, !dbg !166
  store float 0.000000e+00, float* %194, align 4, !dbg !166
  %195 = extractvalue %0 %_4454238, 11, !dbg !166
  %196 = sext i32 %dst_id to i64, !dbg !166
  %197 = getelementptr inbounds [0 x i32], [0 x i32]* %195, i64 0, i64 %196, !dbg !166
  store i32 0, i32* %197, align 4, !dbg !166
  %198 = extractvalue %1 %152, 0, !dbg !166
  %199 = sext i32 %dst_id to i64, !dbg !166
  %200 = getelementptr inbounds [0 x i32], [0 x i32]* %198, i64 0, i64 %199, !dbg !166
  store i32 %pixel, i32* %200, align 4, !dbg !166
  ret void, !dbg !166

expr_true12:                                      ; preds = %lambda_4082328
  ret void, !dbg !162
}

define amdgpu_kernel void @lambda_4085618([0 x <4 x i32>] addrspace(1)* %_4453433, [0 x <4 x float>] addrspace(1)* %_4453434, i32 %_4453435, [0 x <4 x float>] addrspace(1)* %_4453436, i32 %_4453437, [0 x float] addrspace(1)* %_4453438, [0 x <4 x float>] addrspace(1)* %_4453439, %0 %_4453440, [0 x <4 x float>] addrspace(1)* %_4453441, [0 x <4 x float>] addrspace(1)* %_4453442, %2 %_4453443) local_unnamed_addr !dbg !167 !reqd_work_group_size !7 {
lambda_4085618:
  %v_4453701 = alloca float, align 4, addrspace(5)
  %u_4453704 = alloca float, align 4, addrspace(5)
  %state_4453492 = alloca %8, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !168
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !169
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !170
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !169
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !169
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !169
  %6 = zext i16 %5 to i32, !dbg !171
  %7 = mul nsw i32 %1, %6, !dbg !171
  %8 = add nsw i32 %0, %7, !dbg !171
  %ray_id = add nsw i32 %8, %_4453435, !dbg !171
  %.not = icmp slt i32 %ray_id, %_4453437, !dbg !171
  br i1 %.not, label %expr_false, label %expr_true86, !dbg !171

expr_false:                                       ; preds = %lambda_4085618
  %9 = extractvalue %0 %_4453440, 6, !dbg !172
  %10 = sext i32 %ray_id to i64, !dbg !172
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %9, i64 0, i64 %10, !dbg !172
  %12 = load i32, i32* %11, align 4, !dbg !172
  %13 = extractvalue %0 %_4453440, 8, !dbg !172
  %14 = sext i32 %ray_id to i64, !dbg !172
  %15 = getelementptr inbounds [0 x float], [0 x float]* %13, i64 0, i64 %14, !dbg !172
  %16 = load float, float* %15, align 4, !dbg !172
  %17 = extractvalue %0 %_4453440, 9, !dbg !172
  %18 = sext i32 %ray_id to i64, !dbg !172
  %19 = getelementptr inbounds [0 x float], [0 x float]* %17, i64 0, i64 %18, !dbg !172
  %20 = load float, float* %19, align 4, !dbg !172
  %21 = extractvalue %0 %_4453440, 10, !dbg !172
  %22 = sext i32 %ray_id to i64, !dbg !172
  %23 = getelementptr inbounds [0 x float], [0 x float]* %21, i64 0, i64 %22, !dbg !172
  %24 = load float, float* %23, align 4, !dbg !172
  %25 = extractvalue %0 %_4453440, 7, !dbg !172
  %26 = sext i32 %ray_id to i64, !dbg !172
  %27 = getelementptr inbounds [0 x float], [0 x float]* %25, i64 0, i64 %26, !dbg !172
  %28 = load float, float* %27, align 4, !dbg !172
  %29 = extractvalue %0 %_4453440, 11, !dbg !172
  %30 = sext i32 %ray_id to i64, !dbg !172
  %31 = getelementptr inbounds [0 x i32], [0 x i32]* %29, i64 0, i64 %30, !dbg !172
  %32 = load i32, i32* %31, align 4, !dbg !172
  %state_4453492.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 0, !dbg !172
  store i32 %12, i32 addrspace(5)* %state_4453492.repack, align 4, !dbg !172
  %state_4453492.repack87.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 0, !dbg !172
  store float %16, float addrspace(5)* %state_4453492.repack87.repack, align 4, !dbg !172
  %state_4453492.repack87.repack93 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 1, !dbg !172
  store float %20, float addrspace(5)* %state_4453492.repack87.repack93, align 4, !dbg !172
  %state_4453492.repack87.repack95 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 2, !dbg !172
  store float %24, float addrspace(5)* %state_4453492.repack87.repack95, align 4, !dbg !172
  %state_4453492.repack89 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 2, !dbg !172
  store float %28, float addrspace(5)* %state_4453492.repack89, align 4, !dbg !172
  %state_4453492.repack91 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 3, !dbg !172
  store i32 %32, i32 addrspace(5)* %state_4453492.repack91, align 4, !dbg !172
  %33 = extractvalue %0 %_4453440, 0, !dbg !172
  %34 = extractvalue %1 %33, 1, !dbg !172
  %35 = sext i32 %ray_id to i64, !dbg !172
  %36 = getelementptr inbounds [0 x float], [0 x float]* %34, i64 0, i64 %35, !dbg !172
  %37 = load float, float* %36, align 4, !dbg !172
  %38 = extractvalue %1 %33, 2, !dbg !172
  %39 = sext i32 %ray_id to i64, !dbg !172
  %40 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %39, !dbg !172
  %41 = load float, float* %40, align 4, !dbg !172
  %42 = extractvalue %1 %33, 3, !dbg !172
  %43 = sext i32 %ray_id to i64, !dbg !172
  %44 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %43, !dbg !172
  %45 = load float, float* %44, align 4, !dbg !172
  %46 = extractvalue %1 %33, 4, !dbg !172
  %47 = sext i32 %ray_id to i64, !dbg !172
  %48 = getelementptr inbounds [0 x float], [0 x float]* %46, i64 0, i64 %47, !dbg !172
  %49 = load float, float* %48, align 4, !dbg !172
  %50 = extractvalue %1 %33, 5, !dbg !172
  %51 = sext i32 %ray_id to i64, !dbg !172
  %52 = getelementptr inbounds [0 x float], [0 x float]* %50, i64 0, i64 %51, !dbg !172
  %53 = load float, float* %52, align 4, !dbg !172
  %54 = extractvalue %1 %33, 6, !dbg !172
  %55 = sext i32 %ray_id to i64, !dbg !172
  %56 = getelementptr inbounds [0 x float], [0 x float]* %54, i64 0, i64 %55, !dbg !172
  %57 = load float, float* %56, align 4, !dbg !172
  %58 = extractvalue %1 %33, 0, !dbg !173
  %59 = sext i32 %ray_id to i64, !dbg !173
  %60 = getelementptr inbounds [0 x i32], [0 x i32]* %58, i64 0, i64 %59, !dbg !173
  %61 = load i32, i32* %60, align 4, !dbg !173
  %62 = extractvalue %0 %_4453440, 2, !dbg !173
  %63 = sext i32 %ray_id to i64, !dbg !173
  %64 = getelementptr inbounds [0 x i32], [0 x i32]* %62, i64 0, i64 %63, !dbg !173
  %65 = load i32, i32* %64, align 4, !dbg !173
  %66 = extractvalue %0 %_4453440, 3, !dbg !173
  %67 = sext i32 %ray_id to i64, !dbg !173
  %68 = getelementptr inbounds [0 x float], [0 x float]* %66, i64 0, i64 %67, !dbg !173
  %69 = load float, float* %68, align 4, !dbg !173
  %70 = extractvalue %0 %_4453440, 4, !dbg !173
  %71 = sext i32 %ray_id to i64, !dbg !173
  %72 = getelementptr inbounds [0 x float], [0 x float]* %70, i64 0, i64 %71, !dbg !173
  %73 = load float, float* %72, align 4, !dbg !173
  %74 = extractvalue %0 %_4453440, 5, !dbg !173
  %75 = sext i32 %ray_id to i64, !dbg !173
  %76 = getelementptr inbounds [0 x float], [0 x float]* %74, i64 0, i64 %75, !dbg !173
  %77 = load float, float* %76, align 4, !dbg !173
  %78 = sext i32 %65 to i64, !dbg !173
  %79 = getelementptr inbounds [0 x <4 x i32>], [0 x <4 x i32>] addrspace(1)* %_4453433, i64 0, i64 %78, !dbg !173
  %80 = load <4 x i32>, <4 x i32> addrspace(1)* %79, align 16, !dbg !173
  %81 = sext i32 %65 to i64, !dbg !173
  %82 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453441, i64 0, i64 %81, !dbg !173
  %83 = load <4 x float>, <4 x float> addrspace(1)* %82, align 16, !dbg !173
  %84 = extractelement <4 x i32> %80, i32 0, !dbg !173
  %85 = sext i32 %84 to i64, !dbg !173
  %86 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453439, i64 0, i64 %85, !dbg !173
  %87 = load <4 x float>, <4 x float> addrspace(1)* %86, align 16, !dbg !173
  %88 = extractelement <4 x i32> %80, i32 1, !dbg !173
  %89 = sext i32 %88 to i64, !dbg !173
  %90 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453439, i64 0, i64 %89, !dbg !173
  %91 = load <4 x float>, <4 x float> addrspace(1)* %90, align 16, !dbg !173
  %92 = extractelement <4 x i32> %80, i32 2, !dbg !173
  %93 = sext i32 %92 to i64, !dbg !173
  %94 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453439, i64 0, i64 %93, !dbg !173
  %95 = load <4 x float>, <4 x float> addrspace(1)* %94, align 16, !dbg !173
  %96 = fsub float 1.000000e+00, %73, !dbg !173
  %97 = fsub float %96, %77, !dbg !173
  %98 = extractelement <4 x float> %87, i32 0, !dbg !173
  %99 = fmul float %97, %98, !dbg !173
  %100 = extractelement <4 x float> %91, i32 0, !dbg !173
  %101 = fmul float %73, %100, !dbg !173
  %102 = fadd float %99, %101, !dbg !173
  %103 = extractelement <4 x float> %95, i32 0, !dbg !173
  %104 = fmul float %77, %103, !dbg !173
  %105 = fadd float %102, %104, !dbg !173
  %106 = fmul float %105, %105, !dbg !173
  %107 = extractelement <4 x float> %87, i32 1, !dbg !173
  %108 = fmul float %97, %107, !dbg !173
  %109 = extractelement <4 x float> %91, i32 1, !dbg !173
  %110 = fmul float %73, %109, !dbg !173
  %111 = fadd float %108, %110, !dbg !173
  %112 = extractelement <4 x float> %95, i32 1, !dbg !173
  %113 = fmul float %77, %112, !dbg !173
  %114 = fadd float %111, %113, !dbg !173
  %115 = fmul float %114, %114, !dbg !173
  %116 = fadd float %106, %115, !dbg !173
  %117 = extractelement <4 x float> %87, i32 2, !dbg !173
  %118 = fmul float %97, %117, !dbg !173
  %119 = extractelement <4 x float> %91, i32 2, !dbg !173
  %120 = fmul float %73, %119, !dbg !173
  %121 = fadd float %118, %120, !dbg !173
  %122 = extractelement <4 x float> %95, i32 2, !dbg !173
  %123 = fmul float %77, %122, !dbg !173
  %124 = fadd float %121, %123, !dbg !173
  %125 = fmul float %124, %124, !dbg !173
  %126 = fadd float %116, %125, !dbg !173
  %127 = call float @__ocml_sqrt_f32(float %126), !dbg !173
  %128 = extractelement <4 x float> %83, i32 0, !dbg !174
  %129 = fmul float %49, %128, !dbg !174
  %130 = extractelement <4 x float> %83, i32 1, !dbg !174
  %131 = fmul float %53, %130, !dbg !174
  %132 = fadd float %129, %131, !dbg !174
  %133 = extractelement <4 x float> %83, i32 2, !dbg !174
  %134 = fmul float %57, %133, !dbg !174
  %135 = fadd float %132, %134, !dbg !174
  %is_entering = fcmp ugt float %135, 0.000000e+00, !dbg !174
  %136 = fneg float %128, !dbg !174
  %137 = fneg float %130, !dbg !174
  %138 = fneg float %133, !dbg !174
  %.pn101 = select i1 %is_entering, float %136, float %128, !dbg !174
  %.pn99 = select i1 %is_entering, float %137, float %130, !dbg !174
  %.pn97 = select i1 %is_entering, float %138, float %133, !dbg !174
  %139 = fdiv float 1.000000e+00, %127, !dbg !175
  %140 = fmul float %105, %139, !dbg !175
  %141 = fmul float %49, %140, !dbg !175
  %142 = fmul float %114, %139, !dbg !175
  %143 = fmul float %53, %142, !dbg !175
  %144 = fadd float %141, %143, !dbg !175
  %145 = fmul float %124, %139, !dbg !175
  %146 = fmul float %57, %145, !dbg !175
  %147 = fadd float %144, %146, !dbg !175
  %148 = fcmp ugt float %147, 0.000000e+00, !dbg !175
  %149 = fneg float %140, !dbg !175
  %150 = fneg float %142, !dbg !175
  %151 = fneg float %145, !dbg !175
  %.pn107 = select i1 %148, float %149, float %140, !dbg !175
  %.pn105 = select i1 %148, float %150, float %142, !dbg !175
  %.pn103 = select i1 %148, float %151, float %145, !dbg !175
  %152 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 0, !dbg !176
  %153 = load i32, i32 addrspace(5)* %152, align 4, !dbg !176
  %154 = icmp eq i32 %153, 0, !dbg !176
  %155 = select i1 %154, i32 1, i32 %153, !dbg !176
  %156 = shl i32 %155, 13, !dbg !176
  %157 = xor i32 %155, %156, !dbg !176
  %158 = lshr i32 %157, 17, !dbg !176
  %159 = xor i32 %157, %158, !dbg !176
  %160 = shl i32 %159, 5, !dbg !176
  %161 = xor i32 %159, %160, !dbg !176
  %162 = icmp eq i32 %161, 0, !dbg !176
  %163 = select i1 %162, i32 1, i32 %161, !dbg !176
  %164 = shl i32 %163, 13, !dbg !176
  %165 = xor i32 %163, %164, !dbg !176
  %166 = lshr i32 %165, 17, !dbg !176
  %167 = xor i32 %165, %166, !dbg !176
  %168 = shl i32 %167, 5, !dbg !176
  %169 = xor i32 %167, %168, !dbg !176
  %170 = and i32 %169, 8388607, !dbg !176
  %171 = or i32 %170, 1065353216, !dbg !176
  %172 = bitcast i32 %171 to float, !dbg !176
  %173 = fadd float %172, -1.000000e+00, !dbg !176
  %174 = icmp eq i32 %169, 0, !dbg !176
  %175 = select i1 %174, i32 1, i32 %169, !dbg !176
  %176 = shl i32 %175, 13, !dbg !176
  %177 = xor i32 %175, %176, !dbg !176
  %178 = lshr i32 %177, 17, !dbg !176
  %179 = xor i32 %177, %178, !dbg !176
  %180 = shl i32 %179, 5, !dbg !176
  %181 = xor i32 %179, %180, !dbg !176
  %182 = and i32 %181, 8388607, !dbg !176
  %183 = or i32 %182, 1065353216, !dbg !176
  %184 = bitcast i32 %183 to float, !dbg !176
  %185 = fadd float %184, -1.000000e+00, !dbg !176
  %186 = fadd float %173, %185, !dbg !176
  %187 = fcmp ogt float %186, 1.000000e+00, !dbg !176
  store i32 %161, i32 addrspace(5)* %152, align 4, !dbg !176
  %188 = and i32 %159, 1, !dbg !176
  %189 = mul nuw nsw i32 %188, 3, !dbg !176
  %190 = zext i32 %189 to i64, !dbg !176
  %191 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453442, i64 0, i64 %190, !dbg !176
  %192 = load <4 x float>, <4 x float> addrspace(1)* %191, align 16, !dbg !176
  %193 = add nuw nsw i32 %189, 1, !dbg !176
  %194 = zext i32 %193 to i64, !dbg !176
  %195 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453442, i64 0, i64 %194, !dbg !176
  %196 = load <4 x float>, <4 x float> addrspace(1)* %195, align 16, !dbg !176
  %197 = add nuw nsw i32 %189, 2, !dbg !176
  %198 = zext i32 %197 to i64, !dbg !176
  %199 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453442, i64 0, i64 %198, !dbg !176
  %200 = load <4 x float>, <4 x float> addrspace(1)* %199, align 16, !dbg !176
  %201 = zext i32 %188 to i64, !dbg !176
  %202 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453434, i64 0, i64 %201, !dbg !176
  %203 = load <4 x float>, <4 x float> addrspace(1)* %202, align 16, !dbg !176
  %204 = zext i32 %188 to i64, !dbg !176
  %205 = getelementptr inbounds [0 x float], [0 x float] addrspace(1)* %_4453438, i64 0, i64 %204, !dbg !176
  %206 = load float, float addrspace(1)* %205, align 4, !dbg !176
  %207 = zext i32 %188 to i64, !dbg !176
  %208 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4453436, i64 0, i64 %207, !dbg !176
  %209 = load <4 x float>, <4 x float> addrspace(1)* %208, align 16, !dbg !176
  store i32 %181, i32 addrspace(5)* %152, align 4, !dbg !176
  store float %173, float addrspace(5)* %u_4453704, align 4, !dbg !176
  store float %185, float addrspace(5)* %v_4453701, align 4, !dbg !176
  br i1 %187, label %expr_true20, label %if_join21, !dbg !176

expr_true20:                                      ; preds = %expr_false
  %210 = fsub float 1.000000e+00, %173, !dbg !177
  store float %210, float addrspace(5)* %u_4453704, align 4, !dbg !177
  %211 = fsub float 1.000000e+00, %185, !dbg !177
  store float %211, float addrspace(5)* %v_4453701, align 4, !dbg !177
  br label %if_join21, !dbg !177

if_join21:                                        ; preds = %expr_false, %expr_true20
  %212 = load float, float addrspace(5)* %v_4453701, align 4, !dbg !178
  %213 = load float, float addrspace(5)* %u_4453704, align 4, !dbg !178
  %214 = fmul float %49, %69, !dbg !178
  %215 = fadd float %37, %214, !dbg !178
  %216 = extractelement <4 x float> %192, i32 0, !dbg !178
  %217 = fsub float 1.000000e+00, %212, !dbg !178
  %218 = fsub float %217, %213, !dbg !178
  %219 = fmul float %216, %218, !dbg !178
  %220 = extractelement <4 x float> %196, i32 0, !dbg !178
  %221 = fmul float %220, %213, !dbg !178
  %222 = fadd float %219, %221, !dbg !178
  %223 = extractelement <4 x float> %200, i32 0, !dbg !178
  %224 = fmul float %223, %212, !dbg !178
  %225 = fadd float %222, %224, !dbg !178
  %226 = fsub float %215, %225, !dbg !178
  %227 = fmul float %226, %226, !dbg !178
  %228 = fmul float %53, %69, !dbg !178
  %229 = fadd float %41, %228, !dbg !178
  %230 = extractelement <4 x float> %192, i32 1, !dbg !178
  %231 = fmul float %230, %218, !dbg !178
  %232 = extractelement <4 x float> %196, i32 1, !dbg !178
  %233 = fmul float %232, %213, !dbg !178
  %234 = fadd float %231, %233, !dbg !178
  %235 = extractelement <4 x float> %200, i32 1, !dbg !178
  %236 = fmul float %235, %212, !dbg !178
  %237 = fadd float %234, %236, !dbg !178
  %238 = fsub float %229, %237, !dbg !178
  %239 = fmul float %238, %238, !dbg !178
  %240 = fadd float %227, %239, !dbg !178
  %241 = fmul float %57, %69, !dbg !178
  %242 = fadd float %45, %241, !dbg !178
  %243 = extractelement <4 x float> %192, i32 2, !dbg !178
  %244 = fmul float %243, %218, !dbg !178
  %245 = extractelement <4 x float> %196, i32 2, !dbg !178
  %246 = fmul float %245, %213, !dbg !178
  %247 = fadd float %244, %246, !dbg !178
  %248 = extractelement <4 x float> %200, i32 2, !dbg !178
  %249 = fmul float %248, %212, !dbg !178
  %250 = fadd float %247, %249, !dbg !178
  %251 = fsub float %242, %250, !dbg !178
  %252 = fmul float %251, %251, !dbg !178
  %253 = fadd float %240, %252, !dbg !178
  %254 = call float @__ocml_sqrt_f32(float %253), !dbg !178
  %255 = fcmp ogt float %206, 0.000000e+00, !dbg !179
  br i1 %255, label %expr_true25, label %_cont, !dbg !179

expr_true25:                                      ; preds = %if_join21
  %256 = extractelement <4 x float> %203, i32 0, !dbg !180
  %257 = fmul float %226, %256, !dbg !180
  %258 = extractelement <4 x float> %203, i32 1, !dbg !180
  %259 = fmul float %238, %258, !dbg !180
  %260 = fadd float %257, %259, !dbg !180
  %261 = extractelement <4 x float> %203, i32 2, !dbg !180
  %262 = fmul float %251, %261, !dbg !180
  %263 = fadd float %260, %262, !dbg !180
  %cos = fdiv float %263, %254, !dbg !180
  %264 = fmul float %cos, 0x3FD45F3060000000, !dbg !180
  %265 = fcmp ogt float %264, 0.000000e+00, !dbg !180
  %266 = fcmp ogt float %cos, 0.000000e+00
  %or.cond = and i1 %265, %266, !dbg !180
  br i1 %or.cond, label %expr_true29, label %_cont, !dbg !180

expr_true29:                                      ; preds = %expr_true25
  %267 = extractelement <4 x float> %209, i32 0, !dbg !181
  %268 = insertvalue %9 undef, float %267, 0, !dbg !181
  %269 = extractelement <4 x float> %209, i32 1, !dbg !181
  %270 = insertvalue %9 %268, float %269, 1, !dbg !181
  %271 = extractelement <4 x float> %209, i32 2, !dbg !181
  %272 = insertvalue %9 %270, float %271, 2, !dbg !181
  %phi.bo = fmul float %206, 5.000000e-01, !dbg !181
  br label %_cont, !dbg !181

_cont:                                            ; preds = %if_join21, %expr_true25, %expr_true29
  %.pn115 = phi %9 [ %272, %expr_true29 ], [ zeroinitializer, %expr_true25 ], [ zeroinitializer, %if_join21 ]
  %.pn113 = phi float [ %phi.bo, %expr_true29 ], [ 5.000000e-01, %expr_true25 ], [ 5.000000e-01, %if_join21 ]
  %.pn109 = phi float [ %cos, %expr_true29 ], [ 0.000000e+00, %expr_true25 ], [ 0.000000e+00, %if_join21 ]
  %273 = fsub float %225, %215, !dbg !182
  %274 = fmul float %273, %.pn107, !dbg !182
  %275 = fsub float %237, %229, !dbg !182
  %276 = fmul float %275, %.pn105, !dbg !182
  %277 = fadd float %274, %276, !dbg !182
  %278 = fsub float %250, %242, !dbg !182
  %279 = fmul float %278, %.pn103, !dbg !182
  %280 = fadd float %277, %279, !dbg !182
  %281 = fcmp ogt float %280, 0.000000e+00, !dbg !182
  %282 = extractvalue %2 %_4453443, 0, !dbg !182
  %283 = extractvalue %1 %282, 0, !dbg !182
  %284 = sext i32 %ray_id to i64, !dbg !182
  %285 = getelementptr inbounds [0 x i32], [0 x i32]* %283, i64 0, i64 %284, !dbg !182
  %286 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, !dbg !182
  %287 = fcmp ogt float %.pn109, 0.000000e+00
  %or.cond134 = and i1 %281, %287, !dbg !182
  br i1 %or.cond134, label %expr_true34, label %break, !dbg !182

expr_true34:                                      ; preds = %_cont
  %288 = fmul float %273, %273, !dbg !183
  %289 = fmul float %275, %275, !dbg !183
  %290 = fadd float %288, %289, !dbg !183
  %291 = fmul float %278, %278, !dbg !183
  %292 = fadd float %290, %291, !dbg !183
  %293 = call float @__ocml_sqrt_f32(float %292), !dbg !183
  %inv_d = fdiv float 1.000000e+00, %293, !dbg !184
  %294 = fmul float %273, %inv_d, !dbg !184
  %295 = fmul float %294, %.pn107, !dbg !184
  %296 = fmul float %275, %inv_d, !dbg !184
  %297 = fmul float %296, %.pn105, !dbg !184
  %298 = fadd float %295, %297, !dbg !184
  %299 = fmul float %278, %inv_d, !dbg !184
  %300 = fmul float %299, %.pn103, !dbg !184
  %301 = fadd float %298, %300, !dbg !184
  %.inv = fcmp oge float %301, 0.000000e+00, !dbg !184
  %302 = select i1 %.inv, float %301, float 0.000000e+00, !dbg !184
  %.elt128 = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !185
  %.unpack129 = load float, float addrspace(5)* %.elt128, align 4, !dbg !185
  %.elt130 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 1, !dbg !185
  %.unpack131 = load float, float addrspace(5)* %.elt130, align 4, !dbg !185
  %.elt132 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 2, !dbg !185
  %.unpack133 = load float, float addrspace(5)* %.elt132, align 4, !dbg !185
  %303 = extractvalue %1 %282, 1, !dbg !173
  %304 = sext i32 %ray_id to i64, !dbg !173
  %305 = getelementptr inbounds [0 x float], [0 x float]* %303, i64 0, i64 %304, !dbg !173
  store float %215, float* %305, align 4, !dbg !173
  %306 = extractvalue %1 %282, 2, !dbg !173
  %307 = sext i32 %ray_id to i64, !dbg !173
  %308 = getelementptr inbounds [0 x float], [0 x float]* %306, i64 0, i64 %307, !dbg !173
  store float %229, float* %308, align 4, !dbg !173
  %309 = extractvalue %1 %282, 3, !dbg !173
  %310 = sext i32 %ray_id to i64, !dbg !173
  %311 = getelementptr inbounds [0 x float], [0 x float]* %309, i64 0, i64 %310, !dbg !173
  store float %242, float* %311, align 4, !dbg !173
  %312 = extractvalue %1 %282, 4, !dbg !173
  %313 = sext i32 %ray_id to i64, !dbg !173
  %314 = getelementptr inbounds [0 x float], [0 x float]* %312, i64 0, i64 %313, !dbg !173
  store float %273, float* %314, align 4, !dbg !173
  %315 = extractvalue %1 %282, 5, !dbg !173
  %316 = sext i32 %ray_id to i64, !dbg !173
  %317 = getelementptr inbounds [0 x float], [0 x float]* %315, i64 0, i64 %316, !dbg !173
  store float %275, float* %317, align 4, !dbg !173
  %318 = extractvalue %1 %282, 6, !dbg !173
  %319 = sext i32 %ray_id to i64, !dbg !173
  %320 = getelementptr inbounds [0 x float], [0 x float]* %318, i64 0, i64 %319, !dbg !173
  store float %278, float* %320, align 4, !dbg !173
  %321 = extractvalue %1 %282, 7, !dbg !173
  %322 = sext i32 %ray_id to i64, !dbg !173
  %323 = getelementptr inbounds [0 x float], [0 x float]* %321, i64 0, i64 %322, !dbg !173
  store float 0x3F50624DE0000000, float* %323, align 4, !dbg !173
  %324 = extractvalue %1 %282, 8, !dbg !173
  %325 = sext i32 %ray_id to i64, !dbg !173
  %326 = getelementptr inbounds [0 x float], [0 x float]* %324, i64 0, i64 %325, !dbg !173
  store float 0x3FEFF7CEE0000000, float* %326, align 4, !dbg !173
  %327 = extractvalue %2 %_4453443, 2, !dbg !173
  %328 = sext i32 %ray_id to i64, !dbg !173
  %329 = getelementptr inbounds [0 x float], [0 x float]* %327, i64 0, i64 %328, !dbg !173
  %330 = extractvalue %9 %.pn115, 0, !dbg !173
  %331 = fmul float %.unpack129, 0x3FA6D10300000000, !dbg !173
  %332 = fmul float %330, %331, !dbg !173
  %cos_e = fmul float %280, %inv_d, !dbg !173
  %333 = fmul float %cos_e, %.pn109, !dbg !173
  %inv_d2 = fmul float %inv_d, %inv_d, !dbg !173
  %334 = fmul float %333, %inv_d2, !dbg !173
  %inv_pdf_l = fdiv float 1.000000e+00, %.pn113, !dbg !173
  %geom_factor = fmul float %334, %inv_pdf_l, !dbg !173
  %335 = fmul float %302, 0x3FD45F3060000000, !dbg !173
  %336 = fmul float %335, %.pn109, !dbg !173
  %337 = fmul float %336, %inv_d2, !dbg !173
  %338 = fmul float %337, %inv_pdf_l, !dbg !173
  %339 = fadd float %338, 1.000000e+00, !dbg !173
  %340 = fdiv float 1.000000e+00, %339, !dbg !173
  %341 = fmul float %geom_factor, %340, !dbg !173
  %342 = fmul float %332, %341, !dbg !173
  store float %342, float* %329, align 4, !dbg !173
  %343 = extractvalue %2 %_4453443, 3, !dbg !173
  %344 = sext i32 %ray_id to i64, !dbg !173
  %345 = getelementptr inbounds [0 x float], [0 x float]* %343, i64 0, i64 %344, !dbg !173
  %346 = extractvalue %9 %.pn115, 1, !dbg !173
  %347 = fmul float %.unpack131, 0x3FC255AB80000000, !dbg !173
  %348 = fmul float %346, %347, !dbg !173
  %349 = fmul float %348, %341, !dbg !173
  store float %349, float* %345, align 4, !dbg !173
  %350 = extractvalue %2 %_4453443, 4, !dbg !173
  %351 = sext i32 %ray_id to i64, !dbg !173
  %352 = getelementptr inbounds [0 x float], [0 x float]* %350, i64 0, i64 %351, !dbg !173
  %353 = extractvalue %9 %.pn115, 2, !dbg !173
  %354 = fmul float %.unpack133, 0x3F9DA950A0000000, !dbg !173
  %355 = fmul float %353, %354, !dbg !173
  %356 = fmul float %355, %341, !dbg !173
  store float %356, float* %352, align 4, !dbg !173
  br label %break, !dbg !173

break:                                            ; preds = %_cont, %expr_true34
  %storemerge = phi i32 [ %61, %expr_true34 ], [ -1, %_cont ], !dbg !186
  store i32 %storemerge, i32* %285, align 4, !dbg !186
  %.elt = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !187
  %.unpack = load float, float addrspace(5)* %.elt, align 4, !dbg !187
  %.elt118 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 1, !dbg !187
  %.unpack119 = load float, float addrspace(5)* %.elt118, align 4, !dbg !187
  %.elt120 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 2, !dbg !187
  %.unpack121 = load float, float addrspace(5)* %.elt120, align 4, !dbg !187
  %357 = fmul float %.unpack, 0x3FCB367A00000000, !dbg !187
  %358 = fmul float %.unpack119, 0x3FE6E2EB20000000, !dbg !187
  %359 = fadd float %357, %358, !dbg !187
  %360 = fmul float %.unpack121, 0x3FB27BB300000000, !dbg !187
  %361 = fadd float %359, %360, !dbg !187
  %prob = fmul float %361, 2.000000e+00, !dbg !187
  %362 = fcmp ogt float %prob, 7.500000e-01, !dbg !187
  %.prob = select i1 %362, float 7.500000e-01, float %prob, !dbg !188
  %363 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 3, !dbg !189
  %364 = load i32, i32 addrspace(5)* %363, align 4, !dbg !189
  %365 = icmp sgt i32 %364, 63, !dbg !189
  br i1 %365, label %expr_true85, label %expr_false52, !dbg !189

expr_false52:                                     ; preds = %break
  %366 = load i32, i32 addrspace(5)* %152, align 4, !dbg !190
  %367 = icmp eq i32 %366, 0, !dbg !190
  %368 = select i1 %367, i32 1, i32 %366, !dbg !190
  %369 = shl i32 %368, 13, !dbg !190
  %370 = xor i32 %368, %369, !dbg !190
  %371 = lshr i32 %370, 17, !dbg !190
  %372 = xor i32 %370, %371, !dbg !190
  %373 = shl i32 %372, 5, !dbg !190
  %374 = xor i32 %372, %373, !dbg !190
  %375 = and i32 %374, 8388607, !dbg !190
  %376 = or i32 %375, 1065353216, !dbg !190
  %377 = bitcast i32 %376 to float, !dbg !190
  %378 = fadd float %377, -1.000000e+00, !dbg !190
  %379 = fcmp ugt float %.prob, %378, !dbg !190
  store i32 %374, i32 addrspace(5)* %152, align 4, !dbg !190
  br i1 %379, label %expr_false53, label %expr_true84, !dbg !190

expr_false53:                                     ; preds = %expr_false52
  %380 = icmp eq i32 %374, 0, !dbg !191
  %381 = select i1 %380, i32 1, i32 %374, !dbg !191
  %382 = shl i32 %381, 13, !dbg !191
  %383 = xor i32 %381, %382, !dbg !191
  %384 = lshr i32 %383, 17, !dbg !191
  %385 = xor i32 %383, %384, !dbg !191
  %386 = shl i32 %385, 5, !dbg !191
  %387 = xor i32 %385, %386, !dbg !191
  store i32 %387, i32 addrspace(5)* %152, align 4, !dbg !191
  %388 = icmp eq i32 %387, 0, !dbg !191
  %389 = select i1 %388, i32 1, i32 %387, !dbg !191
  %390 = shl i32 %389, 13, !dbg !191
  %391 = xor i32 %389, %390, !dbg !191
  %392 = lshr i32 %391, 17, !dbg !191
  %393 = xor i32 %391, %392, !dbg !191
  %394 = shl i32 %393, 5, !dbg !191
  %395 = xor i32 %393, %394, !dbg !191
  store i32 %395, i32 addrspace(5)* %152, align 4, !dbg !191
  %396 = and i32 %395, 8388607, !dbg !191
  %397 = or i32 %396, 1065353216, !dbg !191
  %398 = bitcast i32 %397 to float, !dbg !191
  %399 = fadd float %398, -1.000000e+00, !dbg !191
  %400 = fsub float 1.000000e+00, %399, !dbg !191
  %401 = call float @__ocml_sqrt_f32(float %400), !dbg !191
  %402 = call float @__ocml_sqrt_f32(float %399), !dbg !192
  %403 = and i32 %387, 8388607, !dbg !193
  %404 = or i32 %403, 1065353216, !dbg !193
  %405 = bitcast i32 %404 to float, !dbg !193
  %406 = fadd float %405, -1.000000e+00, !dbg !193
  %phi = fmul float %406, 0x401921FB60000000, !dbg !193
  %407 = call float @__ocml_cos_f32(float %phi), !dbg !193
  %408 = call float @__ocml_sin_f32(float %phi), !dbg !194
  %409 = fmul float %401, 0x3FD45F3060000000, !dbg !195
  %410 = fcmp ogt float %409, 0.000000e+00, !dbg !195
  %411 = fcmp oge float %.pn103, 0.000000e+00, !dbg !195
  %412 = select i1 %411, float 1.000000e+00, float -1.000000e+00, !dbg !195
  %413 = fmul float %412, %.pn107, !dbg !195
  %414 = fmul float %413, %.pn107, !dbg !195
  %415 = fadd float %412, %.pn103, !dbg !195
  %a = fdiv float -1.000000e+00, %415, !dbg !195
  %416 = fmul float %414, %a, !dbg !195
  %417 = fadd float %416, 1.000000e+00, !dbg !195
  %x = fmul float %402, %407, !dbg !195
  %418 = fmul float %417, %x, !dbg !195
  %419 = fmul float %.pn107, %.pn105, !dbg !195
  %b = fmul float %419, %a, !dbg !195
  %y = fmul float %402, %408, !dbg !195
  %420 = fmul float %b, %y, !dbg !195
  %421 = fadd float %418, %420, !dbg !195
  %422 = fmul float %.pn107, %401, !dbg !195
  %423 = fadd float %421, %422, !dbg !195
  %424 = fmul float %412, %b, !dbg !195
  %425 = fmul float %424, %x, !dbg !195
  %426 = fmul float %.pn105, %.pn105, !dbg !195
  %427 = fmul float %426, %a, !dbg !195
  %428 = fadd float %412, %427, !dbg !195
  %429 = fmul float %428, %y, !dbg !195
  %430 = fadd float %425, %429, !dbg !195
  %431 = fmul float %.pn105, %401, !dbg !195
  %432 = fadd float %430, %431, !dbg !195
  %433 = fneg float %412, !dbg !195
  %434 = fmul float %.pn107, %433, !dbg !195
  %435 = fmul float %434, %x, !dbg !195
  %436 = fmul float %.pn105, %y, !dbg !195
  %437 = fsub float %435, %436, !dbg !195
  %438 = fmul float %.pn103, %401, !dbg !195
  %439 = fadd float %437, %438, !dbg !195
  br i1 %410, label %expr_true63, label %infix_result, !dbg !195

expr_true63:                                      ; preds = %expr_false53
  %440 = fmul float %423, %.pn101, !dbg !196
  %441 = fmul float %432, %.pn99, !dbg !196
  %442 = fadd float %440, %441, !dbg !196
  %443 = fmul float %439, %.pn97, !dbg !196
  %444 = fadd float %442, %443, !dbg !196
  %445 = fcmp ogt float %444, 0.000000e+00, !dbg !196
  br i1 %445, label %expr_true65, label %infix_result, !dbg !196

expr_true65:                                      ; preds = %expr_true63
  br label %infix_result, !dbg !197

infix_result:                                     ; preds = %expr_false53, %expr_true63, %expr_true65
  %infix_result66 = phi i1 [ true, %expr_true65 ], [ false, %expr_true63 ], [ false, %expr_false53 ], !dbg !198
  %. = select i1 %infix_result66, float %409, float 1.000000e+00, !dbg !199
  %if_join74 = select i1 %infix_result66, %9 { float 0x3FA6D10300000000, float 0x3FC255AB80000000, float 0x3F9DA950A0000000 }, %9 zeroinitializer, !dbg !200
  %.elt122 = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !201
  %.unpack123 = load float, float addrspace(5)* %.elt122, align 4, !dbg !201
  %.elt124 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 1, !dbg !201
  %.unpack125 = load float, float addrspace(5)* %.elt124, align 4, !dbg !201
  %.elt126 = getelementptr inbounds %8, %8 addrspace(5)* %state_4453492, i32 0, i32 1, i32 2, !dbg !201
  %.unpack127 = load float, float addrspace(5)* %.elt126, align 4, !dbg !201
  %446 = load i32, i32 addrspace(5)* %152, align 4, !dbg !173
  %447 = load i32, i32 addrspace(5)* %363, align 4, !dbg !173
  store float %215, float* %36, align 4, !dbg !173
  store float %229, float* %40, align 4, !dbg !173
  store float %242, float* %44, align 4, !dbg !173
  store float %423, float* %48, align 4, !dbg !173
  store float %432, float* %52, align 4, !dbg !173
  store float %439, float* %56, align 4, !dbg !173
  %448 = extractvalue %1 %33, 7, !dbg !173
  %449 = sext i32 %ray_id to i64, !dbg !173
  %450 = getelementptr inbounds [0 x float], [0 x float]* %448, i64 0, i64 %449, !dbg !173
  store float 0x3F50624DE0000000, float* %450, align 4, !dbg !173
  %451 = extractvalue %1 %33, 8, !dbg !173
  %452 = sext i32 %ray_id to i64, !dbg !173
  %453 = getelementptr inbounds [0 x float], [0 x float]* %451, i64 0, i64 %452, !dbg !173
  store float 0x47EFFFFFE0000000, float* %453, align 4, !dbg !173
  store i32 %446, i32* %11, align 4, !dbg !173
  %454 = extractvalue %9 %if_join74, 0, !dbg !173
  %455 = fmul float %.unpack123, %454, !dbg !173
  %456 = fmul float %., %.prob, !dbg !173
  %457 = fdiv float %401, %456, !dbg !173
  %458 = fmul float %455, %457, !dbg !173
  store float %458, float* %15, align 4, !dbg !173
  %459 = extractvalue %9 %if_join74, 1, !dbg !173
  %460 = fmul float %.unpack125, %459, !dbg !173
  %461 = fmul float %460, %457, !dbg !173
  store float %461, float* %19, align 4, !dbg !173
  %462 = extractvalue %9 %if_join74, 2, !dbg !173
  %463 = fmul float %.unpack127, %462, !dbg !173
  %464 = fmul float %463, %457, !dbg !173
  store float %464, float* %23, align 4, !dbg !173
  %465 = fdiv float 1.000000e+00, %., !dbg !173
  store float %465, float* %27, align 4, !dbg !173
  %466 = add nsw i32 %447, 1, !dbg !173
  store i32 %466, i32* %31, align 4, !dbg !173
  ret void, !dbg !173

expr_true84:                                      ; preds = %expr_false52
  store i32 -1, i32* %60, align 4, !dbg !191
  ret void, !dbg !191

expr_true85:                                      ; preds = %break
  store i32 -1, i32* %60, align 4, !dbg !190
  ret void, !dbg !190

expr_true86:                                      ; preds = %lambda_4085618
  ret void, !dbg !172
}

define amdgpu_kernel void @lambda_4082691([0 x %12]* %_4466918, %0 %_4466919, [0 x %13]* %_4466920) local_unnamed_addr !dbg !202 !reqd_work_group_size !7 {
lambda_4082691:
  %mask_4467264 = alloca i1, align 1, addrspace(5)
  %prim_id_4467215 = alloca i32, align 4, addrspace(5)
  %val_4467422 = alloca { i32, float }, align 4, addrspace(5)
  %val_4467419 = alloca { i32, float }, align 4, addrspace(5)
  %mask_4467053 = alloca i32, align 4, addrspace(5)
  %nodes_4467384 = alloca [64 x i32], align 4, addrspace(5)
  %ptr_4467381 = alloca i32, align 4, addrspace(5)
  %node_4466996 = alloca i32, align 4, addrspace(5)
  %hit_4467002 = alloca %14, align 4, addrspace(5)
  %ray_4467055 = alloca %15, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !204
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !205
  %2 = call i32 @llvm.amdgcn.workitem.id.y(), !dbg !206
  %3 = extractvalue %0 %_4466919, 12, !dbg !207
  %4 = shl nsw i32 %1, 6, !dbg !207
  %i = add nsw i32 %0, %4, !dbg !207
  %5 = add nsw i32 %i, %2, !dbg !207
  %.not = icmp sgt i32 %3, %5, !dbg !207
  br i1 %.not, label %expr_false, label %expr_true100, !dbg !207

expr_false:                                       ; preds = %lambda_4082691
  %6 = extractvalue %0 %_4466919, 0, !dbg !208
  %7 = extractvalue %1 %6, 1, !dbg !208
  %8 = sext i32 %5 to i64, !dbg !208
  %9 = getelementptr inbounds [0 x float], [0 x float]* %7, i64 0, i64 %8, !dbg !208
  %10 = load float, float* %9, align 4, !dbg !208
  %11 = extractvalue %1 %6, 2, !dbg !208
  %12 = sext i32 %5 to i64, !dbg !208
  %13 = getelementptr inbounds [0 x float], [0 x float]* %11, i64 0, i64 %12, !dbg !208
  %14 = load float, float* %13, align 4, !dbg !208
  %15 = extractvalue %1 %6, 3, !dbg !208
  %16 = sext i32 %5 to i64, !dbg !208
  %17 = getelementptr inbounds [0 x float], [0 x float]* %15, i64 0, i64 %16, !dbg !208
  %18 = load float, float* %17, align 4, !dbg !208
  %19 = extractvalue %1 %6, 4, !dbg !208
  %20 = sext i32 %5 to i64, !dbg !208
  %21 = getelementptr inbounds [0 x float], [0 x float]* %19, i64 0, i64 %20, !dbg !208
  %22 = load float, float* %21, align 4, !dbg !208
  %23 = fcmp ogt float %22, 0.000000e+00, !dbg !208
  %24 = fneg float %22, !dbg !208
  %25 = select i1 %23, float %22, float %24, !dbg !208
  %26 = fcmp olt float %25, 0x3E45798EE0000000, !dbg !208
  %27 = extractvalue %1 %6, 5, !dbg !208
  %28 = sext i32 %5 to i64, !dbg !208
  %29 = getelementptr inbounds [0 x float], [0 x float]* %27, i64 0, i64 %28, !dbg !208
  %30 = load float, float* %29, align 4, !dbg !208
  %31 = extractvalue %1 %6, 6, !dbg !208
  %32 = sext i32 %5 to i64, !dbg !208
  %33 = getelementptr inbounds [0 x float], [0 x float]* %31, i64 0, i64 %32, !dbg !208
  %34 = load float, float* %33, align 4, !dbg !208
  %35 = extractvalue %1 %6, 7, !dbg !208
  %36 = sext i32 %5 to i64, !dbg !208
  %37 = getelementptr inbounds [0 x float], [0 x float]* %35, i64 0, i64 %36, !dbg !208
  %38 = load float, float* %37, align 4, !dbg !208
  %39 = extractvalue %1 %6, 8, !dbg !208
  %40 = sext i32 %5 to i64, !dbg !208
  %41 = getelementptr inbounds [0 x float], [0 x float]* %39, i64 0, i64 %40, !dbg !208
  %42 = load float, float* %41, align 4, !dbg !208
  br i1 %26, label %expr_true, label %expr_false6, !dbg !208

expr_false6:                                      ; preds = %expr_false
  %43 = fdiv float 1.000000e+00, %22, !dbg !209
  br label %safe_rcp_cont, !dbg !209

expr_true:                                        ; preds = %expr_false
  %44 = bitcast float %22 to i32, !dbg !209
  %45 = and i32 %44, -2147483648, !dbg !209
  %46 = or i32 %45, 2139095039, !dbg !209
  %47 = bitcast i32 %46 to float, !dbg !209
  br label %safe_rcp_cont, !dbg !209

safe_rcp_cont:                                    ; preds = %expr_true, %expr_false6
  %safe_rcp_cont7 = phi float [ %43, %expr_false6 ], [ %47, %expr_true ], !dbg !210
  %48 = fcmp ogt float %30, 0.000000e+00, !dbg !210
  %49 = fneg float %30, !dbg !210
  %50 = select i1 %48, float %30, float %49, !dbg !210
  %51 = fcmp olt float %50, 0x3E45798EE0000000, !dbg !210
  br i1 %51, label %expr_true9, label %expr_false8, !dbg !210

expr_false8:                                      ; preds = %safe_rcp_cont
  %52 = fdiv float 1.000000e+00, %30, !dbg !209
  br label %safe_rcp_cont10, !dbg !209

expr_true9:                                       ; preds = %safe_rcp_cont
  %53 = bitcast float %30 to i32, !dbg !209
  %54 = and i32 %53, -2147483648, !dbg !209
  %55 = or i32 %54, 2139095039, !dbg !209
  %56 = bitcast i32 %55 to float, !dbg !209
  br label %safe_rcp_cont10, !dbg !209

safe_rcp_cont10:                                  ; preds = %expr_true9, %expr_false8
  %safe_rcp_cont11 = phi float [ %52, %expr_false8 ], [ %56, %expr_true9 ], !dbg !211
  %57 = fcmp ogt float %34, 0.000000e+00, !dbg !211
  %58 = fneg float %34, !dbg !211
  %59 = select i1 %57, float %34, float %58, !dbg !211
  %60 = fcmp olt float %59, 0x3E45798EE0000000, !dbg !211
  br i1 %60, label %expr_true13, label %expr_false12, !dbg !211

expr_false12:                                     ; preds = %safe_rcp_cont10
  %61 = fdiv float 1.000000e+00, %34, !dbg !209
  br label %safe_rcp_cont14, !dbg !209

expr_true13:                                      ; preds = %safe_rcp_cont10
  %62 = bitcast float %34 to i32, !dbg !209
  %63 = and i32 %62, -2147483648, !dbg !209
  %64 = or i32 %63, 2139095039, !dbg !209
  %65 = bitcast i32 %64 to float, !dbg !209
  br label %safe_rcp_cont14, !dbg !209

safe_rcp_cont14:                                  ; preds = %expr_true13, %expr_false12
  %safe_rcp_cont15 = phi float [ %61, %expr_false12 ], [ %65, %expr_true13 ], !dbg !212
  %66 = fneg float %10, !dbg !212
  %67 = fmul float %safe_rcp_cont7, %66, !dbg !212
  %68 = fneg float %14, !dbg !212
  %69 = fmul float %safe_rcp_cont11, %68, !dbg !212
  %70 = fneg float %18, !dbg !212
  %71 = fmul float %safe_rcp_cont15, %70, !dbg !212
  %ray_4467055.repack.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 0, i32 0, !dbg !212
  store float %10, float addrspace(5)* %ray_4467055.repack.repack, align 4, !dbg !212
  %ray_4467055.repack.repack111 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 0, i32 1, !dbg !212
  store float %14, float addrspace(5)* %ray_4467055.repack.repack111, align 4, !dbg !212
  %ray_4467055.repack.repack113 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 0, i32 2, !dbg !212
  store float %18, float addrspace(5)* %ray_4467055.repack.repack113, align 4, !dbg !212
  %ray_4467055.repack101.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 1, i32 0, !dbg !212
  store float %22, float addrspace(5)* %ray_4467055.repack101.repack, align 4, !dbg !212
  %ray_4467055.repack101.repack115 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 1, i32 1, !dbg !212
  store float %30, float addrspace(5)* %ray_4467055.repack101.repack115, align 4, !dbg !212
  %ray_4467055.repack101.repack117 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 1, i32 2, !dbg !212
  store float %34, float addrspace(5)* %ray_4467055.repack101.repack117, align 4, !dbg !212
  %ray_4467055.repack103.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 0, !dbg !212
  store float %safe_rcp_cont7, float addrspace(5)* %ray_4467055.repack103.repack, align 4, !dbg !212
  %ray_4467055.repack103.repack119 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 1, !dbg !212
  store float %safe_rcp_cont11, float addrspace(5)* %ray_4467055.repack103.repack119, align 4, !dbg !212
  %ray_4467055.repack103.repack121 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 2, !dbg !212
  store float %safe_rcp_cont15, float addrspace(5)* %ray_4467055.repack103.repack121, align 4, !dbg !212
  %ray_4467055.repack105.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 0, !dbg !212
  store float %67, float addrspace(5)* %ray_4467055.repack105.repack, align 4, !dbg !212
  %ray_4467055.repack105.repack123 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 1, !dbg !212
  store float %69, float addrspace(5)* %ray_4467055.repack105.repack123, align 4, !dbg !212
  %ray_4467055.repack105.repack125 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 2, !dbg !212
  store float %71, float addrspace(5)* %ray_4467055.repack105.repack125, align 4, !dbg !212
  %ray_4467055.repack107 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 4, !dbg !212
  store float %38, float addrspace(5)* %ray_4467055.repack107, align 4, !dbg !212
  %ray_4467055.repack109 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 5, !dbg !212
  store float %42, float addrspace(5)* %ray_4467055.repack109, align 4, !dbg !212
  %hit_4467002.repack = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 0, !dbg !212
  store float %42, float addrspace(5)* %hit_4467002.repack, align 4, !dbg !212
  %hit_4467002.repack129 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 2, !dbg !212
  store i32 -1, i32 addrspace(5)* %hit_4467002.repack129, align 4, !dbg !212
  %hit_4467002.repack131 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 3, !dbg !212
  store i32 -1, i32 addrspace(5)* %hit_4467002.repack131, align 4, !dbg !212
  store i32 0, i32 addrspace(5)* %node_4466996, align 4, !dbg !212
  store i32 0, i32 addrspace(5)* %ptr_4467381, align 4, !dbg !212
  %72 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4467384, i32 0, i32 0, !dbg !212
  store i32 0, i32 addrspace(5)* %72, align 4, !dbg !212
  store i32 1, i32 addrspace(5)* %node_4466996, align 4, !dbg !212
  %73 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 5, !dbg !212
  %.unpack137.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 0
  %.unpack137.elt154 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 1
  %.unpack137.elt156 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 2
  %.unpack139.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 0
  %.unpack139.elt159 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 1
  %.unpack139.elt161 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 2
  %.elt140 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 4
  %.elt142 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 5
  %val_4467419.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467419, i32 0, i32 0
  %val_4467419.repack259 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467419, i32 0, i32 1
  %.unpack167.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 0
  %.unpack167.elt184 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 1
  %.unpack167.elt186 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 2, i32 2
  %.unpack169.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 0
  %.unpack169.elt189 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 1
  %.unpack169.elt191 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 3, i32 2
  %.elt170 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 4
  %.elt172 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 5
  %val_4467422.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467422, i32 0, i32 0
  %val_4467422.repack256 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467422, i32 0, i32 1
  %.elt = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467419, i32 0, i32 0
  %.elt196 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467422, i32 0, i32 0
  %.elt198 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467422, i32 0, i32 1
  %.elt194 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4467419, i32 0, i32 1
  %.unpack212.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 0, i32 0
  %.unpack212.elt223 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 0, i32 1
  %.unpack212.elt225 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 0, i32 2
  %.unpack214.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 1, i32 0
  %.unpack214.elt228 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 1, i32 1
  %.unpack214.elt230 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 1, i32 2
  %.elt219 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 4
  %.elt221 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4467055, i32 0, i32 5
  %hit_4467002.repack244 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 0
  %hit_4467002.repack246.repack = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 1, i32 0
  %hit_4467002.repack246.repack253 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 1, i32 1
  %hit_4467002.repack248 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 2
  %hit_4467002.repack250 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 3
  br label %expr_true16, !dbg !213

expr_true16:                                      ; preds = %safe_rcp_cont14, %expr_false75
  %74 = load i32, i32 addrspace(5)* %node_4466996, align 4, !dbg !214
  %75 = add nsw i32 %74, -1, !dbg !214
  %76 = sext i32 %75 to i64, !dbg !214
  %77 = getelementptr inbounds [0 x %12], [0 x %12]* %_4466918, i64 0, i64 %76, !dbg !214
  %78 = bitcast %12* %77 to <4 x float>*, !dbg !214
  %79 = addrspacecast <4 x float>* %78 to <4 x float> addrspace(1)*, !dbg !214
  %80 = load <4 x float>, <4 x float> addrspace(1)* %79, align 16, !dbg !214
  %81 = getelementptr inbounds [0 x %12], [0 x %12]* %_4466918, i64 0, i64 %76, i32 0, i64 4, !dbg !214
  %82 = bitcast float* %81 to <4 x float>*, !dbg !214
  %83 = addrspacecast <4 x float>* %82 to <4 x float> addrspace(1)*, !dbg !214
  %84 = load <4 x float>, <4 x float> addrspace(1)* %83, align 16, !dbg !214
  %85 = getelementptr inbounds [0 x %12], [0 x %12]* %_4466918, i64 0, i64 %76, i32 0, i64 8, !dbg !214
  %86 = bitcast float* %85 to <4 x float>*, !dbg !214
  %87 = addrspacecast <4 x float>* %86 to <4 x float> addrspace(1)*, !dbg !214
  %88 = load <4 x float>, <4 x float> addrspace(1)* %87, align 16, !dbg !214
  %89 = getelementptr inbounds [0 x %12], [0 x %12]* %_4466918, i64 0, i64 %76, i32 1, !dbg !214
  %90 = bitcast [2 x i32]* %89 to <4 x i32>*, !dbg !214
  %91 = addrspacecast <4 x i32>* %90 to <4 x i32> addrspace(1)*, !dbg !214
  %92 = load <4 x i32>, <4 x i32> addrspace(1)* %91, align 16, !dbg !214
  store i32 0, i32 addrspace(5)* %mask_4467053, align 4, !dbg !214
  %.unpack137.unpack = load float, float addrspace(5)* %.unpack137.elt, align 4, !dbg !214
  %.unpack137.unpack155 = load float, float addrspace(5)* %.unpack137.elt154, align 4, !dbg !214
  %.unpack137.unpack157 = load float, float addrspace(5)* %.unpack137.elt156, align 4, !dbg !214
  %.unpack139.unpack = load float, float addrspace(5)* %.unpack139.elt, align 4, !dbg !214
  %.unpack139.unpack160 = load float, float addrspace(5)* %.unpack139.elt159, align 4, !dbg !214
  %.unpack139.unpack162 = load float, float addrspace(5)* %.unpack139.elt161, align 4, !dbg !214
  %.unpack141 = load float, float addrspace(5)* %.elt140, align 4, !dbg !214
  %.unpack143 = load float, float addrspace(5)* %.elt142, align 4, !dbg !214
  %93 = extractelement <4 x float> %80, i32 0, !dbg !214
  %94 = fmul float %.unpack137.unpack, %93, !dbg !214
  %95 = fadd float %94, %.unpack139.unpack, !dbg !214
  %96 = extractelement <4 x float> %80, i32 1, !dbg !214
  %97 = fmul float %.unpack137.unpack, %96, !dbg !214
  %98 = fadd float %97, %.unpack139.unpack, !dbg !214
  %99 = call float @__ocml_fmin_f32(float %95, float %98), !dbg !214
  %100 = extractelement <4 x float> %80, i32 2, !dbg !215
  %101 = fmul float %.unpack137.unpack155, %100, !dbg !215
  %102 = fadd float %101, %.unpack139.unpack160, !dbg !215
  %103 = extractelement <4 x float> %80, i32 3, !dbg !215
  %104 = fmul float %.unpack137.unpack155, %103, !dbg !215
  %105 = fadd float %104, %.unpack139.unpack160, !dbg !215
  %106 = call float @__ocml_fmin_f32(float %102, float %105), !dbg !215
  %107 = extractelement <4 x float> %84, i32 0, !dbg !216
  %108 = fmul float %.unpack137.unpack157, %107, !dbg !216
  %109 = fadd float %108, %.unpack139.unpack162, !dbg !216
  %110 = extractelement <4 x float> %84, i32 1, !dbg !216
  %111 = fmul float %.unpack137.unpack157, %110, !dbg !216
  %112 = fadd float %111, %.unpack139.unpack162, !dbg !216
  %113 = call float @__ocml_fmin_f32(float %109, float %112), !dbg !216
  %114 = call float @__ocml_fmax_f32(float %113, float %.unpack141), !dbg !217
  %115 = call float @__ocml_fmax_f32(float %99, float %106), !dbg !218
  %116 = call float @__ocml_fmax_f32(float %115, float %114), !dbg !219
  %117 = call float @__ocml_fmax_f32(float %95, float %98), !dbg !220
  %118 = call float @__ocml_fmax_f32(float %102, float %105), !dbg !221
  %119 = call float @__ocml_fmax_f32(float %109, float %112), !dbg !222
  %120 = call float @__ocml_fmin_f32(float %119, float %.unpack143), !dbg !223
  %121 = call float @__ocml_fmin_f32(float %117, float %118), !dbg !224
  %122 = call float @__ocml_fmin_f32(float %121, float %120), !dbg !225
  %123 = fcmp ugt float %116, %122, !dbg !226
  br i1 %123, label %_cont41, label %expr_true40, !dbg !226

expr_true40:                                      ; preds = %expr_true16
  %124 = load i32, i32 addrspace(5)* %mask_4467053, align 4, !dbg !227
  %125 = or i32 %124, 1, !dbg !227
  store i32 %125, i32 addrspace(5)* %mask_4467053, align 4, !dbg !227
  %126 = extractelement <4 x i32> %92, i32 0, !dbg !227
  store i32 %126, i32 addrspace(5)* %val_4467419.repack, align 4, !dbg !227
  store float %116, float addrspace(5)* %val_4467419.repack259, align 4, !dbg !227
  br label %_cont41, !dbg !227

_cont41:                                          ; preds = %expr_true16, %expr_true40
  %.unpack167.unpack = load float, float addrspace(5)* %.unpack167.elt, align 4, !dbg !228
  %.unpack167.unpack185 = load float, float addrspace(5)* %.unpack167.elt184, align 4, !dbg !228
  %.unpack167.unpack187 = load float, float addrspace(5)* %.unpack167.elt186, align 4, !dbg !228
  %.unpack169.unpack = load float, float addrspace(5)* %.unpack169.elt, align 4, !dbg !228
  %.unpack169.unpack190 = load float, float addrspace(5)* %.unpack169.elt189, align 4, !dbg !228
  %.unpack169.unpack192 = load float, float addrspace(5)* %.unpack169.elt191, align 4, !dbg !228
  %.unpack171 = load float, float addrspace(5)* %.elt170, align 4, !dbg !228
  %.unpack173 = load float, float addrspace(5)* %.elt172, align 4, !dbg !228
  %127 = extractelement <4 x float> %84, i32 2, !dbg !228
  %128 = fmul float %.unpack167.unpack, %127, !dbg !228
  %129 = fadd float %128, %.unpack169.unpack, !dbg !228
  %130 = extractelement <4 x float> %84, i32 3, !dbg !228
  %131 = fmul float %.unpack167.unpack, %130, !dbg !228
  %132 = fadd float %131, %.unpack169.unpack, !dbg !228
  %133 = call float @__ocml_fmin_f32(float %129, float %132), !dbg !228
  %134 = extractelement <4 x float> %88, i32 0, !dbg !215
  %135 = fmul float %.unpack167.unpack185, %134, !dbg !215
  %136 = fadd float %135, %.unpack169.unpack190, !dbg !215
  %137 = extractelement <4 x float> %88, i32 1, !dbg !215
  %138 = fmul float %.unpack167.unpack185, %137, !dbg !215
  %139 = fadd float %138, %.unpack169.unpack190, !dbg !215
  %140 = call float @__ocml_fmin_f32(float %136, float %139), !dbg !215
  %141 = extractelement <4 x float> %88, i32 2, !dbg !216
  %142 = fmul float %.unpack167.unpack187, %141, !dbg !216
  %143 = fadd float %142, %.unpack169.unpack192, !dbg !216
  %144 = extractelement <4 x float> %88, i32 3, !dbg !216
  %145 = fmul float %.unpack167.unpack187, %144, !dbg !216
  %146 = fadd float %145, %.unpack169.unpack192, !dbg !216
  %147 = call float @__ocml_fmin_f32(float %143, float %146), !dbg !216
  %148 = call float @__ocml_fmax_f32(float %147, float %.unpack171), !dbg !217
  %149 = call float @__ocml_fmax_f32(float %133, float %140), !dbg !218
  %150 = call float @__ocml_fmax_f32(float %149, float %148), !dbg !219
  %151 = call float @__ocml_fmax_f32(float %129, float %132), !dbg !220
  %152 = call float @__ocml_fmax_f32(float %136, float %139), !dbg !221
  %153 = call float @__ocml_fmax_f32(float %143, float %146), !dbg !222
  %154 = call float @__ocml_fmin_f32(float %153, float %.unpack173), !dbg !223
  %155 = call float @__ocml_fmin_f32(float %151, float %152), !dbg !224
  %156 = call float @__ocml_fmin_f32(float %155, float %154), !dbg !225
  %157 = fcmp ugt float %150, %156, !dbg !226
  br i1 %157, label %_cont68, label %expr_true67, !dbg !226

expr_true67:                                      ; preds = %_cont41
  %158 = load i32, i32 addrspace(5)* %mask_4467053, align 4, !dbg !227
  %159 = or i32 %158, 2, !dbg !227
  store i32 %159, i32 addrspace(5)* %mask_4467053, align 4, !dbg !227
  %160 = extractelement <4 x i32> %92, i32 1, !dbg !227
  store i32 %160, i32 addrspace(5)* %val_4467422.repack, align 4, !dbg !227
  store float %150, float addrspace(5)* %val_4467422.repack256, align 4, !dbg !227
  br label %_cont68, !dbg !227

_cont68:                                          ; preds = %_cont41, %expr_true67
  %161 = load i32, i32 addrspace(5)* %mask_4467053, align 4, !dbg !228
  %162 = icmp eq i32 %161, 0, !dbg !228
  br i1 %162, label %expr_true72, label %expr_false69, !dbg !228

expr_false69:                                     ; preds = %_cont68
  %.unpack = load i32, i32 addrspace(5)* %.elt, align 4, !dbg !229
  %.unpack197 = load i32, i32 addrspace(5)* %.elt196, align 4, !dbg !229
  %163 = load i32, i32 addrspace(5)* %mask_4467053, align 4, !dbg !229
  %164 = icmp eq i32 %163, 3, !dbg !229
  br i1 %164, label %expr_true71, label %expr_false70, !dbg !229

expr_false70:                                     ; preds = %expr_false69
  %165 = load i32, i32 addrspace(5)* %mask_4467053, align 4, !dbg !230
  %166 = icmp eq i32 %165, 1, !dbg !230
  %167 = select i1 %166, i32 %.unpack, i32 %.unpack197, !dbg !230
  store i32 %167, i32 addrspace(5)* %node_4466996, align 4, !dbg !230
  br label %if_join73, !dbg !230

expr_true71:                                      ; preds = %expr_false69
  %.unpack199 = load float, float addrspace(5)* %.elt198, align 4, !dbg !229
  %.unpack195 = load float, float addrspace(5)* %.elt194, align 4, !dbg !229
  %168 = fcmp olt float %.unpack195, %.unpack199, !dbg !230
  %169 = select i1 %168, i32 %.unpack, i32 %.unpack197, !dbg !230
  store i32 %169, i32 addrspace(5)* %node_4466996, align 4, !dbg !230
  %170 = load i32, i32 addrspace(5)* %ptr_4467381, align 4, !dbg !230
  %171 = add nsw i32 %170, 1, !dbg !230
  store i32 %171, i32 addrspace(5)* %ptr_4467381, align 4, !dbg !230
  %172 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4467384, i32 0, i32 %171, !dbg !230
  %173 = select i1 %168, i32 %.unpack197, i32 %.unpack, !dbg !230
  store i32 %173, i32 addrspace(5)* %172, align 4, !dbg !230
  br label %if_join73, !dbg !230

expr_true72:                                      ; preds = %_cont68
  %174 = load i32, i32 addrspace(5)* %ptr_4467381, align 4, !dbg !229
  %175 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4467384, i32 0, i32 %174, !dbg !229
  %176 = load i32, i32 addrspace(5)* %175, align 4, !dbg !229
  store i32 %176, i32 addrspace(5)* %node_4466996, align 4, !dbg !229
  %177 = add nsw i32 %174, -1, !dbg !229
  store i32 %177, i32 addrspace(5)* %ptr_4467381, align 4, !dbg !229
  br label %if_join73, !dbg !229

if_join73:                                        ; preds = %expr_false70, %expr_true71, %expr_true72
  %178 = load i32, i32 addrspace(5)* %node_4466996, align 4, !dbg !231
  %179 = icmp slt i32 %178, 0, !dbg !231
  br i1 %179, label %expr_true76, label %expr_false75, !dbg !231

expr_false75:                                     ; preds = %expr_true94, %if_join73
  %180 = load i32, i32 addrspace(5)* %node_4466996, align 4, !dbg !213
  %181 = icmp eq i32 %180, 0, !dbg !213
  br i1 %181, label %expr_false95, label %expr_true16, !dbg !213

expr_true76:                                      ; preds = %if_join73, %expr_true94
  %182 = load i32, i32 addrspace(5)* %node_4466996, align 4, !dbg !232
  %183 = load i32, i32 addrspace(5)* %ptr_4467381, align 4, !dbg !232
  %184 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4467384, i32 0, i32 %183, !dbg !232
  %185 = load i32, i32 addrspace(5)* %184, align 4, !dbg !232
  store i32 %185, i32 addrspace(5)* %node_4466996, align 4, !dbg !232
  %186 = add nsw i32 %183, -1, !dbg !232
  store i32 %186, i32 addrspace(5)* %ptr_4467381, align 4, !dbg !232
  %prim_id = xor i32 %182, -1, !dbg !232
  store i32 %prim_id, i32 addrspace(5)* %prim_id_4467215, align 4, !dbg !232
  br label %while_head77, !dbg !232

while_head77:                                     ; preds = %_cont92, %expr_true76
  %187 = load i32, i32 addrspace(5)* %prim_id_4467215, align 4, !dbg !233
  %188 = add nsw i32 %187, 1, !dbg !233
  store i32 %188, i32 addrspace(5)* %prim_id_4467215, align 4, !dbg !233
  %189 = sext i32 %187 to i64, !dbg !233
  %190 = getelementptr inbounds [0 x %13], [0 x %13]* %_4466920, i64 0, i64 %189, !dbg !233
  %191 = bitcast %13* %190 to <4 x float>*, !dbg !233
  %192 = addrspacecast <4 x float>* %191 to <4 x float> addrspace(1)*, !dbg !233
  %193 = load <4 x float>, <4 x float> addrspace(1)* %192, align 16, !dbg !233
  %194 = getelementptr inbounds [0 x %13], [0 x %13]* %_4466920, i64 0, i64 %189, i32 2, !dbg !233
  %195 = bitcast [3 x float]* %194 to <4 x float>*, !dbg !233
  %196 = addrspacecast <4 x float>* %195 to <4 x float> addrspace(1)*, !dbg !233
  %197 = load <4 x float>, <4 x float> addrspace(1)* %196, align 16, !dbg !233
  %198 = getelementptr inbounds [0 x %13], [0 x %13]* %_4466920, i64 0, i64 %189, i32 4, !dbg !233
  %199 = bitcast [3 x float]* %198 to <4 x float>*, !dbg !233
  %200 = addrspacecast <4 x float>* %199 to <4 x float> addrspace(1)*, !dbg !233
  %201 = load <4 x float>, <4 x float> addrspace(1)* %200, align 16, !dbg !233
  %.unpack212.unpack = load float, float addrspace(5)* %.unpack212.elt, align 4, !dbg !233
  %.unpack212.unpack224 = load float, float addrspace(5)* %.unpack212.elt223, align 4, !dbg !233
  %.unpack212.unpack226 = load float, float addrspace(5)* %.unpack212.elt225, align 4, !dbg !233
  %.unpack214.unpack = load float, float addrspace(5)* %.unpack214.elt, align 4, !dbg !233
  %.unpack214.unpack229 = load float, float addrspace(5)* %.unpack214.elt228, align 4, !dbg !233
  %.unpack214.unpack231 = load float, float addrspace(5)* %.unpack214.elt230, align 4, !dbg !233
  %.unpack220 = load float, float addrspace(5)* %.elt219, align 4, !dbg !233
  %.unpack222 = load float, float addrspace(5)* %.elt221, align 4, !dbg !233
  %202 = extractelement <4 x float> %197, i32 1, !dbg !233
  %203 = extractelement <4 x float> %201, i32 2, !dbg !233
  %204 = fmul float %202, %203, !dbg !233
  %205 = extractelement <4 x float> %197, i32 2, !dbg !233
  %206 = extractelement <4 x float> %201, i32 1, !dbg !233
  %207 = fmul float %205, %206, !dbg !233
  %208 = fsub float %204, %207, !dbg !233
  %209 = fmul float %208, %.unpack214.unpack, !dbg !233
  %210 = extractelement <4 x float> %201, i32 0, !dbg !233
  %211 = fmul float %205, %210, !dbg !233
  %212 = extractelement <4 x float> %197, i32 0, !dbg !233
  %213 = fmul float %212, %203, !dbg !233
  %214 = fsub float %211, %213, !dbg !233
  %215 = fmul float %214, %.unpack214.unpack229, !dbg !233
  %216 = fadd float %209, %215, !dbg !233
  %217 = fmul float %212, %206, !dbg !233
  %218 = fmul float %202, %210, !dbg !233
  %219 = fsub float %217, %218, !dbg !233
  %220 = fmul float %219, %.unpack214.unpack231, !dbg !233
  %221 = fadd float %216, %220, !dbg !233
  %222 = call float @__ocml_fabs_f32(float %221), !dbg !233
  %223 = extractelement <4 x float> %193, i32 2, !dbg !234
  %224 = fsub float %223, %.unpack212.unpack226, !dbg !234
  %225 = fmul float %.unpack214.unpack229, %224, !dbg !234
  %226 = extractelement <4 x float> %193, i32 1, !dbg !234
  %227 = fsub float %226, %.unpack212.unpack224, !dbg !234
  %228 = fmul float %.unpack214.unpack231, %227, !dbg !234
  %229 = fsub float %225, %228, !dbg !234
  %230 = fmul float %229, %210, !dbg !234
  %231 = extractelement <4 x float> %193, i32 0, !dbg !234
  %232 = fsub float %231, %.unpack212.unpack, !dbg !234
  %233 = fmul float %.unpack214.unpack231, %232, !dbg !234
  %234 = fmul float %.unpack214.unpack, %224, !dbg !234
  %235 = fsub float %233, %234, !dbg !234
  %236 = fmul float %235, %206, !dbg !234
  %237 = fadd float %230, %236, !dbg !234
  %238 = fmul float %.unpack214.unpack, %227, !dbg !234
  %239 = fmul float %.unpack214.unpack229, %232, !dbg !234
  %240 = fsub float %238, %239, !dbg !234
  %241 = fmul float %240, %203, !dbg !234
  %242 = fadd float %237, %241, !dbg !234
  %243 = bitcast float %242 to i32, !dbg !234
  %244 = bitcast float %221 to i32, !dbg !234
  %245 = and i32 %244, -2147483648, !dbg !234
  %246 = xor i32 %245, %243, !dbg !234
  %247 = bitcast i32 %246 to float, !dbg !234
  %mask = fcmp oge float %247, 0.000000e+00, !dbg !234
  store i1 %mask, i1 addrspace(5)* %mask_4467264, align 1, !dbg !234
  %248 = fmul float %229, %212, !dbg !234
  %249 = fmul float %235, %202, !dbg !234
  %250 = fadd float %248, %249, !dbg !234
  %251 = fmul float %240, %205, !dbg !234
  %252 = fadd float %250, %251, !dbg !234
  %253 = bitcast float %252 to i32, !dbg !234
  %254 = xor i32 %245, %253, !dbg !234
  %255 = bitcast i32 %254 to float, !dbg !234
  %256 = fcmp oge float %255, 0.000000e+00, !dbg !234
  %257 = and i1 %mask, %256, !dbg !234
  %258 = fadd float %247, %255, !dbg !234
  %259 = fcmp ole float %258, %222, !dbg !234
  %260 = and i1 %257, %259, !dbg !234
  store i1 %260, i1 addrspace(5)* %mask_4467264, align 1, !dbg !234
  %261 = xor i1 %260, true, !dbg !234
  %262 = call i1 @llvm.expect.i1(i1 %261, i1 true), !dbg !235
  %bc = bitcast <4 x float> %201 to <4 x i32>, !dbg !236
  %263 = extractelement <4 x i32> %bc, i32 3, !dbg !236
  br i1 %262, label %_cont92, label %expr_false82, !dbg !236

expr_false82:                                     ; preds = %while_head77
  %264 = load i1, i1 addrspace(5)* %mask_4467264, align 1, !dbg !237
  %265 = fcmp une float %222, 0.000000e+00, !dbg !237
  %266 = and i1 %264, %265, !dbg !237
  store i1 %266, i1 addrspace(5)* %mask_4467264, align 1, !dbg !237
  %267 = fmul float %222, %.unpack220, !dbg !237
  %268 = fmul float %232, %208, !dbg !237
  %269 = fmul float %227, %214, !dbg !237
  %270 = fadd float %268, %269, !dbg !237
  %271 = fmul float %224, %219, !dbg !237
  %272 = fadd float %270, %271, !dbg !237
  %273 = bitcast float %272 to i32, !dbg !237
  %274 = xor i32 %245, %273, !dbg !237
  %275 = bitcast i32 %274 to float, !dbg !237
  %276 = fcmp ole float %267, %275, !dbg !237
  %277 = and i1 %266, %276, !dbg !237
  %278 = fmul float %222, %.unpack222, !dbg !237
  %279 = fcmp oge float %278, %275, !dbg !237
  %280 = and i1 %277, %279, !dbg !237
  store i1 %280, i1 addrspace(5)* %mask_4467264, align 1, !dbg !237
  %281 = xor i1 %280, true, !dbg !237
  %282 = call i1 @llvm.expect.i1(i1 %281, i1 true), !dbg !238
  br i1 %282, label %_cont92, label %expr_false87, !dbg !239

expr_false87:                                     ; preds = %expr_false82
  %283 = load i1, i1 addrspace(5)* %mask_4467264, align 1, !dbg !240
  br i1 %283, label %expr_true89, label %_cont92, !dbg !240

expr_true89:                                      ; preds = %expr_false87
  %inv_det = fdiv float 1.000000e+00, %222, !dbg !241
  %284 = fmul float %inv_det, %275, !dbg !241
  %285 = fmul float %inv_det, %247, !dbg !241
  %286 = fmul float %inv_det, %255, !dbg !241
  %287 = and i32 %263, 2147483647, !dbg !241
  %bc243 = bitcast <4 x float> %197 to <4 x i32>, !dbg !241
  %288 = extractelement <4 x i32> %bc243, i32 3, !dbg !241
  store float %284, float addrspace(5)* %hit_4467002.repack244, align 4, !dbg !241
  store float %285, float addrspace(5)* %hit_4467002.repack246.repack, align 4, !dbg !241
  store float %286, float addrspace(5)* %hit_4467002.repack246.repack253, align 4, !dbg !241
  store i32 %287, i32 addrspace(5)* %hit_4467002.repack248, align 4, !dbg !241
  store i32 %288, i32 addrspace(5)* %hit_4467002.repack250, align 4, !dbg !241
  store float %284, float addrspace(5)* %73, align 4, !dbg !241
  br label %_cont92, !dbg !241

_cont92:                                          ; preds = %while_head77, %expr_false82, %expr_false87, %expr_true89
  %289 = icmp slt i32 %263, 0, !dbg !228
  br i1 %289, label %expr_true94, label %while_head77, !dbg !228

expr_true94:                                      ; preds = %_cont92
  %290 = load i32, i32 addrspace(5)* %node_4466996, align 4, !dbg !231
  %291 = icmp slt i32 %290, 0, !dbg !231
  br i1 %291, label %expr_true76, label %expr_false75, !dbg !231

expr_false95:                                     ; preds = %expr_false75
  %.elt200 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 0, !dbg !214
  %.unpack201 = load float, float addrspace(5)* %.elt200, align 4, !dbg !214
  %.unpack203.elt = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 1, i32 0, !dbg !214
  %.unpack203.unpack = load float, float addrspace(5)* %.unpack203.elt, align 4, !dbg !214
  %.unpack203.elt208 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 1, i32 1, !dbg !214
  %.unpack203.unpack209 = load float, float addrspace(5)* %.unpack203.elt208, align 4, !dbg !214
  %.elt204 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 2, !dbg !214
  %.unpack205 = load i32, i32 addrspace(5)* %.elt204, align 4, !dbg !214
  %.elt206 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4467002, i32 0, i32 3, !dbg !214
  %.unpack207 = load i32, i32 addrspace(5)* %.elt206, align 4, !dbg !214
  %292 = icmp eq i32 %.unpack207, -1, !dbg !214
  %..unpack207 = select i1 %292, i32 5, i32 %.unpack207, !dbg !242
  %293 = extractvalue %0 %_4466919, 1, !dbg !243
  %294 = sext i32 %5 to i64, !dbg !243
  %295 = getelementptr inbounds [0 x i32], [0 x i32]* %293, i64 0, i64 %294, !dbg !243
  store i32 %..unpack207, i32* %295, align 4, !dbg !243
  %296 = extractvalue %0 %_4466919, 2, !dbg !243
  %297 = sext i32 %5 to i64, !dbg !243
  %298 = getelementptr inbounds [0 x i32], [0 x i32]* %296, i64 0, i64 %297, !dbg !243
  store i32 %.unpack205, i32* %298, align 4, !dbg !243
  %299 = extractvalue %0 %_4466919, 3, !dbg !243
  %300 = sext i32 %5 to i64, !dbg !243
  %301 = getelementptr inbounds [0 x float], [0 x float]* %299, i64 0, i64 %300, !dbg !243
  store float %.unpack201, float* %301, align 4, !dbg !243
  %302 = extractvalue %0 %_4466919, 4, !dbg !243
  %303 = sext i32 %5 to i64, !dbg !243
  %304 = getelementptr inbounds [0 x float], [0 x float]* %302, i64 0, i64 %303, !dbg !243
  store float %.unpack203.unpack, float* %304, align 4, !dbg !243
  %305 = extractvalue %0 %_4466919, 5, !dbg !243
  %306 = sext i32 %5 to i64, !dbg !243
  %307 = getelementptr inbounds [0 x float], [0 x float]* %305, i64 0, i64 %306, !dbg !243
  store float %.unpack203.unpack209, float* %307, align 4, !dbg !243
  ret void, !dbg !243

expr_true100:                                     ; preds = %lambda_4082691
  ret void, !dbg !208
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #0

declare float @__ocml_fmin_f32(float, float) local_unnamed_addr

declare float @__ocml_fmax_f32(float, float) local_unnamed_addr

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #1

define amdgpu_kernel void @lambda_4083362([0 x i32]* %_4467530) local_unnamed_addr !dbg !244 !reqd_work_group_size !7 {
lambda_4083362:
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !246
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !247
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !248
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !247
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !247
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !247
  %6 = zext i16 %5 to i32, !dbg !249
  %7 = mul nsw i32 %1, %6, !dbg !249
  %8 = add nsw i32 %0, %7, !dbg !249
  %9 = icmp sgt i32 %8, 5, !dbg !249
  br i1 %9, label %expr_true, label %expr_false, !dbg !249

expr_false:                                       ; preds = %lambda_4083362
  %10 = sext i32 %8 to i64, !dbg !250
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %_4467530, i64 0, i64 %10, !dbg !250
  store i32 0, i32* %11, align 4, !dbg !250
  ret void, !dbg !250

expr_true:                                        ; preds = %lambda_4083362
  ret void, !dbg !250
}

define amdgpu_kernel void @lambda_4083412(%0 %_4454525, [0 x i32]* %_4454526) local_unnamed_addr !dbg !251 !reqd_work_group_size !7 {
lambda_4083412:
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !253
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !254
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !255
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !254
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !254
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !254
  %6 = extractvalue %0 %_4454525, 12, !dbg !256
  %7 = zext i16 %5 to i32, !dbg !256
  %8 = mul nsw i32 %1, %7, !dbg !256
  %9 = add nsw i32 %0, %8, !dbg !256
  %.not = icmp sgt i32 %6, %9, !dbg !256
  br i1 %.not, label %expr_false, label %_cont, !dbg !256

expr_false:                                       ; preds = %lambda_4083412
  %10 = extractvalue %0 %_4454525, 1, !dbg !257
  %11 = sext i32 %9 to i64, !dbg !257
  %12 = getelementptr inbounds [0 x i32], [0 x i32]* %10, i64 0, i64 %11, !dbg !257
  %13 = load i32, i32* %12, align 4, !dbg !257
  %14 = sext i32 %13 to i64, !dbg !257
  %15 = getelementptr inbounds [0 x i32], [0 x i32]* %_4454526, i64 0, i64 %14, !dbg !257
  %16 = addrspacecast i32* %15 to i32 addrspace(1)*, !dbg !257
  %17 = atomicrmw add i32 addrspace(1)* %16, i32 1 syncscope("agent") monotonic, !dbg !257
  br label %_cont, !dbg !257

_cont:                                            ; preds = %lambda_4083412, %expr_false
  ret void, !dbg !258
}

define amdgpu_kernel void @lambda_4084527(%0 %_4451812, %0 %_4451813, [0 x i32]* %_4451814) local_unnamed_addr !dbg !259 !reqd_work_group_size !7 {
lambda_4084527:
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !261
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !262
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !263
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !262
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !262
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !262
  %6 = extractvalue %0 %_4451812, 12, !dbg !264
  %7 = zext i16 %5 to i32, !dbg !264
  %8 = mul nsw i32 %1, %7, !dbg !264
  %9 = add nsw i32 %0, %8, !dbg !264
  %.not = icmp sgt i32 %6, %9, !dbg !264
  br i1 %.not, label %expr_false, label %expr_true, !dbg !264

expr_false:                                       ; preds = %lambda_4084527
  %10 = extractvalue %0 %_4451812, 0, !dbg !265
  %11 = extractvalue %1 %10, 0, !dbg !265
  %12 = sext i32 %9 to i64, !dbg !265
  %13 = getelementptr inbounds [0 x i32], [0 x i32]* %11, i64 0, i64 %12, !dbg !265
  %14 = load i32, i32* %13, align 4, !dbg !265
  %15 = icmp slt i32 %14, 0, !dbg !265
  br i1 %15, label %expr_true, label %expr_false4, !dbg !265

expr_false4:                                      ; preds = %expr_false
  %16 = getelementptr inbounds [0 x i32], [0 x i32]* %_4451814, i64 0, i64 0, !dbg !266
  %17 = addrspacecast i32* %16 to i32 addrspace(1)*, !dbg !266
  %18 = atomicrmw add i32 addrspace(1)* %17, i32 1 syncscope("agent") monotonic, !dbg !266
  %19 = load i32, i32* %13, align 4, !dbg !267
  %20 = extractvalue %0 %_4451813, 0, !dbg !267
  %21 = extractvalue %1 %20, 0, !dbg !267
  %22 = sext i32 %18 to i64, !dbg !267
  %23 = getelementptr inbounds [0 x i32], [0 x i32]* %21, i64 0, i64 %22, !dbg !267
  store i32 %19, i32* %23, align 4, !dbg !267
  %24 = extractvalue %1 %10, 1, !dbg !267
  %25 = sext i32 %9 to i64, !dbg !267
  %26 = getelementptr inbounds [0 x float], [0 x float]* %24, i64 0, i64 %25, !dbg !267
  %27 = load float, float* %26, align 4, !dbg !267
  %28 = extractvalue %1 %20, 1, !dbg !267
  %29 = sext i32 %18 to i64, !dbg !267
  %30 = getelementptr inbounds [0 x float], [0 x float]* %28, i64 0, i64 %29, !dbg !267
  store float %27, float* %30, align 4, !dbg !267
  %31 = extractvalue %1 %10, 2, !dbg !267
  %32 = sext i32 %9 to i64, !dbg !267
  %33 = getelementptr inbounds [0 x float], [0 x float]* %31, i64 0, i64 %32, !dbg !267
  %34 = load float, float* %33, align 4, !dbg !267
  %35 = extractvalue %1 %20, 2, !dbg !267
  %36 = sext i32 %18 to i64, !dbg !267
  %37 = getelementptr inbounds [0 x float], [0 x float]* %35, i64 0, i64 %36, !dbg !267
  store float %34, float* %37, align 4, !dbg !267
  %38 = extractvalue %1 %10, 3, !dbg !267
  %39 = sext i32 %9 to i64, !dbg !267
  %40 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %39, !dbg !267
  %41 = load float, float* %40, align 4, !dbg !267
  %42 = extractvalue %1 %20, 3, !dbg !267
  %43 = sext i32 %18 to i64, !dbg !267
  %44 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %43, !dbg !267
  store float %41, float* %44, align 4, !dbg !267
  %45 = extractvalue %1 %10, 4, !dbg !267
  %46 = sext i32 %9 to i64, !dbg !267
  %47 = getelementptr inbounds [0 x float], [0 x float]* %45, i64 0, i64 %46, !dbg !267
  %48 = load float, float* %47, align 4, !dbg !267
  %49 = extractvalue %1 %20, 4, !dbg !267
  %50 = sext i32 %18 to i64, !dbg !267
  %51 = getelementptr inbounds [0 x float], [0 x float]* %49, i64 0, i64 %50, !dbg !267
  store float %48, float* %51, align 4, !dbg !267
  %52 = extractvalue %1 %10, 5, !dbg !267
  %53 = sext i32 %9 to i64, !dbg !267
  %54 = getelementptr inbounds [0 x float], [0 x float]* %52, i64 0, i64 %53, !dbg !267
  %55 = load float, float* %54, align 4, !dbg !267
  %56 = extractvalue %1 %20, 5, !dbg !267
  %57 = sext i32 %18 to i64, !dbg !267
  %58 = getelementptr inbounds [0 x float], [0 x float]* %56, i64 0, i64 %57, !dbg !267
  store float %55, float* %58, align 4, !dbg !267
  %59 = extractvalue %1 %10, 6, !dbg !267
  %60 = sext i32 %9 to i64, !dbg !267
  %61 = getelementptr inbounds [0 x float], [0 x float]* %59, i64 0, i64 %60, !dbg !267
  %62 = load float, float* %61, align 4, !dbg !267
  %63 = extractvalue %1 %20, 6, !dbg !267
  %64 = sext i32 %18 to i64, !dbg !267
  %65 = getelementptr inbounds [0 x float], [0 x float]* %63, i64 0, i64 %64, !dbg !267
  store float %62, float* %65, align 4, !dbg !267
  %66 = extractvalue %1 %10, 7, !dbg !267
  %67 = sext i32 %9 to i64, !dbg !267
  %68 = getelementptr inbounds [0 x float], [0 x float]* %66, i64 0, i64 %67, !dbg !267
  %69 = load float, float* %68, align 4, !dbg !267
  %70 = extractvalue %1 %20, 7, !dbg !267
  %71 = sext i32 %18 to i64, !dbg !267
  %72 = getelementptr inbounds [0 x float], [0 x float]* %70, i64 0, i64 %71, !dbg !267
  store float %69, float* %72, align 4, !dbg !267
  %73 = extractvalue %1 %10, 8, !dbg !267
  %74 = sext i32 %9 to i64, !dbg !267
  %75 = getelementptr inbounds [0 x float], [0 x float]* %73, i64 0, i64 %74, !dbg !267
  %76 = load float, float* %75, align 4, !dbg !267
  %77 = extractvalue %1 %20, 8, !dbg !267
  %78 = sext i32 %18 to i64, !dbg !267
  %79 = getelementptr inbounds [0 x float], [0 x float]* %77, i64 0, i64 %78, !dbg !267
  store float %76, float* %79, align 4, !dbg !267
  %80 = extractvalue %0 %_4451812, 6, !dbg !267
  %81 = sext i32 %9 to i64, !dbg !267
  %82 = getelementptr inbounds [0 x i32], [0 x i32]* %80, i64 0, i64 %81, !dbg !267
  %83 = load i32, i32* %82, align 4, !dbg !267
  %84 = extractvalue %0 %_4451813, 6, !dbg !267
  %85 = sext i32 %18 to i64, !dbg !267
  %86 = getelementptr inbounds [0 x i32], [0 x i32]* %84, i64 0, i64 %85, !dbg !267
  store i32 %83, i32* %86, align 4, !dbg !267
  %87 = extractvalue %0 %_4451812, 7, !dbg !267
  %88 = sext i32 %9 to i64, !dbg !267
  %89 = getelementptr inbounds [0 x float], [0 x float]* %87, i64 0, i64 %88, !dbg !267
  %90 = load float, float* %89, align 4, !dbg !267
  %91 = extractvalue %0 %_4451813, 7, !dbg !267
  %92 = sext i32 %18 to i64, !dbg !267
  %93 = getelementptr inbounds [0 x float], [0 x float]* %91, i64 0, i64 %92, !dbg !267
  store float %90, float* %93, align 4, !dbg !267
  %94 = extractvalue %0 %_4451812, 8, !dbg !267
  %95 = sext i32 %9 to i64, !dbg !267
  %96 = getelementptr inbounds [0 x float], [0 x float]* %94, i64 0, i64 %95, !dbg !267
  %97 = load float, float* %96, align 4, !dbg !267
  %98 = extractvalue %0 %_4451813, 8, !dbg !267
  %99 = sext i32 %18 to i64, !dbg !267
  %100 = getelementptr inbounds [0 x float], [0 x float]* %98, i64 0, i64 %99, !dbg !267
  store float %97, float* %100, align 4, !dbg !267
  %101 = extractvalue %0 %_4451812, 9, !dbg !267
  %102 = sext i32 %9 to i64, !dbg !267
  %103 = getelementptr inbounds [0 x float], [0 x float]* %101, i64 0, i64 %102, !dbg !267
  %104 = load float, float* %103, align 4, !dbg !267
  %105 = extractvalue %0 %_4451813, 9, !dbg !267
  %106 = sext i32 %18 to i64, !dbg !267
  %107 = getelementptr inbounds [0 x float], [0 x float]* %105, i64 0, i64 %106, !dbg !267
  store float %104, float* %107, align 4, !dbg !267
  %108 = extractvalue %0 %_4451812, 10, !dbg !267
  %109 = sext i32 %9 to i64, !dbg !267
  %110 = getelementptr inbounds [0 x float], [0 x float]* %108, i64 0, i64 %109, !dbg !267
  %111 = load float, float* %110, align 4, !dbg !267
  %112 = extractvalue %0 %_4451813, 10, !dbg !267
  %113 = sext i32 %18 to i64, !dbg !267
  %114 = getelementptr inbounds [0 x float], [0 x float]* %112, i64 0, i64 %113, !dbg !267
  store float %111, float* %114, align 4, !dbg !267
  %115 = extractvalue %0 %_4451812, 11, !dbg !267
  %116 = sext i32 %9 to i64, !dbg !267
  %117 = getelementptr inbounds [0 x i32], [0 x i32]* %115, i64 0, i64 %116, !dbg !267
  %118 = load i32, i32* %117, align 4, !dbg !267
  %119 = extractvalue %0 %_4451813, 11, !dbg !267
  %120 = sext i32 %18 to i64, !dbg !267
  %121 = getelementptr inbounds [0 x i32], [0 x i32]* %119, i64 0, i64 %120, !dbg !267
  store i32 %118, i32* %121, align 4, !dbg !267
  ret void, !dbg !267

expr_true:                                        ; preds = %lambda_4084527, %expr_false
  ret void, !dbg !266
}

define amdgpu_kernel void @lambda_4083825([0 x %12]* %_4451972, [0 x float]* %_4451973, %2 %_4451974, [0 x %13]* %_4451975) local_unnamed_addr !dbg !268 !reqd_work_group_size !7 {
lambda_4083825:
  %mask_4452363 = alloca i1, align 1, addrspace(5)
  %prim_id_4452310 = alloca i32, align 4, addrspace(5)
  %val_4452530 = alloca { i32, float }, align 4, addrspace(5)
  %val_4452527 = alloca { i32, float }, align 4, addrspace(5)
  %mask_4452139 = alloca i32, align 4, addrspace(5)
  %nodes_4452492 = alloca [64 x i32], align 4, addrspace(5)
  %ptr_4452489 = alloca i32, align 4, addrspace(5)
  %node_4452061 = alloca i32, align 4, addrspace(5)
  %hit_4452110 = alloca %14, align 4, addrspace(5)
  %ray_4452141 = alloca %15, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !270
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !271
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !272
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !271
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !271
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !271
  %6 = extractvalue %2 %_4451974, 5, !dbg !273
  %7 = zext i16 %5 to i32, !dbg !273
  %8 = mul nsw i32 %1, %7, !dbg !273
  %9 = add nsw i32 %0, %8, !dbg !273
  %.not = icmp sgt i32 %6, %9, !dbg !273
  br i1 %.not, label %expr_false, label %expr_false97, !dbg !273

expr_false:                                       ; preds = %lambda_4083825
  %10 = extractvalue %2 %_4451974, 0, !dbg !274
  %11 = extractvalue %1 %10, 0, !dbg !274
  %12 = sext i32 %9 to i64, !dbg !274
  %13 = getelementptr inbounds [0 x i32], [0 x i32]* %11, i64 0, i64 %12, !dbg !274
  %14 = load i32, i32* %13, align 4, !dbg !274
  %15 = icmp slt i32 %14, 0, !dbg !274
  br i1 %15, label %expr_false97, label %expr_false4, !dbg !274

expr_false4:                                      ; preds = %expr_false
  %16 = extractvalue %1 %10, 1, !dbg !275
  %17 = sext i32 %9 to i64, !dbg !275
  %18 = getelementptr inbounds [0 x float], [0 x float]* %16, i64 0, i64 %17, !dbg !275
  %19 = load float, float* %18, align 4, !dbg !275
  %20 = extractvalue %1 %10, 2, !dbg !275
  %21 = sext i32 %9 to i64, !dbg !275
  %22 = getelementptr inbounds [0 x float], [0 x float]* %20, i64 0, i64 %21, !dbg !275
  %23 = load float, float* %22, align 4, !dbg !275
  %24 = extractvalue %1 %10, 3, !dbg !275
  %25 = sext i32 %9 to i64, !dbg !275
  %26 = getelementptr inbounds [0 x float], [0 x float]* %24, i64 0, i64 %25, !dbg !275
  %27 = load float, float* %26, align 4, !dbg !275
  %28 = extractvalue %1 %10, 4, !dbg !275
  %29 = sext i32 %9 to i64, !dbg !275
  %30 = getelementptr inbounds [0 x float], [0 x float]* %28, i64 0, i64 %29, !dbg !275
  %31 = load float, float* %30, align 4, !dbg !275
  %32 = fcmp ogt float %31, 0.000000e+00, !dbg !275
  %33 = fneg float %31, !dbg !275
  %34 = select i1 %32, float %31, float %33, !dbg !275
  %35 = fcmp olt float %34, 0x3E45798EE0000000, !dbg !275
  %36 = extractvalue %1 %10, 5, !dbg !275
  %37 = sext i32 %9 to i64, !dbg !275
  %38 = getelementptr inbounds [0 x float], [0 x float]* %36, i64 0, i64 %37, !dbg !275
  %39 = load float, float* %38, align 4, !dbg !275
  %40 = extractvalue %1 %10, 6, !dbg !275
  %41 = sext i32 %9 to i64, !dbg !275
  %42 = getelementptr inbounds [0 x float], [0 x float]* %40, i64 0, i64 %41, !dbg !275
  %43 = load float, float* %42, align 4, !dbg !275
  %44 = extractvalue %1 %10, 7, !dbg !275
  %45 = sext i32 %9 to i64, !dbg !275
  %46 = getelementptr inbounds [0 x float], [0 x float]* %44, i64 0, i64 %45, !dbg !275
  %47 = load float, float* %46, align 4, !dbg !275
  %48 = extractvalue %1 %10, 8, !dbg !275
  %49 = sext i32 %9 to i64, !dbg !275
  %50 = getelementptr inbounds [0 x float], [0 x float]* %48, i64 0, i64 %49, !dbg !275
  %51 = load float, float* %50, align 4, !dbg !275
  br i1 %35, label %expr_true, label %expr_false5, !dbg !275

expr_false5:                                      ; preds = %expr_false4
  %52 = fdiv float 1.000000e+00, %31, !dbg !276
  br label %safe_rcp_cont, !dbg !276

expr_true:                                        ; preds = %expr_false4
  %53 = bitcast float %31 to i32, !dbg !276
  %54 = and i32 %53, -2147483648, !dbg !276
  %55 = or i32 %54, 2139095039, !dbg !276
  %56 = bitcast i32 %55 to float, !dbg !276
  br label %safe_rcp_cont, !dbg !276

safe_rcp_cont:                                    ; preds = %expr_true, %expr_false5
  %safe_rcp_cont6 = phi float [ %52, %expr_false5 ], [ %56, %expr_true ], !dbg !277
  %57 = fcmp ogt float %39, 0.000000e+00, !dbg !277
  %58 = fneg float %39, !dbg !277
  %59 = select i1 %57, float %39, float %58, !dbg !277
  %60 = fcmp olt float %59, 0x3E45798EE0000000, !dbg !277
  br i1 %60, label %expr_true8, label %expr_false7, !dbg !277

expr_false7:                                      ; preds = %safe_rcp_cont
  %61 = fdiv float 1.000000e+00, %39, !dbg !276
  br label %safe_rcp_cont9, !dbg !276

expr_true8:                                       ; preds = %safe_rcp_cont
  %62 = bitcast float %39 to i32, !dbg !276
  %63 = and i32 %62, -2147483648, !dbg !276
  %64 = or i32 %63, 2139095039, !dbg !276
  %65 = bitcast i32 %64 to float, !dbg !276
  br label %safe_rcp_cont9, !dbg !276

safe_rcp_cont9:                                   ; preds = %expr_true8, %expr_false7
  %safe_rcp_cont10 = phi float [ %61, %expr_false7 ], [ %65, %expr_true8 ], !dbg !278
  %66 = fcmp ogt float %43, 0.000000e+00, !dbg !278
  %67 = fneg float %43, !dbg !278
  %68 = select i1 %66, float %43, float %67, !dbg !278
  %69 = fcmp olt float %68, 0x3E45798EE0000000, !dbg !278
  br i1 %69, label %expr_true12, label %expr_false11, !dbg !278

expr_false11:                                     ; preds = %safe_rcp_cont9
  %70 = fdiv float 1.000000e+00, %43, !dbg !276
  br label %safe_rcp_cont13, !dbg !276

expr_true12:                                      ; preds = %safe_rcp_cont9
  %71 = bitcast float %43 to i32, !dbg !276
  %72 = and i32 %71, -2147483648, !dbg !276
  %73 = or i32 %72, 2139095039, !dbg !276
  %74 = bitcast i32 %73 to float, !dbg !276
  br label %safe_rcp_cont13, !dbg !276

safe_rcp_cont13:                                  ; preds = %expr_true12, %expr_false11
  %safe_rcp_cont14 = phi float [ %70, %expr_false11 ], [ %74, %expr_true12 ], !dbg !279
  %75 = fneg float %19, !dbg !279
  %76 = fmul float %safe_rcp_cont6, %75, !dbg !279
  %77 = fneg float %23, !dbg !279
  %78 = fmul float %safe_rcp_cont10, %77, !dbg !279
  %79 = fneg float %27, !dbg !279
  %80 = fmul float %safe_rcp_cont14, %79, !dbg !279
  %ray_4452141.repack.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 0, i32 0, !dbg !279
  store float %19, float addrspace(5)* %ray_4452141.repack.repack, align 4, !dbg !279
  %ray_4452141.repack.repack117 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 0, i32 1, !dbg !279
  store float %23, float addrspace(5)* %ray_4452141.repack.repack117, align 4, !dbg !279
  %ray_4452141.repack.repack119 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 0, i32 2, !dbg !279
  store float %27, float addrspace(5)* %ray_4452141.repack.repack119, align 4, !dbg !279
  %ray_4452141.repack107.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 1, i32 0, !dbg !279
  store float %31, float addrspace(5)* %ray_4452141.repack107.repack, align 4, !dbg !279
  %ray_4452141.repack107.repack121 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 1, i32 1, !dbg !279
  store float %39, float addrspace(5)* %ray_4452141.repack107.repack121, align 4, !dbg !279
  %ray_4452141.repack107.repack123 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 1, i32 2, !dbg !279
  store float %43, float addrspace(5)* %ray_4452141.repack107.repack123, align 4, !dbg !279
  %ray_4452141.repack109.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 0, !dbg !279
  store float %safe_rcp_cont6, float addrspace(5)* %ray_4452141.repack109.repack, align 4, !dbg !279
  %ray_4452141.repack109.repack125 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 1, !dbg !279
  store float %safe_rcp_cont10, float addrspace(5)* %ray_4452141.repack109.repack125, align 4, !dbg !279
  %ray_4452141.repack109.repack127 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 2, !dbg !279
  store float %safe_rcp_cont14, float addrspace(5)* %ray_4452141.repack109.repack127, align 4, !dbg !279
  %ray_4452141.repack111.repack = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 0, !dbg !279
  store float %76, float addrspace(5)* %ray_4452141.repack111.repack, align 4, !dbg !279
  %ray_4452141.repack111.repack129 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 1, !dbg !279
  store float %78, float addrspace(5)* %ray_4452141.repack111.repack129, align 4, !dbg !279
  %ray_4452141.repack111.repack131 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 2, !dbg !279
  store float %80, float addrspace(5)* %ray_4452141.repack111.repack131, align 4, !dbg !279
  %ray_4452141.repack113 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 4, !dbg !279
  store float %47, float addrspace(5)* %ray_4452141.repack113, align 4, !dbg !279
  %ray_4452141.repack115 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 5, !dbg !279
  store float %51, float addrspace(5)* %ray_4452141.repack115, align 4, !dbg !279
  %hit_4452110.repack = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 0, !dbg !279
  store float %51, float addrspace(5)* %hit_4452110.repack, align 4, !dbg !279
  %hit_4452110.repack135 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 2, !dbg !279
  store i32 -1, i32 addrspace(5)* %hit_4452110.repack135, align 4, !dbg !279
  %hit_4452110.repack137 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 3, !dbg !279
  store i32 -1, i32 addrspace(5)* %hit_4452110.repack137, align 4, !dbg !279
  store i32 0, i32 addrspace(5)* %node_4452061, align 4, !dbg !279
  store i32 0, i32 addrspace(5)* %ptr_4452489, align 4, !dbg !279
  %81 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4452492, i32 0, i32 0, !dbg !279
  store i32 0, i32 addrspace(5)* %81, align 4, !dbg !279
  store i32 1, i32 addrspace(5)* %node_4452061, align 4, !dbg !279
  %82 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 5, !dbg !279
  %.unpack143.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 0
  %.unpack143.elt160 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 1
  %.unpack143.elt162 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 2
  %.unpack145.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 0
  %.unpack145.elt165 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 1
  %.unpack145.elt167 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 2
  %.elt146 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 4
  %.elt148 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 5
  %val_4452527.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452527, i32 0, i32 0
  %val_4452527.repack276 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452527, i32 0, i32 1
  %.unpack173.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 0
  %.unpack173.elt190 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 1
  %.unpack173.elt192 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 2, i32 2
  %.unpack175.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 0
  %.unpack175.elt195 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 1
  %.unpack175.elt197 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 3, i32 2
  %.elt176 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 4
  %.elt178 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 5
  %val_4452530.repack = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452530, i32 0, i32 0
  %val_4452530.repack273 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452530, i32 0, i32 1
  %.elt = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452527, i32 0, i32 0
  %.elt202 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452530, i32 0, i32 0
  %.elt204 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452530, i32 0, i32 1
  %.elt200 = getelementptr inbounds { i32, float }, { i32, float } addrspace(5)* %val_4452527, i32 0, i32 1
  %.unpack218.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 0, i32 0
  %.unpack218.elt229 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 0, i32 1
  %.unpack218.elt231 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 0, i32 2
  %.unpack220.elt = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 1, i32 0
  %.unpack220.elt234 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 1, i32 1
  %.unpack220.elt236 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 1, i32 2
  %.elt225 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 4
  %.elt227 = getelementptr inbounds %15, %15 addrspace(5)* %ray_4452141, i32 0, i32 5
  br label %expr_true15, !dbg !280

expr_true15:                                      ; preds = %safe_rcp_cont13, %expr_false73
  %83 = load i32, i32 addrspace(5)* %node_4452061, align 4, !dbg !281
  %84 = add nsw i32 %83, -1, !dbg !281
  %85 = sext i32 %84 to i64, !dbg !281
  %86 = getelementptr inbounds [0 x %12], [0 x %12]* %_4451972, i64 0, i64 %85, !dbg !281
  %87 = bitcast %12* %86 to <4 x float>*, !dbg !281
  %88 = addrspacecast <4 x float>* %87 to <4 x float> addrspace(1)*, !dbg !281
  %89 = load <4 x float>, <4 x float> addrspace(1)* %88, align 16, !dbg !281
  %90 = getelementptr inbounds [0 x %12], [0 x %12]* %_4451972, i64 0, i64 %85, i32 0, i64 4, !dbg !281
  %91 = bitcast float* %90 to <4 x float>*, !dbg !281
  %92 = addrspacecast <4 x float>* %91 to <4 x float> addrspace(1)*, !dbg !281
  %93 = load <4 x float>, <4 x float> addrspace(1)* %92, align 16, !dbg !281
  %94 = getelementptr inbounds [0 x %12], [0 x %12]* %_4451972, i64 0, i64 %85, i32 0, i64 8, !dbg !281
  %95 = bitcast float* %94 to <4 x float>*, !dbg !281
  %96 = addrspacecast <4 x float>* %95 to <4 x float> addrspace(1)*, !dbg !281
  %97 = load <4 x float>, <4 x float> addrspace(1)* %96, align 16, !dbg !281
  %98 = getelementptr inbounds [0 x %12], [0 x %12]* %_4451972, i64 0, i64 %85, i32 1, !dbg !281
  %99 = bitcast [2 x i32]* %98 to <4 x i32>*, !dbg !281
  %100 = addrspacecast <4 x i32>* %99 to <4 x i32> addrspace(1)*, !dbg !281
  %101 = load <4 x i32>, <4 x i32> addrspace(1)* %100, align 16, !dbg !281
  store i32 0, i32 addrspace(5)* %mask_4452139, align 4, !dbg !281
  %.unpack143.unpack = load float, float addrspace(5)* %.unpack143.elt, align 4, !dbg !281
  %.unpack143.unpack161 = load float, float addrspace(5)* %.unpack143.elt160, align 4, !dbg !281
  %.unpack143.unpack163 = load float, float addrspace(5)* %.unpack143.elt162, align 4, !dbg !281
  %.unpack145.unpack = load float, float addrspace(5)* %.unpack145.elt, align 4, !dbg !281
  %.unpack145.unpack166 = load float, float addrspace(5)* %.unpack145.elt165, align 4, !dbg !281
  %.unpack145.unpack168 = load float, float addrspace(5)* %.unpack145.elt167, align 4, !dbg !281
  %.unpack147 = load float, float addrspace(5)* %.elt146, align 4, !dbg !281
  %.unpack149 = load float, float addrspace(5)* %.elt148, align 4, !dbg !281
  %102 = extractelement <4 x float> %89, i32 0, !dbg !281
  %103 = fmul float %.unpack143.unpack, %102, !dbg !281
  %104 = fadd float %103, %.unpack145.unpack, !dbg !281
  %105 = extractelement <4 x float> %89, i32 1, !dbg !281
  %106 = fmul float %.unpack143.unpack, %105, !dbg !281
  %107 = fadd float %106, %.unpack145.unpack, !dbg !281
  %108 = call float @__ocml_fmin_f32(float %104, float %107), !dbg !281
  %109 = extractelement <4 x float> %89, i32 2, !dbg !282
  %110 = fmul float %.unpack143.unpack161, %109, !dbg !282
  %111 = fadd float %110, %.unpack145.unpack166, !dbg !282
  %112 = extractelement <4 x float> %89, i32 3, !dbg !282
  %113 = fmul float %.unpack143.unpack161, %112, !dbg !282
  %114 = fadd float %113, %.unpack145.unpack166, !dbg !282
  %115 = call float @__ocml_fmin_f32(float %111, float %114), !dbg !282
  %116 = extractelement <4 x float> %93, i32 0, !dbg !283
  %117 = fmul float %.unpack143.unpack163, %116, !dbg !283
  %118 = fadd float %117, %.unpack145.unpack168, !dbg !283
  %119 = extractelement <4 x float> %93, i32 1, !dbg !283
  %120 = fmul float %.unpack143.unpack163, %119, !dbg !283
  %121 = fadd float %120, %.unpack145.unpack168, !dbg !283
  %122 = call float @__ocml_fmin_f32(float %118, float %121), !dbg !283
  %123 = call float @__ocml_fmax_f32(float %122, float %.unpack147), !dbg !284
  %124 = call float @__ocml_fmax_f32(float %108, float %115), !dbg !285
  %125 = call float @__ocml_fmax_f32(float %124, float %123), !dbg !286
  %126 = call float @__ocml_fmax_f32(float %104, float %107), !dbg !287
  %127 = call float @__ocml_fmax_f32(float %111, float %114), !dbg !288
  %128 = call float @__ocml_fmax_f32(float %118, float %121), !dbg !289
  %129 = call float @__ocml_fmin_f32(float %128, float %.unpack149), !dbg !290
  %130 = call float @__ocml_fmin_f32(float %126, float %127), !dbg !291
  %131 = call float @__ocml_fmin_f32(float %130, float %129), !dbg !292
  %132 = fcmp ugt float %125, %131, !dbg !293
  br i1 %132, label %_cont39, label %expr_true38, !dbg !293

expr_true38:                                      ; preds = %expr_true15
  %133 = load i32, i32 addrspace(5)* %mask_4452139, align 4, !dbg !294
  %134 = or i32 %133, 1, !dbg !294
  store i32 %134, i32 addrspace(5)* %mask_4452139, align 4, !dbg !294
  %135 = extractelement <4 x i32> %101, i32 0, !dbg !294
  store i32 %135, i32 addrspace(5)* %val_4452527.repack, align 4, !dbg !294
  store float %125, float addrspace(5)* %val_4452527.repack276, align 4, !dbg !294
  br label %_cont39, !dbg !294

_cont39:                                          ; preds = %expr_true15, %expr_true38
  %.unpack173.unpack = load float, float addrspace(5)* %.unpack173.elt, align 4, !dbg !295
  %.unpack173.unpack191 = load float, float addrspace(5)* %.unpack173.elt190, align 4, !dbg !295
  %.unpack173.unpack193 = load float, float addrspace(5)* %.unpack173.elt192, align 4, !dbg !295
  %.unpack175.unpack = load float, float addrspace(5)* %.unpack175.elt, align 4, !dbg !295
  %.unpack175.unpack196 = load float, float addrspace(5)* %.unpack175.elt195, align 4, !dbg !295
  %.unpack175.unpack198 = load float, float addrspace(5)* %.unpack175.elt197, align 4, !dbg !295
  %.unpack177 = load float, float addrspace(5)* %.elt176, align 4, !dbg !295
  %.unpack179 = load float, float addrspace(5)* %.elt178, align 4, !dbg !295
  %136 = extractelement <4 x float> %93, i32 2, !dbg !295
  %137 = fmul float %.unpack173.unpack, %136, !dbg !295
  %138 = fadd float %137, %.unpack175.unpack, !dbg !295
  %139 = extractelement <4 x float> %93, i32 3, !dbg !295
  %140 = fmul float %.unpack173.unpack, %139, !dbg !295
  %141 = fadd float %140, %.unpack175.unpack, !dbg !295
  %142 = call float @__ocml_fmin_f32(float %138, float %141), !dbg !295
  %143 = extractelement <4 x float> %97, i32 0, !dbg !282
  %144 = fmul float %.unpack173.unpack191, %143, !dbg !282
  %145 = fadd float %144, %.unpack175.unpack196, !dbg !282
  %146 = extractelement <4 x float> %97, i32 1, !dbg !282
  %147 = fmul float %.unpack173.unpack191, %146, !dbg !282
  %148 = fadd float %147, %.unpack175.unpack196, !dbg !282
  %149 = call float @__ocml_fmin_f32(float %145, float %148), !dbg !282
  %150 = extractelement <4 x float> %97, i32 2, !dbg !283
  %151 = fmul float %.unpack173.unpack193, %150, !dbg !283
  %152 = fadd float %151, %.unpack175.unpack198, !dbg !283
  %153 = extractelement <4 x float> %97, i32 3, !dbg !283
  %154 = fmul float %.unpack173.unpack193, %153, !dbg !283
  %155 = fadd float %154, %.unpack175.unpack198, !dbg !283
  %156 = call float @__ocml_fmin_f32(float %152, float %155), !dbg !283
  %157 = call float @__ocml_fmax_f32(float %156, float %.unpack177), !dbg !284
  %158 = call float @__ocml_fmax_f32(float %142, float %149), !dbg !285
  %159 = call float @__ocml_fmax_f32(float %158, float %157), !dbg !286
  %160 = call float @__ocml_fmax_f32(float %138, float %141), !dbg !287
  %161 = call float @__ocml_fmax_f32(float %145, float %148), !dbg !288
  %162 = call float @__ocml_fmax_f32(float %152, float %155), !dbg !289
  %163 = call float @__ocml_fmin_f32(float %162, float %.unpack179), !dbg !290
  %164 = call float @__ocml_fmin_f32(float %160, float %161), !dbg !291
  %165 = call float @__ocml_fmin_f32(float %164, float %163), !dbg !292
  %166 = fcmp ugt float %159, %165, !dbg !293
  br i1 %166, label %_cont66, label %expr_true65, !dbg !293

expr_true65:                                      ; preds = %_cont39
  %167 = load i32, i32 addrspace(5)* %mask_4452139, align 4, !dbg !294
  %168 = or i32 %167, 2, !dbg !294
  store i32 %168, i32 addrspace(5)* %mask_4452139, align 4, !dbg !294
  %169 = extractelement <4 x i32> %101, i32 1, !dbg !294
  store i32 %169, i32 addrspace(5)* %val_4452530.repack, align 4, !dbg !294
  store float %159, float addrspace(5)* %val_4452530.repack273, align 4, !dbg !294
  br label %_cont66, !dbg !294

_cont66:                                          ; preds = %_cont39, %expr_true65
  %170 = load i32, i32 addrspace(5)* %mask_4452139, align 4, !dbg !295
  %171 = icmp eq i32 %170, 0, !dbg !295
  br i1 %171, label %expr_true70, label %expr_false67, !dbg !295

expr_false67:                                     ; preds = %_cont66
  %.unpack = load i32, i32 addrspace(5)* %.elt, align 4, !dbg !296
  %.unpack203 = load i32, i32 addrspace(5)* %.elt202, align 4, !dbg !296
  %172 = load i32, i32 addrspace(5)* %mask_4452139, align 4, !dbg !296
  %173 = icmp eq i32 %172, 3, !dbg !296
  br i1 %173, label %expr_true69, label %expr_false68, !dbg !296

expr_false68:                                     ; preds = %expr_false67
  %174 = load i32, i32 addrspace(5)* %mask_4452139, align 4, !dbg !297
  %175 = icmp eq i32 %174, 1, !dbg !297
  %176 = select i1 %175, i32 %.unpack, i32 %.unpack203, !dbg !297
  store i32 %176, i32 addrspace(5)* %node_4452061, align 4, !dbg !297
  br label %if_join71, !dbg !297

expr_true69:                                      ; preds = %expr_false67
  %.unpack205 = load float, float addrspace(5)* %.elt204, align 4, !dbg !296
  %.unpack201 = load float, float addrspace(5)* %.elt200, align 4, !dbg !296
  %177 = fcmp olt float %.unpack201, %.unpack205, !dbg !297
  %178 = select i1 %177, i32 %.unpack, i32 %.unpack203, !dbg !297
  store i32 %178, i32 addrspace(5)* %node_4452061, align 4, !dbg !297
  %179 = load i32, i32 addrspace(5)* %ptr_4452489, align 4, !dbg !297
  %180 = add nsw i32 %179, 1, !dbg !297
  store i32 %180, i32 addrspace(5)* %ptr_4452489, align 4, !dbg !297
  %181 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4452492, i32 0, i32 %180, !dbg !297
  %182 = select i1 %177, i32 %.unpack203, i32 %.unpack, !dbg !297
  store i32 %182, i32 addrspace(5)* %181, align 4, !dbg !297
  br label %if_join71, !dbg !297

expr_true70:                                      ; preds = %_cont66
  %183 = load i32, i32 addrspace(5)* %ptr_4452489, align 4, !dbg !296
  %184 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4452492, i32 0, i32 %183, !dbg !296
  %185 = load i32, i32 addrspace(5)* %184, align 4, !dbg !296
  store i32 %185, i32 addrspace(5)* %node_4452061, align 4, !dbg !296
  %186 = add nsw i32 %183, -1, !dbg !296
  store i32 %186, i32 addrspace(5)* %ptr_4452489, align 4, !dbg !296
  br label %if_join71, !dbg !296

if_join71:                                        ; preds = %expr_false68, %expr_true69, %expr_true70
  %187 = load i32, i32 addrspace(5)* %node_4452061, align 4, !dbg !298
  %188 = icmp slt i32 %187, 0, !dbg !298
  br i1 %188, label %expr_true74, label %expr_false73, !dbg !298

expr_false73:                                     ; preds = %expr_true94, %if_join71
  %189 = load i32, i32 addrspace(5)* %node_4452061, align 4, !dbg !280
  %190 = icmp eq i32 %189, 0, !dbg !280
  br i1 %190, label %expr_false95, label %expr_true15, !dbg !280

expr_true74:                                      ; preds = %if_join71, %expr_true94
  %191 = load i32, i32 addrspace(5)* %node_4452061, align 4, !dbg !299
  %192 = load i32, i32 addrspace(5)* %ptr_4452489, align 4, !dbg !299
  %193 = getelementptr inbounds [64 x i32], [64 x i32] addrspace(5)* %nodes_4452492, i32 0, i32 %192, !dbg !299
  %194 = load i32, i32 addrspace(5)* %193, align 4, !dbg !299
  store i32 %194, i32 addrspace(5)* %node_4452061, align 4, !dbg !299
  %195 = add nsw i32 %192, -1, !dbg !299
  store i32 %195, i32 addrspace(5)* %ptr_4452489, align 4, !dbg !299
  %prim_id = xor i32 %191, -1, !dbg !299
  store i32 %prim_id, i32 addrspace(5)* %prim_id_4452310, align 4, !dbg !299
  br label %while_head75, !dbg !299

while_head75:                                     ; preds = %_cont92, %expr_true74
  %196 = load i32, i32 addrspace(5)* %prim_id_4452310, align 4, !dbg !300
  %197 = add nsw i32 %196, 1, !dbg !300
  store i32 %197, i32 addrspace(5)* %prim_id_4452310, align 4, !dbg !300
  %198 = sext i32 %196 to i64, !dbg !300
  %199 = getelementptr inbounds [0 x %13], [0 x %13]* %_4451975, i64 0, i64 %198, !dbg !300
  %200 = bitcast %13* %199 to <4 x float>*, !dbg !300
  %201 = addrspacecast <4 x float>* %200 to <4 x float> addrspace(1)*, !dbg !300
  %202 = load <4 x float>, <4 x float> addrspace(1)* %201, align 16, !dbg !300
  %203 = getelementptr inbounds [0 x %13], [0 x %13]* %_4451975, i64 0, i64 %198, i32 2, !dbg !300
  %204 = bitcast [3 x float]* %203 to <4 x float>*, !dbg !300
  %205 = addrspacecast <4 x float>* %204 to <4 x float> addrspace(1)*, !dbg !300
  %206 = load <4 x float>, <4 x float> addrspace(1)* %205, align 16, !dbg !300
  %207 = getelementptr inbounds [0 x %13], [0 x %13]* %_4451975, i64 0, i64 %198, i32 4, !dbg !300
  %208 = bitcast [3 x float]* %207 to <4 x float>*, !dbg !300
  %209 = addrspacecast <4 x float>* %208 to <4 x float> addrspace(1)*, !dbg !300
  %210 = load <4 x float>, <4 x float> addrspace(1)* %209, align 16, !dbg !300
  %.unpack218.unpack = load float, float addrspace(5)* %.unpack218.elt, align 4, !dbg !300
  %.unpack218.unpack230 = load float, float addrspace(5)* %.unpack218.elt229, align 4, !dbg !300
  %.unpack218.unpack232 = load float, float addrspace(5)* %.unpack218.elt231, align 4, !dbg !300
  %.unpack220.unpack = load float, float addrspace(5)* %.unpack220.elt, align 4, !dbg !300
  %.unpack220.unpack235 = load float, float addrspace(5)* %.unpack220.elt234, align 4, !dbg !300
  %.unpack220.unpack237 = load float, float addrspace(5)* %.unpack220.elt236, align 4, !dbg !300
  %.unpack226 = load float, float addrspace(5)* %.elt225, align 4, !dbg !300
  %.unpack228 = load float, float addrspace(5)* %.elt227, align 4, !dbg !300
  %211 = extractelement <4 x float> %206, i32 1, !dbg !300
  %212 = extractelement <4 x float> %210, i32 2, !dbg !300
  %213 = fmul float %211, %212, !dbg !300
  %214 = extractelement <4 x float> %206, i32 2, !dbg !300
  %215 = extractelement <4 x float> %210, i32 1, !dbg !300
  %216 = fmul float %214, %215, !dbg !300
  %217 = fsub float %213, %216, !dbg !300
  %218 = fmul float %217, %.unpack220.unpack, !dbg !300
  %219 = extractelement <4 x float> %210, i32 0, !dbg !300
  %220 = fmul float %214, %219, !dbg !300
  %221 = extractelement <4 x float> %206, i32 0, !dbg !300
  %222 = fmul float %221, %212, !dbg !300
  %223 = fsub float %220, %222, !dbg !300
  %224 = fmul float %223, %.unpack220.unpack235, !dbg !300
  %225 = fadd float %218, %224, !dbg !300
  %226 = fmul float %221, %215, !dbg !300
  %227 = fmul float %211, %219, !dbg !300
  %228 = fsub float %226, %227, !dbg !300
  %229 = fmul float %228, %.unpack220.unpack237, !dbg !300
  %230 = fadd float %225, %229, !dbg !300
  %231 = call float @__ocml_fabs_f32(float %230), !dbg !300
  %232 = extractelement <4 x float> %202, i32 2, !dbg !301
  %233 = fsub float %232, %.unpack218.unpack232, !dbg !301
  %234 = fmul float %.unpack220.unpack235, %233, !dbg !301
  %235 = extractelement <4 x float> %202, i32 1, !dbg !301
  %236 = fsub float %235, %.unpack218.unpack230, !dbg !301
  %237 = fmul float %.unpack220.unpack237, %236, !dbg !301
  %238 = fsub float %234, %237, !dbg !301
  %239 = fmul float %238, %219, !dbg !301
  %240 = extractelement <4 x float> %202, i32 0, !dbg !301
  %241 = fsub float %240, %.unpack218.unpack, !dbg !301
  %242 = fmul float %.unpack220.unpack237, %241, !dbg !301
  %243 = fmul float %.unpack220.unpack, %233, !dbg !301
  %244 = fsub float %242, %243, !dbg !301
  %245 = fmul float %244, %215, !dbg !301
  %246 = fadd float %239, %245, !dbg !301
  %247 = fmul float %.unpack220.unpack, %236, !dbg !301
  %248 = fmul float %.unpack220.unpack235, %241, !dbg !301
  %249 = fsub float %247, %248, !dbg !301
  %250 = fmul float %249, %212, !dbg !301
  %251 = fadd float %246, %250, !dbg !301
  %252 = bitcast float %251 to i32, !dbg !301
  %253 = bitcast float %230 to i32, !dbg !301
  %254 = and i32 %253, -2147483648, !dbg !301
  %255 = xor i32 %254, %252, !dbg !301
  %256 = bitcast i32 %255 to float, !dbg !301
  %mask = fcmp oge float %256, 0.000000e+00, !dbg !301
  store i1 %mask, i1 addrspace(5)* %mask_4452363, align 1, !dbg !301
  %257 = fmul float %238, %221, !dbg !301
  %258 = fmul float %244, %211, !dbg !301
  %259 = fadd float %257, %258, !dbg !301
  %260 = fmul float %249, %214, !dbg !301
  %261 = fadd float %259, %260, !dbg !301
  %262 = bitcast float %261 to i32, !dbg !301
  %263 = xor i32 %254, %262, !dbg !301
  %264 = bitcast i32 %263 to float, !dbg !301
  %265 = fcmp oge float %264, 0.000000e+00, !dbg !301
  %266 = and i1 %mask, %265, !dbg !301
  %267 = fadd float %256, %264, !dbg !301
  %268 = fcmp ole float %267, %231, !dbg !301
  %269 = and i1 %266, %268, !dbg !301
  store i1 %269, i1 addrspace(5)* %mask_4452363, align 1, !dbg !301
  %270 = xor i1 %269, true, !dbg !301
  %271 = call i1 @llvm.expect.i1(i1 %270, i1 true), !dbg !302
  %bc = bitcast <4 x float> %210 to <4 x i32>, !dbg !303
  %272 = extractelement <4 x i32> %bc, i32 3, !dbg !303
  br i1 %271, label %_cont92, label %expr_false80, !dbg !303

expr_false80:                                     ; preds = %while_head75
  %273 = load i1, i1 addrspace(5)* %mask_4452363, align 1, !dbg !304
  %274 = fcmp une float %231, 0.000000e+00, !dbg !304
  %275 = and i1 %273, %274, !dbg !304
  store i1 %275, i1 addrspace(5)* %mask_4452363, align 1, !dbg !304
  %276 = fmul float %231, %.unpack226, !dbg !304
  %277 = fmul float %241, %217, !dbg !304
  %278 = fmul float %236, %223, !dbg !304
  %279 = fadd float %277, %278, !dbg !304
  %280 = fmul float %233, %228, !dbg !304
  %281 = fadd float %279, %280, !dbg !304
  %282 = bitcast float %281 to i32, !dbg !304
  %283 = xor i32 %254, %282, !dbg !304
  %284 = bitcast i32 %283 to float, !dbg !304
  %285 = fcmp ole float %276, %284, !dbg !304
  %286 = and i1 %275, %285, !dbg !304
  %287 = fmul float %231, %.unpack228, !dbg !304
  %288 = fcmp oge float %287, %284, !dbg !304
  %289 = and i1 %286, %288, !dbg !304
  store i1 %289, i1 addrspace(5)* %mask_4452363, align 1, !dbg !304
  %290 = xor i1 %289, true, !dbg !304
  %291 = call i1 @llvm.expect.i1(i1 %290, i1 true), !dbg !305
  br i1 %291, label %_cont92, label %expr_false85, !dbg !306

expr_false85:                                     ; preds = %expr_false80
  %292 = load i1, i1 addrspace(5)* %mask_4452363, align 1, !dbg !307
  br i1 %292, label %expr_true87, label %_cont92, !dbg !307

expr_true87:                                      ; preds = %expr_false85
  %293 = and i32 %272, 2147483647, !dbg !308
  %inv_det = fdiv float 1.000000e+00, %231, !dbg !308
  %294 = fmul float %inv_det, %284, !dbg !308
  %295 = fmul float %inv_det, %256, !dbg !308
  %296 = fmul float %inv_det, %264, !dbg !308
  %bc249 = bitcast <4 x float> %206 to <4 x i32>, !dbg !308
  %297 = extractelement <4 x i32> %bc249, i32 3, !dbg !308
  %hit_4452110.repack250 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 0, !dbg !308
  store float %294, float addrspace(5)* %hit_4452110.repack250, align 4, !dbg !308
  %hit_4452110.repack252.repack = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 1, i32 0, !dbg !308
  store float %295, float addrspace(5)* %hit_4452110.repack252.repack, align 4, !dbg !308
  %hit_4452110.repack252.repack259 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 1, i32 1, !dbg !308
  store float %296, float addrspace(5)* %hit_4452110.repack252.repack259, align 4, !dbg !308
  %hit_4452110.repack254 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 2, !dbg !308
  store i32 %293, i32 addrspace(5)* %hit_4452110.repack254, align 4, !dbg !308
  %hit_4452110.repack256 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 3, !dbg !308
  store i32 %297, i32 addrspace(5)* %hit_4452110.repack256, align 4, !dbg !308
  store float %294, float addrspace(5)* %82, align 4, !dbg !308
  br label %gpu_traverse_single_helper_cont, !dbg !309

_cont92:                                          ; preds = %while_head75, %expr_false80, %expr_false85
  %298 = icmp slt i32 %272, 0, !dbg !295
  br i1 %298, label %expr_true94, label %while_head75, !dbg !295

expr_true94:                                      ; preds = %_cont92
  %299 = load i32, i32 addrspace(5)* %node_4452061, align 4, !dbg !298
  %300 = icmp slt i32 %299, 0, !dbg !298
  br i1 %300, label %expr_true74, label %expr_false73, !dbg !298

expr_false95:                                     ; preds = %expr_false73
  %.elt212 = getelementptr inbounds %14, %14 addrspace(5)* %hit_4452110, i32 0, i32 3, !dbg !281
  %.unpack213 = load i32, i32 addrspace(5)* %.elt212, align 4, !dbg !281
  br label %gpu_traverse_single_helper_cont, !dbg !281

gpu_traverse_single_helper_cont:                  ; preds = %expr_false95, %expr_true87
  %.pn261 = phi i32 [ %297, %expr_true87 ], [ %.unpack213, %expr_false95 ]
  %301 = icmp slt i32 %.pn261, 0, !dbg !310
  br i1 %301, label %expr_true98, label %expr_false97, !dbg !310

expr_false97:                                     ; preds = %lambda_4083825, %expr_false, %expr_true98, %gpu_traverse_single_helper_cont
  ret void, !dbg !311

expr_true98:                                      ; preds = %gpu_traverse_single_helper_cont
  %302 = extractvalue %2 %_4451974, 2, !dbg !311
  %303 = sext i32 %9 to i64, !dbg !311
  %304 = getelementptr inbounds [0 x float], [0 x float]* %302, i64 0, i64 %303, !dbg !311
  %305 = load float, float* %304, align 4, !dbg !311
  %306 = extractvalue %2 %_4451974, 3, !dbg !311
  %307 = sext i32 %9 to i64, !dbg !311
  %308 = getelementptr inbounds [0 x float], [0 x float]* %306, i64 0, i64 %307, !dbg !311
  %309 = load float, float* %308, align 4, !dbg !311
  %310 = extractvalue %2 %_4451974, 4, !dbg !311
  %311 = sext i32 %9 to i64, !dbg !311
  %312 = getelementptr inbounds [0 x float], [0 x float]* %310, i64 0, i64 %311, !dbg !311
  %313 = load float, float* %312, align 4, !dbg !311
  %314 = mul nsw i32 %14, 3, !dbg !311
  %315 = sext i32 %314 to i64, !dbg !311
  %316 = getelementptr inbounds [0 x float], [0 x float]* %_4451973, i64 0, i64 %315, !dbg !311
  %317 = addrspacecast float* %316 to float addrspace(1)*, !dbg !311
  %318 = fmul float %305, 2.500000e-01, !dbg !311
  %319 = atomicrmw fadd float addrspace(1)* %317, float %318 syncscope("agent") monotonic, !dbg !311
  %320 = getelementptr inbounds float, float* %316, i64 1, !dbg !312
  %321 = addrspacecast float* %320 to float addrspace(1)*, !dbg !312
  %322 = fmul float %309, 2.500000e-01, !dbg !312
  %323 = atomicrmw fadd float addrspace(1)* %321, float %322 syncscope("agent") monotonic, !dbg !312
  %324 = getelementptr inbounds float, float* %316, i64 2, !dbg !313
  %325 = addrspacecast float* %324 to float addrspace(1)*, !dbg !313
  %326 = fmul float %313, 2.500000e-01, !dbg !313
  %327 = atomicrmw fadd float addrspace(1)* %325, float %326 syncscope("agent") monotonic, !dbg !313
  br label %expr_false97, !dbg !313
}

define amdgpu_kernel void @lambda_4086455([0 x <4 x float>] addrspace(1)* %_4466125, [0 x <4 x float>] addrspace(1)* %_4466126, [0 x <4 x float>] addrspace(1)* %_4466127, i32 %_4466128, [0 x <4 x float>] addrspace(1)* %_4466129, i32 %_4466130, %2 %_4466131, [0 x <4 x i32>] addrspace(1)* %_4466132, %0 %_4466133, [0 x <4 x float>] addrspace(1)* %_4466134, [0 x float] addrspace(1)* %_4466135) local_unnamed_addr !dbg !314 !reqd_work_group_size !7 {
lambda_4086455:
  %v_4466393 = alloca float, align 4, addrspace(5)
  %u_4466396 = alloca float, align 4, addrspace(5)
  %state_4466184 = alloca %8, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !316
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !317
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !318
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !317
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !317
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !317
  %6 = zext i16 %5 to i32, !dbg !319
  %7 = mul nsw i32 %1, %6, !dbg !319
  %8 = add nsw i32 %0, %7, !dbg !319
  %ray_id = add nsw i32 %8, %_4466130, !dbg !319
  %.not = icmp slt i32 %ray_id, %_4466128, !dbg !319
  br i1 %.not, label %expr_false, label %expr_true86, !dbg !319

expr_false:                                       ; preds = %lambda_4086455
  %9 = extractvalue %0 %_4466133, 6, !dbg !320
  %10 = sext i32 %ray_id to i64, !dbg !320
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %9, i64 0, i64 %10, !dbg !320
  %12 = load i32, i32* %11, align 4, !dbg !320
  %13 = extractvalue %0 %_4466133, 8, !dbg !320
  %14 = sext i32 %ray_id to i64, !dbg !320
  %15 = getelementptr inbounds [0 x float], [0 x float]* %13, i64 0, i64 %14, !dbg !320
  %16 = load float, float* %15, align 4, !dbg !320
  %17 = extractvalue %0 %_4466133, 9, !dbg !320
  %18 = sext i32 %ray_id to i64, !dbg !320
  %19 = getelementptr inbounds [0 x float], [0 x float]* %17, i64 0, i64 %18, !dbg !320
  %20 = load float, float* %19, align 4, !dbg !320
  %21 = extractvalue %0 %_4466133, 10, !dbg !320
  %22 = sext i32 %ray_id to i64, !dbg !320
  %23 = getelementptr inbounds [0 x float], [0 x float]* %21, i64 0, i64 %22, !dbg !320
  %24 = load float, float* %23, align 4, !dbg !320
  %25 = extractvalue %0 %_4466133, 7, !dbg !320
  %26 = sext i32 %ray_id to i64, !dbg !320
  %27 = getelementptr inbounds [0 x float], [0 x float]* %25, i64 0, i64 %26, !dbg !320
  %28 = load float, float* %27, align 4, !dbg !320
  %29 = extractvalue %0 %_4466133, 11, !dbg !320
  %30 = sext i32 %ray_id to i64, !dbg !320
  %31 = getelementptr inbounds [0 x i32], [0 x i32]* %29, i64 0, i64 %30, !dbg !320
  %32 = load i32, i32* %31, align 4, !dbg !320
  %state_4466184.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 0, !dbg !320
  store i32 %12, i32 addrspace(5)* %state_4466184.repack, align 4, !dbg !320
  %state_4466184.repack87.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 0, !dbg !320
  store float %16, float addrspace(5)* %state_4466184.repack87.repack, align 4, !dbg !320
  %state_4466184.repack87.repack93 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 1, !dbg !320
  store float %20, float addrspace(5)* %state_4466184.repack87.repack93, align 4, !dbg !320
  %state_4466184.repack87.repack95 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 2, !dbg !320
  store float %24, float addrspace(5)* %state_4466184.repack87.repack95, align 4, !dbg !320
  %state_4466184.repack89 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 2, !dbg !320
  store float %28, float addrspace(5)* %state_4466184.repack89, align 4, !dbg !320
  %state_4466184.repack91 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 3, !dbg !320
  store i32 %32, i32 addrspace(5)* %state_4466184.repack91, align 4, !dbg !320
  %33 = extractvalue %0 %_4466133, 0, !dbg !320
  %34 = extractvalue %1 %33, 1, !dbg !320
  %35 = sext i32 %ray_id to i64, !dbg !320
  %36 = getelementptr inbounds [0 x float], [0 x float]* %34, i64 0, i64 %35, !dbg !320
  %37 = load float, float* %36, align 4, !dbg !320
  %38 = extractvalue %1 %33, 2, !dbg !320
  %39 = sext i32 %ray_id to i64, !dbg !320
  %40 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %39, !dbg !320
  %41 = load float, float* %40, align 4, !dbg !320
  %42 = extractvalue %1 %33, 3, !dbg !320
  %43 = sext i32 %ray_id to i64, !dbg !320
  %44 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %43, !dbg !320
  %45 = load float, float* %44, align 4, !dbg !320
  %46 = extractvalue %1 %33, 4, !dbg !320
  %47 = sext i32 %ray_id to i64, !dbg !320
  %48 = getelementptr inbounds [0 x float], [0 x float]* %46, i64 0, i64 %47, !dbg !320
  %49 = load float, float* %48, align 4, !dbg !320
  %50 = extractvalue %1 %33, 5, !dbg !320
  %51 = sext i32 %ray_id to i64, !dbg !320
  %52 = getelementptr inbounds [0 x float], [0 x float]* %50, i64 0, i64 %51, !dbg !320
  %53 = load float, float* %52, align 4, !dbg !320
  %54 = extractvalue %1 %33, 6, !dbg !320
  %55 = sext i32 %ray_id to i64, !dbg !320
  %56 = getelementptr inbounds [0 x float], [0 x float]* %54, i64 0, i64 %55, !dbg !320
  %57 = load float, float* %56, align 4, !dbg !320
  %58 = extractvalue %1 %33, 0, !dbg !321
  %59 = sext i32 %ray_id to i64, !dbg !321
  %60 = getelementptr inbounds [0 x i32], [0 x i32]* %58, i64 0, i64 %59, !dbg !321
  %61 = load i32, i32* %60, align 4, !dbg !321
  %62 = extractvalue %0 %_4466133, 2, !dbg !321
  %63 = sext i32 %ray_id to i64, !dbg !321
  %64 = getelementptr inbounds [0 x i32], [0 x i32]* %62, i64 0, i64 %63, !dbg !321
  %65 = load i32, i32* %64, align 4, !dbg !321
  %66 = extractvalue %0 %_4466133, 3, !dbg !321
  %67 = sext i32 %ray_id to i64, !dbg !321
  %68 = getelementptr inbounds [0 x float], [0 x float]* %66, i64 0, i64 %67, !dbg !321
  %69 = load float, float* %68, align 4, !dbg !321
  %70 = extractvalue %0 %_4466133, 4, !dbg !321
  %71 = sext i32 %ray_id to i64, !dbg !321
  %72 = getelementptr inbounds [0 x float], [0 x float]* %70, i64 0, i64 %71, !dbg !321
  %73 = load float, float* %72, align 4, !dbg !321
  %74 = extractvalue %0 %_4466133, 5, !dbg !321
  %75 = sext i32 %ray_id to i64, !dbg !321
  %76 = getelementptr inbounds [0 x float], [0 x float]* %74, i64 0, i64 %75, !dbg !321
  %77 = load float, float* %76, align 4, !dbg !321
  %78 = sext i32 %65 to i64, !dbg !321
  %79 = getelementptr inbounds [0 x <4 x i32>], [0 x <4 x i32>] addrspace(1)* %_4466132, i64 0, i64 %78, !dbg !321
  %80 = load <4 x i32>, <4 x i32> addrspace(1)* %79, align 16, !dbg !321
  %81 = sext i32 %65 to i64, !dbg !321
  %82 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466125, i64 0, i64 %81, !dbg !321
  %83 = load <4 x float>, <4 x float> addrspace(1)* %82, align 16, !dbg !321
  %84 = extractelement <4 x i32> %80, i32 0, !dbg !321
  %85 = sext i32 %84 to i64, !dbg !321
  %86 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466129, i64 0, i64 %85, !dbg !321
  %87 = load <4 x float>, <4 x float> addrspace(1)* %86, align 16, !dbg !321
  %88 = extractelement <4 x i32> %80, i32 1, !dbg !321
  %89 = sext i32 %88 to i64, !dbg !321
  %90 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466129, i64 0, i64 %89, !dbg !321
  %91 = load <4 x float>, <4 x float> addrspace(1)* %90, align 16, !dbg !321
  %92 = extractelement <4 x i32> %80, i32 2, !dbg !321
  %93 = sext i32 %92 to i64, !dbg !321
  %94 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466129, i64 0, i64 %93, !dbg !321
  %95 = load <4 x float>, <4 x float> addrspace(1)* %94, align 16, !dbg !321
  %96 = fsub float 1.000000e+00, %73, !dbg !321
  %97 = fsub float %96, %77, !dbg !321
  %98 = extractelement <4 x float> %87, i32 0, !dbg !321
  %99 = fmul float %97, %98, !dbg !321
  %100 = extractelement <4 x float> %91, i32 0, !dbg !321
  %101 = fmul float %73, %100, !dbg !321
  %102 = fadd float %99, %101, !dbg !321
  %103 = extractelement <4 x float> %95, i32 0, !dbg !321
  %104 = fmul float %77, %103, !dbg !321
  %105 = fadd float %102, %104, !dbg !321
  %106 = fmul float %105, %105, !dbg !321
  %107 = extractelement <4 x float> %87, i32 1, !dbg !321
  %108 = fmul float %97, %107, !dbg !321
  %109 = extractelement <4 x float> %91, i32 1, !dbg !321
  %110 = fmul float %73, %109, !dbg !321
  %111 = fadd float %108, %110, !dbg !321
  %112 = extractelement <4 x float> %95, i32 1, !dbg !321
  %113 = fmul float %77, %112, !dbg !321
  %114 = fadd float %111, %113, !dbg !321
  %115 = fmul float %114, %114, !dbg !321
  %116 = fadd float %106, %115, !dbg !321
  %117 = extractelement <4 x float> %87, i32 2, !dbg !321
  %118 = fmul float %97, %117, !dbg !321
  %119 = extractelement <4 x float> %91, i32 2, !dbg !321
  %120 = fmul float %73, %119, !dbg !321
  %121 = fadd float %118, %120, !dbg !321
  %122 = extractelement <4 x float> %95, i32 2, !dbg !321
  %123 = fmul float %77, %122, !dbg !321
  %124 = fadd float %121, %123, !dbg !321
  %125 = fmul float %124, %124, !dbg !321
  %126 = fadd float %116, %125, !dbg !321
  %127 = call float @__ocml_sqrt_f32(float %126), !dbg !321
  %128 = extractelement <4 x float> %83, i32 0, !dbg !322
  %129 = fmul float %49, %128, !dbg !322
  %130 = extractelement <4 x float> %83, i32 1, !dbg !322
  %131 = fmul float %53, %130, !dbg !322
  %132 = fadd float %129, %131, !dbg !322
  %133 = extractelement <4 x float> %83, i32 2, !dbg !322
  %134 = fmul float %57, %133, !dbg !322
  %135 = fadd float %132, %134, !dbg !322
  %is_entering = fcmp ugt float %135, 0.000000e+00, !dbg !322
  %136 = fneg float %128, !dbg !322
  %137 = fneg float %130, !dbg !322
  %138 = fneg float %133, !dbg !322
  %.pn101 = select i1 %is_entering, float %136, float %128, !dbg !322
  %.pn99 = select i1 %is_entering, float %137, float %130, !dbg !322
  %.pn97 = select i1 %is_entering, float %138, float %133, !dbg !322
  %139 = fdiv float 1.000000e+00, %127, !dbg !323
  %140 = fmul float %105, %139, !dbg !323
  %141 = fmul float %49, %140, !dbg !323
  %142 = fmul float %114, %139, !dbg !323
  %143 = fmul float %53, %142, !dbg !323
  %144 = fadd float %141, %143, !dbg !323
  %145 = fmul float %124, %139, !dbg !323
  %146 = fmul float %57, %145, !dbg !323
  %147 = fadd float %144, %146, !dbg !323
  %148 = fcmp ugt float %147, 0.000000e+00, !dbg !323
  %149 = fneg float %140, !dbg !323
  %150 = fneg float %142, !dbg !323
  %151 = fneg float %145, !dbg !323
  %.pn107 = select i1 %148, float %149, float %140, !dbg !323
  %.pn105 = select i1 %148, float %150, float %142, !dbg !323
  %.pn103 = select i1 %148, float %151, float %145, !dbg !323
  %152 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 0, !dbg !324
  %153 = load i32, i32 addrspace(5)* %152, align 4, !dbg !324
  %154 = icmp eq i32 %153, 0, !dbg !324
  %155 = select i1 %154, i32 1, i32 %153, !dbg !324
  %156 = shl i32 %155, 13, !dbg !324
  %157 = xor i32 %155, %156, !dbg !324
  %158 = lshr i32 %157, 17, !dbg !324
  %159 = xor i32 %157, %158, !dbg !324
  %160 = shl i32 %159, 5, !dbg !324
  %161 = xor i32 %159, %160, !dbg !324
  %162 = icmp eq i32 %161, 0, !dbg !324
  %163 = select i1 %162, i32 1, i32 %161, !dbg !324
  %164 = shl i32 %163, 13, !dbg !324
  %165 = xor i32 %163, %164, !dbg !324
  %166 = lshr i32 %165, 17, !dbg !324
  %167 = xor i32 %165, %166, !dbg !324
  %168 = shl i32 %167, 5, !dbg !324
  %169 = xor i32 %167, %168, !dbg !324
  %170 = and i32 %169, 8388607, !dbg !324
  %171 = or i32 %170, 1065353216, !dbg !324
  %172 = bitcast i32 %171 to float, !dbg !324
  %173 = fadd float %172, -1.000000e+00, !dbg !324
  %174 = icmp eq i32 %169, 0, !dbg !324
  %175 = select i1 %174, i32 1, i32 %169, !dbg !324
  %176 = shl i32 %175, 13, !dbg !324
  %177 = xor i32 %175, %176, !dbg !324
  %178 = lshr i32 %177, 17, !dbg !324
  %179 = xor i32 %177, %178, !dbg !324
  %180 = shl i32 %179, 5, !dbg !324
  %181 = xor i32 %179, %180, !dbg !324
  %182 = and i32 %181, 8388607, !dbg !324
  %183 = or i32 %182, 1065353216, !dbg !324
  %184 = bitcast i32 %183 to float, !dbg !324
  %185 = fadd float %184, -1.000000e+00, !dbg !324
  %186 = fadd float %173, %185, !dbg !324
  %187 = fcmp ogt float %186, 1.000000e+00, !dbg !324
  store i32 %161, i32 addrspace(5)* %152, align 4, !dbg !324
  %188 = and i32 %159, 1, !dbg !324
  %189 = mul nuw nsw i32 %188, 3, !dbg !324
  %190 = zext i32 %189 to i64, !dbg !324
  %191 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466126, i64 0, i64 %190, !dbg !324
  %192 = load <4 x float>, <4 x float> addrspace(1)* %191, align 16, !dbg !324
  %193 = add nuw nsw i32 %189, 1, !dbg !324
  %194 = zext i32 %193 to i64, !dbg !324
  %195 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466126, i64 0, i64 %194, !dbg !324
  %196 = load <4 x float>, <4 x float> addrspace(1)* %195, align 16, !dbg !324
  %197 = add nuw nsw i32 %189, 2, !dbg !324
  %198 = zext i32 %197 to i64, !dbg !324
  %199 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466126, i64 0, i64 %198, !dbg !324
  %200 = load <4 x float>, <4 x float> addrspace(1)* %199, align 16, !dbg !324
  %201 = zext i32 %188 to i64, !dbg !324
  %202 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466134, i64 0, i64 %201, !dbg !324
  %203 = load <4 x float>, <4 x float> addrspace(1)* %202, align 16, !dbg !324
  %204 = zext i32 %188 to i64, !dbg !324
  %205 = getelementptr inbounds [0 x float], [0 x float] addrspace(1)* %_4466135, i64 0, i64 %204, !dbg !324
  %206 = load float, float addrspace(1)* %205, align 4, !dbg !324
  %207 = zext i32 %188 to i64, !dbg !324
  %208 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4466127, i64 0, i64 %207, !dbg !324
  %209 = load <4 x float>, <4 x float> addrspace(1)* %208, align 16, !dbg !324
  store i32 %181, i32 addrspace(5)* %152, align 4, !dbg !324
  store float %173, float addrspace(5)* %u_4466396, align 4, !dbg !324
  store float %185, float addrspace(5)* %v_4466393, align 4, !dbg !324
  br i1 %187, label %expr_true20, label %if_join21, !dbg !324

expr_true20:                                      ; preds = %expr_false
  %210 = fsub float 1.000000e+00, %173, !dbg !325
  store float %210, float addrspace(5)* %u_4466396, align 4, !dbg !325
  %211 = fsub float 1.000000e+00, %185, !dbg !325
  store float %211, float addrspace(5)* %v_4466393, align 4, !dbg !325
  br label %if_join21, !dbg !325

if_join21:                                        ; preds = %expr_false, %expr_true20
  %212 = load float, float addrspace(5)* %v_4466393, align 4, !dbg !326
  %213 = load float, float addrspace(5)* %u_4466396, align 4, !dbg !326
  %214 = fmul float %49, %69, !dbg !326
  %215 = fadd float %37, %214, !dbg !326
  %216 = extractelement <4 x float> %192, i32 0, !dbg !326
  %217 = fsub float 1.000000e+00, %212, !dbg !326
  %218 = fsub float %217, %213, !dbg !326
  %219 = fmul float %216, %218, !dbg !326
  %220 = extractelement <4 x float> %196, i32 0, !dbg !326
  %221 = fmul float %220, %213, !dbg !326
  %222 = fadd float %219, %221, !dbg !326
  %223 = extractelement <4 x float> %200, i32 0, !dbg !326
  %224 = fmul float %223, %212, !dbg !326
  %225 = fadd float %222, %224, !dbg !326
  %226 = fsub float %215, %225, !dbg !326
  %227 = fmul float %226, %226, !dbg !326
  %228 = fmul float %53, %69, !dbg !326
  %229 = fadd float %41, %228, !dbg !326
  %230 = extractelement <4 x float> %192, i32 1, !dbg !326
  %231 = fmul float %230, %218, !dbg !326
  %232 = extractelement <4 x float> %196, i32 1, !dbg !326
  %233 = fmul float %232, %213, !dbg !326
  %234 = fadd float %231, %233, !dbg !326
  %235 = extractelement <4 x float> %200, i32 1, !dbg !326
  %236 = fmul float %235, %212, !dbg !326
  %237 = fadd float %234, %236, !dbg !326
  %238 = fsub float %229, %237, !dbg !326
  %239 = fmul float %238, %238, !dbg !326
  %240 = fadd float %227, %239, !dbg !326
  %241 = fmul float %57, %69, !dbg !326
  %242 = fadd float %45, %241, !dbg !326
  %243 = extractelement <4 x float> %192, i32 2, !dbg !326
  %244 = fmul float %243, %218, !dbg !326
  %245 = extractelement <4 x float> %196, i32 2, !dbg !326
  %246 = fmul float %245, %213, !dbg !326
  %247 = fadd float %244, %246, !dbg !326
  %248 = extractelement <4 x float> %200, i32 2, !dbg !326
  %249 = fmul float %248, %212, !dbg !326
  %250 = fadd float %247, %249, !dbg !326
  %251 = fsub float %242, %250, !dbg !326
  %252 = fmul float %251, %251, !dbg !326
  %253 = fadd float %240, %252, !dbg !326
  %254 = call float @__ocml_sqrt_f32(float %253), !dbg !326
  %255 = fcmp ogt float %206, 0.000000e+00, !dbg !327
  br i1 %255, label %expr_true25, label %_cont, !dbg !327

expr_true25:                                      ; preds = %if_join21
  %256 = extractelement <4 x float> %203, i32 0, !dbg !328
  %257 = fmul float %226, %256, !dbg !328
  %258 = extractelement <4 x float> %203, i32 1, !dbg !328
  %259 = fmul float %238, %258, !dbg !328
  %260 = fadd float %257, %259, !dbg !328
  %261 = extractelement <4 x float> %203, i32 2, !dbg !328
  %262 = fmul float %251, %261, !dbg !328
  %263 = fadd float %260, %262, !dbg !328
  %cos = fdiv float %263, %254, !dbg !328
  %264 = fmul float %cos, 0x3FD45F3060000000, !dbg !328
  %265 = fcmp ogt float %264, 0.000000e+00, !dbg !328
  %266 = fcmp ogt float %cos, 0.000000e+00
  %or.cond = and i1 %265, %266, !dbg !328
  br i1 %or.cond, label %expr_true29, label %_cont, !dbg !328

expr_true29:                                      ; preds = %expr_true25
  %267 = extractelement <4 x float> %209, i32 0, !dbg !329
  %268 = insertvalue %9 undef, float %267, 0, !dbg !329
  %269 = extractelement <4 x float> %209, i32 1, !dbg !329
  %270 = insertvalue %9 %268, float %269, 1, !dbg !329
  %271 = extractelement <4 x float> %209, i32 2, !dbg !329
  %272 = insertvalue %9 %270, float %271, 2, !dbg !329
  %phi.bo = fmul float %206, 5.000000e-01, !dbg !329
  br label %_cont, !dbg !329

_cont:                                            ; preds = %if_join21, %expr_true25, %expr_true29
  %.pn115 = phi %9 [ %272, %expr_true29 ], [ zeroinitializer, %expr_true25 ], [ zeroinitializer, %if_join21 ]
  %.pn113 = phi float [ %phi.bo, %expr_true29 ], [ 5.000000e-01, %expr_true25 ], [ 5.000000e-01, %if_join21 ]
  %.pn109 = phi float [ %cos, %expr_true29 ], [ 0.000000e+00, %expr_true25 ], [ 0.000000e+00, %if_join21 ]
  %273 = fsub float %225, %215, !dbg !330
  %274 = fmul float %273, %.pn107, !dbg !330
  %275 = fsub float %237, %229, !dbg !330
  %276 = fmul float %275, %.pn105, !dbg !330
  %277 = fadd float %274, %276, !dbg !330
  %278 = fsub float %250, %242, !dbg !330
  %279 = fmul float %278, %.pn103, !dbg !330
  %280 = fadd float %277, %279, !dbg !330
  %281 = fcmp ogt float %280, 0.000000e+00, !dbg !330
  %282 = extractvalue %2 %_4466131, 0, !dbg !330
  %283 = extractvalue %1 %282, 0, !dbg !330
  %284 = sext i32 %ray_id to i64, !dbg !330
  %285 = getelementptr inbounds [0 x i32], [0 x i32]* %283, i64 0, i64 %284, !dbg !330
  %286 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, !dbg !330
  %287 = fcmp ogt float %.pn109, 0.000000e+00
  %or.cond134 = and i1 %281, %287, !dbg !330
  br i1 %or.cond134, label %expr_true34, label %break, !dbg !330

expr_true34:                                      ; preds = %_cont
  %288 = fmul float %273, %273, !dbg !331
  %289 = fmul float %275, %275, !dbg !331
  %290 = fadd float %288, %289, !dbg !331
  %291 = fmul float %278, %278, !dbg !331
  %292 = fadd float %290, %291, !dbg !331
  %293 = call float @__ocml_sqrt_f32(float %292), !dbg !331
  %inv_d = fdiv float 1.000000e+00, %293, !dbg !332
  %294 = fmul float %273, %inv_d, !dbg !332
  %295 = fmul float %294, %.pn107, !dbg !332
  %296 = fmul float %275, %inv_d, !dbg !332
  %297 = fmul float %296, %.pn105, !dbg !332
  %298 = fadd float %295, %297, !dbg !332
  %299 = fmul float %278, %inv_d, !dbg !332
  %300 = fmul float %299, %.pn103, !dbg !332
  %301 = fadd float %298, %300, !dbg !332
  %.inv = fcmp oge float %301, 0.000000e+00, !dbg !332
  %302 = select i1 %.inv, float %301, float 0.000000e+00, !dbg !332
  %.elt128 = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !333
  %.unpack129 = load float, float addrspace(5)* %.elt128, align 4, !dbg !333
  %.elt130 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 1, !dbg !333
  %.unpack131 = load float, float addrspace(5)* %.elt130, align 4, !dbg !333
  %.elt132 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 2, !dbg !333
  %.unpack133 = load float, float addrspace(5)* %.elt132, align 4, !dbg !333
  %303 = extractvalue %1 %282, 1, !dbg !321
  %304 = sext i32 %ray_id to i64, !dbg !321
  %305 = getelementptr inbounds [0 x float], [0 x float]* %303, i64 0, i64 %304, !dbg !321
  store float %215, float* %305, align 4, !dbg !321
  %306 = extractvalue %1 %282, 2, !dbg !321
  %307 = sext i32 %ray_id to i64, !dbg !321
  %308 = getelementptr inbounds [0 x float], [0 x float]* %306, i64 0, i64 %307, !dbg !321
  store float %229, float* %308, align 4, !dbg !321
  %309 = extractvalue %1 %282, 3, !dbg !321
  %310 = sext i32 %ray_id to i64, !dbg !321
  %311 = getelementptr inbounds [0 x float], [0 x float]* %309, i64 0, i64 %310, !dbg !321
  store float %242, float* %311, align 4, !dbg !321
  %312 = extractvalue %1 %282, 4, !dbg !321
  %313 = sext i32 %ray_id to i64, !dbg !321
  %314 = getelementptr inbounds [0 x float], [0 x float]* %312, i64 0, i64 %313, !dbg !321
  store float %273, float* %314, align 4, !dbg !321
  %315 = extractvalue %1 %282, 5, !dbg !321
  %316 = sext i32 %ray_id to i64, !dbg !321
  %317 = getelementptr inbounds [0 x float], [0 x float]* %315, i64 0, i64 %316, !dbg !321
  store float %275, float* %317, align 4, !dbg !321
  %318 = extractvalue %1 %282, 6, !dbg !321
  %319 = sext i32 %ray_id to i64, !dbg !321
  %320 = getelementptr inbounds [0 x float], [0 x float]* %318, i64 0, i64 %319, !dbg !321
  store float %278, float* %320, align 4, !dbg !321
  %321 = extractvalue %1 %282, 7, !dbg !321
  %322 = sext i32 %ray_id to i64, !dbg !321
  %323 = getelementptr inbounds [0 x float], [0 x float]* %321, i64 0, i64 %322, !dbg !321
  store float 0x3F50624DE0000000, float* %323, align 4, !dbg !321
  %324 = extractvalue %1 %282, 8, !dbg !321
  %325 = sext i32 %ray_id to i64, !dbg !321
  %326 = getelementptr inbounds [0 x float], [0 x float]* %324, i64 0, i64 %325, !dbg !321
  store float 0x3FEFF7CEE0000000, float* %326, align 4, !dbg !321
  %327 = extractvalue %2 %_4466131, 2, !dbg !321
  %328 = sext i32 %ray_id to i64, !dbg !321
  %329 = getelementptr inbounds [0 x float], [0 x float]* %327, i64 0, i64 %328, !dbg !321
  %330 = extractvalue %9 %.pn115, 0, !dbg !321
  %331 = fmul float %.unpack129, 0x3FC9AB2360000000, !dbg !321
  %332 = fmul float %330, %331, !dbg !321
  %cos_e = fmul float %280, %inv_d, !dbg !321
  %333 = fmul float %cos_e, %.pn109, !dbg !321
  %inv_d2 = fmul float %inv_d, %inv_d, !dbg !321
  %334 = fmul float %333, %inv_d2, !dbg !321
  %inv_pdf_l = fdiv float 1.000000e+00, %.pn113, !dbg !321
  %geom_factor = fmul float %334, %inv_pdf_l, !dbg !321
  %335 = fmul float %302, 0x3FD45F3060000000, !dbg !321
  %336 = fmul float %335, %.pn109, !dbg !321
  %337 = fmul float %336, %inv_d2, !dbg !321
  %338 = fmul float %337, %inv_pdf_l, !dbg !321
  %339 = fadd float %338, 1.000000e+00, !dbg !321
  %340 = fdiv float 1.000000e+00, %339, !dbg !321
  %341 = fmul float %geom_factor, %340, !dbg !321
  %342 = fmul float %332, %341, !dbg !321
  store float %342, float* %329, align 4, !dbg !321
  %343 = extractvalue %2 %_4466131, 3, !dbg !321
  %344 = sext i32 %ray_id to i64, !dbg !321
  %345 = getelementptr inbounds [0 x float], [0 x float]* %343, i64 0, i64 %344, !dbg !321
  %346 = extractvalue %9 %.pn115, 1, !dbg !321
  %347 = fmul float %.unpack131, 0x3F952FCBE0000000, !dbg !321
  %348 = fmul float %346, %347, !dbg !321
  %349 = fmul float %348, %341, !dbg !321
  store float %349, float* %345, align 4, !dbg !321
  %350 = extractvalue %2 %_4466131, 4, !dbg !321
  %351 = sext i32 %ray_id to i64, !dbg !321
  %352 = getelementptr inbounds [0 x float], [0 x float]* %350, i64 0, i64 %351, !dbg !321
  %353 = extractvalue %9 %.pn115, 2, !dbg !321
  %354 = fmul float %.unpack133, 0x3F904C26C0000000, !dbg !321
  %355 = fmul float %353, %354, !dbg !321
  %356 = fmul float %355, %341, !dbg !321
  store float %356, float* %352, align 4, !dbg !321
  br label %break, !dbg !321

break:                                            ; preds = %_cont, %expr_true34
  %storemerge = phi i32 [ %61, %expr_true34 ], [ -1, %_cont ], !dbg !334
  store i32 %storemerge, i32* %285, align 4, !dbg !334
  %.elt = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !335
  %.unpack = load float, float addrspace(5)* %.elt, align 4, !dbg !335
  %.elt118 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 1, !dbg !335
  %.unpack119 = load float, float addrspace(5)* %.elt118, align 4, !dbg !335
  %.elt120 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 2, !dbg !335
  %.unpack121 = load float, float addrspace(5)* %.elt120, align 4, !dbg !335
  %357 = fmul float %.unpack, 0x3FCB367A00000000, !dbg !335
  %358 = fmul float %.unpack119, 0x3FE6E2EB20000000, !dbg !335
  %359 = fadd float %357, %358, !dbg !335
  %360 = fmul float %.unpack121, 0x3FB27BB300000000, !dbg !335
  %361 = fadd float %359, %360, !dbg !335
  %prob = fmul float %361, 2.000000e+00, !dbg !335
  %362 = fcmp ogt float %prob, 7.500000e-01, !dbg !335
  %.prob = select i1 %362, float 7.500000e-01, float %prob, !dbg !336
  %363 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 3, !dbg !337
  %364 = load i32, i32 addrspace(5)* %363, align 4, !dbg !337
  %365 = icmp sgt i32 %364, 63, !dbg !337
  br i1 %365, label %expr_true85, label %expr_false52, !dbg !337

expr_false52:                                     ; preds = %break
  %366 = load i32, i32 addrspace(5)* %152, align 4, !dbg !338
  %367 = icmp eq i32 %366, 0, !dbg !338
  %368 = select i1 %367, i32 1, i32 %366, !dbg !338
  %369 = shl i32 %368, 13, !dbg !338
  %370 = xor i32 %368, %369, !dbg !338
  %371 = lshr i32 %370, 17, !dbg !338
  %372 = xor i32 %370, %371, !dbg !338
  %373 = shl i32 %372, 5, !dbg !338
  %374 = xor i32 %372, %373, !dbg !338
  %375 = and i32 %374, 8388607, !dbg !338
  %376 = or i32 %375, 1065353216, !dbg !338
  %377 = bitcast i32 %376 to float, !dbg !338
  %378 = fadd float %377, -1.000000e+00, !dbg !338
  %379 = fcmp ugt float %.prob, %378, !dbg !338
  store i32 %374, i32 addrspace(5)* %152, align 4, !dbg !338
  br i1 %379, label %expr_false53, label %expr_true84, !dbg !338

expr_false53:                                     ; preds = %expr_false52
  %380 = icmp eq i32 %374, 0, !dbg !339
  %381 = select i1 %380, i32 1, i32 %374, !dbg !339
  %382 = shl i32 %381, 13, !dbg !339
  %383 = xor i32 %381, %382, !dbg !339
  %384 = lshr i32 %383, 17, !dbg !339
  %385 = xor i32 %383, %384, !dbg !339
  %386 = shl i32 %385, 5, !dbg !339
  %387 = xor i32 %385, %386, !dbg !339
  store i32 %387, i32 addrspace(5)* %152, align 4, !dbg !339
  %388 = icmp eq i32 %387, 0, !dbg !339
  %389 = select i1 %388, i32 1, i32 %387, !dbg !339
  %390 = shl i32 %389, 13, !dbg !339
  %391 = xor i32 %389, %390, !dbg !339
  %392 = lshr i32 %391, 17, !dbg !339
  %393 = xor i32 %391, %392, !dbg !339
  %394 = shl i32 %393, 5, !dbg !339
  %395 = xor i32 %393, %394, !dbg !339
  store i32 %395, i32 addrspace(5)* %152, align 4, !dbg !339
  %396 = and i32 %395, 8388607, !dbg !339
  %397 = or i32 %396, 1065353216, !dbg !339
  %398 = bitcast i32 %397 to float, !dbg !339
  %399 = fadd float %398, -1.000000e+00, !dbg !339
  %400 = fsub float 1.000000e+00, %399, !dbg !339
  %401 = call float @__ocml_sqrt_f32(float %400), !dbg !339
  %402 = call float @__ocml_sqrt_f32(float %399), !dbg !340
  %403 = and i32 %387, 8388607, !dbg !341
  %404 = or i32 %403, 1065353216, !dbg !341
  %405 = bitcast i32 %404 to float, !dbg !341
  %406 = fadd float %405, -1.000000e+00, !dbg !341
  %phi = fmul float %406, 0x401921FB60000000, !dbg !341
  %407 = call float @__ocml_cos_f32(float %phi), !dbg !341
  %408 = call float @__ocml_sin_f32(float %phi), !dbg !342
  %409 = fmul float %401, 0x3FD45F3060000000, !dbg !343
  %410 = fcmp ogt float %409, 0.000000e+00, !dbg !343
  %411 = fcmp oge float %.pn103, 0.000000e+00, !dbg !343
  %412 = select i1 %411, float 1.000000e+00, float -1.000000e+00, !dbg !343
  %413 = fmul float %412, %.pn107, !dbg !343
  %414 = fmul float %413, %.pn107, !dbg !343
  %415 = fadd float %412, %.pn103, !dbg !343
  %a = fdiv float -1.000000e+00, %415, !dbg !343
  %416 = fmul float %414, %a, !dbg !343
  %417 = fadd float %416, 1.000000e+00, !dbg !343
  %x = fmul float %402, %407, !dbg !343
  %418 = fmul float %417, %x, !dbg !343
  %419 = fmul float %.pn107, %.pn105, !dbg !343
  %b = fmul float %419, %a, !dbg !343
  %y = fmul float %402, %408, !dbg !343
  %420 = fmul float %b, %y, !dbg !343
  %421 = fadd float %418, %420, !dbg !343
  %422 = fmul float %.pn107, %401, !dbg !343
  %423 = fadd float %421, %422, !dbg !343
  %424 = fmul float %412, %b, !dbg !343
  %425 = fmul float %424, %x, !dbg !343
  %426 = fmul float %.pn105, %.pn105, !dbg !343
  %427 = fmul float %426, %a, !dbg !343
  %428 = fadd float %412, %427, !dbg !343
  %429 = fmul float %428, %y, !dbg !343
  %430 = fadd float %425, %429, !dbg !343
  %431 = fmul float %.pn105, %401, !dbg !343
  %432 = fadd float %430, %431, !dbg !343
  %433 = fneg float %412, !dbg !343
  %434 = fmul float %.pn107, %433, !dbg !343
  %435 = fmul float %434, %x, !dbg !343
  %436 = fmul float %.pn105, %y, !dbg !343
  %437 = fsub float %435, %436, !dbg !343
  %438 = fmul float %.pn103, %401, !dbg !343
  %439 = fadd float %437, %438, !dbg !343
  br i1 %410, label %expr_true63, label %infix_result, !dbg !343

expr_true63:                                      ; preds = %expr_false53
  %440 = fmul float %423, %.pn101, !dbg !344
  %441 = fmul float %432, %.pn99, !dbg !344
  %442 = fadd float %440, %441, !dbg !344
  %443 = fmul float %439, %.pn97, !dbg !344
  %444 = fadd float %442, %443, !dbg !344
  %445 = fcmp ogt float %444, 0.000000e+00, !dbg !344
  br i1 %445, label %expr_true65, label %infix_result, !dbg !344

expr_true65:                                      ; preds = %expr_true63
  br label %infix_result, !dbg !345

infix_result:                                     ; preds = %expr_false53, %expr_true63, %expr_true65
  %infix_result66 = phi i1 [ true, %expr_true65 ], [ false, %expr_true63 ], [ false, %expr_false53 ], !dbg !346
  %. = select i1 %infix_result66, float %409, float 1.000000e+00, !dbg !347
  %if_join74 = select i1 %infix_result66, %9 { float 0x3FC9AB2360000000, float 0x3F952FCBE0000000, float 0x3F904C26C0000000 }, %9 zeroinitializer, !dbg !348
  %.elt122 = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !349
  %.unpack123 = load float, float addrspace(5)* %.elt122, align 4, !dbg !349
  %.elt124 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 1, !dbg !349
  %.unpack125 = load float, float addrspace(5)* %.elt124, align 4, !dbg !349
  %.elt126 = getelementptr inbounds %8, %8 addrspace(5)* %state_4466184, i32 0, i32 1, i32 2, !dbg !349
  %.unpack127 = load float, float addrspace(5)* %.elt126, align 4, !dbg !349
  %446 = load i32, i32 addrspace(5)* %152, align 4, !dbg !321
  %447 = load i32, i32 addrspace(5)* %363, align 4, !dbg !321
  store float %215, float* %36, align 4, !dbg !321
  store float %229, float* %40, align 4, !dbg !321
  store float %242, float* %44, align 4, !dbg !321
  store float %423, float* %48, align 4, !dbg !321
  store float %432, float* %52, align 4, !dbg !321
  store float %439, float* %56, align 4, !dbg !321
  %448 = extractvalue %1 %33, 7, !dbg !321
  %449 = sext i32 %ray_id to i64, !dbg !321
  %450 = getelementptr inbounds [0 x float], [0 x float]* %448, i64 0, i64 %449, !dbg !321
  store float 0x3F50624DE0000000, float* %450, align 4, !dbg !321
  %451 = extractvalue %1 %33, 8, !dbg !321
  %452 = sext i32 %ray_id to i64, !dbg !321
  %453 = getelementptr inbounds [0 x float], [0 x float]* %451, i64 0, i64 %452, !dbg !321
  store float 0x47EFFFFFE0000000, float* %453, align 4, !dbg !321
  store i32 %446, i32* %11, align 4, !dbg !321
  %454 = extractvalue %9 %if_join74, 0, !dbg !321
  %455 = fmul float %.unpack123, %454, !dbg !321
  %456 = fmul float %., %.prob, !dbg !321
  %457 = fdiv float %401, %456, !dbg !321
  %458 = fmul float %455, %457, !dbg !321
  store float %458, float* %15, align 4, !dbg !321
  %459 = extractvalue %9 %if_join74, 1, !dbg !321
  %460 = fmul float %.unpack125, %459, !dbg !321
  %461 = fmul float %460, %457, !dbg !321
  store float %461, float* %19, align 4, !dbg !321
  %462 = extractvalue %9 %if_join74, 2, !dbg !321
  %463 = fmul float %.unpack127, %462, !dbg !321
  %464 = fmul float %463, %457, !dbg !321
  store float %464, float* %23, align 4, !dbg !321
  %465 = fdiv float 1.000000e+00, %., !dbg !321
  store float %465, float* %27, align 4, !dbg !321
  %466 = add nsw i32 %447, 1, !dbg !321
  store i32 %466, i32* %31, align 4, !dbg !321
  ret void, !dbg !321

expr_true84:                                      ; preds = %expr_false52
  store i32 -1, i32* %60, align 4, !dbg !339
  ret void, !dbg !339

expr_true85:                                      ; preds = %break
  store i32 -1, i32* %60, align 4, !dbg !338
  ret void, !dbg !338

expr_true86:                                      ; preds = %lambda_4086455
  ret void, !dbg !320
}

define amdgpu_kernel void @lambda_4084754([0 x <4 x float>] addrspace(1)* %_4452640, [0 x float] addrspace(1)* %_4452641, [0 x <4 x i32>] addrspace(1)* %_4452642, [0 x <4 x float>] addrspace(1)* %_4452643, %0 %_4452644, [0 x <4 x float>] addrspace(1)* %_4452645, i32 %_4452646, [0 x <4 x float>] addrspace(1)* %_4452647, i32 %_4452648, %2 %_4452649, [0 x <4 x float>] addrspace(1)* %_4452650) local_unnamed_addr !dbg !350 !reqd_work_group_size !7 {
lambda_4084754:
  %v_4452908 = alloca float, align 4, addrspace(5)
  %u_4452911 = alloca float, align 4, addrspace(5)
  %state_4452699 = alloca %8, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !352
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !353
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !354
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !353
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !353
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !353
  %6 = zext i16 %5 to i32, !dbg !355
  %7 = mul nsw i32 %1, %6, !dbg !355
  %8 = add nsw i32 %0, %7, !dbg !355
  %ray_id = add nsw i32 %8, %_4452646, !dbg !355
  %.not = icmp slt i32 %ray_id, %_4452648, !dbg !355
  br i1 %.not, label %expr_false, label %expr_true86, !dbg !355

expr_false:                                       ; preds = %lambda_4084754
  %9 = extractvalue %0 %_4452644, 6, !dbg !356
  %10 = sext i32 %ray_id to i64, !dbg !356
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %9, i64 0, i64 %10, !dbg !356
  %12 = load i32, i32* %11, align 4, !dbg !356
  %13 = extractvalue %0 %_4452644, 8, !dbg !356
  %14 = sext i32 %ray_id to i64, !dbg !356
  %15 = getelementptr inbounds [0 x float], [0 x float]* %13, i64 0, i64 %14, !dbg !356
  %16 = load float, float* %15, align 4, !dbg !356
  %17 = extractvalue %0 %_4452644, 9, !dbg !356
  %18 = sext i32 %ray_id to i64, !dbg !356
  %19 = getelementptr inbounds [0 x float], [0 x float]* %17, i64 0, i64 %18, !dbg !356
  %20 = load float, float* %19, align 4, !dbg !356
  %21 = extractvalue %0 %_4452644, 10, !dbg !356
  %22 = sext i32 %ray_id to i64, !dbg !356
  %23 = getelementptr inbounds [0 x float], [0 x float]* %21, i64 0, i64 %22, !dbg !356
  %24 = load float, float* %23, align 4, !dbg !356
  %25 = extractvalue %0 %_4452644, 7, !dbg !356
  %26 = sext i32 %ray_id to i64, !dbg !356
  %27 = getelementptr inbounds [0 x float], [0 x float]* %25, i64 0, i64 %26, !dbg !356
  %28 = load float, float* %27, align 4, !dbg !356
  %29 = extractvalue %0 %_4452644, 11, !dbg !356
  %30 = sext i32 %ray_id to i64, !dbg !356
  %31 = getelementptr inbounds [0 x i32], [0 x i32]* %29, i64 0, i64 %30, !dbg !356
  %32 = load i32, i32* %31, align 4, !dbg !356
  %state_4452699.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 0, !dbg !356
  store i32 %12, i32 addrspace(5)* %state_4452699.repack, align 4, !dbg !356
  %state_4452699.repack87.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 0, !dbg !356
  store float %16, float addrspace(5)* %state_4452699.repack87.repack, align 4, !dbg !356
  %state_4452699.repack87.repack93 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 1, !dbg !356
  store float %20, float addrspace(5)* %state_4452699.repack87.repack93, align 4, !dbg !356
  %state_4452699.repack87.repack95 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 2, !dbg !356
  store float %24, float addrspace(5)* %state_4452699.repack87.repack95, align 4, !dbg !356
  %state_4452699.repack89 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 2, !dbg !356
  store float %28, float addrspace(5)* %state_4452699.repack89, align 4, !dbg !356
  %state_4452699.repack91 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 3, !dbg !356
  store i32 %32, i32 addrspace(5)* %state_4452699.repack91, align 4, !dbg !356
  %33 = extractvalue %0 %_4452644, 0, !dbg !356
  %34 = extractvalue %1 %33, 1, !dbg !356
  %35 = sext i32 %ray_id to i64, !dbg !356
  %36 = getelementptr inbounds [0 x float], [0 x float]* %34, i64 0, i64 %35, !dbg !356
  %37 = load float, float* %36, align 4, !dbg !356
  %38 = extractvalue %1 %33, 2, !dbg !356
  %39 = sext i32 %ray_id to i64, !dbg !356
  %40 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %39, !dbg !356
  %41 = load float, float* %40, align 4, !dbg !356
  %42 = extractvalue %1 %33, 3, !dbg !356
  %43 = sext i32 %ray_id to i64, !dbg !356
  %44 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %43, !dbg !356
  %45 = load float, float* %44, align 4, !dbg !356
  %46 = extractvalue %1 %33, 4, !dbg !356
  %47 = sext i32 %ray_id to i64, !dbg !356
  %48 = getelementptr inbounds [0 x float], [0 x float]* %46, i64 0, i64 %47, !dbg !356
  %49 = load float, float* %48, align 4, !dbg !356
  %50 = extractvalue %1 %33, 5, !dbg !356
  %51 = sext i32 %ray_id to i64, !dbg !356
  %52 = getelementptr inbounds [0 x float], [0 x float]* %50, i64 0, i64 %51, !dbg !356
  %53 = load float, float* %52, align 4, !dbg !356
  %54 = extractvalue %1 %33, 6, !dbg !356
  %55 = sext i32 %ray_id to i64, !dbg !356
  %56 = getelementptr inbounds [0 x float], [0 x float]* %54, i64 0, i64 %55, !dbg !356
  %57 = load float, float* %56, align 4, !dbg !356
  %58 = extractvalue %1 %33, 0, !dbg !357
  %59 = sext i32 %ray_id to i64, !dbg !357
  %60 = getelementptr inbounds [0 x i32], [0 x i32]* %58, i64 0, i64 %59, !dbg !357
  %61 = load i32, i32* %60, align 4, !dbg !357
  %62 = extractvalue %0 %_4452644, 2, !dbg !357
  %63 = sext i32 %ray_id to i64, !dbg !357
  %64 = getelementptr inbounds [0 x i32], [0 x i32]* %62, i64 0, i64 %63, !dbg !357
  %65 = load i32, i32* %64, align 4, !dbg !357
  %66 = extractvalue %0 %_4452644, 3, !dbg !357
  %67 = sext i32 %ray_id to i64, !dbg !357
  %68 = getelementptr inbounds [0 x float], [0 x float]* %66, i64 0, i64 %67, !dbg !357
  %69 = load float, float* %68, align 4, !dbg !357
  %70 = extractvalue %0 %_4452644, 4, !dbg !357
  %71 = sext i32 %ray_id to i64, !dbg !357
  %72 = getelementptr inbounds [0 x float], [0 x float]* %70, i64 0, i64 %71, !dbg !357
  %73 = load float, float* %72, align 4, !dbg !357
  %74 = extractvalue %0 %_4452644, 5, !dbg !357
  %75 = sext i32 %ray_id to i64, !dbg !357
  %76 = getelementptr inbounds [0 x float], [0 x float]* %74, i64 0, i64 %75, !dbg !357
  %77 = load float, float* %76, align 4, !dbg !357
  %78 = sext i32 %65 to i64, !dbg !357
  %79 = getelementptr inbounds [0 x <4 x i32>], [0 x <4 x i32>] addrspace(1)* %_4452642, i64 0, i64 %78, !dbg !357
  %80 = load <4 x i32>, <4 x i32> addrspace(1)* %79, align 16, !dbg !357
  %81 = sext i32 %65 to i64, !dbg !357
  %82 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452645, i64 0, i64 %81, !dbg !357
  %83 = load <4 x float>, <4 x float> addrspace(1)* %82, align 16, !dbg !357
  %84 = extractelement <4 x i32> %80, i32 0, !dbg !357
  %85 = sext i32 %84 to i64, !dbg !357
  %86 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452647, i64 0, i64 %85, !dbg !357
  %87 = load <4 x float>, <4 x float> addrspace(1)* %86, align 16, !dbg !357
  %88 = extractelement <4 x i32> %80, i32 1, !dbg !357
  %89 = sext i32 %88 to i64, !dbg !357
  %90 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452647, i64 0, i64 %89, !dbg !357
  %91 = load <4 x float>, <4 x float> addrspace(1)* %90, align 16, !dbg !357
  %92 = extractelement <4 x i32> %80, i32 2, !dbg !357
  %93 = sext i32 %92 to i64, !dbg !357
  %94 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452647, i64 0, i64 %93, !dbg !357
  %95 = load <4 x float>, <4 x float> addrspace(1)* %94, align 16, !dbg !357
  %96 = fsub float 1.000000e+00, %73, !dbg !357
  %97 = fsub float %96, %77, !dbg !357
  %98 = extractelement <4 x float> %87, i32 0, !dbg !357
  %99 = fmul float %97, %98, !dbg !357
  %100 = extractelement <4 x float> %91, i32 0, !dbg !357
  %101 = fmul float %73, %100, !dbg !357
  %102 = fadd float %99, %101, !dbg !357
  %103 = extractelement <4 x float> %95, i32 0, !dbg !357
  %104 = fmul float %77, %103, !dbg !357
  %105 = fadd float %102, %104, !dbg !357
  %106 = fmul float %105, %105, !dbg !357
  %107 = extractelement <4 x float> %87, i32 1, !dbg !357
  %108 = fmul float %97, %107, !dbg !357
  %109 = extractelement <4 x float> %91, i32 1, !dbg !357
  %110 = fmul float %73, %109, !dbg !357
  %111 = fadd float %108, %110, !dbg !357
  %112 = extractelement <4 x float> %95, i32 1, !dbg !357
  %113 = fmul float %77, %112, !dbg !357
  %114 = fadd float %111, %113, !dbg !357
  %115 = fmul float %114, %114, !dbg !357
  %116 = fadd float %106, %115, !dbg !357
  %117 = extractelement <4 x float> %87, i32 2, !dbg !357
  %118 = fmul float %97, %117, !dbg !357
  %119 = extractelement <4 x float> %91, i32 2, !dbg !357
  %120 = fmul float %73, %119, !dbg !357
  %121 = fadd float %118, %120, !dbg !357
  %122 = extractelement <4 x float> %95, i32 2, !dbg !357
  %123 = fmul float %77, %122, !dbg !357
  %124 = fadd float %121, %123, !dbg !357
  %125 = fmul float %124, %124, !dbg !357
  %126 = fadd float %116, %125, !dbg !357
  %127 = call float @__ocml_sqrt_f32(float %126), !dbg !357
  %128 = extractelement <4 x float> %83, i32 0, !dbg !358
  %129 = fmul float %49, %128, !dbg !358
  %130 = extractelement <4 x float> %83, i32 1, !dbg !358
  %131 = fmul float %53, %130, !dbg !358
  %132 = fadd float %129, %131, !dbg !358
  %133 = extractelement <4 x float> %83, i32 2, !dbg !358
  %134 = fmul float %57, %133, !dbg !358
  %135 = fadd float %132, %134, !dbg !358
  %is_entering = fcmp ugt float %135, 0.000000e+00, !dbg !358
  %136 = fneg float %128, !dbg !358
  %137 = fneg float %130, !dbg !358
  %138 = fneg float %133, !dbg !358
  %.pn101 = select i1 %is_entering, float %136, float %128, !dbg !358
  %.pn99 = select i1 %is_entering, float %137, float %130, !dbg !358
  %.pn97 = select i1 %is_entering, float %138, float %133, !dbg !358
  %139 = fdiv float 1.000000e+00, %127, !dbg !359
  %140 = fmul float %105, %139, !dbg !359
  %141 = fmul float %49, %140, !dbg !359
  %142 = fmul float %114, %139, !dbg !359
  %143 = fmul float %53, %142, !dbg !359
  %144 = fadd float %141, %143, !dbg !359
  %145 = fmul float %124, %139, !dbg !359
  %146 = fmul float %57, %145, !dbg !359
  %147 = fadd float %144, %146, !dbg !359
  %148 = fcmp ugt float %147, 0.000000e+00, !dbg !359
  %149 = fneg float %140, !dbg !359
  %150 = fneg float %142, !dbg !359
  %151 = fneg float %145, !dbg !359
  %.pn107 = select i1 %148, float %149, float %140, !dbg !359
  %.pn105 = select i1 %148, float %150, float %142, !dbg !359
  %.pn103 = select i1 %148, float %151, float %145, !dbg !359
  %152 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 0, !dbg !360
  %153 = load i32, i32 addrspace(5)* %152, align 4, !dbg !360
  %154 = icmp eq i32 %153, 0, !dbg !360
  %155 = select i1 %154, i32 1, i32 %153, !dbg !360
  %156 = shl i32 %155, 13, !dbg !360
  %157 = xor i32 %155, %156, !dbg !360
  %158 = lshr i32 %157, 17, !dbg !360
  %159 = xor i32 %157, %158, !dbg !360
  %160 = shl i32 %159, 5, !dbg !360
  %161 = xor i32 %159, %160, !dbg !360
  %162 = icmp eq i32 %161, 0, !dbg !360
  %163 = select i1 %162, i32 1, i32 %161, !dbg !360
  %164 = shl i32 %163, 13, !dbg !360
  %165 = xor i32 %163, %164, !dbg !360
  %166 = lshr i32 %165, 17, !dbg !360
  %167 = xor i32 %165, %166, !dbg !360
  %168 = shl i32 %167, 5, !dbg !360
  %169 = xor i32 %167, %168, !dbg !360
  %170 = and i32 %169, 8388607, !dbg !360
  %171 = or i32 %170, 1065353216, !dbg !360
  %172 = bitcast i32 %171 to float, !dbg !360
  %173 = fadd float %172, -1.000000e+00, !dbg !360
  %174 = icmp eq i32 %169, 0, !dbg !360
  %175 = select i1 %174, i32 1, i32 %169, !dbg !360
  %176 = shl i32 %175, 13, !dbg !360
  %177 = xor i32 %175, %176, !dbg !360
  %178 = lshr i32 %177, 17, !dbg !360
  %179 = xor i32 %177, %178, !dbg !360
  %180 = shl i32 %179, 5, !dbg !360
  %181 = xor i32 %179, %180, !dbg !360
  %182 = and i32 %181, 8388607, !dbg !360
  %183 = or i32 %182, 1065353216, !dbg !360
  %184 = bitcast i32 %183 to float, !dbg !360
  %185 = fadd float %184, -1.000000e+00, !dbg !360
  %186 = fadd float %173, %185, !dbg !360
  %187 = fcmp ogt float %186, 1.000000e+00, !dbg !360
  store i32 %161, i32 addrspace(5)* %152, align 4, !dbg !360
  %188 = and i32 %159, 1, !dbg !360
  %189 = mul nuw nsw i32 %188, 3, !dbg !360
  %190 = zext i32 %189 to i64, !dbg !360
  %191 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452643, i64 0, i64 %190, !dbg !360
  %192 = load <4 x float>, <4 x float> addrspace(1)* %191, align 16, !dbg !360
  %193 = add nuw nsw i32 %189, 1, !dbg !360
  %194 = zext i32 %193 to i64, !dbg !360
  %195 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452643, i64 0, i64 %194, !dbg !360
  %196 = load <4 x float>, <4 x float> addrspace(1)* %195, align 16, !dbg !360
  %197 = add nuw nsw i32 %189, 2, !dbg !360
  %198 = zext i32 %197 to i64, !dbg !360
  %199 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452643, i64 0, i64 %198, !dbg !360
  %200 = load <4 x float>, <4 x float> addrspace(1)* %199, align 16, !dbg !360
  %201 = zext i32 %188 to i64, !dbg !360
  %202 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452650, i64 0, i64 %201, !dbg !360
  %203 = load <4 x float>, <4 x float> addrspace(1)* %202, align 16, !dbg !360
  %204 = zext i32 %188 to i64, !dbg !360
  %205 = getelementptr inbounds [0 x float], [0 x float] addrspace(1)* %_4452641, i64 0, i64 %204, !dbg !360
  %206 = load float, float addrspace(1)* %205, align 4, !dbg !360
  %207 = zext i32 %188 to i64, !dbg !360
  %208 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4452640, i64 0, i64 %207, !dbg !360
  %209 = load <4 x float>, <4 x float> addrspace(1)* %208, align 16, !dbg !360
  store i32 %181, i32 addrspace(5)* %152, align 4, !dbg !360
  store float %173, float addrspace(5)* %u_4452911, align 4, !dbg !360
  store float %185, float addrspace(5)* %v_4452908, align 4, !dbg !360
  br i1 %187, label %expr_true20, label %if_join21, !dbg !360

expr_true20:                                      ; preds = %expr_false
  %210 = fsub float 1.000000e+00, %173, !dbg !361
  store float %210, float addrspace(5)* %u_4452911, align 4, !dbg !361
  %211 = fsub float 1.000000e+00, %185, !dbg !361
  store float %211, float addrspace(5)* %v_4452908, align 4, !dbg !361
  br label %if_join21, !dbg !361

if_join21:                                        ; preds = %expr_false, %expr_true20
  %212 = load float, float addrspace(5)* %v_4452908, align 4, !dbg !362
  %213 = load float, float addrspace(5)* %u_4452911, align 4, !dbg !362
  %214 = fmul float %49, %69, !dbg !362
  %215 = fadd float %37, %214, !dbg !362
  %216 = extractelement <4 x float> %192, i32 0, !dbg !362
  %217 = fsub float 1.000000e+00, %212, !dbg !362
  %218 = fsub float %217, %213, !dbg !362
  %219 = fmul float %216, %218, !dbg !362
  %220 = extractelement <4 x float> %196, i32 0, !dbg !362
  %221 = fmul float %220, %213, !dbg !362
  %222 = fadd float %219, %221, !dbg !362
  %223 = extractelement <4 x float> %200, i32 0, !dbg !362
  %224 = fmul float %223, %212, !dbg !362
  %225 = fadd float %222, %224, !dbg !362
  %226 = fsub float %215, %225, !dbg !362
  %227 = fmul float %226, %226, !dbg !362
  %228 = fmul float %53, %69, !dbg !362
  %229 = fadd float %41, %228, !dbg !362
  %230 = extractelement <4 x float> %192, i32 1, !dbg !362
  %231 = fmul float %230, %218, !dbg !362
  %232 = extractelement <4 x float> %196, i32 1, !dbg !362
  %233 = fmul float %232, %213, !dbg !362
  %234 = fadd float %231, %233, !dbg !362
  %235 = extractelement <4 x float> %200, i32 1, !dbg !362
  %236 = fmul float %235, %212, !dbg !362
  %237 = fadd float %234, %236, !dbg !362
  %238 = fsub float %229, %237, !dbg !362
  %239 = fmul float %238, %238, !dbg !362
  %240 = fadd float %227, %239, !dbg !362
  %241 = fmul float %57, %69, !dbg !362
  %242 = fadd float %45, %241, !dbg !362
  %243 = extractelement <4 x float> %192, i32 2, !dbg !362
  %244 = fmul float %243, %218, !dbg !362
  %245 = extractelement <4 x float> %196, i32 2, !dbg !362
  %246 = fmul float %245, %213, !dbg !362
  %247 = fadd float %244, %246, !dbg !362
  %248 = extractelement <4 x float> %200, i32 2, !dbg !362
  %249 = fmul float %248, %212, !dbg !362
  %250 = fadd float %247, %249, !dbg !362
  %251 = fsub float %242, %250, !dbg !362
  %252 = fmul float %251, %251, !dbg !362
  %253 = fadd float %240, %252, !dbg !362
  %254 = call float @__ocml_sqrt_f32(float %253), !dbg !362
  %255 = fcmp ogt float %206, 0.000000e+00, !dbg !363
  br i1 %255, label %expr_true25, label %_cont, !dbg !363

expr_true25:                                      ; preds = %if_join21
  %256 = extractelement <4 x float> %203, i32 0, !dbg !364
  %257 = fmul float %226, %256, !dbg !364
  %258 = extractelement <4 x float> %203, i32 1, !dbg !364
  %259 = fmul float %238, %258, !dbg !364
  %260 = fadd float %257, %259, !dbg !364
  %261 = extractelement <4 x float> %203, i32 2, !dbg !364
  %262 = fmul float %251, %261, !dbg !364
  %263 = fadd float %260, %262, !dbg !364
  %cos = fdiv float %263, %254, !dbg !364
  %264 = fmul float %cos, 0x3FD45F3060000000, !dbg !364
  %265 = fcmp ogt float %264, 0.000000e+00, !dbg !364
  %266 = fcmp ogt float %cos, 0.000000e+00
  %or.cond = and i1 %265, %266, !dbg !364
  br i1 %or.cond, label %expr_true29, label %_cont, !dbg !364

expr_true29:                                      ; preds = %expr_true25
  %267 = extractelement <4 x float> %209, i32 0, !dbg !365
  %268 = insertvalue %9 undef, float %267, 0, !dbg !365
  %269 = extractelement <4 x float> %209, i32 1, !dbg !365
  %270 = insertvalue %9 %268, float %269, 1, !dbg !365
  %271 = extractelement <4 x float> %209, i32 2, !dbg !365
  %272 = insertvalue %9 %270, float %271, 2, !dbg !365
  %phi.bo = fmul float %206, 5.000000e-01, !dbg !365
  br label %_cont, !dbg !365

_cont:                                            ; preds = %if_join21, %expr_true25, %expr_true29
  %.pn115 = phi %9 [ %272, %expr_true29 ], [ zeroinitializer, %expr_true25 ], [ zeroinitializer, %if_join21 ]
  %.pn113 = phi float [ %phi.bo, %expr_true29 ], [ 5.000000e-01, %expr_true25 ], [ 5.000000e-01, %if_join21 ]
  %.pn109 = phi float [ %cos, %expr_true29 ], [ 0.000000e+00, %expr_true25 ], [ 0.000000e+00, %if_join21 ]
  %273 = fsub float %225, %215, !dbg !366
  %274 = fmul float %273, %.pn107, !dbg !366
  %275 = fsub float %237, %229, !dbg !366
  %276 = fmul float %275, %.pn105, !dbg !366
  %277 = fadd float %274, %276, !dbg !366
  %278 = fsub float %250, %242, !dbg !366
  %279 = fmul float %278, %.pn103, !dbg !366
  %280 = fadd float %277, %279, !dbg !366
  %281 = fcmp ogt float %280, 0.000000e+00, !dbg !366
  %282 = extractvalue %2 %_4452649, 0, !dbg !366
  %283 = extractvalue %1 %282, 0, !dbg !366
  %284 = sext i32 %ray_id to i64, !dbg !366
  %285 = getelementptr inbounds [0 x i32], [0 x i32]* %283, i64 0, i64 %284, !dbg !366
  %286 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, !dbg !366
  %287 = fcmp ogt float %.pn109, 0.000000e+00
  %or.cond134 = and i1 %281, %287, !dbg !366
  br i1 %or.cond134, label %expr_true34, label %break, !dbg !366

expr_true34:                                      ; preds = %_cont
  %288 = fmul float %273, %273, !dbg !367
  %289 = fmul float %275, %275, !dbg !367
  %290 = fadd float %288, %289, !dbg !367
  %291 = fmul float %278, %278, !dbg !367
  %292 = fadd float %290, %291, !dbg !367
  %293 = call float @__ocml_sqrt_f32(float %292), !dbg !367
  %inv_d = fdiv float 1.000000e+00, %293, !dbg !368
  %294 = fmul float %273, %inv_d, !dbg !368
  %295 = fmul float %294, %.pn107, !dbg !368
  %296 = fmul float %275, %inv_d, !dbg !368
  %297 = fmul float %296, %.pn105, !dbg !368
  %298 = fadd float %295, %297, !dbg !368
  %299 = fmul float %278, %inv_d, !dbg !368
  %300 = fmul float %299, %.pn103, !dbg !368
  %301 = fadd float %298, %300, !dbg !368
  %.inv = fcmp oge float %301, 0.000000e+00, !dbg !368
  %302 = select i1 %.inv, float %301, float 0.000000e+00, !dbg !368
  %.elt128 = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !369
  %.unpack129 = load float, float addrspace(5)* %.elt128, align 4, !dbg !369
  %.elt130 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 1, !dbg !369
  %.unpack131 = load float, float addrspace(5)* %.elt130, align 4, !dbg !369
  %.elt132 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 2, !dbg !369
  %.unpack133 = load float, float addrspace(5)* %.elt132, align 4, !dbg !369
  %303 = extractvalue %1 %282, 1, !dbg !357
  %304 = sext i32 %ray_id to i64, !dbg !357
  %305 = getelementptr inbounds [0 x float], [0 x float]* %303, i64 0, i64 %304, !dbg !357
  store float %215, float* %305, align 4, !dbg !357
  %306 = extractvalue %1 %282, 2, !dbg !357
  %307 = sext i32 %ray_id to i64, !dbg !357
  %308 = getelementptr inbounds [0 x float], [0 x float]* %306, i64 0, i64 %307, !dbg !357
  store float %229, float* %308, align 4, !dbg !357
  %309 = extractvalue %1 %282, 3, !dbg !357
  %310 = sext i32 %ray_id to i64, !dbg !357
  %311 = getelementptr inbounds [0 x float], [0 x float]* %309, i64 0, i64 %310, !dbg !357
  store float %242, float* %311, align 4, !dbg !357
  %312 = extractvalue %1 %282, 4, !dbg !357
  %313 = sext i32 %ray_id to i64, !dbg !357
  %314 = getelementptr inbounds [0 x float], [0 x float]* %312, i64 0, i64 %313, !dbg !357
  store float %273, float* %314, align 4, !dbg !357
  %315 = extractvalue %1 %282, 5, !dbg !357
  %316 = sext i32 %ray_id to i64, !dbg !357
  %317 = getelementptr inbounds [0 x float], [0 x float]* %315, i64 0, i64 %316, !dbg !357
  store float %275, float* %317, align 4, !dbg !357
  %318 = extractvalue %1 %282, 6, !dbg !357
  %319 = sext i32 %ray_id to i64, !dbg !357
  %320 = getelementptr inbounds [0 x float], [0 x float]* %318, i64 0, i64 %319, !dbg !357
  store float %278, float* %320, align 4, !dbg !357
  %321 = extractvalue %1 %282, 7, !dbg !357
  %322 = sext i32 %ray_id to i64, !dbg !357
  %323 = getelementptr inbounds [0 x float], [0 x float]* %321, i64 0, i64 %322, !dbg !357
  store float 0x3F50624DE0000000, float* %323, align 4, !dbg !357
  %324 = extractvalue %1 %282, 8, !dbg !357
  %325 = sext i32 %ray_id to i64, !dbg !357
  %326 = getelementptr inbounds [0 x float], [0 x float]* %324, i64 0, i64 %325, !dbg !357
  store float 0x3FEFF7CEE0000000, float* %326, align 4, !dbg !357
  %327 = extractvalue %2 %_4452649, 2, !dbg !357
  %328 = sext i32 %ray_id to i64, !dbg !357
  %329 = getelementptr inbounds [0 x float], [0 x float]* %327, i64 0, i64 %328, !dbg !357
  %330 = extractvalue %9 %.pn115, 0, !dbg !357
  %331 = fmul float %.unpack129, 0x3FCD8A0640000000, !dbg !357
  %332 = fmul float %330, %331, !dbg !357
  %cos_e = fmul float %280, %inv_d, !dbg !357
  %333 = fmul float %cos_e, %.pn109, !dbg !357
  %inv_d2 = fmul float %inv_d, %inv_d, !dbg !357
  %334 = fmul float %333, %inv_d2, !dbg !357
  %inv_pdf_l = fdiv float 1.000000e+00, %.pn113, !dbg !357
  %geom_factor = fmul float %334, %inv_pdf_l, !dbg !357
  %335 = fmul float %302, 0x3FD45F3060000000, !dbg !357
  %336 = fmul float %335, %.pn109, !dbg !357
  %337 = fmul float %336, %inv_d2, !dbg !357
  %338 = fmul float %337, %inv_pdf_l, !dbg !357
  %339 = fadd float %338, 1.000000e+00, !dbg !357
  %340 = fdiv float 1.000000e+00, %339, !dbg !357
  %341 = fmul float %geom_factor, %340, !dbg !357
  %342 = fmul float %332, %341, !dbg !357
  store float %342, float* %329, align 4, !dbg !357
  %343 = extractvalue %2 %_4452649, 3, !dbg !357
  %344 = sext i32 %ray_id to i64, !dbg !357
  %345 = getelementptr inbounds [0 x float], [0 x float]* %343, i64 0, i64 %344, !dbg !357
  %346 = extractvalue %9 %.pn115, 1, !dbg !357
  %347 = fmul float %.unpack131, 0x3FCCED9160000000, !dbg !357
  %348 = fmul float %346, %347, !dbg !357
  %349 = fmul float %348, %341, !dbg !357
  store float %349, float* %345, align 4, !dbg !357
  %350 = extractvalue %2 %_4452649, 4, !dbg !357
  %351 = sext i32 %ray_id to i64, !dbg !357
  %352 = getelementptr inbounds [0 x float], [0 x float]* %350, i64 0, i64 %351, !dbg !357
  %353 = extractvalue %9 %.pn115, 2, !dbg !357
  %354 = fmul float %.unpack133, 0x3FCBB4A840000000, !dbg !357
  %355 = fmul float %353, %354, !dbg !357
  %356 = fmul float %355, %341, !dbg !357
  store float %356, float* %352, align 4, !dbg !357
  br label %break, !dbg !357

break:                                            ; preds = %_cont, %expr_true34
  %storemerge = phi i32 [ %61, %expr_true34 ], [ -1, %_cont ], !dbg !370
  store i32 %storemerge, i32* %285, align 4, !dbg !370
  %.elt = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !371
  %.unpack = load float, float addrspace(5)* %.elt, align 4, !dbg !371
  %.elt118 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 1, !dbg !371
  %.unpack119 = load float, float addrspace(5)* %.elt118, align 4, !dbg !371
  %.elt120 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 2, !dbg !371
  %.unpack121 = load float, float addrspace(5)* %.elt120, align 4, !dbg !371
  %357 = fmul float %.unpack, 0x3FCB367A00000000, !dbg !371
  %358 = fmul float %.unpack119, 0x3FE6E2EB20000000, !dbg !371
  %359 = fadd float %357, %358, !dbg !371
  %360 = fmul float %.unpack121, 0x3FB27BB300000000, !dbg !371
  %361 = fadd float %359, %360, !dbg !371
  %prob = fmul float %361, 2.000000e+00, !dbg !371
  %362 = fcmp ogt float %prob, 7.500000e-01, !dbg !371
  %.prob = select i1 %362, float 7.500000e-01, float %prob, !dbg !372
  %363 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 3, !dbg !373
  %364 = load i32, i32 addrspace(5)* %363, align 4, !dbg !373
  %365 = icmp sgt i32 %364, 63, !dbg !373
  br i1 %365, label %expr_true85, label %expr_false52, !dbg !373

expr_false52:                                     ; preds = %break
  %366 = load i32, i32 addrspace(5)* %152, align 4, !dbg !374
  %367 = icmp eq i32 %366, 0, !dbg !374
  %368 = select i1 %367, i32 1, i32 %366, !dbg !374
  %369 = shl i32 %368, 13, !dbg !374
  %370 = xor i32 %368, %369, !dbg !374
  %371 = lshr i32 %370, 17, !dbg !374
  %372 = xor i32 %370, %371, !dbg !374
  %373 = shl i32 %372, 5, !dbg !374
  %374 = xor i32 %372, %373, !dbg !374
  %375 = and i32 %374, 8388607, !dbg !374
  %376 = or i32 %375, 1065353216, !dbg !374
  %377 = bitcast i32 %376 to float, !dbg !374
  %378 = fadd float %377, -1.000000e+00, !dbg !374
  %379 = fcmp ugt float %.prob, %378, !dbg !374
  store i32 %374, i32 addrspace(5)* %152, align 4, !dbg !374
  br i1 %379, label %expr_false53, label %expr_true84, !dbg !374

expr_false53:                                     ; preds = %expr_false52
  %380 = icmp eq i32 %374, 0, !dbg !375
  %381 = select i1 %380, i32 1, i32 %374, !dbg !375
  %382 = shl i32 %381, 13, !dbg !375
  %383 = xor i32 %381, %382, !dbg !375
  %384 = lshr i32 %383, 17, !dbg !375
  %385 = xor i32 %383, %384, !dbg !375
  %386 = shl i32 %385, 5, !dbg !375
  %387 = xor i32 %385, %386, !dbg !375
  store i32 %387, i32 addrspace(5)* %152, align 4, !dbg !375
  %388 = icmp eq i32 %387, 0, !dbg !375
  %389 = select i1 %388, i32 1, i32 %387, !dbg !375
  %390 = shl i32 %389, 13, !dbg !375
  %391 = xor i32 %389, %390, !dbg !375
  %392 = lshr i32 %391, 17, !dbg !375
  %393 = xor i32 %391, %392, !dbg !375
  %394 = shl i32 %393, 5, !dbg !375
  %395 = xor i32 %393, %394, !dbg !375
  store i32 %395, i32 addrspace(5)* %152, align 4, !dbg !375
  %396 = and i32 %395, 8388607, !dbg !375
  %397 = or i32 %396, 1065353216, !dbg !375
  %398 = bitcast i32 %397 to float, !dbg !375
  %399 = fadd float %398, -1.000000e+00, !dbg !375
  %400 = fsub float 1.000000e+00, %399, !dbg !375
  %401 = call float @__ocml_sqrt_f32(float %400), !dbg !375
  %402 = call float @__ocml_sqrt_f32(float %399), !dbg !376
  %403 = and i32 %387, 8388607, !dbg !377
  %404 = or i32 %403, 1065353216, !dbg !377
  %405 = bitcast i32 %404 to float, !dbg !377
  %406 = fadd float %405, -1.000000e+00, !dbg !377
  %phi = fmul float %406, 0x401921FB60000000, !dbg !377
  %407 = call float @__ocml_cos_f32(float %phi), !dbg !377
  %408 = call float @__ocml_sin_f32(float %phi), !dbg !378
  %409 = fmul float %401, 0x3FD45F3060000000, !dbg !379
  %410 = fcmp ogt float %409, 0.000000e+00, !dbg !379
  %411 = fcmp oge float %.pn103, 0.000000e+00, !dbg !379
  %412 = select i1 %411, float 1.000000e+00, float -1.000000e+00, !dbg !379
  %413 = fmul float %412, %.pn107, !dbg !379
  %414 = fmul float %413, %.pn107, !dbg !379
  %415 = fadd float %412, %.pn103, !dbg !379
  %a = fdiv float -1.000000e+00, %415, !dbg !379
  %416 = fmul float %414, %a, !dbg !379
  %417 = fadd float %416, 1.000000e+00, !dbg !379
  %x = fmul float %402, %407, !dbg !379
  %418 = fmul float %417, %x, !dbg !379
  %419 = fmul float %.pn107, %.pn105, !dbg !379
  %b = fmul float %419, %a, !dbg !379
  %y = fmul float %402, %408, !dbg !379
  %420 = fmul float %b, %y, !dbg !379
  %421 = fadd float %418, %420, !dbg !379
  %422 = fmul float %.pn107, %401, !dbg !379
  %423 = fadd float %421, %422, !dbg !379
  %424 = fmul float %412, %b, !dbg !379
  %425 = fmul float %424, %x, !dbg !379
  %426 = fmul float %.pn105, %.pn105, !dbg !379
  %427 = fmul float %426, %a, !dbg !379
  %428 = fadd float %412, %427, !dbg !379
  %429 = fmul float %428, %y, !dbg !379
  %430 = fadd float %425, %429, !dbg !379
  %431 = fmul float %.pn105, %401, !dbg !379
  %432 = fadd float %430, %431, !dbg !379
  %433 = fneg float %412, !dbg !379
  %434 = fmul float %.pn107, %433, !dbg !379
  %435 = fmul float %434, %x, !dbg !379
  %436 = fmul float %.pn105, %y, !dbg !379
  %437 = fsub float %435, %436, !dbg !379
  %438 = fmul float %.pn103, %401, !dbg !379
  %439 = fadd float %437, %438, !dbg !379
  br i1 %410, label %expr_true63, label %infix_result, !dbg !379

expr_true63:                                      ; preds = %expr_false53
  %440 = fmul float %423, %.pn101, !dbg !380
  %441 = fmul float %432, %.pn99, !dbg !380
  %442 = fadd float %440, %441, !dbg !380
  %443 = fmul float %439, %.pn97, !dbg !380
  %444 = fadd float %442, %443, !dbg !380
  %445 = fcmp ogt float %444, 0.000000e+00, !dbg !380
  br i1 %445, label %expr_true65, label %infix_result, !dbg !380

expr_true65:                                      ; preds = %expr_true63
  br label %infix_result, !dbg !381

infix_result:                                     ; preds = %expr_false53, %expr_true63, %expr_true65
  %infix_result66 = phi i1 [ true, %expr_true65 ], [ false, %expr_true63 ], [ false, %expr_false53 ], !dbg !382
  %. = select i1 %infix_result66, float %409, float 1.000000e+00, !dbg !383
  %if_join74 = select i1 %infix_result66, %9 { float 0x3FCD8A0640000000, float 0x3FCCED9160000000, float 0x3FCBB4A840000000 }, %9 zeroinitializer, !dbg !384
  %.elt122 = getelementptr inbounds %9, %9 addrspace(5)* %286, i32 0, i32 0, !dbg !385
  %.unpack123 = load float, float addrspace(5)* %.elt122, align 4, !dbg !385
  %.elt124 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 1, !dbg !385
  %.unpack125 = load float, float addrspace(5)* %.elt124, align 4, !dbg !385
  %.elt126 = getelementptr inbounds %8, %8 addrspace(5)* %state_4452699, i32 0, i32 1, i32 2, !dbg !385
  %.unpack127 = load float, float addrspace(5)* %.elt126, align 4, !dbg !385
  %446 = load i32, i32 addrspace(5)* %152, align 4, !dbg !357
  %447 = load i32, i32 addrspace(5)* %363, align 4, !dbg !357
  store float %215, float* %36, align 4, !dbg !357
  store float %229, float* %40, align 4, !dbg !357
  store float %242, float* %44, align 4, !dbg !357
  store float %423, float* %48, align 4, !dbg !357
  store float %432, float* %52, align 4, !dbg !357
  store float %439, float* %56, align 4, !dbg !357
  %448 = extractvalue %1 %33, 7, !dbg !357
  %449 = sext i32 %ray_id to i64, !dbg !357
  %450 = getelementptr inbounds [0 x float], [0 x float]* %448, i64 0, i64 %449, !dbg !357
  store float 0x3F50624DE0000000, float* %450, align 4, !dbg !357
  %451 = extractvalue %1 %33, 8, !dbg !357
  %452 = sext i32 %ray_id to i64, !dbg !357
  %453 = getelementptr inbounds [0 x float], [0 x float]* %451, i64 0, i64 %452, !dbg !357
  store float 0x47EFFFFFE0000000, float* %453, align 4, !dbg !357
  store i32 %446, i32* %11, align 4, !dbg !357
  %454 = extractvalue %9 %if_join74, 0, !dbg !357
  %455 = fmul float %.unpack123, %454, !dbg !357
  %456 = fmul float %., %.prob, !dbg !357
  %457 = fdiv float %401, %456, !dbg !357
  %458 = fmul float %455, %457, !dbg !357
  store float %458, float* %15, align 4, !dbg !357
  %459 = extractvalue %9 %if_join74, 1, !dbg !357
  %460 = fmul float %.unpack125, %459, !dbg !357
  %461 = fmul float %460, %457, !dbg !357
  store float %461, float* %19, align 4, !dbg !357
  %462 = extractvalue %9 %if_join74, 2, !dbg !357
  %463 = fmul float %.unpack127, %462, !dbg !357
  %464 = fmul float %463, %457, !dbg !357
  store float %464, float* %23, align 4, !dbg !357
  %465 = fdiv float 1.000000e+00, %., !dbg !357
  store float %465, float* %27, align 4, !dbg !357
  %466 = add nsw i32 %447, 1, !dbg !357
  store i32 %466, i32* %31, align 4, !dbg !357
  ret void, !dbg !357

expr_true84:                                      ; preds = %expr_false52
  store i32 -1, i32* %60, align 4, !dbg !375
  ret void, !dbg !375

expr_true85:                                      ; preds = %break
  store i32 -1, i32* %60, align 4, !dbg !374
  ret void, !dbg !374

expr_true86:                                      ; preds = %lambda_4084754
  ret void, !dbg !356
}

define amdgpu_kernel void @lambda_4098921([0 x float] addrspace(1)* %_4450632, [0 x <4 x float>] addrspace(1)* %_4450633, [0 x <4 x float>] addrspace(1)* %_4450634, [0 x i32] addrspace(1)* %_4450635, [0 x <4 x float>] addrspace(1)* %_4450636, i32 %_4450637, [0 x <4 x i32>] addrspace(1)* %_4450638, %2 %_4450639, [0 x <4 x float>] addrspace(1)* %_4450640, [0 x float]* %_4450641, [0 x <4 x float>] addrspace(1)* %_4450642, %0 %_4450643) local_unnamed_addr !dbg !386 !reqd_work_group_size !7 {
lambda_4098921:
  %v_4451046 = alloca float, align 4, addrspace(5)
  %u_4451049 = alloca float, align 4, addrspace(5)
  %state_4450710 = alloca %8, align 4, addrspace(5)
  %0 = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !388
  %1 = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !389
  %2 = call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr(), !dbg !390
  %3 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4, !dbg !389
  %4 = bitcast i8 addrspace(4)* %3 to i16 addrspace(4)*, !dbg !389
  %5 = load i16, i16 addrspace(4)* %4, align 4, !dbg !389
  %6 = zext i16 %5 to i32, !dbg !391
  %7 = mul nsw i32 %1, %6, !dbg !391
  %8 = add nsw i32 %0, %7, !dbg !391
  %.not = icmp slt i32 %8, %_4450637, !dbg !391
  br i1 %.not, label %expr_false, label %expr_true99, !dbg !391

expr_false:                                       ; preds = %lambda_4098921
  %9 = extractvalue %0 %_4450643, 6, !dbg !392
  %10 = sext i32 %8 to i64, !dbg !392
  %11 = getelementptr inbounds [0 x i32], [0 x i32]* %9, i64 0, i64 %10, !dbg !392
  %12 = load i32, i32* %11, align 4, !dbg !392
  %13 = extractvalue %0 %_4450643, 8, !dbg !392
  %14 = sext i32 %8 to i64, !dbg !392
  %15 = getelementptr inbounds [0 x float], [0 x float]* %13, i64 0, i64 %14, !dbg !392
  %16 = load float, float* %15, align 4, !dbg !392
  %17 = extractvalue %0 %_4450643, 9, !dbg !392
  %18 = sext i32 %8 to i64, !dbg !392
  %19 = getelementptr inbounds [0 x float], [0 x float]* %17, i64 0, i64 %18, !dbg !392
  %20 = load float, float* %19, align 4, !dbg !392
  %21 = extractvalue %0 %_4450643, 10, !dbg !392
  %22 = sext i32 %8 to i64, !dbg !392
  %23 = getelementptr inbounds [0 x float], [0 x float]* %21, i64 0, i64 %22, !dbg !392
  %24 = load float, float* %23, align 4, !dbg !392
  %25 = extractvalue %0 %_4450643, 7, !dbg !392
  %26 = sext i32 %8 to i64, !dbg !392
  %27 = getelementptr inbounds [0 x float], [0 x float]* %25, i64 0, i64 %26, !dbg !392
  %28 = load float, float* %27, align 4, !dbg !392
  %29 = extractvalue %0 %_4450643, 11, !dbg !392
  %30 = sext i32 %8 to i64, !dbg !392
  %31 = getelementptr inbounds [0 x i32], [0 x i32]* %29, i64 0, i64 %30, !dbg !392
  %32 = load i32, i32* %31, align 4, !dbg !392
  %state_4450710.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 0, !dbg !392
  store i32 %12, i32 addrspace(5)* %state_4450710.repack, align 4, !dbg !392
  %state_4450710.repack100.repack = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 0, !dbg !392
  store float %16, float addrspace(5)* %state_4450710.repack100.repack, align 4, !dbg !392
  %state_4450710.repack100.repack106 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 1, !dbg !392
  store float %20, float addrspace(5)* %state_4450710.repack100.repack106, align 4, !dbg !392
  %state_4450710.repack100.repack108 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 2, !dbg !392
  store float %24, float addrspace(5)* %state_4450710.repack100.repack108, align 4, !dbg !392
  %state_4450710.repack102 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 2, !dbg !392
  store float %28, float addrspace(5)* %state_4450710.repack102, align 4, !dbg !392
  %state_4450710.repack104 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 3, !dbg !392
  store i32 %32, i32 addrspace(5)* %state_4450710.repack104, align 4, !dbg !392
  %33 = extractvalue %0 %_4450643, 0, !dbg !392
  %34 = extractvalue %1 %33, 1, !dbg !392
  %35 = sext i32 %8 to i64, !dbg !392
  %36 = getelementptr inbounds [0 x float], [0 x float]* %34, i64 0, i64 %35, !dbg !392
  %37 = load float, float* %36, align 4, !dbg !392
  %38 = extractvalue %1 %33, 2, !dbg !392
  %39 = sext i32 %8 to i64, !dbg !392
  %40 = getelementptr inbounds [0 x float], [0 x float]* %38, i64 0, i64 %39, !dbg !392
  %41 = load float, float* %40, align 4, !dbg !392
  %42 = extractvalue %1 %33, 3, !dbg !392
  %43 = sext i32 %8 to i64, !dbg !392
  %44 = getelementptr inbounds [0 x float], [0 x float]* %42, i64 0, i64 %43, !dbg !392
  %45 = load float, float* %44, align 4, !dbg !392
  %46 = extractvalue %1 %33, 4, !dbg !392
  %47 = sext i32 %8 to i64, !dbg !392
  %48 = getelementptr inbounds [0 x float], [0 x float]* %46, i64 0, i64 %47, !dbg !392
  %49 = load float, float* %48, align 4, !dbg !392
  %50 = extractvalue %1 %33, 5, !dbg !392
  %51 = sext i32 %8 to i64, !dbg !392
  %52 = getelementptr inbounds [0 x float], [0 x float]* %50, i64 0, i64 %51, !dbg !392
  %53 = load float, float* %52, align 4, !dbg !392
  %54 = extractvalue %1 %33, 6, !dbg !392
  %55 = sext i32 %8 to i64, !dbg !392
  %56 = getelementptr inbounds [0 x float], [0 x float]* %54, i64 0, i64 %55, !dbg !392
  %57 = load float, float* %56, align 4, !dbg !392
  %58 = fneg float %53, !dbg !393
  %59 = extractvalue %1 %33, 0, !dbg !394
  %60 = sext i32 %8 to i64, !dbg !394
  %61 = getelementptr inbounds [0 x i32], [0 x i32]* %59, i64 0, i64 %60, !dbg !394
  %62 = load i32, i32* %61, align 4, !dbg !394
  %63 = extractvalue %0 %_4450643, 2, !dbg !394
  %64 = sext i32 %8 to i64, !dbg !394
  %65 = getelementptr inbounds [0 x i32], [0 x i32]* %63, i64 0, i64 %64, !dbg !394
  %66 = load i32, i32* %65, align 4, !dbg !394
  %67 = extractvalue %0 %_4450643, 3, !dbg !394
  %68 = sext i32 %8 to i64, !dbg !394
  %69 = getelementptr inbounds [0 x float], [0 x float]* %67, i64 0, i64 %68, !dbg !394
  %70 = load float, float* %69, align 4, !dbg !394
  %71 = extractvalue %0 %_4450643, 4, !dbg !394
  %72 = sext i32 %8 to i64, !dbg !394
  %73 = getelementptr inbounds [0 x float], [0 x float]* %71, i64 0, i64 %72, !dbg !394
  %74 = load float, float* %73, align 4, !dbg !394
  %75 = extractvalue %0 %_4450643, 5, !dbg !394
  %76 = sext i32 %8 to i64, !dbg !394
  %77 = getelementptr inbounds [0 x float], [0 x float]* %75, i64 0, i64 %76, !dbg !394
  %78 = load float, float* %77, align 4, !dbg !394
  %79 = sext i32 %66 to i64, !dbg !394
  %80 = getelementptr inbounds [0 x <4 x i32>], [0 x <4 x i32>] addrspace(1)* %_4450638, i64 0, i64 %79, !dbg !394
  %81 = load <4 x i32>, <4 x i32> addrspace(1)* %80, align 16, !dbg !394
  %82 = sext i32 %66 to i64, !dbg !394
  %83 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450636, i64 0, i64 %82, !dbg !394
  %84 = load <4 x float>, <4 x float> addrspace(1)* %83, align 16, !dbg !394
  %85 = extractelement <4 x i32> %81, i32 0, !dbg !394
  %86 = sext i32 %85 to i64, !dbg !394
  %87 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450642, i64 0, i64 %86, !dbg !394
  %88 = load <4 x float>, <4 x float> addrspace(1)* %87, align 16, !dbg !394
  %89 = extractelement <4 x i32> %81, i32 1, !dbg !394
  %90 = sext i32 %89 to i64, !dbg !394
  %91 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450642, i64 0, i64 %90, !dbg !394
  %92 = load <4 x float>, <4 x float> addrspace(1)* %91, align 16, !dbg !394
  %93 = extractelement <4 x i32> %81, i32 2, !dbg !394
  %94 = sext i32 %93 to i64, !dbg !394
  %95 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450642, i64 0, i64 %94, !dbg !394
  %96 = load <4 x float>, <4 x float> addrspace(1)* %95, align 16, !dbg !394
  %97 = fsub float 1.000000e+00, %74, !dbg !394
  %98 = fsub float %97, %78, !dbg !394
  %99 = extractelement <4 x float> %88, i32 0, !dbg !394
  %100 = fmul float %98, %99, !dbg !394
  %101 = extractelement <4 x float> %92, i32 0, !dbg !394
  %102 = fmul float %74, %101, !dbg !394
  %103 = fadd float %100, %102, !dbg !394
  %104 = extractelement <4 x float> %96, i32 0, !dbg !394
  %105 = fmul float %78, %104, !dbg !394
  %106 = fadd float %103, %105, !dbg !394
  %107 = fmul float %106, %106, !dbg !394
  %108 = extractelement <4 x float> %88, i32 1, !dbg !394
  %109 = fmul float %98, %108, !dbg !394
  %110 = extractelement <4 x float> %92, i32 1, !dbg !394
  %111 = fmul float %74, %110, !dbg !394
  %112 = fadd float %109, %111, !dbg !394
  %113 = extractelement <4 x float> %96, i32 1, !dbg !394
  %114 = fmul float %78, %113, !dbg !394
  %115 = fadd float %112, %114, !dbg !394
  %116 = fmul float %115, %115, !dbg !394
  %117 = fadd float %107, %116, !dbg !394
  %118 = extractelement <4 x float> %88, i32 2, !dbg !394
  %119 = fmul float %98, %118, !dbg !394
  %120 = extractelement <4 x float> %92, i32 2, !dbg !394
  %121 = fmul float %74, %120, !dbg !394
  %122 = fadd float %119, %121, !dbg !394
  %123 = extractelement <4 x float> %96, i32 2, !dbg !394
  %124 = fmul float %78, %123, !dbg !394
  %125 = fadd float %122, %124, !dbg !394
  %126 = fmul float %125, %125, !dbg !394
  %127 = fadd float %117, %126, !dbg !394
  %128 = call float @__ocml_sqrt_f32(float %127), !dbg !394
  %129 = extractelement <4 x float> %84, i32 0, !dbg !395
  %130 = fmul float %49, %129, !dbg !395
  %131 = extractelement <4 x float> %84, i32 1, !dbg !395
  %132 = fmul float %53, %131, !dbg !395
  %133 = fadd float %130, %132, !dbg !395
  %134 = extractelement <4 x float> %84, i32 2, !dbg !395
  %135 = fmul float %57, %134, !dbg !395
  %136 = fadd float %133, %135, !dbg !395
  %is_entering = fcmp ole float %136, 0.000000e+00, !dbg !395
  %137 = fneg float %129, !dbg !395
  %138 = fneg float %131, !dbg !395
  %139 = fneg float %134, !dbg !395
  %.pn114 = select i1 %is_entering, float %129, float %137, !dbg !395
  %.pn112 = select i1 %is_entering, float %131, float %138, !dbg !395
  %.pn110 = select i1 %is_entering, float %134, float %139, !dbg !395
  %140 = fdiv float 1.000000e+00, %128, !dbg !396
  %141 = fmul float %106, %140, !dbg !396
  %142 = fmul float %49, %141, !dbg !396
  %143 = fmul float %115, %140, !dbg !396
  %144 = fmul float %53, %143, !dbg !396
  %145 = fadd float %142, %144, !dbg !396
  %146 = fmul float %125, %140, !dbg !396
  %147 = fmul float %57, %146, !dbg !396
  %148 = fadd float %145, %147, !dbg !396
  %149 = fcmp ugt float %148, 0.000000e+00, !dbg !396
  %150 = fneg float %141, !dbg !396
  %151 = fneg float %143, !dbg !396
  %152 = fneg float %146, !dbg !396
  %.pn120 = select i1 %149, float %150, float %141, !dbg !396
  %.pn118 = select i1 %149, float %151, float %143, !dbg !396
  %.pn116 = select i1 %149, float %152, float %146, !dbg !396
  %153 = sext i32 %66 to i64, !dbg !397
  %154 = getelementptr inbounds [0 x i32], [0 x i32] addrspace(1)* %_4450635, i64 0, i64 %153, !dbg !397
  %155 = load i32, i32 addrspace(1)* %154, align 4, !dbg !397
  %156 = sext i32 %155 to i64, !dbg !397
  %157 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450633, i64 0, i64 %156, !dbg !397
  %158 = load <4 x float>, <4 x float> addrspace(1)* %157, align 16, !dbg !397
  %159 = sext i32 %155 to i64, !dbg !397
  %160 = getelementptr inbounds [0 x float], [0 x float] addrspace(1)* %_4450632, i64 0, i64 %159, !dbg !397
  %161 = load float, float addrspace(1)* %160, align 4, !dbg !397
  %162 = sext i32 %155 to i64, !dbg !397
  %163 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450640, i64 0, i64 %162, !dbg !397
  %164 = load <4 x float>, <4 x float> addrspace(1)* %163, align 16, !dbg !397
  %165 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, !dbg !397
  br i1 %is_entering, label %expr_true20, label %break, !dbg !397

expr_true20:                                      ; preds = %expr_false
  %166 = extractelement <4 x float> %158, i32 0, !dbg !398
  %167 = extractelement <4 x float> %158, i32 1, !dbg !398
  %168 = fmul float %167, %58, !dbg !398
  %169 = fmul float %49, %166, !dbg !398
  %170 = fsub float %168, %169, !dbg !398
  %171 = extractelement <4 x float> %158, i32 2, !dbg !398
  %172 = fmul float %57, %171, !dbg !398
  %173 = fsub float %170, %172, !dbg !398
  %174 = fmul float %173, 0x3FD45F3060000000, !dbg !398
  %175 = fcmp ogt float %174, 0.000000e+00, !dbg !398
  br i1 %175, label %expr_true22, label %_cont, !dbg !398

expr_true22:                                      ; preds = %expr_true20
  %176 = extractelement <4 x float> %164, i32 0, !dbg !399
  %177 = insertvalue %9 undef, float %176, 0, !dbg !399
  %178 = extractelement <4 x float> %164, i32 1, !dbg !399
  %179 = insertvalue %9 %177, float %178, 1, !dbg !399
  %180 = extractelement <4 x float> %164, i32 2, !dbg !399
  %181 = insertvalue %9 %179, float %180, 2, !dbg !399
  %182 = insertvalue %16 undef, %9 %181, 0, !dbg !399
  %183 = insertvalue %16 %182, float %161, 1, !dbg !399
  %184 = insertvalue %16 %183, float %174, 2, !dbg !399
  br label %_cont, !dbg !399

_cont:                                            ; preds = %expr_true20, %expr_true22
  %_cont23 = phi %16 [ %184, %expr_true22 ], [ { %9 zeroinitializer, float 1.000000e+00, float 1.000000e+00 }, %expr_true20 ], !dbg !400
  %185 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 2, !dbg !400
  %186 = load float, float addrspace(5)* %185, align 4, !dbg !400
  %.elt147 = getelementptr inbounds %9, %9 addrspace(5)* %165, i32 0, i32 0, !dbg !400
  %.unpack148 = load float, float addrspace(5)* %.elt147, align 4, !dbg !400
  %.elt149 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 1, !dbg !400
  %.unpack150 = load float, float addrspace(5)* %.elt149, align 4, !dbg !400
  %.elt151 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 2, !dbg !400
  %.unpack152 = load float, float addrspace(5)* %.elt151, align 4, !dbg !400
  %187 = mul nsw i32 %62, 3, !dbg !400
  %188 = sext i32 %187 to i64, !dbg !400
  %189 = getelementptr inbounds [0 x float], [0 x float]* %_4450641, i64 0, i64 %188, !dbg !400
  %190 = addrspacecast float* %189 to float addrspace(1)*, !dbg !400
  %191 = extractvalue %16 %_cont23, 0, !dbg !400
  %192 = extractvalue %9 %191, 0, !dbg !400
  %193 = fmul float %.unpack148, %192, !dbg !400
  %194 = fmul float %186, %70, !dbg !400
  %195 = fmul float %194, %70, !dbg !400
  %196 = fmul float %.pn118, %58, !dbg !400
  %197 = fmul float %49, %.pn120, !dbg !400
  %198 = fsub float %196, %197, !dbg !400
  %199 = fmul float %57, %.pn116, !dbg !400
  %200 = fsub float %198, %199, !dbg !400
  %next_mis = fdiv float %195, %200, !dbg !400
  %201 = fmul float %next_mis, 5.000000e-01, !dbg !400
  %202 = extractvalue %16 %_cont23, 1, !dbg !400
  %203 = fmul float %201, %202, !dbg !400
  %204 = fadd float %203, 1.000000e+00, !dbg !400
  %mis = fdiv float 1.000000e+00, %204, !dbg !400
  %205 = fmul float %193, %mis, !dbg !400
  %206 = fmul float %205, 2.500000e-01, !dbg !400
  %207 = atomicrmw fadd float addrspace(1)* %190, float %206 syncscope("agent") monotonic, !dbg !400
  %208 = getelementptr inbounds float, float* %189, i64 1, !dbg !401
  %209 = addrspacecast float* %208 to float addrspace(1)*, !dbg !401
  %210 = extractvalue %9 %191, 1, !dbg !401
  %211 = fmul float %.unpack150, %210, !dbg !401
  %212 = fmul float %211, %mis, !dbg !401
  %213 = fmul float %212, 2.500000e-01, !dbg !401
  %214 = atomicrmw fadd float addrspace(1)* %209, float %213 syncscope("agent") monotonic, !dbg !401
  %215 = getelementptr inbounds float, float* %189, i64 2, !dbg !402
  %216 = addrspacecast float* %215 to float addrspace(1)*, !dbg !402
  %217 = extractvalue %9 %191, 2, !dbg !402
  %218 = fmul float %.unpack152, %217, !dbg !402
  %219 = fmul float %218, %mis, !dbg !402
  %220 = fmul float %219, 2.500000e-01, !dbg !402
  %221 = atomicrmw fadd float addrspace(1)* %216, float %220 syncscope("agent") monotonic, !dbg !402
  br label %break, !dbg !403

break:                                            ; preds = %expr_false, %_cont
  %222 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 0, !dbg !404
  %223 = load i32, i32 addrspace(5)* %222, align 4, !dbg !404
  %224 = icmp eq i32 %223, 0, !dbg !404
  %225 = select i1 %224, i32 1, i32 %223, !dbg !404
  %226 = shl i32 %225, 13, !dbg !404
  %227 = xor i32 %225, %226, !dbg !404
  %228 = lshr i32 %227, 17, !dbg !404
  %229 = xor i32 %227, %228, !dbg !404
  %230 = shl i32 %229, 5, !dbg !404
  %231 = xor i32 %229, %230, !dbg !404
  %232 = icmp eq i32 %231, 0, !dbg !404
  %233 = select i1 %232, i32 1, i32 %231, !dbg !404
  %234 = shl i32 %233, 13, !dbg !404
  %235 = xor i32 %233, %234, !dbg !404
  %236 = lshr i32 %235, 17, !dbg !404
  %237 = xor i32 %235, %236, !dbg !404
  %238 = shl i32 %237, 5, !dbg !404
  %239 = xor i32 %237, %238, !dbg !404
  %240 = and i32 %239, 8388607, !dbg !404
  %241 = or i32 %240, 1065353216, !dbg !404
  %242 = bitcast i32 %241 to float, !dbg !404
  %243 = fadd float %242, -1.000000e+00, !dbg !404
  %244 = icmp eq i32 %239, 0, !dbg !404
  %245 = select i1 %244, i32 1, i32 %239, !dbg !404
  %246 = shl i32 %245, 13, !dbg !404
  %247 = xor i32 %245, %246, !dbg !404
  %248 = lshr i32 %247, 17, !dbg !404
  %249 = xor i32 %247, %248, !dbg !404
  %250 = shl i32 %249, 5, !dbg !404
  %251 = xor i32 %249, %250, !dbg !404
  %252 = and i32 %251, 8388607, !dbg !404
  %253 = or i32 %252, 1065353216, !dbg !404
  %254 = bitcast i32 %253 to float, !dbg !404
  %255 = fadd float %254, -1.000000e+00, !dbg !404
  %256 = fadd float %243, %255, !dbg !404
  %257 = fcmp ogt float %256, 1.000000e+00, !dbg !404
  store i32 %231, i32 addrspace(5)* %222, align 4, !dbg !404
  %258 = and i32 %229, 1, !dbg !404
  %259 = mul nuw nsw i32 %258, 3, !dbg !404
  %260 = zext i32 %259 to i64, !dbg !404
  %261 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450634, i64 0, i64 %260, !dbg !404
  %262 = load <4 x float>, <4 x float> addrspace(1)* %261, align 16, !dbg !404
  %263 = add nuw nsw i32 %259, 1, !dbg !404
  %264 = zext i32 %263 to i64, !dbg !404
  %265 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450634, i64 0, i64 %264, !dbg !404
  %266 = load <4 x float>, <4 x float> addrspace(1)* %265, align 16, !dbg !404
  %267 = add nuw nsw i32 %259, 2, !dbg !404
  %268 = zext i32 %267 to i64, !dbg !404
  %269 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450634, i64 0, i64 %268, !dbg !404
  %270 = load <4 x float>, <4 x float> addrspace(1)* %269, align 16, !dbg !404
  %271 = zext i32 %258 to i64, !dbg !404
  %272 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450633, i64 0, i64 %271, !dbg !404
  %273 = load <4 x float>, <4 x float> addrspace(1)* %272, align 16, !dbg !404
  %274 = zext i32 %258 to i64, !dbg !404
  %275 = getelementptr inbounds [0 x float], [0 x float] addrspace(1)* %_4450632, i64 0, i64 %274, !dbg !404
  %276 = load float, float addrspace(1)* %275, align 4, !dbg !404
  %277 = zext i32 %258 to i64, !dbg !404
  %278 = getelementptr inbounds [0 x <4 x float>], [0 x <4 x float>] addrspace(1)* %_4450640, i64 0, i64 %277, !dbg !404
  %279 = load <4 x float>, <4 x float> addrspace(1)* %278, align 16, !dbg !404
  store i32 %251, i32 addrspace(5)* %222, align 4, !dbg !404
  store float %243, float addrspace(5)* %u_4451049, align 4, !dbg !404
  store float %255, float addrspace(5)* %v_4451046, align 4, !dbg !404
  br i1 %257, label %expr_true31, label %if_join32, !dbg !404

expr_true31:                                      ; preds = %break
  %280 = fsub float 1.000000e+00, %243, !dbg !405
  store float %280, float addrspace(5)* %u_4451049, align 4, !dbg !405
  %281 = fsub float 1.000000e+00, %255, !dbg !405
  store float %281, float addrspace(5)* %v_4451046, align 4, !dbg !405
  br label %if_join32, !dbg !405

if_join32:                                        ; preds = %break, %expr_true31
  %282 = load float, float addrspace(5)* %v_4451046, align 4, !dbg !406
  %283 = load float, float addrspace(5)* %u_4451049, align 4, !dbg !406
  %284 = fmul float %49, %70, !dbg !406
  %285 = fadd float %37, %284, !dbg !406
  %286 = extractelement <4 x float> %262, i32 0, !dbg !406
  %287 = fsub float 1.000000e+00, %282, !dbg !406
  %288 = fsub float %287, %283, !dbg !406
  %289 = fmul float %286, %288, !dbg !406
  %290 = extractelement <4 x float> %266, i32 0, !dbg !406
  %291 = fmul float %290, %283, !dbg !406
  %292 = fadd float %289, %291, !dbg !406
  %293 = extractelement <4 x float> %270, i32 0, !dbg !406
  %294 = fmul float %293, %282, !dbg !406
  %295 = fadd float %292, %294, !dbg !406
  %296 = fsub float %285, %295, !dbg !406
  %297 = fmul float %296, %296, !dbg !406
  %298 = fmul float %53, %70, !dbg !406
  %299 = fadd float %41, %298, !dbg !406
  %300 = extractelement <4 x float> %262, i32 1, !dbg !406
  %301 = fmul float %300, %288, !dbg !406
  %302 = extractelement <4 x float> %266, i32 1, !dbg !406
  %303 = fmul float %302, %283, !dbg !406
  %304 = fadd float %301, %303, !dbg !406
  %305 = extractelement <4 x float> %270, i32 1, !dbg !406
  %306 = fmul float %305, %282, !dbg !406
  %307 = fadd float %304, %306, !dbg !406
  %308 = fsub float %299, %307, !dbg !406
  %309 = fmul float %308, %308, !dbg !406
  %310 = fadd float %297, %309, !dbg !406
  %311 = fmul float %57, %70, !dbg !406
  %312 = fadd float %45, %311, !dbg !406
  %313 = extractelement <4 x float> %262, i32 2, !dbg !406
  %314 = fmul float %313, %288, !dbg !406
  %315 = extractelement <4 x float> %266, i32 2, !dbg !406
  %316 = fmul float %315, %283, !dbg !406
  %317 = fadd float %314, %316, !dbg !406
  %318 = extractelement <4 x float> %270, i32 2, !dbg !406
  %319 = fmul float %318, %282, !dbg !406
  %320 = fadd float %317, %319, !dbg !406
  %321 = fsub float %312, %320, !dbg !406
  %322 = fmul float %321, %321, !dbg !406
  %323 = fadd float %310, %322, !dbg !406
  %324 = call float @__ocml_sqrt_f32(float %323), !dbg !406
  %325 = fcmp ogt float %276, 0.000000e+00, !dbg !407
  br i1 %325, label %expr_true36, label %_cont41, !dbg !407

expr_true36:                                      ; preds = %if_join32
  %326 = extractelement <4 x float> %273, i32 0, !dbg !408
  %327 = fmul float %296, %326, !dbg !408
  %328 = extractelement <4 x float> %273, i32 1, !dbg !408
  %329 = fmul float %308, %328, !dbg !408
  %330 = fadd float %327, %329, !dbg !408
  %331 = extractelement <4 x float> %273, i32 2, !dbg !408
  %332 = fmul float %321, %331, !dbg !408
  %333 = fadd float %330, %332, !dbg !408
  %cos = fdiv float %333, %324, !dbg !408
  %334 = fmul float %cos, 0x3FD45F3060000000, !dbg !408
  %335 = fcmp ogt float %334, 0.000000e+00, !dbg !408
  %336 = fcmp ogt float %cos, 0.000000e+00
  %or.cond = and i1 %335, %336, !dbg !408
  br i1 %or.cond, label %expr_true40, label %_cont41, !dbg !408

expr_true40:                                      ; preds = %expr_true36
  %337 = extractelement <4 x float> %279, i32 0, !dbg !409
  %338 = insertvalue %9 undef, float %337, 0, !dbg !409
  %339 = extractelement <4 x float> %279, i32 1, !dbg !409
  %340 = insertvalue %9 %338, float %339, 1, !dbg !409
  %341 = extractelement <4 x float> %279, i32 2, !dbg !409
  %342 = insertvalue %9 %340, float %341, 2, !dbg !409
  %phi.bo = fmul float %276, 5.000000e-01, !dbg !409
  br label %_cont41, !dbg !409

_cont41:                                          ; preds = %if_join32, %expr_true36, %expr_true40
  %.pn128 = phi %9 [ %342, %expr_true40 ], [ zeroinitializer, %expr_true36 ], [ zeroinitializer, %if_join32 ]
  %.pn126 = phi float [ %phi.bo, %expr_true40 ], [ 5.000000e-01, %expr_true36 ], [ 5.000000e-01, %if_join32 ]
  %.pn122 = phi float [ %cos, %expr_true40 ], [ 0.000000e+00, %expr_true36 ], [ 0.000000e+00, %if_join32 ]
  %343 = fsub float %295, %285, !dbg !410
  %344 = fmul float %343, %.pn120, !dbg !410
  %345 = fsub float %307, %299, !dbg !410
  %346 = fmul float %345, %.pn118, !dbg !410
  %347 = fadd float %344, %346, !dbg !410
  %348 = fsub float %320, %312, !dbg !410
  %349 = fmul float %348, %.pn116, !dbg !410
  %350 = fadd float %347, %349, !dbg !410
  %351 = fcmp ogt float %350, 0.000000e+00, !dbg !410
  %352 = extractvalue %2 %_4450639, 0, !dbg !410
  %353 = extractvalue %1 %352, 0, !dbg !410
  %354 = sext i32 %8 to i64, !dbg !410
  %355 = getelementptr inbounds [0 x i32], [0 x i32]* %353, i64 0, i64 %354, !dbg !410
  %356 = fcmp ogt float %.pn122, 0.000000e+00
  %or.cond153 = and i1 %351, %356, !dbg !410
  br i1 %or.cond153, label %expr_true46, label %break61, !dbg !410

expr_true46:                                      ; preds = %_cont41
  %357 = fmul float %343, %343, !dbg !411
  %358 = fmul float %345, %345, !dbg !411
  %359 = fadd float %357, %358, !dbg !411
  %360 = fmul float %348, %348, !dbg !411
  %361 = fadd float %359, %360, !dbg !411
  %362 = call float @__ocml_sqrt_f32(float %361), !dbg !411
  %inv_d = fdiv float 1.000000e+00, %362, !dbg !412
  %363 = fmul float %343, %inv_d, !dbg !412
  %364 = fmul float %363, %.pn120, !dbg !412
  %365 = fmul float %345, %inv_d, !dbg !412
  %366 = fmul float %365, %.pn118, !dbg !412
  %367 = fadd float %364, %366, !dbg !412
  %368 = fmul float %348, %inv_d, !dbg !412
  %369 = fmul float %368, %.pn116, !dbg !412
  %370 = fadd float %367, %369, !dbg !412
  %.inv = fcmp oge float %370, 0.000000e+00, !dbg !412
  %371 = select i1 %.inv, float %370, float 0.000000e+00, !dbg !412
  %.elt141 = getelementptr inbounds %9, %9 addrspace(5)* %165, i32 0, i32 0, !dbg !413
  %.unpack142 = load float, float addrspace(5)* %.elt141, align 4, !dbg !413
  %.elt143 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 1, !dbg !413
  %.unpack144 = load float, float addrspace(5)* %.elt143, align 4, !dbg !413
  %.elt145 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 2, !dbg !413
  %.unpack146 = load float, float addrspace(5)* %.elt145, align 4, !dbg !413
  %372 = extractvalue %1 %352, 1, !dbg !394
  %373 = sext i32 %8 to i64, !dbg !394
  %374 = getelementptr inbounds [0 x float], [0 x float]* %372, i64 0, i64 %373, !dbg !394
  store float %285, float* %374, align 4, !dbg !394
  %375 = extractvalue %1 %352, 2, !dbg !394
  %376 = sext i32 %8 to i64, !dbg !394
  %377 = getelementptr inbounds [0 x float], [0 x float]* %375, i64 0, i64 %376, !dbg !394
  store float %299, float* %377, align 4, !dbg !394
  %378 = extractvalue %1 %352, 3, !dbg !394
  %379 = sext i32 %8 to i64, !dbg !394
  %380 = getelementptr inbounds [0 x float], [0 x float]* %378, i64 0, i64 %379, !dbg !394
  store float %312, float* %380, align 4, !dbg !394
  %381 = extractvalue %1 %352, 4, !dbg !394
  %382 = sext i32 %8 to i64, !dbg !394
  %383 = getelementptr inbounds [0 x float], [0 x float]* %381, i64 0, i64 %382, !dbg !394
  store float %343, float* %383, align 4, !dbg !394
  %384 = extractvalue %1 %352, 5, !dbg !394
  %385 = sext i32 %8 to i64, !dbg !394
  %386 = getelementptr inbounds [0 x float], [0 x float]* %384, i64 0, i64 %385, !dbg !394
  store float %345, float* %386, align 4, !dbg !394
  %387 = extractvalue %1 %352, 6, !dbg !394
  %388 = sext i32 %8 to i64, !dbg !394
  %389 = getelementptr inbounds [0 x float], [0 x float]* %387, i64 0, i64 %388, !dbg !394
  store float %348, float* %389, align 4, !dbg !394
  %390 = extractvalue %1 %352, 7, !dbg !394
  %391 = sext i32 %8 to i64, !dbg !394
  %392 = getelementptr inbounds [0 x float], [0 x float]* %390, i64 0, i64 %391, !dbg !394
  store float 0x3F50624DE0000000, float* %392, align 4, !dbg !394
  %393 = extractvalue %1 %352, 8, !dbg !394
  %394 = sext i32 %8 to i64, !dbg !394
  %395 = getelementptr inbounds [0 x float], [0 x float]* %393, i64 0, i64 %394, !dbg !394
  store float 0x3FEFF7CEE0000000, float* %395, align 4, !dbg !394
  %396 = extractvalue %2 %_4450639, 2, !dbg !394
  %397 = sext i32 %8 to i64, !dbg !394
  %398 = getelementptr inbounds [0 x float], [0 x float]* %396, i64 0, i64 %397, !dbg !394
  %399 = extractvalue %9 %.pn128, 0, !dbg !394
  %400 = fmul float %.unpack142, 0x3FCFC7B1C0000000, !dbg !394
  %401 = fmul float %399, %400, !dbg !394
  %cos_e = fmul float %350, %inv_d, !dbg !394
  %402 = fmul float %cos_e, %.pn122, !dbg !394
  %inv_d2 = fmul float %inv_d, %inv_d, !dbg !394
  %403 = fmul float %402, %inv_d2, !dbg !394
  %inv_pdf_l = fdiv float 1.000000e+00, %.pn126, !dbg !394
  %geom_factor = fmul float %403, %inv_pdf_l, !dbg !394
  %404 = fmul float %371, 0x3FD45F3060000000, !dbg !394
  %405 = fmul float %404, %.pn122, !dbg !394
  %406 = fmul float %405, %inv_d2, !dbg !394
  %407 = fmul float %406, %inv_pdf_l, !dbg !394
  %408 = fadd float %407, 1.000000e+00, !dbg !394
  %409 = fdiv float 1.000000e+00, %408, !dbg !394
  %410 = fmul float %geom_factor, %409, !dbg !394
  %411 = fmul float %401, %410, !dbg !394
  store float %411, float* %398, align 4, !dbg !394
  %412 = extractvalue %2 %_4450639, 3, !dbg !394
  %413 = sext i32 %8 to i64, !dbg !394
  %414 = getelementptr inbounds [0 x float], [0 x float]* %412, i64 0, i64 %413, !dbg !394
  %415 = extractvalue %9 %.pn128, 1, !dbg !394
  %416 = fmul float %.unpack144, 0x3FCFC7B1C0000000, !dbg !394
  %417 = fmul float %415, %416, !dbg !394
  %418 = fmul float %417, %410, !dbg !394
  store float %418, float* %414, align 4, !dbg !394
  %419 = extractvalue %2 %_4450639, 4, !dbg !394
  %420 = sext i32 %8 to i64, !dbg !394
  %421 = getelementptr inbounds [0 x float], [0 x float]* %419, i64 0, i64 %420, !dbg !394
  %422 = extractvalue %9 %.pn128, 2, !dbg !394
  %423 = fmul float %.unpack146, 0x3FCFC7B1C0000000, !dbg !394
  %424 = fmul float %422, %423, !dbg !394
  %425 = fmul float %424, %410, !dbg !394
  store float %425, float* %421, align 4, !dbg !394
  br label %break61, !dbg !394

break61:                                          ; preds = %_cont41, %expr_true46
  %storemerge = phi i32 [ %62, %expr_true46 ], [ -1, %_cont41 ], !dbg !414
  store i32 %storemerge, i32* %355, align 4, !dbg !414
  %.elt = getelementptr inbounds %9, %9 addrspace(5)* %165, i32 0, i32 0, !dbg !415
  %.unpack = load float, float addrspace(5)* %.elt, align 4, !dbg !415
  %.elt131 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 1, !dbg !415
  %.unpack132 = load float, float addrspace(5)* %.elt131, align 4, !dbg !415
  %.elt133 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 2, !dbg !415
  %.unpack134 = load float, float addrspace(5)* %.elt133, align 4, !dbg !415
  %426 = fmul float %.unpack, 0x3FCB367A00000000, !dbg !415
  %427 = fmul float %.unpack132, 0x3FE6E2EB20000000, !dbg !415
  %428 = fadd float %426, %427, !dbg !415
  %429 = fmul float %.unpack134, 0x3FB27BB300000000, !dbg !415
  %430 = fadd float %428, %429, !dbg !415
  %prob = fmul float %430, 2.000000e+00, !dbg !415
  %431 = fcmp ogt float %prob, 7.500000e-01, !dbg !415
  %.prob = select i1 %431, float 7.500000e-01, float %prob, !dbg !416
  %432 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 3, !dbg !417
  %433 = load i32, i32 addrspace(5)* %432, align 4, !dbg !417
  %434 = icmp sgt i32 %433, 63, !dbg !417
  br i1 %434, label %expr_true98, label %expr_false65, !dbg !417

expr_false65:                                     ; preds = %break61
  %435 = load i32, i32 addrspace(5)* %222, align 4, !dbg !418
  %436 = icmp eq i32 %435, 0, !dbg !418
  %437 = select i1 %436, i32 1, i32 %435, !dbg !418
  %438 = shl i32 %437, 13, !dbg !418
  %439 = xor i32 %437, %438, !dbg !418
  %440 = lshr i32 %439, 17, !dbg !418
  %441 = xor i32 %439, %440, !dbg !418
  %442 = shl i32 %441, 5, !dbg !418
  %443 = xor i32 %441, %442, !dbg !418
  %444 = and i32 %443, 8388607, !dbg !418
  %445 = or i32 %444, 1065353216, !dbg !418
  %446 = bitcast i32 %445 to float, !dbg !418
  %447 = fadd float %446, -1.000000e+00, !dbg !418
  %448 = fcmp ugt float %.prob, %447, !dbg !418
  store i32 %443, i32 addrspace(5)* %222, align 4, !dbg !418
  br i1 %448, label %expr_false66, label %expr_true97, !dbg !418

expr_false66:                                     ; preds = %expr_false65
  %449 = icmp eq i32 %443, 0, !dbg !419
  %450 = select i1 %449, i32 1, i32 %443, !dbg !419
  %451 = shl i32 %450, 13, !dbg !419
  %452 = xor i32 %450, %451, !dbg !419
  %453 = lshr i32 %452, 17, !dbg !419
  %454 = xor i32 %452, %453, !dbg !419
  %455 = shl i32 %454, 5, !dbg !419
  %456 = xor i32 %454, %455, !dbg !419
  store i32 %456, i32 addrspace(5)* %222, align 4, !dbg !419
  %457 = icmp eq i32 %456, 0, !dbg !419
  %458 = select i1 %457, i32 1, i32 %456, !dbg !419
  %459 = shl i32 %458, 13, !dbg !419
  %460 = xor i32 %458, %459, !dbg !419
  %461 = lshr i32 %460, 17, !dbg !419
  %462 = xor i32 %460, %461, !dbg !419
  %463 = shl i32 %462, 5, !dbg !419
  %464 = xor i32 %462, %463, !dbg !419
  store i32 %464, i32 addrspace(5)* %222, align 4, !dbg !419
  %465 = and i32 %464, 8388607, !dbg !419
  %466 = or i32 %465, 1065353216, !dbg !419
  %467 = bitcast i32 %466 to float, !dbg !419
  %468 = fadd float %467, -1.000000e+00, !dbg !419
  %469 = fsub float 1.000000e+00, %468, !dbg !419
  %470 = call float @__ocml_sqrt_f32(float %469), !dbg !419
  %471 = call float @__ocml_sqrt_f32(float %468), !dbg !420
  %472 = and i32 %456, 8388607, !dbg !421
  %473 = or i32 %472, 1065353216, !dbg !421
  %474 = bitcast i32 %473 to float, !dbg !421
  %475 = fadd float %474, -1.000000e+00, !dbg !421
  %phi = fmul float %475, 0x401921FB60000000, !dbg !421
  %476 = call float @__ocml_cos_f32(float %phi), !dbg !421
  %477 = call float @__ocml_sin_f32(float %phi), !dbg !422
  %478 = fmul float %470, 0x3FD45F3060000000, !dbg !423
  %479 = fcmp ogt float %478, 0.000000e+00, !dbg !423
  %480 = fcmp oge float %.pn116, 0.000000e+00, !dbg !423
  %481 = select i1 %480, float 1.000000e+00, float -1.000000e+00, !dbg !423
  %482 = fmul float %481, %.pn120, !dbg !423
  %483 = fmul float %482, %.pn120, !dbg !423
  %484 = fadd float %481, %.pn116, !dbg !423
  %a = fdiv float -1.000000e+00, %484, !dbg !423
  %485 = fmul float %483, %a, !dbg !423
  %486 = fadd float %485, 1.000000e+00, !dbg !423
  %x = fmul float %471, %476, !dbg !423
  %487 = fmul float %486, %x, !dbg !423
  %488 = fmul float %.pn120, %.pn118, !dbg !423
  %b = fmul float %488, %a, !dbg !423
  %y = fmul float %471, %477, !dbg !423
  %489 = fmul float %b, %y, !dbg !423
  %490 = fadd float %487, %489, !dbg !423
  %491 = fmul float %.pn120, %470, !dbg !423
  %492 = fadd float %490, %491, !dbg !423
  %493 = fmul float %481, %b, !dbg !423
  %494 = fmul float %493, %x, !dbg !423
  %495 = fmul float %.pn118, %.pn118, !dbg !423
  %496 = fmul float %495, %a, !dbg !423
  %497 = fadd float %481, %496, !dbg !423
  %498 = fmul float %497, %y, !dbg !423
  %499 = fadd float %494, %498, !dbg !423
  %500 = fmul float %.pn118, %470, !dbg !423
  %501 = fadd float %499, %500, !dbg !423
  %502 = fneg float %481, !dbg !423
  %503 = fmul float %.pn120, %502, !dbg !423
  %504 = fmul float %503, %x, !dbg !423
  %505 = fmul float %.pn118, %y, !dbg !423
  %506 = fsub float %504, %505, !dbg !423
  %507 = fmul float %.pn116, %470, !dbg !423
  %508 = fadd float %506, %507, !dbg !423
  br i1 %479, label %expr_true76, label %infix_result, !dbg !423

expr_true76:                                      ; preds = %expr_false66
  %509 = fmul float %492, %.pn114, !dbg !424
  %510 = fmul float %501, %.pn112, !dbg !424
  %511 = fadd float %509, %510, !dbg !424
  %512 = fmul float %508, %.pn110, !dbg !424
  %513 = fadd float %511, %512, !dbg !424
  %514 = fcmp ogt float %513, 0.000000e+00, !dbg !424
  br i1 %514, label %expr_true78, label %infix_result, !dbg !424

expr_true78:                                      ; preds = %expr_true76
  br label %infix_result, !dbg !425

infix_result:                                     ; preds = %expr_false66, %expr_true76, %expr_true78
  %infix_result79 = phi i1 [ true, %expr_true78 ], [ false, %expr_true76 ], [ false, %expr_false66 ], !dbg !426
  %. = select i1 %infix_result79, float %478, float 1.000000e+00, !dbg !427
  %if_join87 = select i1 %infix_result79, %9 { float 0x3FCFC7B1C0000000, float 0x3FCFC7B1C0000000, float 0x3FCFC7B1C0000000 }, %9 zeroinitializer, !dbg !428
  %.elt135 = getelementptr inbounds %9, %9 addrspace(5)* %165, i32 0, i32 0, !dbg !429
  %.unpack136 = load float, float addrspace(5)* %.elt135, align 4, !dbg !429
  %.elt137 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 1, !dbg !429
  %.unpack138 = load float, float addrspace(5)* %.elt137, align 4, !dbg !429
  %.elt139 = getelementptr inbounds %8, %8 addrspace(5)* %state_4450710, i32 0, i32 1, i32 2, !dbg !429
  %.unpack140 = load float, float addrspace(5)* %.elt139, align 4, !dbg !429
  %515 = load i32, i32 addrspace(5)* %222, align 4, !dbg !394
  %516 = load i32, i32 addrspace(5)* %432, align 4, !dbg !394
  store float %285, float* %36, align 4, !dbg !394
  store float %299, float* %40, align 4, !dbg !394
  store float %312, float* %44, align 4, !dbg !394
  store float %492, float* %48, align 4, !dbg !394
  store float %501, float* %52, align 4, !dbg !394
  store float %508, float* %56, align 4, !dbg !394
  %517 = extractvalue %1 %33, 7, !dbg !394
  %518 = sext i32 %8 to i64, !dbg !394
  %519 = getelementptr inbounds [0 x float], [0 x float]* %517, i64 0, i64 %518, !dbg !394
  store float 0x3F50624DE0000000, float* %519, align 4, !dbg !394
  %520 = extractvalue %1 %33, 8, !dbg !394
  %521 = sext i32 %8 to i64, !dbg !394
  %522 = getelementptr inbounds [0 x float], [0 x float]* %520, i64 0, i64 %521, !dbg !394
  store float 0x47EFFFFFE0000000, float* %522, align 4, !dbg !394
  store i32 %515, i32* %11, align 4, !dbg !394
  %523 = extractvalue %9 %if_join87, 0, !dbg !394
  %524 = fmul float %.unpack136, %523, !dbg !394
  %525 = fmul float %., %.prob, !dbg !394
  %526 = fdiv float %470, %525, !dbg !394
  %527 = fmul float %524, %526, !dbg !394
  store float %527, float* %15, align 4, !dbg !394
  %528 = extractvalue %9 %if_join87, 1, !dbg !394
  %529 = fmul float %.unpack138, %528, !dbg !394
  %530 = fmul float %529, %526, !dbg !394
  store float %530, float* %19, align 4, !dbg !394
  %531 = extractvalue %9 %if_join87, 2, !dbg !394
  %532 = fmul float %.unpack140, %531, !dbg !394
  %533 = fmul float %532, %526, !dbg !394
  store float %533, float* %23, align 4, !dbg !394
  %534 = fdiv float 1.000000e+00, %., !dbg !394
  store float %534, float* %27, align 4, !dbg !394
  %535 = add nsw i32 %516, 1, !dbg !394
  store i32 %535, i32* %31, align 4, !dbg !394
  ret void, !dbg !394

expr_true97:                                      ; preds = %expr_false65
  store i32 -1, i32* %61, align 4, !dbg !419
  ret void, !dbg !419

expr_true98:                                      ; preds = %break61
  store i32 -1, i32* %61, align 4, !dbg !418
  ret void, !dbg !418

expr_true99:                                      ; preds = %lambda_4098921
  ret void, !dbg !392
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.usub.sat.i32(i32, i32) #2

attributes #0 = { nounwind readnone speculatable willreturn }
attributes #1 = { nofree nosync nounwind readnone willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Impala", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "/home/niklas/repos/anydsl/rodent/build/src/./rodent", directory: "")
!3 = !{}
!4 = distinct !DISubprogram(name: "lambda_4083528", linkageName: "lambda_4083528", scope: null, file: !5, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!5 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "Z%w\10\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!6 = !DISubroutineType(types: !3)
!7 = !{i32 64, i32 1, i32 1}
!8 = !DILocation(line: 354, column: 38, scope: !4)
!9 = !DILocation(line: 341, column: 73, scope: !4)
!10 = !DILocation(line: 341, column: 29, scope: !4)
!11 = !DILocation(line: 341, column: 108, scope: !4)
!12 = !DILocation(line: 213, column: 33, scope: !4)
!13 = !DILocation(line: 217, column: 23, scope: !4)
!14 = distinct !DISubprogram(name: "lambda_4087297", linkageName: "lambda_4087297", scope: null, file: !15, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!15 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "5d\04\10\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!16 = !DILocation(line: 354, column: 38, scope: !14)
!17 = !DILocation(line: 341, column: 73, scope: !14)
!18 = !DILocation(line: 341, column: 29, scope: !14)
!19 = !DILocation(line: 341, column: 108, scope: !14)
!20 = !DILocation(line: 89, column: 25, scope: !14)
!21 = !DILocation(line: 89, column: 29, scope: !14)
!22 = !DILocation(line: 89, column: 46, scope: !14)
!23 = !DILocation(line: 89, column: 63, scope: !14)
!24 = !DILocation(line: 82, column: 77, scope: !14)
!25 = !DILocation(line: 46, column: 90, scope: !14)
!26 = !DILocation(line: 48, column: 126, scope: !14)
!27 = !DILocation(line: 50, column: 20, scope: !14)
!28 = !DILocation(line: 53, column: 5, scope: !14)
!29 = !DILocation(line: 127, column: 42, scope: !14)
!30 = !DILocation(line: 69, column: 22, scope: !14)
!31 = !DILocation(line: 69, column: 54, scope: !14)
!32 = !DILocation(line: 125, column: 32, scope: !14)
!33 = !DILocation(line: 129, column: 52, scope: !14)
!34 = !DILocation(line: 130, column: 36, scope: !14)
!35 = !DILocation(line: 201, column: 9, scope: !14)
!36 = !DILocation(line: 201, column: 32, scope: !14)
!37 = !DILocation(line: 201, column: 51, scope: !14)
!38 = !DILocation(line: 207, column: 72, scope: !14)
!39 = !DILocation(line: 202, column: 72, scope: !14)
!40 = !DILocation(line: 0, scope: !14)
!41 = !DILocation(line: 211, column: 5, scope: !14)
!42 = !DILocation(line: 596, column: 26, scope: !14)
!43 = !DILocation(line: 596, column: 48, scope: !14)
!44 = !DILocation(line: 37, column: 30, scope: !14)
!45 = !DILocation(line: 37, column: 12, scope: !14)
!46 = !DILocation(line: 606, column: 21, scope: !14)
!47 = !DILocation(line: 608, column: 21, scope: !14)
!48 = !DILocation(line: 610, column: 34, scope: !14)
!49 = !DILocation(line: 611, column: 29, scope: !14)
!50 = !DILocation(line: 611, column: 71, scope: !14)
!51 = !DILocation(line: 613, column: 27, scope: !14)
!52 = !DILocation(line: 616, column: 26, scope: !14)
!53 = !DILocation(line: 270, column: 5, scope: !14)
!54 = !DILocation(line: 270, column: 17, scope: !14)
!55 = !DILocation(line: 138, column: 13, scope: !14)
!56 = !DILocation(line: 139, column: 13, scope: !14)
!57 = !DILocation(line: 623, column: 27, scope: !14)
!58 = !DILocation(line: 624, column: 24, scope: !14)
!59 = !DILocation(line: 271, column: 37, scope: !14)
!60 = !DILocation(line: 281, column: 9, scope: !14)
!61 = !DILocation(line: 283, column: 27, scope: !14)
!62 = !DILocation(line: 288, column: 37, scope: !14)
!63 = !DILocation(line: 135, column: 49, scope: !14)
!64 = !DILocation(line: 554, column: 26, scope: !14)
!65 = !DILocation(line: 554, column: 48, scope: !14)
!66 = !DILocation(line: 565, column: 17, scope: !14)
!67 = !DILocation(line: 567, column: 17, scope: !14)
!68 = !DILocation(line: 570, column: 26, scope: !14)
!69 = !DILocation(line: 571, column: 30, scope: !14)
!70 = !DILocation(line: 572, column: 25, scope: !14)
!71 = !DILocation(line: 572, column: 67, scope: !14)
!72 = !DILocation(line: 574, column: 23, scope: !14)
!73 = !DILocation(line: 576, column: 22, scope: !14)
!74 = !DILocation(line: 323, column: 5, scope: !14)
!75 = !DILocation(line: 323, column: 17, scope: !14)
!76 = !DILocation(line: 324, column: 37, scope: !14)
!77 = !DILocation(line: 332, column: 20, scope: !14)
!78 = !DILocation(line: 334, column: 27, scope: !14)
!79 = !DILocation(line: 336, column: 9, scope: !14)
!80 = !DILocation(line: 338, column: 27, scope: !14)
!81 = !DILocation(line: 343, column: 37, scope: !14)
!82 = !DILocation(line: 259, column: 23, scope: !14)
!83 = !DILocation(line: 121, column: 9, scope: !14)
!84 = !DILocation(line: 130, column: 19, scope: !14)
!85 = !DILocation(line: 178, column: 27, scope: !14)
!86 = !DILocation(line: 179, column: 42, scope: !14)
!87 = !DILocation(line: 179, column: 78, scope: !14)
!88 = !DILocation(line: 650, column: 26, scope: !14)
!89 = !DILocation(line: 657, column: 17, scope: !14)
!90 = !DILocation(line: 659, column: 26, scope: !14)
!91 = !DILocation(line: 474, column: 5, scope: !14)
!92 = !DILocation(line: 474, column: 17, scope: !14)
!93 = !DILocation(line: 169, column: 5, scope: !14)
!94 = !DILocation(line: 169, column: 18, scope: !14)
!95 = !DILocation(line: 182, column: 5, scope: !14)
!96 = !DILocation(line: 503, column: 19, scope: !14)
!97 = !DILocation(line: 512, column: 24, scope: !14)
!98 = !DILocation(line: 513, column: 16, scope: !14)
!99 = !DILocation(line: 517, column: 28, scope: !14)
!100 = !DILocation(line: 519, column: 5, scope: !14)
!101 = !DILocation(line: 190, column: 5, scope: !14)
!102 = !DILocation(line: 190, column: 18, scope: !14)
!103 = !DILocation(line: 203, column: 5, scope: !14)
!104 = !DILocation(line: 525, column: 31, scope: !14)
!105 = !DILocation(line: 537, column: 16, scope: !14)
!106 = !DILocation(line: 538, column: 16, scope: !14)
!107 = !DILocation(line: 542, column: 28, scope: !14)
!108 = !DILocation(line: 544, column: 5, scope: !14)
!109 = !DILocation(line: 677, column: 25, scope: !14)
!110 = !DILocation(line: 679, column: 5, scope: !14)
!111 = !DILocation(line: 681, column: 21, scope: !14)
!112 = !DILocation(line: 682, column: 21, scope: !14)
!113 = !DILocation(line: 683, column: 23, scope: !14)
!114 = !DILocation(line: 684, column: 23, scope: !14)
!115 = !DILocation(line: 689, column: 20, scope: !14)
!116 = !DILocation(line: 704, column: 20, scope: !14)
!117 = !DILocation(line: 195, column: 12, scope: !14)
!118 = !DILocation(line: 195, column: 103, scope: !14)
!119 = !DILocation(line: 174, column: 12, scope: !14)
!120 = !DILocation(line: 174, column: 80, scope: !14)
!121 = !DILocation(line: 475, column: 37, scope: !14)
!122 = !DILocation(line: 485, column: 9, scope: !14)
!123 = !DILocation(line: 487, column: 27, scope: !14)
!124 = !DILocation(line: 492, column: 37, scope: !14)
!125 = !DILocation(line: 274, column: 26, scope: !14)
!126 = !DILocation(line: 65, column: 27, scope: !14)
!127 = !DILocation(line: 65, column: 87, scope: !14)
!128 = !DILocation(line: 65, column: 88, scope: !14)
!129 = !DILocation(line: 68, column: 21, scope: !14)
!130 = !DILocation(line: 68, column: 43, scope: !14)
!131 = !DILocation(line: 70, column: 23, scope: !14)
!132 = !DILocation(line: 70, column: 48, scope: !14)
!133 = distinct !DISubprogram(name: "invert_warp2D2_4461194", linkageName: "invert_warp2D2_4461194", scope: null, file: !134, line: 381, type: !6, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!134 = !DIFile(filename: "brdf_sampler.impala", directory: "H\1C\E1\12\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/rodent/src/render")
!135 = !DILocation(line: 381, column: 1, scope: !133)
!136 = !DILocation(line: 387, column: 5, scope: !133)
!137 = !DILocation(line: 387, column: 17, scope: !133)
!138 = !DILocation(line: 388, column: 37, scope: !133)
!139 = !DILocation(line: 0, scope: !133)
!140 = !DILocation(line: 398, column: 9, scope: !133)
!141 = !DILocation(line: 400, column: 27, scope: !133)
!142 = !DILocation(line: 405, column: 37, scope: !133)
!143 = distinct !DISubprogram(name: "find_interval_eval_4455546", linkageName: "find_interval_eval_4455546", scope: null, file: !144, line: 143, type: !6, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!144 = !DIFile(filename: "brdf_sampler.impala", directory: "q\06G\10\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/rodent/src/render")
!145 = !DILocation(line: 143, column: 1, scope: !143)
!146 = !DILocation(line: 148, column: 5, scope: !143)
!147 = !DILocation(line: 148, column: 18, scope: !143)
!148 = !DILocation(line: 99, column: 24, scope: !143)
!149 = !DILocation(line: 153, column: 82, scope: !143)
!150 = distinct !DISubprogram(name: "fetch_marginal_warp2D2_4455738", linkageName: "fetch_marginal_warp2D2_4455738", scope: null, file: !151, line: 206, type: !6, scopeLine: 206, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!151 = !DIFile(filename: "brdf_sampler.impala", directory: "S\D9\18\10\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/rodent/src/render")
!152 = !DILocation(line: 206, column: 1, scope: !150)
!153 = distinct !DISubprogram(name: "fetch_conditional_warp2D2_4456102", linkageName: "fetch_conditional_warp2D2_4456102", scope: null, file: !154, line: 210, type: !6, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!154 = !DIFile(filename: "brdf_sampler.impala", directory: "\CC\FE\E0\12\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/rodent/src/render")
!155 = !DILocation(line: 210, column: 1, scope: !153)
!156 = distinct !DISubprogram(name: "lambda_4082328", linkageName: "lambda_4082328", scope: null, file: !157, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!157 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "=\06A\10\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!158 = !DILocation(line: 354, column: 38, scope: !156)
!159 = !DILocation(line: 341, column: 73, scope: !156)
!160 = !DILocation(line: 341, column: 29, scope: !156)
!161 = !DILocation(line: 341, column: 108, scope: !156)
!162 = !DILocation(line: 246, column: 26, scope: !156)
!163 = !DILocation(line: 82, column: 77, scope: !156)
!164 = !DILocation(line: 89, column: 29, scope: !156)
!165 = !DILocation(line: 89, column: 46, scope: !156)
!166 = !DILocation(line: 89, column: 63, scope: !156)
!167 = distinct !DISubprogram(name: "lambda_4085618", linkageName: "lambda_4085618", scope: null, file: !157, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!168 = !DILocation(line: 354, column: 38, scope: !167)
!169 = !DILocation(line: 341, column: 73, scope: !167)
!170 = !DILocation(line: 341, column: 29, scope: !167)
!171 = !DILocation(line: 341, column: 108, scope: !167)
!172 = !DILocation(line: 89, column: 25, scope: !167)
!173 = !DILocation(line: 89, column: 63, scope: !167)
!174 = !DILocation(line: 82, column: 77, scope: !167)
!175 = !DILocation(line: 46, column: 90, scope: !167)
!176 = !DILocation(line: 48, column: 126, scope: !167)
!177 = !DILocation(line: 50, column: 20, scope: !167)
!178 = !DILocation(line: 53, column: 5, scope: !167)
!179 = !DILocation(line: 127, column: 42, scope: !167)
!180 = !DILocation(line: 69, column: 22, scope: !167)
!181 = !DILocation(line: 69, column: 54, scope: !167)
!182 = !DILocation(line: 125, column: 32, scope: !167)
!183 = !DILocation(line: 129, column: 52, scope: !167)
!184 = !DILocation(line: 130, column: 36, scope: !167)
!185 = !DILocation(line: 91, column: 35, scope: !167)
!186 = !DILocation(line: 0, scope: !167)
!187 = !DILocation(line: 121, column: 9, scope: !167)
!188 = !DILocation(line: 130, column: 19, scope: !167)
!189 = !DILocation(line: 178, column: 27, scope: !167)
!190 = !DILocation(line: 179, column: 42, scope: !167)
!191 = !DILocation(line: 179, column: 78, scope: !167)
!192 = !DILocation(line: 77, column: 13, scope: !167)
!193 = !DILocation(line: 78, column: 13, scope: !167)
!194 = !DILocation(line: 39, column: 17, scope: !167)
!195 = !DILocation(line: 40, column: 17, scope: !167)
!196 = !DILocation(line: 65, column: 27, scope: !167)
!197 = !DILocation(line: 65, column: 87, scope: !167)
!198 = !DILocation(line: 65, column: 88, scope: !167)
!199 = !DILocation(line: 68, column: 21, scope: !167)
!200 = !DILocation(line: 68, column: 43, scope: !167)
!201 = !DILocation(line: 70, column: 48, scope: !167)
!202 = distinct !DISubprogram(name: "lambda_4082691", linkageName: "lambda_4082691", scope: null, file: !203, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!203 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "\15@7\13\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!204 = !DILocation(line: 354, column: 38, scope: !202)
!205 = !DILocation(line: 198, column: 23, scope: !202)
!206 = !DILocation(line: 198, column: 42, scope: !202)
!207 = !DILocation(line: 198, column: 73, scope: !202)
!208 = !DILocation(line: 199, column: 31, scope: !202)
!209 = !DILocation(line: 84, column: 40, scope: !202)
!210 = !DILocation(line: 89, column: 29, scope: !202)
!211 = !DILocation(line: 89, column: 46, scope: !202)
!212 = !DILocation(line: 89, column: 63, scope: !202)
!213 = !DILocation(line: 106, column: 5, scope: !202)
!214 = !DILocation(line: 106, column: 27, scope: !202)
!215 = !DILocation(line: 203, column: 31, scope: !202)
!216 = !DILocation(line: 203, column: 58, scope: !202)
!217 = !DILocation(line: 73, column: 39, scope: !202)
!218 = !DILocation(line: 203, column: 85, scope: !202)
!219 = !DILocation(line: 72, column: 39, scope: !202)
!220 = !DILocation(line: 203, column: 14, scope: !202)
!221 = !DILocation(line: 204, column: 31, scope: !202)
!222 = !DILocation(line: 204, column: 58, scope: !202)
!223 = !DILocation(line: 74, column: 39, scope: !202)
!224 = !DILocation(line: 204, column: 85, scope: !202)
!225 = !DILocation(line: 71, column: 39, scope: !202)
!226 = !DILocation(line: 204, column: 14, scope: !202)
!227 = !DILocation(line: 114, column: 23, scope: !202)
!228 = !DILocation(line: 92, column: 9, scope: !202)
!229 = !DILocation(line: 122, column: 24, scope: !202)
!230 = !DILocation(line: 127, column: 28, scope: !202)
!231 = !DILocation(line: 156, column: 9, scope: !202)
!232 = !DILocation(line: 156, column: 34, scope: !202)
!233 = !DILocation(line: 159, column: 13, scope: !202)
!234 = !DILocation(line: 168, column: 19, scope: !202)
!235 = !DILocation(line: 177, column: 15, scope: !202)
!236 = !DILocation(line: 177, column: 8, scope: !202)
!237 = !DILocation(line: 177, column: 28, scope: !202)
!238 = !DILocation(line: 184, column: 15, scope: !202)
!239 = !DILocation(line: 184, column: 8, scope: !202)
!240 = !DILocation(line: 184, column: 28, scope: !202)
!241 = !DILocation(line: 186, column: 11, scope: !202)
!242 = !DILocation(line: 110, column: 49, scope: !202)
!243 = !DILocation(line: 110, column: 90, scope: !202)
!244 = distinct !DISubprogram(name: "lambda_4083362", linkageName: "lambda_4083362", scope: null, file: !245, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!245 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "?_\B1\13\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!246 = !DILocation(line: 354, column: 38, scope: !244)
!247 = !DILocation(line: 341, column: 73, scope: !244)
!248 = !DILocation(line: 341, column: 29, scope: !244)
!249 = !DILocation(line: 341, column: 108, scope: !244)
!250 = !DILocation(line: 181, column: 41, scope: !244)
!251 = distinct !DISubprogram(name: "lambda_4083412", linkageName: "lambda_4083412", scope: null, file: !252, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!252 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "\7F\F5\C8\0D\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!253 = !DILocation(line: 354, column: 38, scope: !251)
!254 = !DILocation(line: 341, column: 73, scope: !251)
!255 = !DILocation(line: 341, column: 29, scope: !251)
!256 = !DILocation(line: 341, column: 108, scope: !251)
!257 = !DILocation(line: 191, column: 33, scope: !251)
!258 = !DILocation(line: 195, column: 9, scope: !251)
!259 = distinct !DISubprogram(name: "lambda_4084527", linkageName: "lambda_4084527", scope: null, file: !260, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!260 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "\7F\95\E7\13\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!261 = !DILocation(line: 354, column: 38, scope: !259)
!262 = !DILocation(line: 341, column: 73, scope: !259)
!263 = !DILocation(line: 341, column: 29, scope: !259)
!264 = !DILocation(line: 341, column: 108, scope: !259)
!265 = !DILocation(line: 284, column: 33, scope: !259)
!266 = !DILocation(line: 289, column: 21, scope: !259)
!267 = !DILocation(line: 293, column: 22, scope: !259)
!268 = distinct !DISubprogram(name: "lambda_4083825", linkageName: "lambda_4083825", scope: null, file: !269, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!269 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "\81\F4\10\12\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!270 = !DILocation(line: 354, column: 38, scope: !268)
!271 = !DILocation(line: 341, column: 73, scope: !268)
!272 = !DILocation(line: 341, column: 29, scope: !268)
!273 = !DILocation(line: 341, column: 108, scope: !268)
!274 = !DILocation(line: 53, column: 32, scope: !268)
!275 = !DILocation(line: 58, column: 20, scope: !268)
!276 = !DILocation(line: 84, column: 40, scope: !268)
!277 = !DILocation(line: 89, column: 29, scope: !268)
!278 = !DILocation(line: 89, column: 46, scope: !268)
!279 = !DILocation(line: 89, column: 63, scope: !268)
!280 = !DILocation(line: 106, column: 5, scope: !268)
!281 = !DILocation(line: 106, column: 27, scope: !268)
!282 = !DILocation(line: 203, column: 31, scope: !268)
!283 = !DILocation(line: 203, column: 58, scope: !268)
!284 = !DILocation(line: 73, column: 39, scope: !268)
!285 = !DILocation(line: 203, column: 85, scope: !268)
!286 = !DILocation(line: 72, column: 39, scope: !268)
!287 = !DILocation(line: 203, column: 14, scope: !268)
!288 = !DILocation(line: 204, column: 31, scope: !268)
!289 = !DILocation(line: 204, column: 58, scope: !268)
!290 = !DILocation(line: 74, column: 39, scope: !268)
!291 = !DILocation(line: 204, column: 85, scope: !268)
!292 = !DILocation(line: 71, column: 39, scope: !268)
!293 = !DILocation(line: 204, column: 14, scope: !268)
!294 = !DILocation(line: 114, column: 23, scope: !268)
!295 = !DILocation(line: 92, column: 9, scope: !268)
!296 = !DILocation(line: 122, column: 24, scope: !268)
!297 = !DILocation(line: 127, column: 28, scope: !268)
!298 = !DILocation(line: 156, column: 9, scope: !268)
!299 = !DILocation(line: 156, column: 34, scope: !268)
!300 = !DILocation(line: 159, column: 13, scope: !268)
!301 = !DILocation(line: 168, column: 19, scope: !268)
!302 = !DILocation(line: 177, column: 15, scope: !268)
!303 = !DILocation(line: 177, column: 8, scope: !268)
!304 = !DILocation(line: 177, column: 28, scope: !268)
!305 = !DILocation(line: 184, column: 15, scope: !268)
!306 = !DILocation(line: 184, column: 8, scope: !268)
!307 = !DILocation(line: 184, column: 28, scope: !268)
!308 = !DILocation(line: 186, column: 11, scope: !268)
!309 = !DILocation(line: 169, column: 50, scope: !268)
!310 = !DILocation(line: 63, column: 19, scope: !268)
!311 = !DILocation(line: 71, column: 26, scope: !268)
!312 = !DILocation(line: 41, column: 9, scope: !268)
!313 = !DILocation(line: 42, column: 9, scope: !268)
!314 = distinct !DISubprogram(name: "lambda_4086455", linkageName: "lambda_4086455", scope: null, file: !315, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!315 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "KV\1D\10\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!316 = !DILocation(line: 354, column: 38, scope: !314)
!317 = !DILocation(line: 341, column: 73, scope: !314)
!318 = !DILocation(line: 341, column: 29, scope: !314)
!319 = !DILocation(line: 341, column: 108, scope: !314)
!320 = !DILocation(line: 89, column: 25, scope: !314)
!321 = !DILocation(line: 89, column: 63, scope: !314)
!322 = !DILocation(line: 82, column: 77, scope: !314)
!323 = !DILocation(line: 46, column: 90, scope: !314)
!324 = !DILocation(line: 48, column: 126, scope: !314)
!325 = !DILocation(line: 50, column: 20, scope: !314)
!326 = !DILocation(line: 53, column: 5, scope: !314)
!327 = !DILocation(line: 127, column: 42, scope: !314)
!328 = !DILocation(line: 69, column: 22, scope: !314)
!329 = !DILocation(line: 69, column: 54, scope: !314)
!330 = !DILocation(line: 125, column: 32, scope: !314)
!331 = !DILocation(line: 129, column: 52, scope: !314)
!332 = !DILocation(line: 130, column: 36, scope: !314)
!333 = !DILocation(line: 91, column: 35, scope: !314)
!334 = !DILocation(line: 0, scope: !314)
!335 = !DILocation(line: 121, column: 9, scope: !314)
!336 = !DILocation(line: 130, column: 19, scope: !314)
!337 = !DILocation(line: 178, column: 27, scope: !314)
!338 = !DILocation(line: 179, column: 42, scope: !314)
!339 = !DILocation(line: 179, column: 78, scope: !314)
!340 = !DILocation(line: 77, column: 13, scope: !314)
!341 = !DILocation(line: 78, column: 13, scope: !314)
!342 = !DILocation(line: 39, column: 17, scope: !314)
!343 = !DILocation(line: 40, column: 17, scope: !314)
!344 = !DILocation(line: 65, column: 27, scope: !314)
!345 = !DILocation(line: 65, column: 87, scope: !314)
!346 = !DILocation(line: 65, column: 88, scope: !314)
!347 = !DILocation(line: 68, column: 21, scope: !314)
!348 = !DILocation(line: 68, column: 43, scope: !314)
!349 = !DILocation(line: 70, column: 48, scope: !314)
!350 = distinct !DISubprogram(name: "lambda_4084754", linkageName: "lambda_4084754", scope: null, file: !351, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!351 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: ";l\E2\13\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!352 = !DILocation(line: 354, column: 38, scope: !350)
!353 = !DILocation(line: 341, column: 73, scope: !350)
!354 = !DILocation(line: 341, column: 29, scope: !350)
!355 = !DILocation(line: 341, column: 108, scope: !350)
!356 = !DILocation(line: 89, column: 25, scope: !350)
!357 = !DILocation(line: 89, column: 63, scope: !350)
!358 = !DILocation(line: 82, column: 77, scope: !350)
!359 = !DILocation(line: 46, column: 90, scope: !350)
!360 = !DILocation(line: 48, column: 126, scope: !350)
!361 = !DILocation(line: 50, column: 20, scope: !350)
!362 = !DILocation(line: 53, column: 5, scope: !350)
!363 = !DILocation(line: 127, column: 42, scope: !350)
!364 = !DILocation(line: 69, column: 22, scope: !350)
!365 = !DILocation(line: 69, column: 54, scope: !350)
!366 = !DILocation(line: 125, column: 32, scope: !350)
!367 = !DILocation(line: 129, column: 52, scope: !350)
!368 = !DILocation(line: 130, column: 36, scope: !350)
!369 = !DILocation(line: 91, column: 35, scope: !350)
!370 = !DILocation(line: 0, scope: !350)
!371 = !DILocation(line: 121, column: 9, scope: !350)
!372 = !DILocation(line: 130, column: 19, scope: !350)
!373 = !DILocation(line: 178, column: 27, scope: !350)
!374 = !DILocation(line: 179, column: 42, scope: !350)
!375 = !DILocation(line: 179, column: 78, scope: !350)
!376 = !DILocation(line: 77, column: 13, scope: !350)
!377 = !DILocation(line: 78, column: 13, scope: !350)
!378 = !DILocation(line: 39, column: 17, scope: !350)
!379 = !DILocation(line: 40, column: 17, scope: !350)
!380 = !DILocation(line: 65, column: 27, scope: !350)
!381 = !DILocation(line: 65, column: 87, scope: !350)
!382 = !DILocation(line: 65, column: 88, scope: !350)
!383 = !DILocation(line: 68, column: 21, scope: !350)
!384 = !DILocation(line: 68, column: 43, scope: !350)
!385 = !DILocation(line: 70, column: 48, scope: !350)
!386 = distinct !DISubprogram(name: "lambda_4098921", linkageName: "lambda_4098921", scope: null, file: !387, line: 354, type: !6, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!387 = !DIFile(filename: "intrinsics_amdgpu.impala", directory: "\8B\A2K\0D\DAU\00\00\10 \ECK\DFU\00\00os/anydsl/runtime/platforms/impala")
!388 = !DILocation(line: 354, column: 38, scope: !386)
!389 = !DILocation(line: 341, column: 73, scope: !386)
!390 = !DILocation(line: 341, column: 29, scope: !386)
!391 = !DILocation(line: 341, column: 108, scope: !386)
!392 = !DILocation(line: 89, column: 25, scope: !386)
!393 = !DILocation(line: 89, column: 29, scope: !386)
!394 = !DILocation(line: 89, column: 63, scope: !386)
!395 = !DILocation(line: 82, column: 77, scope: !386)
!396 = !DILocation(line: 46, column: 90, scope: !386)
!397 = !DILocation(line: 48, column: 126, scope: !386)
!398 = !DILocation(line: 161, column: 50, scope: !386)
!399 = !DILocation(line: 89, column: 21, scope: !386)
!400 = !DILocation(line: 163, column: 28, scope: !386)
!401 = !DILocation(line: 41, column: 9, scope: !386)
!402 = !DILocation(line: 42, column: 9, scope: !386)
!403 = !DILocation(line: 43, column: 9, scope: !386)
!404 = !DILocation(line: 107, column: 9, scope: !386)
!405 = !DILocation(line: 50, column: 20, scope: !386)
!406 = !DILocation(line: 53, column: 5, scope: !386)
!407 = !DILocation(line: 127, column: 42, scope: !386)
!408 = !DILocation(line: 69, column: 22, scope: !386)
!409 = !DILocation(line: 69, column: 54, scope: !386)
!410 = !DILocation(line: 125, column: 32, scope: !386)
!411 = !DILocation(line: 129, column: 52, scope: !386)
!412 = !DILocation(line: 130, column: 36, scope: !386)
!413 = !DILocation(line: 91, column: 35, scope: !386)
!414 = !DILocation(line: 0, scope: !386)
!415 = !DILocation(line: 121, column: 9, scope: !386)
!416 = !DILocation(line: 130, column: 19, scope: !386)
!417 = !DILocation(line: 178, column: 27, scope: !386)
!418 = !DILocation(line: 179, column: 42, scope: !386)
!419 = !DILocation(line: 179, column: 78, scope: !386)
!420 = !DILocation(line: 77, column: 13, scope: !386)
!421 = !DILocation(line: 78, column: 13, scope: !386)
!422 = !DILocation(line: 39, column: 17, scope: !386)
!423 = !DILocation(line: 40, column: 17, scope: !386)
!424 = !DILocation(line: 65, column: 27, scope: !386)
!425 = !DILocation(line: 65, column: 87, scope: !386)
!426 = !DILocation(line: 65, column: 88, scope: !386)
!427 = !DILocation(line: 68, column: 21, scope: !386)
!428 = !DILocation(line: 68, column: 43, scope: !386)
!429 = !DILocation(line: 70, column: 48, scope: !386)
